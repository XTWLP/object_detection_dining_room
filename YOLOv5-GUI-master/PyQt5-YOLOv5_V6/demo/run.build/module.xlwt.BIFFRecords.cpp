/* Generated code for Python module 'xlwt.BIFFRecords'
 * created by Nuitka version 0.9.6
 *
 * This code is in part copyright 2022 Kay Hayen.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "nuitka/prelude.h"

#include "nuitka/unfreezing.h"

#include "__helpers.h"

/* The "module_xlwt$BIFFRecords" is a Python object pointer of module type.
 *
 * Note: For full compatibility with CPython, every module variable access
 * needs to go through it except for cases where the module cannot possibly
 * have changed in the mean time.
 */

PyObject *module_xlwt$BIFFRecords;
PyDictObject *moduledict_xlwt$BIFFRecords;

/* The declarations of module constants used, if any. */
static PyObject *mod_consts[627];
#ifndef __NUITKA_NO_ASSERT__
static Py_hash_t mod_consts_hash[627];
#endif

static PyObject *module_filename_obj = NULL;

/* Indicator if this modules private constants were created yet. */
static bool constants_created = false;

/* Function to create module private constants. */
static void createModuleConstants(void) {
    if (constants_created == false) {
        loadConstantsBlob(&mod_consts[0], UNTRANSLATE("xlwt.BIFFRecords"));
        constants_created = true;

#ifndef __NUITKA_NO_ASSERT__
        for (int i = 0; i < 627; i++) {
            mod_consts_hash[i] = DEEP_HASH(mod_consts[i]);
        }
#endif
    }
}

// We want to be able to initialize the "__main__" constants in any case.
#if 0
void createMainModuleConstants(void) {
    createModuleConstants();
}
#endif

/* Function to verify module private constants for non-corruption. */
#ifndef __NUITKA_NO_ASSERT__
void checkModuleConstants_xlwt$BIFFRecords(void) {
    // The module may not have been used at all, then ignore this.
    if (constants_created == false) return;

    for (int i = 0; i < 627; i++) {
        assert(mod_consts_hash[i] == DEEP_HASH(mod_consts[i]));
        CHECK_OBJECT_DEEP(mod_consts[i]);
    }
}
#endif

// The module code objects.
static PyCodeObject *codeobj_c4e7041b801dcda22c8796a53d10d4e6;
static PyCodeObject *codeobj_74aa8347d170e7072e6a2c372abb2f28;
static PyCodeObject *codeobj_32b4a0063ac6fcf83513d717662046b7;
static PyCodeObject *codeobj_88dc2af7ecc241487f3fbeb03bff5bd6;
static PyCodeObject *codeobj_c460d39964371e886c3e28f376c697dc;
static PyCodeObject *codeobj_4e6547dd46356bdab15f7d7e7a94d5f3;
static PyCodeObject *codeobj_3d2f6ab662e249d5c8eafe858b1a1dcf;
static PyCodeObject *codeobj_035b581453d59e71e72b510a88054ab9;
static PyCodeObject *codeobj_601c63e1fdb04378a4c4921abe7ef6c0;
static PyCodeObject *codeobj_b0dc467e698887b60e489f0e52ea2185;
static PyCodeObject *codeobj_034ad0af446622c3ecd8ba9adc3a33cc;
static PyCodeObject *codeobj_fb361f9d0e6a182ca93af130c75a50b2;
static PyCodeObject *codeobj_c91fc6ae200aa2c49184944ca23ff1cd;
static PyCodeObject *codeobj_df8d05b1b2ef188f7c8026d8fe4d3254;
static PyCodeObject *codeobj_4ae7df40eff3fded78999a10de4f37af;
static PyCodeObject *codeobj_f9d029bca8c7a917ba89af906edb8305;
static PyCodeObject *codeobj_fead5254e6910aca50851e0d22b77d62;
static PyCodeObject *codeobj_d16779ec4e9badd20ed67c7ecc33a4e0;
static PyCodeObject *codeobj_71973e9e3b112676dcae3b9d9d82953b;
static PyCodeObject *codeobj_a2c801938d65272271263b45b7e978ff;
static PyCodeObject *codeobj_bb4461a74cd64b13c71a398ee47bf2dd;
static PyCodeObject *codeobj_3308b9c1b29985c42c72dff729bd22e2;
static PyCodeObject *codeobj_bee931302d6d7c04ed91e8db13caec43;
static PyCodeObject *codeobj_60f323f0adceb50b521402f588e9ed7c;
static PyCodeObject *codeobj_30567aa98a8fa95095e670d33eac5b49;
static PyCodeObject *codeobj_e9649dbd698081b9d5f1a8ee1bac32ff;
static PyCodeObject *codeobj_1b61623f19ea6c773d273d92b82ad4ee;
static PyCodeObject *codeobj_26b6e5472ab4c32d26e93d4434d6e615;
static PyCodeObject *codeobj_03ad9fcd760f5d7d2850a8bb05d13cb7;
static PyCodeObject *codeobj_8152037321aedae08e78b64fab5cc474;
static PyCodeObject *codeobj_428cc430c5cebac713e1ec07decdff67;
static PyCodeObject *codeobj_09c725bbcb12f5d5fa930ae5cc5b23a0;
static PyCodeObject *codeobj_05e77e612c40531fa5a2e138b677bf86;
static PyCodeObject *codeobj_37446e5a2111d93541316d30618de356;
static PyCodeObject *codeobj_68f83b44ca6b4cb18b6a5eaa399e0ea1;
static PyCodeObject *codeobj_3f229872e1d9b508ea65b444089c9772;
static PyCodeObject *codeobj_447dcf1d02dedc1362df90b3bd876041;
static PyCodeObject *codeobj_3e04e45c250346b1dc880d5576b2b21c;
static PyCodeObject *codeobj_825fcb6aae5c99280c991a32ed2f61fb;
static PyCodeObject *codeobj_dac98c301a043976501e17d0d18f84cc;
static PyCodeObject *codeobj_418ffe1546171364aabe614fca25901a;
static PyCodeObject *codeobj_8987c5e333df8307c65806c9e7ea5ece;
static PyCodeObject *codeobj_5d58bba435feb3d9176e957cd07d5a36;
static PyCodeObject *codeobj_9110c19c45fe954399b4d74c6b87570c;
static PyCodeObject *codeobj_264fedeff712f5ba78d0c8dd95cdeb3b;
static PyCodeObject *codeobj_659ce73c83fdc67382c3bdad711f5c3d;
static PyCodeObject *codeobj_4ef073419cc668bd91e82aa4780efd47;
static PyCodeObject *codeobj_1a39e3c6afe661befd8785a2fb1c282b;
static PyCodeObject *codeobj_062df5792298b4a7928d15d17dc48814;
static PyCodeObject *codeobj_49399aedf390a01df790981af0c8265a;
static PyCodeObject *codeobj_b2d9f266ef29efb234678d853cbf49f0;
static PyCodeObject *codeobj_37590bfdc658e8c7f52448be0f0de734;
static PyCodeObject *codeobj_52f176b2df23f42535d2dfb28a602c31;
static PyCodeObject *codeobj_5c802a66aef8c15382108a98b969f15b;
static PyCodeObject *codeobj_4dd76817f64931cc19522cf900f29b3d;
static PyCodeObject *codeobj_915114ef9d3450c26095aa1c64f5cff8;
static PyCodeObject *codeobj_9bf27a23d2621973323203e1e5e4c776;
static PyCodeObject *codeobj_e3d71cf09d70965a7229fa6a418a7117;
static PyCodeObject *codeobj_4232dd8f2e9491305b1e88a0fa397d57;
static PyCodeObject *codeobj_e2edf237c71f4392ee23f56d4c98decf;
static PyCodeObject *codeobj_de6baac6bdc8d5b7cbc934b30a0fb8c3;
static PyCodeObject *codeobj_698264c1f95e7255beac586bba3e4976;
static PyCodeObject *codeobj_395dfd1de6ea01095e6a35437746ac0b;
static PyCodeObject *codeobj_6e69627053d2bb3ad4e9a976fbe6a0e0;
static PyCodeObject *codeobj_e6579948de04ebf98f1b99b896a713f4;
static PyCodeObject *codeobj_71dfa77e0090cb598bd714737eb7d809;
static PyCodeObject *codeobj_834022953fc71d0d186819157ff38c61;
static PyCodeObject *codeobj_92837687c0bee20483d0c5c47759bb8c;
static PyCodeObject *codeobj_7992ed49c326376cded28b8fcb250867;
static PyCodeObject *codeobj_c593638a5b9a9f2f12e59b970e88f7d3;
static PyCodeObject *codeobj_be74ee3365a0729e839e44f2456dae4c;
static PyCodeObject *codeobj_5035e25540c4e70761378104f51a1dca;
static PyCodeObject *codeobj_6fd42d253644a3b3a202917650af8f53;
static PyCodeObject *codeobj_2444ccdaada2cc63083cc0ad74fe2f85;
static PyCodeObject *codeobj_07010f3711b0d04fdbc1b55715cf6869;
static PyCodeObject *codeobj_37535882bc8300a848a9f37e914f83db;
static PyCodeObject *codeobj_420c74893f5ac550a2780b8b6f23f4e1;
static PyCodeObject *codeobj_e374c386233b40d6ca51aa04a77e7b89;
static PyCodeObject *codeobj_9681e027f11210e14065bef3e5100ede;
static PyCodeObject *codeobj_47ccf13e66f6ac61a011a47329c53a4b;
static PyCodeObject *codeobj_f1c2ab19a0e30602078d2b66e5a8544c;
static PyCodeObject *codeobj_5b4eac466b0c6de52a9d9f1115a88b6d;
static PyCodeObject *codeobj_e50b2904296655817fac37212bb44d8e;
static PyCodeObject *codeobj_c66154f52b7ee4ea1e98d18dee65f508;
static PyCodeObject *codeobj_b4e2ec9ef0f52c8589e17af589c9d913;
static PyCodeObject *codeobj_f665ab6ab8cbd5e425e76fcdc0d39216;
static PyCodeObject *codeobj_5e44a1e371ea3da467db00e790928a98;
static PyCodeObject *codeobj_86d0e9d30b5cab15a40e0e253242d11b;
static PyCodeObject *codeobj_9ade00131c317ea67b273aafeac5dd28;
static PyCodeObject *codeobj_2500c7f6f766c749297015a4f9d79917;
static PyCodeObject *codeobj_184cc342b48440d31b13131520963364;
static PyCodeObject *codeobj_8eba42381732439c14f710cf323438d5;
static PyCodeObject *codeobj_a5903b9868c4a054bb394e26ef2bbf91;
static PyCodeObject *codeobj_60d405e3ad6d739d895a913d24edf74d;
static PyCodeObject *codeobj_ad9c117fd2502751d72e5b33d8a1596a;
static PyCodeObject *codeobj_ff8f3004697ff5d3d9fbc60e54de79de;
static PyCodeObject *codeobj_a573af0ff62e44327b9d368a4b38cde8;
static PyCodeObject *codeobj_3067168ac42d474829aa3fefae9ea311;
static PyCodeObject *codeobj_51bfc52abdcf109a8a5ed7d102f6ebf3;
static PyCodeObject *codeobj_f26c96a383a5cf2870e4807876308bbb;
static PyCodeObject *codeobj_2aa18dd4561fb2f8df4e3983ab736b89;
static PyCodeObject *codeobj_e364fa8b16306c8203fd87d0f395294d;
static PyCodeObject *codeobj_5d9d53c609625a07c936391a484d25cc;
static PyCodeObject *codeobj_40f57f5666a1151ebb3fd236d76cdcab;
static PyCodeObject *codeobj_072645c2450247d76e051a52c6518a58;
static PyCodeObject *codeobj_b20307a469cae9c7cc03f186d69ea563;
static PyCodeObject *codeobj_9dded7108a70b0050b2bcc213080b758;
static PyCodeObject *codeobj_4ec38c358b9599634f4c80a478258973;
static PyCodeObject *codeobj_73af6f45df356da14fcce15544a75b06;
static PyCodeObject *codeobj_6cdb6e9f8ccf33a3e7b88dd3be597adf;
static PyCodeObject *codeobj_a0462e21ef12e31f64d2a134d7204e09;
static PyCodeObject *codeobj_b2a1dc0b3f46e6cd53d597c421bffbfc;
static PyCodeObject *codeobj_f8398672376fca6e76bd4f891257a737;
static PyCodeObject *codeobj_b11701e4779c094c30dba827e38d0272;
static PyCodeObject *codeobj_feda2b3250b862bbc547c9658da97310;
static PyCodeObject *codeobj_8007e36a2faaf74fd6c3ea391db80487;
static PyCodeObject *codeobj_65f06e0465bd87076658d7ce346cf08f;
static PyCodeObject *codeobj_c48eabe6c3b0b5012b9481c096e4b445;
static PyCodeObject *codeobj_d094b75bf1b24c9cd064bc390f01d272;
static PyCodeObject *codeobj_502160976a0cfeaa1dbe28ad4dfe7e99;
static PyCodeObject *codeobj_70513fad6e7ab75ee7652434222515ea;
static PyCodeObject *codeobj_5c5814c497bc07a5ea8ed634fb03a704;
static PyCodeObject *codeobj_7368b0ad9ae527c5af4cf659ffe52f2f;
static PyCodeObject *codeobj_bfaffc32173ea11cfb6876d30cb6c545;
static PyCodeObject *codeobj_a9688412f16ad8d60d657831646ca74c;
static PyCodeObject *codeobj_64a0e5fa4b539414ea6af82d2dcbdf2a;
static PyCodeObject *codeobj_72f6a91b1f075fcc9daad85e14b429fc;
static PyCodeObject *codeobj_09150ae0fe6f0cb10a03a044e18b8881;
static PyCodeObject *codeobj_2483467d67d745f9e1d796fac369fad0;
static PyCodeObject *codeobj_3570e112a799365aa38f96faf7609121;
static PyCodeObject *codeobj_c9ffedb86d933674835e078ee2e1a124;
static PyCodeObject *codeobj_0019030f07e4f5510040a6fc4739c565;
static PyCodeObject *codeobj_99dae25125b369f4029a1a0b32c64412;
static PyCodeObject *codeobj_0304d334a91b8581a12ab647083af742;
static PyCodeObject *codeobj_51a240c671a938749056622bc2581c37;
static PyCodeObject *codeobj_537a71675914cd42926a2fe362fdd27d;
static PyCodeObject *codeobj_e56107ca9df71486b84a6a549aefe979;
static PyCodeObject *codeobj_dda76cb9f741fd429a5da9f28502b5a0;
static PyCodeObject *codeobj_79e85dcc3f25428b0b4823f69928c417;
static PyCodeObject *codeobj_0a97e74db3ddcf53340ada9a0ffb159f;
static PyCodeObject *codeobj_ce2d95f9111fe9843c15f610f8c15941;
static PyCodeObject *codeobj_d6cb25b0e871d9cffc6240ab47d6b7b2;
static PyCodeObject *codeobj_ed2dbae34988d71c8e0c8f882c301143;
static PyCodeObject *codeobj_d6b2736c0ed242f33e75d86bccb6dcbd;
static PyCodeObject *codeobj_185f17c19f5c7bd780f5a1092441df32;
static PyCodeObject *codeobj_447ff9c6f2593525c589f489daf6296d;
static PyCodeObject *codeobj_988d4cdf826c744251bbaf66bd59efd9;
static PyCodeObject *codeobj_7f37ae4cd9aa1ce8aefd0f7b123a5a5e;
static PyCodeObject *codeobj_552d07b756e2dc5fc14c39d421ac30cc;
static PyCodeObject *codeobj_fd5dd612a579647ce251cb71f8c03b48;
static PyCodeObject *codeobj_f3cdd2010eae8181f86204c61e4447a1;
static PyCodeObject *codeobj_9e21177c98c73aa46b64477decf3d477;
static PyCodeObject *codeobj_a067413cbfb2faf70ef72769156d2f07;
static PyCodeObject *codeobj_2de85c7660081111ac8f25350d5e640c;
static PyCodeObject *codeobj_0997f74cee2ac62ec2de06377f564562;
static PyCodeObject *codeobj_fccd92954a73c8ea3207ab295728e3ed;
static PyCodeObject *codeobj_53f60a3bad0a006bb596371c6f1b4795;
static PyCodeObject *codeobj_80d302173983804943ce4e3d7f91d299;
static PyCodeObject *codeobj_9cf78652b6901c06289059e25df82a50;
static PyCodeObject *codeobj_3f79e4d94a8b176e2e31d866f17bf8a4;
static PyCodeObject *codeobj_bfb0773ba1bcbe5dcf5795e9e54a8ada;
static PyCodeObject *codeobj_ebf2d0a4ef588a5cabfc05807b0e4c2e;
static PyCodeObject *codeobj_2bd25db8ea46eb6cfb8c0215c14df7d8;
static PyCodeObject *codeobj_ac662cc07409ac9a2dff6db2c1130a0c;
static PyCodeObject *codeobj_e302e7b5bae9cf2ba4737c8ea5abaacf;
static PyCodeObject *codeobj_1cde90856d811ea214febc2f185be286;
static PyCodeObject *codeobj_47ac8b96f92f8a89a74d98f97413ba77;
static PyCodeObject *codeobj_04b82f1f74a278b796ebcd7f06cb002e;
static PyCodeObject *codeobj_3e9926c4fe83d2d59ac5360b0e6709a4;
static PyCodeObject *codeobj_fa0229e1127bb1f819ef61b7f5dab3c1;
static PyCodeObject *codeobj_53362051894014bd2ad9e909ec9bbaa6;
static PyCodeObject *codeobj_2334f07556c5cd0fd6c2b38f771990ef;
static PyCodeObject *codeobj_3c28f476156824c812ee71e45eff6212;
static PyCodeObject *codeobj_a4f59d9bf2976b7bacb1e6680bd92c8c;
static PyCodeObject *codeobj_03e3ce7c34485ee489369c620eb9c805;
static PyCodeObject *codeobj_2d430fc1e390f3ff40a47511886a7ff3;
static PyCodeObject *codeobj_31cb7173ff6bdf672a790ddcd342a036;

static void createModuleCodeObjects(void) {
    module_filename_obj = MAKE_RELATIVE_PATH(mod_consts[548]); CHECK_OBJECT(module_filename_obj);
    codeobj_c4e7041b801dcda22c8796a53d10d4e6 = MAKE_CODEOBJECT(module_filename_obj, 2385, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[35], mod_consts[549], NULL, 1, 0, 0);
    codeobj_74aa8347d170e7072e6a2c372abb2f28 = MAKE_CODEOBJECT(module_filename_obj, 71, CO_GENERATOR | CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[35], mod_consts[550], NULL, 1, 0, 0);
    codeobj_32b4a0063ac6fcf83513d717662046b7 = MAKE_CODEOBJECT(module_filename_obj, 70, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[551], mod_consts[552], NULL, 1, 0, 0);
    codeobj_88dc2af7ecc241487f3fbeb03bff5bd6 = MAKE_CODEOBJECT(module_filename_obj, 1, CO_NOFREE, mod_consts[553], NULL, NULL, 0, 0, 0);
    codeobj_c460d39964371e886c3e28f376c697dc = MAKE_CODEOBJECT(module_filename_obj, 402, CO_NOFREE, mod_consts[303], mod_consts[554], NULL, 0, 0, 0);
    codeobj_4e6547dd46356bdab15f7d7e7a94d5f3 = MAKE_CODEOBJECT(module_filename_obj, 200, CO_NOFREE, mod_consts[239], mod_consts[554], NULL, 0, 0, 0);
    codeobj_3d2f6ab662e249d5c8eafe858b1a1dcf = MAKE_CODEOBJECT(module_filename_obj, 169, CO_NOFREE, mod_consts[236], mod_consts[554], NULL, 0, 0, 0);
    codeobj_035b581453d59e71e72b510a88054ab9 = MAKE_CODEOBJECT(module_filename_obj, 1524, CO_NOFREE, mod_consts[409], mod_consts[554], NULL, 0, 0, 0);
    codeobj_601c63e1fdb04378a4c4921abe7ef6c0 = MAKE_CODEOBJECT(module_filename_obj, 440, CO_NOFREE, mod_consts[314], mod_consts[554], NULL, 0, 0, 0);
    codeobj_b0dc467e698887b60e489f0e52ea2185 = MAKE_CODEOBJECT(module_filename_obj, 1562, CO_NOFREE, mod_consts[421], mod_consts[554], NULL, 0, 0, 0);
    codeobj_034ad0af446622c3ecd8ba9adc3a33cc = MAKE_CODEOBJECT(module_filename_obj, 2102, CO_NOFREE, mod_consts[516], mod_consts[554], NULL, 0, 0, 0);
    codeobj_fb361f9d0e6a182ca93af130c75a50b2 = MAKE_CODEOBJECT(module_filename_obj, 1082, CO_NOFREE, mod_consts[366], mod_consts[554], NULL, 0, 0, 0);
    codeobj_c91fc6ae200aa2c49184944ca23ff1cd = MAKE_CODEOBJECT(module_filename_obj, 1710, CO_NOFREE, mod_consts[445], mod_consts[554], NULL, 0, 0, 0);
    codeobj_df8d05b1b2ef188f7c8026d8fe4d3254 = MAKE_CODEOBJECT(module_filename_obj, 1691, CO_NOFREE, mod_consts[441], mod_consts[554], NULL, 0, 0, 0);
    codeobj_4ae7df40eff3fded78999a10de4f37af = MAKE_CODEOBJECT(module_filename_obj, 558, CO_NOFREE, mod_consts[336], mod_consts[554], NULL, 0, 0, 0);
    codeobj_f9d029bca8c7a917ba89af906edb8305 = MAKE_CODEOBJECT(module_filename_obj, 1657, CO_NOFREE, mod_consts[437], mod_consts[554], NULL, 0, 0, 0);
    codeobj_fead5254e6910aca50851e0d22b77d62 = MAKE_CODEOBJECT(module_filename_obj, 1115, CO_NOFREE, mod_consts[370], mod_consts[554], NULL, 0, 0, 0);
    codeobj_d16779ec4e9badd20ed67c7ecc33a4e0 = MAKE_CODEOBJECT(module_filename_obj, 459, CO_NOFREE, mod_consts[318], mod_consts[554], NULL, 0, 0, 0);
    codeobj_71973e9e3b112676dcae3b9d9d82953b = MAKE_CODEOBJECT(module_filename_obj, 274, CO_NOFREE, mod_consts[265], mod_consts[554], NULL, 0, 0, 0);
    codeobj_a2c801938d65272271263b45b7e978ff = MAKE_CODEOBJECT(module_filename_obj, 514, CO_NOFREE, mod_consts[329], mod_consts[554], NULL, 0, 0, 0);
    codeobj_bb4461a74cd64b13c71a398ee47bf2dd = MAKE_CODEOBJECT(module_filename_obj, 1871, CO_NOFREE, mod_consts[478], mod_consts[554], NULL, 0, 0, 0);
    codeobj_3308b9c1b29985c42c72dff729bd22e2 = MAKE_CODEOBJECT(module_filename_obj, 1848, CO_NOFREE, mod_consts[474], mod_consts[554], NULL, 0, 0, 0);
    codeobj_bee931302d6d7c04ed91e8db13caec43 = MAKE_CODEOBJECT(module_filename_obj, 1762, CO_NOFREE, mod_consts[455], mod_consts[554], NULL, 0, 0, 0);
    codeobj_60f323f0adceb50b521402f588e9ed7c = MAKE_CODEOBJECT(module_filename_obj, 1213, CO_NOFREE, mod_consts[378], mod_consts[554], NULL, 0, 0, 0);
    codeobj_30567aa98a8fa95095e670d33eac5b49 = MAKE_CODEOBJECT(module_filename_obj, 507, CO_NOFREE, mod_consts[326], mod_consts[554], NULL, 0, 0, 0);
    codeobj_e9649dbd698081b9d5f1a8ee1bac32ff = MAKE_CODEOBJECT(module_filename_obj, 1168, CO_NOFREE, mod_consts[374], mod_consts[554], NULL, 0, 0, 0);
    codeobj_1b61623f19ea6c773d273d92b82ad4ee = MAKE_CODEOBJECT(module_filename_obj, 2349, CO_NOFREE, mod_consts[530], mod_consts[554], NULL, 0, 0, 0);
    codeobj_26b6e5472ab4c32d26e93d4434d6e615 = MAKE_CODEOBJECT(module_filename_obj, 2428, CO_NOFREE, mod_consts[543], mod_consts[554], NULL, 0, 0, 0);
    codeobj_03ad9fcd760f5d7d2850a8bb05d13cb7 = MAKE_CODEOBJECT(module_filename_obj, 300, CO_NOFREE, mod_consts[272], mod_consts[554], NULL, 0, 0, 0);
    codeobj_8152037321aedae08e78b64fab5cc474 = MAKE_CODEOBJECT(module_filename_obj, 649, CO_NOFREE, mod_consts[345], mod_consts[554], NULL, 0, 0, 0);
    codeobj_428cc430c5cebac713e1ec07decdff67 = MAKE_CODEOBJECT(module_filename_obj, 2007, CO_NOFREE, mod_consts[493], mod_consts[554], NULL, 0, 0, 0);
    codeobj_09c725bbcb12f5d5fa930ae5cc5b23a0 = MAKE_CODEOBJECT(module_filename_obj, 1572, CO_NOFREE, mod_consts[425], mod_consts[554], NULL, 0, 0, 0);
    codeobj_05e77e612c40531fa5a2e138b677bf86 = MAKE_CODEOBJECT(module_filename_obj, 1831, CO_NOFREE, mod_consts[470], mod_consts[554], NULL, 0, 0, 0);
    codeobj_37446e5a2111d93541316d30618de356 = MAKE_CODEOBJECT(module_filename_obj, 1594, CO_NOFREE, mod_consts[429], mod_consts[554], NULL, 0, 0, 0);
    codeobj_68f83b44ca6b4cb18b6a5eaa399e0ea1 = MAKE_CODEOBJECT(module_filename_obj, 2017, CO_NOFREE, mod_consts[496], mod_consts[554], NULL, 0, 0, 0);
    codeobj_3f229872e1d9b508ea65b444089c9772 = MAKE_CODEOBJECT(module_filename_obj, 1941, CO_NOFREE, mod_consts[489], mod_consts[554], NULL, 0, 0, 0);
    codeobj_447dcf1d02dedc1362df90b3bd876041 = MAKE_CODEOBJECT(module_filename_obj, 412, CO_NOFREE, mod_consts[306], mod_consts[554], NULL, 0, 0, 0);
    codeobj_3e04e45c250346b1dc880d5576b2b21c = MAKE_CODEOBJECT(module_filename_obj, 1888, CO_NOFREE, mod_consts[482], mod_consts[554], NULL, 0, 0, 0);
    codeobj_825fcb6aae5c99280c991a32ed2f61fb = MAKE_CODEOBJECT(module_filename_obj, 242, CO_NOFREE, mod_consts[255], mod_consts[554], NULL, 0, 0, 0);
    codeobj_dac98c301a043976501e17d0d18f84cc = MAKE_CODEOBJECT(module_filename_obj, 235, CO_NOFREE, mod_consts[252], mod_consts[554], NULL, 0, 0, 0);
    codeobj_418ffe1546171364aabe614fca25901a = MAKE_CODEOBJECT(module_filename_obj, 2399, CO_NOFREE, mod_consts[537], mod_consts[554], NULL, 0, 0, 0);
    codeobj_8987c5e333df8307c65806c9e7ea5ece = MAKE_CODEOBJECT(module_filename_obj, 1747, CO_NOFREE, mod_consts[451], mod_consts[554], NULL, 0, 0, 0);
    codeobj_5d58bba435feb3d9176e957cd07d5a36 = MAKE_CODEOBJECT(module_filename_obj, 1443, CO_NOFREE, mod_consts[396], mod_consts[554], NULL, 0, 0, 0);
    codeobj_9110c19c45fe954399b4d74c6b87570c = MAKE_CODEOBJECT(module_filename_obj, 2053, CO_NOFREE, mod_consts[504], mod_consts[554], NULL, 0, 0, 0);
    codeobj_264fedeff712f5ba78d0c8dd95cdeb3b = MAKE_CODEOBJECT(module_filename_obj, 249, CO_NOFREE, mod_consts[258], mod_consts[554], NULL, 0, 0, 0);
    codeobj_659ce73c83fdc67382c3bdad711f5c3d = MAKE_CODEOBJECT(module_filename_obj, 1454, CO_NOFREE, mod_consts[400], mod_consts[554], NULL, 0, 0, 0);
    codeobj_4ef073419cc668bd91e82aa4780efd47 = MAKE_CODEOBJECT(module_filename_obj, 1503, CO_NOFREE, mod_consts[405], mod_consts[554], NULL, 0, 0, 0);
    codeobj_1a39e3c6afe661befd8785a2fb1c282b = MAKE_CODEOBJECT(module_filename_obj, 2283, CO_NOFREE, mod_consts[524], mod_consts[554], NULL, 0, 0, 0);
    codeobj_062df5792298b4a7928d15d17dc48814 = MAKE_CODEOBJECT(module_filename_obj, 729, CO_NOFREE, mod_consts[349], mod_consts[554], NULL, 0, 0, 0);
    codeobj_49399aedf390a01df790981af0c8265a = MAKE_CODEOBJECT(module_filename_obj, 1553, CO_NOFREE, mod_consts[417], mod_consts[554], NULL, 0, 0, 0);
    codeobj_b2d9f266ef29efb234678d853cbf49f0 = MAKE_CODEOBJECT(module_filename_obj, 319, CO_NOFREE, mod_consts[279], mod_consts[554], NULL, 0, 0, 0);
    codeobj_37590bfdc658e8c7f52448be0f0de734 = MAKE_CODEOBJECT(module_filename_obj, 1027, CO_NOFREE, mod_consts[362], mod_consts[554], NULL, 0, 0, 0);
    codeobj_52f176b2df23f42535d2dfb28a602c31 = MAKE_CODEOBJECT(module_filename_obj, 1309, CO_NOFREE, mod_consts[387], mod_consts[554], NULL, 0, 0, 0);
    codeobj_5c802a66aef8c15382108a98b969f15b = MAKE_CODEOBJECT(module_filename_obj, 358, CO_NOFREE, mod_consts[291], mod_consts[554], NULL, 0, 0, 0);
    codeobj_4dd76817f64931cc19522cf900f29b3d = MAKE_CODEOBJECT(module_filename_obj, 536, CO_NOFREE, mod_consts[333], mod_consts[554], NULL, 0, 0, 0);
    codeobj_915114ef9d3450c26095aa1c64f5cff8 = MAKE_CODEOBJECT(module_filename_obj, 1814, CO_NOFREE, mod_consts[466], mod_consts[554], NULL, 0, 0, 0);
    codeobj_9bf27a23d2621973323203e1e5e4c776 = MAKE_CODEOBJECT(module_filename_obj, 1797, CO_NOFREE, mod_consts[462], mod_consts[554], NULL, 0, 0, 0);
    codeobj_e3d71cf09d70965a7229fa6a418a7117 = MAKE_CODEOBJECT(module_filename_obj, 395, CO_NOFREE, mod_consts[300], mod_consts[554], NULL, 0, 0, 0);
    codeobj_4232dd8f2e9491305b1e88a0fa397d57 = MAKE_CODEOBJECT(module_filename_obj, 388, CO_NOFREE, mod_consts[297], mod_consts[554], NULL, 0, 0, 0);
    codeobj_e2edf237c71f4392ee23f56d4c98decf = MAKE_CODEOBJECT(module_filename_obj, 345, CO_NOFREE, mod_consts[287], mod_consts[554], NULL, 0, 0, 0);
    codeobj_de6baac6bdc8d5b7cbc934b30a0fb8c3 = MAKE_CODEOBJECT(module_filename_obj, 1541, CO_NOFREE, mod_consts[413], mod_consts[554], NULL, 0, 0, 0);
    codeobj_698264c1f95e7255beac586bba3e4976 = MAKE_CODEOBJECT(module_filename_obj, 1727, CO_NOFREE, mod_consts[448], mod_consts[554], NULL, 0, 0, 0);
    codeobj_395dfd1de6ea01095e6a35437746ac0b = MAKE_CODEOBJECT(module_filename_obj, 430, CO_NOFREE, mod_consts[310], mod_consts[554], NULL, 0, 0, 0);
    codeobj_6e69627053d2bb3ad4e9a976fbe6a0e0 = MAKE_CODEOBJECT(module_filename_obj, 2071, CO_NOFREE, mod_consts[508], mod_consts[554], NULL, 0, 0, 0);
    codeobj_e6579948de04ebf98f1b99b896a713f4 = MAKE_CODEOBJECT(module_filename_obj, 1392, CO_NOFREE, mod_consts[392], mod_consts[554], NULL, 0, 0, 0);
    codeobj_71dfa77e0090cb598bd714737eb7d809 = MAKE_CODEOBJECT(module_filename_obj, 1148, CO_NOFREE, mod_consts[372], mod_consts[554], NULL, 0, 0, 0);
    codeobj_834022953fc71d0d186819157ff38c61 = MAKE_CODEOBJECT(module_filename_obj, 1779, CO_NOFREE, mod_consts[458], mod_consts[554], NULL, 0, 0, 0);
    codeobj_92837687c0bee20483d0c5c47759bb8c = MAKE_CODEOBJECT(module_filename_obj, 332, CO_NOFREE, mod_consts[283], mod_consts[554], NULL, 0, 0, 0);
    codeobj_7992ed49c326376cded28b8fcb250867 = MAKE_CODEOBJECT(module_filename_obj, 2117, CO_NOFREE, mod_consts[520], mod_consts[554], NULL, 0, 0, 0);
    codeobj_c593638a5b9a9f2f12e59b970e88f7d3 = MAKE_CODEOBJECT(module_filename_obj, 6, CO_NOFREE, mod_consts[207], mod_consts[554], NULL, 0, 0, 0);
    codeobj_be74ee3365a0729e839e44f2456dae4c = MAKE_CODEOBJECT(module_filename_obj, 988, CO_NOFREE, mod_consts[358], mod_consts[554], NULL, 0, 0, 0);
    codeobj_5035e25540c4e70761378104f51a1dca = MAKE_CODEOBJECT(module_filename_obj, 2388, CO_NOFREE, mod_consts[534], mod_consts[554], NULL, 0, 0, 0);
    codeobj_6fd42d253644a3b3a202917650af8f53 = MAKE_CODEOBJECT(module_filename_obj, 292, CO_NOFREE, mod_consts[269], mod_consts[554], NULL, 0, 0, 0);
    codeobj_2444ccdaada2cc63083cc0ad74fe2f85 = MAKE_CODEOBJECT(module_filename_obj, 2086, CO_NOFREE, mod_consts[512], mod_consts[554], NULL, 0, 0, 0);
    codeobj_07010f3711b0d04fdbc1b55715cf6869 = MAKE_CODEOBJECT(module_filename_obj, 487, CO_NOFREE, mod_consts[322], mod_consts[554], NULL, 0, 0, 0);
    codeobj_37535882bc8300a848a9f37e914f83db = MAKE_CODEOBJECT(module_filename_obj, 2035, CO_NOFREE, mod_consts[500], mod_consts[554], NULL, 0, 0, 0);
    codeobj_420c74893f5ac550a2780b8b6f23f4e1 = MAKE_CODEOBJECT(module_filename_obj, 1914, CO_NOFREE, mod_consts[486], mod_consts[554], NULL, 0, 0, 0);
    codeobj_e374c386233b40d6ca51aa04a77e7b89 = MAKE_CODEOBJECT(module_filename_obj, 1613, CO_NOFREE, mod_consts[433], mod_consts[554], NULL, 0, 0, 0);
    codeobj_9681e027f11210e14065bef3e5100ede = MAKE_CODEOBJECT(module_filename_obj, 614, CO_NOFREE, mod_consts[341], mod_consts[554], NULL, 0, 0, 0);
    codeobj_47ccf13e66f6ac61a011a47329c53a4b = MAKE_CODEOBJECT(module_filename_obj, 1236, CO_NOFREE, mod_consts[382], mod_consts[554], NULL, 0, 0, 0);
    codeobj_f1c2ab19a0e30602078d2b66e5a8544c = MAKE_CODEOBJECT(module_filename_obj, 307, CO_NOFREE, mod_consts[275], mod_consts[554], NULL, 0, 0, 0);
    codeobj_5b4eac466b0c6de52a9d9f1115a88b6d = MAKE_CODEOBJECT(module_filename_obj, 256, CO_NOFREE, mod_consts[261], mod_consts[554], NULL, 0, 0, 0);
    codeobj_e50b2904296655817fac37212bb44d8e = MAKE_CODEOBJECT(module_filename_obj, 791, CO_NOFREE, mod_consts[353], mod_consts[554], NULL, 0, 0, 0);
    codeobj_c66154f52b7ee4ea1e98d18dee65f508 = MAKE_CODEOBJECT(module_filename_obj, 2414, CO_NOFREE, mod_consts[540], mod_consts[554], NULL, 0, 0, 0);
    codeobj_b4e2ec9ef0f52c8589e17af589c9d913 = MAKE_CODEOBJECT(module_filename_obj, 238, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_f665ab6ab8cbd5e425e76fcdc0d39216 = MAKE_CODEOBJECT(module_filename_obj, 245, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_5e44a1e371ea3da467db00e790928a98 = MAKE_CODEOBJECT(module_filename_obj, 252, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_86d0e9d30b5cab15a40e0e253242d11b = MAKE_CODEOBJECT(module_filename_obj, 288, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_9ade00131c317ea67b273aafeac5dd28 = MAKE_CODEOBJECT(module_filename_obj, 303, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_2500c7f6f766c749297015a4f9d79917 = MAKE_CODEOBJECT(module_filename_obj, 391, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_184cc342b48440d31b13131520963364 = MAKE_CODEOBJECT(module_filename_obj, 398, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_8eba42381732439c14f710cf323438d5 = MAKE_CODEOBJECT(module_filename_obj, 425, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_a5903b9868c4a054bb394e26ef2bbf91 = MAKE_CODEOBJECT(module_filename_obj, 436, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_60d405e3ad6d739d895a913d24edf74d = MAKE_CODEOBJECT(module_filename_obj, 455, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_ad9c117fd2502751d72e5b33d8a1596a = MAKE_CODEOBJECT(module_filename_obj, 503, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_ff8f3004697ff5d3d9fbc60e54de79de = MAKE_CODEOBJECT(module_filename_obj, 510, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_a573af0ff62e44327b9d368a4b38cde8 = MAKE_CODEOBJECT(module_filename_obj, 611, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_3067168ac42d474829aa3fefae9ea311 = MAKE_CODEOBJECT(module_filename_obj, 1022, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_51bfc52abdcf109a8a5ed7d102f6ebf3 = MAKE_CODEOBJECT(module_filename_obj, 2424, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[555], NULL, 1, 0, 0);
    codeobj_f26c96a383a5cf2870e4807876308bbb = MAKE_CODEOBJECT(module_filename_obj, 409, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[556], NULL, 2, 0, 0);
    codeobj_2aa18dd4561fb2f8df4e3983ab736b89 = MAKE_CODEOBJECT(module_filename_obj, 1909, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[557], NULL, 2, 0, 0);
    codeobj_e364fa8b16306c8203fd87d0f395294d = MAKE_CODEOBJECT(module_filename_obj, 1936, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[557], NULL, 2, 0, 0);
    codeobj_5d9d53c609625a07c936391a484d25cc = MAKE_CODEOBJECT(module_filename_obj, 1724, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[558], NULL, 2, 0, 0);
    codeobj_40f57f5666a1151ebb3fd236d76cdcab = MAKE_CODEOBJECT(module_filename_obj, 1706, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[559], NULL, 2, 0, 0);
    codeobj_072645c2450247d76e051a52c6518a58 = MAKE_CODEOBJECT(module_filename_obj, 1072, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[560], NULL, 2, 0, 0);
    codeobj_b20307a469cae9c7cc03f186d69ea563 = MAKE_CODEOBJECT(module_filename_obj, 1885, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[561], NULL, 2, 0, 0);
    codeobj_9dded7108a70b0050b2bcc213080b758 = MAKE_CODEOBJECT(module_filename_obj, 1776, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[562], NULL, 2, 0, 0);
    codeobj_4ec38c358b9599634f4c80a478258973 = MAKE_CODEOBJECT(module_filename_obj, 10, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[563], NULL, 2, 0, 0);
    codeobj_73af6f45df356da14fcce15544a75b06 = MAKE_CODEOBJECT(module_filename_obj, 1688, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[564], NULL, 7, 0, 0);
    codeobj_6cdb6e9f8ccf33a3e7b88dd3be597adf = MAKE_CODEOBJECT(module_filename_obj, 1225, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[565], NULL, 5, 0, 0);
    codeobj_a0462e21ef12e31f64d2a134d7204e09 = MAKE_CODEOBJECT(module_filename_obj, 2013, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[566], NULL, 2, 0, 0);
    codeobj_b2a1dc0b3f46e6cd53d597c421bffbfc = MAKE_CODEOBJECT(module_filename_obj, 529, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[567], NULL, 2, 0, 0);
    codeobj_f8398672376fca6e76bd4f891257a737 = MAKE_CODEOBJECT(module_filename_obj, 2004, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[568], NULL, 2, 0, 0);
    codeobj_b11701e4779c094c30dba827e38d0272 = MAKE_CODEOBJECT(module_filename_obj, 718, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[569], NULL, 10, 0, 0);
    codeobj_feda2b3250b862bbc547c9658da97310 = MAKE_CODEOBJECT(module_filename_obj, 637, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[570], NULL, 10, 0, 0);
    codeobj_8007e36a2faaf74fd6c3ea391db80487 = MAKE_CODEOBJECT(module_filename_obj, 784, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[571], NULL, 3, 0, 0);
    codeobj_65f06e0465bd87076658d7ce346cf08f = MAKE_CODEOBJECT(module_filename_obj, 1437, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[572], NULL, 6, 0, 0);
    codeobj_c48eabe6c3b0b5012b9481c096e4b445 = MAKE_CODEOBJECT(module_filename_obj, 2031, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[573], NULL, 2, 0, 0);
    codeobj_d094b75bf1b24c9cd064bc390f01d272 = MAKE_CODEOBJECT(module_filename_obj, 2049, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[574], NULL, 2, 0, 0);
    codeobj_502160976a0cfeaa1dbe28ad4dfe7e99 = MAKE_CODEOBJECT(module_filename_obj, 1759, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[575], NULL, 2, 0, 0);
    codeobj_70513fad6e7ab75ee7652434222515ea = MAKE_CODEOBJECT(module_filename_obj, 2067, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[576], NULL, 2, 0, 0);
    codeobj_5c5814c497bc07a5ea8ed634fb03a704 = MAKE_CODEOBJECT(module_filename_obj, 2083, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[576], NULL, 2, 0, 0);
    codeobj_7368b0ad9ae527c5af4cf659ffe52f2f = MAKE_CODEOBJECT(module_filename_obj, 2098, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[576], NULL, 2, 0, 0);
    codeobj_bfaffc32173ea11cfb6876d30cb6c545 = MAKE_CODEOBJECT(module_filename_obj, 2114, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[576], NULL, 2, 0, 0);
    codeobj_a9688412f16ad8d60d657831646ca74c = MAKE_CODEOBJECT(module_filename_obj, 1486, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[577], NULL, 2, 0, 0);
    codeobj_64a0e5fa4b539414ea6af82d2dcbdf2a = MAKE_CODEOBJECT(module_filename_obj, 2411, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[578], NULL, 2, 0, 0);
    codeobj_72f6a91b1f075fcc9daad85e14b429fc = MAKE_CODEOBJECT(module_filename_obj, 328, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[579], NULL, 2, 0, 0);
    codeobj_09150ae0fe6f0cb10a03a044e18b8881 = MAKE_CODEOBJECT(module_filename_obj, 1654, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[580], NULL, 2, 0, 0);
    codeobj_2483467d67d745f9e1d796fac369fad0 = MAKE_CODEOBJECT(module_filename_obj, 1867, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[581], NULL, 3, 0, 0);
    codeobj_3570e112a799365aa38f96faf7609121 = MAKE_CODEOBJECT(module_filename_obj, 1292, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[582], NULL, 8, 0, 0);
    codeobj_c9ffedb86d933674835e078ee2e1a124 = MAKE_CODEOBJECT(module_filename_obj, 2455, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[583], NULL, 5, 0, 0);
    codeobj_0019030f07e4f5510040a6fc4739c565 = MAKE_CODEOBJECT(module_filename_obj, 2329, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[584], NULL, 10, 0, 0);
    codeobj_99dae25125b369f4029a1a0b32c64412 = MAKE_CODEOBJECT(module_filename_obj, 266, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[585], NULL, 2, 0, 0);
    codeobj_0304d334a91b8581a12ab647083af742 = MAKE_CODEOBJECT(module_filename_obj, 2271, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[586], NULL, 12, 0, 0);
    codeobj_51a240c671a938749056622bc2581c37 = MAKE_CODEOBJECT(module_filename_obj, 384, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[587], NULL, 2, 0, 0);
    codeobj_537a71675914cd42926a2fe362fdd27d = MAKE_CODEOBJECT(module_filename_obj, 1827, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[588], NULL, 2, 0, 0);
    codeobj_e56107ca9df71486b84a6a549aefe979 = MAKE_CODEOBJECT(module_filename_obj, 1844, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[589], NULL, 2, 0, 0);
    codeobj_dda76cb9f741fd429a5da9f28502b5a0 = MAKE_CODEOBJECT(module_filename_obj, 1810, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[590], NULL, 2, 0, 0);
    codeobj_79e85dcc3f25428b0b4823f69928c417 = MAKE_CODEOBJECT(module_filename_obj, 354, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[591], NULL, 2, 0, 0);
    codeobj_0a97e74db3ddcf53340ada9a0ffb159f = MAKE_CODEOBJECT(module_filename_obj, 1378, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[592], NULL, 6, 0, 0);
    codeobj_ce2d95f9111fe9843c15f610f8c15941 = MAKE_CODEOBJECT(module_filename_obj, 225, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[593], NULL, 2, 0, 0);
    codeobj_d6cb25b0e871d9cffc6240ab47d6b7b2 = MAKE_CODEOBJECT(module_filename_obj, 1794, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[594], NULL, 2, 0, 0);
    codeobj_ed2dbae34988d71c8e0c8f882c301143 = MAKE_CODEOBJECT(module_filename_obj, 1744, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[595], NULL, 2, 0, 0);
    codeobj_d6b2736c0ed242f33e75d86bccb6dcbd = MAKE_CODEOBJECT(module_filename_obj, 2366, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[596], NULL, 2, 0, 0);
    codeobj_185f17c19f5c7bd780f5a1092441df32 = MAKE_CODEOBJECT(module_filename_obj, 1450, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[597], NULL, 5, 0, 0);
    codeobj_447ff9c6f2593525c589f489daf6296d = MAKE_CODEOBJECT(module_filename_obj, 1537, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[598], NULL, 4, 0, 0);
    codeobj_988d4cdf826c744251bbaf66bd59efd9 = MAKE_CODEOBJECT(module_filename_obj, 1559, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[599], NULL, 5, 0, 0);
    codeobj_7f37ae4cd9aa1ce8aefd0f7b123a5a5e = MAKE_CODEOBJECT(module_filename_obj, 1568, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[600], NULL, 6, 0, 0);
    codeobj_552d07b756e2dc5fc14c39d421ac30cc = MAKE_CODEOBJECT(module_filename_obj, 1549, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[601], NULL, 5, 0, 0);
    codeobj_fd5dd612a579647ce251cb71f8c03b48 = MAKE_CODEOBJECT(module_filename_obj, 1590, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[602], NULL, 6, 0, 0);
    codeobj_f3cdd2010eae8181f86204c61e4447a1 = MAKE_CODEOBJECT(module_filename_obj, 1518, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[603], NULL, 5, 0, 0);
    codeobj_9e21177c98c73aa46b64477decf3d477 = MAKE_CODEOBJECT(module_filename_obj, 1610, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[604], NULL, 5, 0, 0);
    codeobj_a067413cbfb2faf70ef72769156d2f07 = MAKE_CODEOBJECT(module_filename_obj, 341, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[605], NULL, 2, 0, 0);
    codeobj_2de85c7660081111ac8f25350d5e640c = MAKE_CODEOBJECT(module_filename_obj, 295, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[606], NULL, 2, 0, 0);
    codeobj_0997f74cee2ac62ec2de06377f564562 = MAKE_CODEOBJECT(module_filename_obj, 1191, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[607], NULL, 4, 0, 0);
    codeobj_fccd92954a73c8ea3207ab295728e3ed = MAKE_CODEOBJECT(module_filename_obj, 1108, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[608], NULL, 5, 0, 0);
    codeobj_53f60a3bad0a006bb596371c6f1b4795 = MAKE_CODEOBJECT(module_filename_obj, 483, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[609], NULL, 3, 0, 0);
    codeobj_80d302173983804943ce4e3d7f91d299 = MAKE_CODEOBJECT(module_filename_obj, 551, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[610], NULL, 2, 0, 0);
    codeobj_9cf78652b6901c06289059e25df82a50 = MAKE_CODEOBJECT(module_filename_obj, 315, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[611], NULL, 2, 0, 0);
    codeobj_3f79e4d94a8b176e2e31d866f17bf8a4 = MAKE_CODEOBJECT(module_filename_obj, 924, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[216], mod_consts[612], NULL, 3, 0, 0);
    codeobj_bfb0773ba1bcbe5dcf5795e9e54a8ada = MAKE_CODEOBJECT(module_filename_obj, 107, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[29], mod_consts[613], NULL, 2, 0, 0);
    codeobj_ebf2d0a4ef588a5cabfc05807b0e4c2e = MAKE_CODEOBJECT(module_filename_obj, 91, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[28], mod_consts[614], NULL, 2, 0, 0);
    codeobj_2bd25db8ea46eb6cfb8c0215c14df7d8 = MAKE_CODEOBJECT(module_filename_obj, 125, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[30], mod_consts[615], NULL, 1, 0, 0);
    codeobj_ac662cc07409ac9a2dff6db2c1130a0c = MAKE_CODEOBJECT(module_filename_obj, 133, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[41], mod_consts[616], NULL, 2, 0, 0);
    codeobj_e302e7b5bae9cf2ba4737c8ea5abaacf = MAKE_CODEOBJECT(module_filename_obj, 140, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[42], mod_consts[617], NULL, 3, 0, 0);
    codeobj_1cde90856d811ea214febc2f185be286 = MAKE_CODEOBJECT(module_filename_obj, 36, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[220], mod_consts[618], NULL, 2, 0, 0);
    codeobj_47ac8b96f92f8a89a74d98f97413ba77 = MAKE_CODEOBJECT(module_filename_obj, 23, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[218], mod_consts[619], NULL, 2, 0, 0);
    codeobj_04b82f1f74a278b796ebcd7f06cb002e = MAKE_CODEOBJECT(module_filename_obj, 53, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[222], mod_consts[620], NULL, 2, 0, 0);
    codeobj_3e9926c4fe83d2d59ac5360b0e6709a4 = MAKE_CODEOBJECT(module_filename_obj, 1305, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[157], mod_consts[555], NULL, 1, 0, 0);
    codeobj_fa0229e1127bb1f819ef61b7f5dab3c1 = MAKE_CODEOBJECT(module_filename_obj, 1500, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[157], mod_consts[555], NULL, 1, 0, 0);
    codeobj_53362051894014bd2ad9e909ec9bbaa6 = MAKE_CODEOBJECT(module_filename_obj, 180, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[157], mod_consts[621], NULL, 1, 0, 0);
    codeobj_2334f07556c5cd0fd6c2b38f771990ef = MAKE_CODEOBJECT(module_filename_obj, 2374, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[157], mod_consts[622], NULL, 1, 0, 0);
    codeobj_3c28f476156824c812ee71e45eff6212 = MAKE_CODEOBJECT(module_filename_obj, 66, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[228], mod_consts[623], NULL, 1, 0, 0);
    codeobj_a4f59d9bf2976b7bacb1e6680bd92c8c = MAKE_CODEOBJECT(module_filename_obj, 173, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[64], mod_consts[555], NULL, 1, 0, 0);
    codeobj_03e3ce7c34485ee489369c620eb9c805 = MAKE_CODEOBJECT(module_filename_obj, 365, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[83], mod_consts[624], NULL, 2, 0, 0);
    codeobj_2d430fc1e390f3ff40a47511886a7ff3 = MAKE_CODEOBJECT(module_filename_obj, 63, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[226], mod_consts[625], NULL, 2, 0, 0);
    codeobj_31cb7173ff6bdf672a790ddcd342a036 = MAKE_CODEOBJECT(module_filename_obj, 60, CO_OPTIMIZED | CO_NEWLOCALS | CO_NOFREE, mod_consts[224], mod_consts[626], NULL, 2, 0, 0);
}

// The module function declarations.
static PyObject *MAKE_GENERATOR_xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


static PyObject *MAKE_GENERATOR_xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__1__mro_entries_conversion(PyObject **python_pars);


NUITKA_CROSS_MODULE PyObject *impl___main__$$$function__6_complex_call_helper_pos_star_list(PyObject **python_pars);


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__10__new_piece();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__11__save_atom();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__12__save_splitted();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__13_get_rec_header();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__14_get();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__15___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__16___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__17___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__18___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__19___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__1___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__20___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__21___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__22___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__23___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__24___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__25___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__26___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__27_passwd_hash();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__28___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__29___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__2_add_str();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__30___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__31___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__32___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__33___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__34___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__35___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__36___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__37___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__38___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__39___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__3_add_rt();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__40___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__41___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__42___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__43___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__44___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__45___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__46___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__47___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__48___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__49___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__4_del_str();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__50___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__51_get();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__52___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__53___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__54___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__55___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__56_get();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__57___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__58___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__59___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__5_str_index();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__60___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__61___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__62___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__63___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__64___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__65___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__66___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__67___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__68___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__69___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__6_rt_index();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__70___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__71___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__72___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__73___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__74___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__75___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__76___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__77___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__78___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__79___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__7_get_biff_record();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__80___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__81___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__82___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__83___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__84___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__85___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__86___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__87___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__88___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__89___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__8__add_to_sst();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__90_get();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__91___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__92___init__();


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__93___init__(PyObject *defaults);


static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__9__add_rt_to_sst();


// The module function definitions.
static PyObject *impl_xlwt$BIFFRecords$$$function__1___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_encoding = python_pars[1];
    struct Nuitka_FrameObject *frame_4ec38c358b9599634f4c80a478258973;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_4ec38c358b9599634f4c80a478258973 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_4ec38c358b9599634f4c80a478258973)) {
        Py_XDECREF(cache_frame_4ec38c358b9599634f4c80a478258973);

#if _DEBUG_REFCOUNTS
        if (cache_frame_4ec38c358b9599634f4c80a478258973 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_4ec38c358b9599634f4c80a478258973 = MAKE_FUNCTION_FRAME(codeobj_4ec38c358b9599634f4c80a478258973, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_4ec38c358b9599634f4c80a478258973->m_type_description == NULL);
    frame_4ec38c358b9599634f4c80a478258973 = cache_frame_4ec38c358b9599634f4c80a478258973;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_4ec38c358b9599634f4c80a478258973);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_4ec38c358b9599634f4c80a478258973) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_encoding);
        tmp_assattr_value_1 = par_encoding;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[0], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 11;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[1], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 12;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_value_3 = PyDict_New();
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[2], tmp_assattr_value_3);
        Py_DECREF(tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 13;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_value_4 = PyList_New(0);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[3], tmp_assattr_value_4);
        Py_DECREF(tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 14;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_value_5 = mod_consts[4];
        CHECK_OBJECT(par_self);
        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[5], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 15;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_value_6 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, mod_consts[6], tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 19;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_7;
        PyObject *tmp_assattr_target_7;
        tmp_assattr_value_7 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_7 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_7, mod_consts[7], tmp_assattr_value_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 20;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_8;
        PyObject *tmp_assattr_target_8;
        tmp_assattr_value_8 = Py_None;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_8 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_8, mod_consts[8], tmp_assattr_value_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 21;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4ec38c358b9599634f4c80a478258973);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_4ec38c358b9599634f4c80a478258973);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_4ec38c358b9599634f4c80a478258973, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_4ec38c358b9599634f4c80a478258973->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_4ec38c358b9599634f4c80a478258973, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_4ec38c358b9599634f4c80a478258973,
        type_description_1,
        par_self,
        par_encoding
    );


    // Release cached frame if used for exception.
    if (frame_4ec38c358b9599634f4c80a478258973 == cache_frame_4ec38c358b9599634f4c80a478258973) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_4ec38c358b9599634f4c80a478258973);
        cache_frame_4ec38c358b9599634f4c80a478258973 = NULL;
    }

    assertFrameObject(frame_4ec38c358b9599634f4c80a478258973);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__2_add_str(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_s = python_pars[1];
    PyObject *var_idx = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_inplace_assign_subscr_1__subscript = NULL;
    PyObject *tmp_inplace_assign_subscr_1__target = NULL;
    PyObject *tmp_inplace_assign_subscr_1__value = NULL;
    struct Nuitka_FrameObject *frame_47ac8b96f92f8a89a74d98f97413ba77;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_47ac8b96f92f8a89a74d98f97413ba77 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_47ac8b96f92f8a89a74d98f97413ba77)) {
        Py_XDECREF(cache_frame_47ac8b96f92f8a89a74d98f97413ba77);

#if _DEBUG_REFCOUNTS
        if (cache_frame_47ac8b96f92f8a89a74d98f97413ba77 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_47ac8b96f92f8a89a74d98f97413ba77 = MAKE_FUNCTION_FRAME(codeobj_47ac8b96f92f8a89a74d98f97413ba77, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_47ac8b96f92f8a89a74d98f97413ba77->m_type_description == NULL);
    frame_47ac8b96f92f8a89a74d98f97413ba77 = cache_frame_47ac8b96f92f8a89a74d98f97413ba77;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_47ac8b96f92f8a89a74d98f97413ba77);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_47ac8b96f92f8a89a74d98f97413ba77) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[0]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[9];
        tmp_and_left_value_1 = RICH_COMPARE_NE_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_and_left_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_1);

            exception_lineno = 24;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        assert(tmp_and_left_value_1 != NUITKA_BOOL_UNASSIGNED);
        CHECK_OBJECT(par_s);
        tmp_isinstance_inst_1 = par_s;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[10]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[10]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 24;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[11]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[11]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_s);
        tmp_args_element_value_1 = par_s;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[0]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_47ac8b96f92f8a89a74d98f97413ba77->m_frame.f_lineno = 25;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 25;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_s;
            assert(old != NULL);
            par_s = tmp_assign_source_1;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_assign_source_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[5]);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_1__value == NULL);
        tmp_inplace_assign_1__value = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_1 = tmp_inplace_assign_1__value;
        tmp_right_value_1 = mod_consts[12];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_value_1, tmp_right_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_3 = tmp_left_value_1;
        tmp_inplace_assign_1__value = tmp_assign_source_3;

    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_1 = tmp_inplace_assign_1__value;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[5], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 26;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_s);
        tmp_cmp_expr_left_2 = par_s;
        CHECK_OBJECT(par_self);
        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[1]);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 27;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_value_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_right_value_2;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_expression_value_6;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[1]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_2 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 28;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_len_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[2]);
        if (tmp_len_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 28;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_2 = BUILTIN_LEN(tmp_len_arg_2);
        Py_DECREF(tmp_len_arg_2);
        if (tmp_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 28;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_4 = BINARY_OPERATION_ADD_OBJECT_LONG_LONG(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_left_value_2);
        Py_DECREF(tmp_right_value_2);
        assert(!(tmp_assign_source_4 == NULL));
        assert(var_idx == NULL);
        var_idx = tmp_assign_source_4;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_idx);
        tmp_ass_subvalue_1 = var_idx;
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[1]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_s);
        tmp_ass_subscript_1 = par_s;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 29;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_8 = par_self;
        tmp_called_instance_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[3]);
        if (tmp_called_instance_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        frame_47ac8b96f92f8a89a74d98f97413ba77->m_frame.f_lineno = 30;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_1,
            mod_consts[13],
            PyTuple_GET_ITEM(mod_consts[14], 0)
        );

        Py_DECREF(tmp_called_instance_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 30;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_10 = par_self;
        tmp_expression_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[1]);
        if (tmp_expression_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_s);
        tmp_subscript_value_1 = par_s;
        tmp_assign_source_5 = LOOKUP_SUBSCRIPT(tmp_expression_value_9, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_9);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 32;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(var_idx == NULL);
        var_idx = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_expression_value_11;
        CHECK_OBJECT(par_self);
        tmp_expression_value_11 = par_self;
        tmp_assign_source_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[3]);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_subscr_1__target == NULL);
        tmp_inplace_assign_subscr_1__target = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(var_idx);
        tmp_assign_source_7 = var_idx;
        assert(tmp_inplace_assign_subscr_1__subscript == NULL);
        Py_INCREF(tmp_assign_source_7);
        tmp_inplace_assign_subscr_1__subscript = tmp_assign_source_7;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_subscript_value_2;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_expression_value_12 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_subscript_value_2 = tmp_inplace_assign_subscr_1__subscript;
        tmp_assign_source_8 = LOOKUP_SUBSCRIPT(tmp_expression_value_12, tmp_subscript_value_2);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        assert(tmp_inplace_assign_subscr_1__value == NULL);
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_8;
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_left_value_3 = tmp_inplace_assign_subscr_1__value;
        tmp_right_value_3 = mod_consts[12];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_value_3, tmp_right_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_9 = tmp_left_value_3;
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_9;

    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_ass_subvalue_2 = tmp_inplace_assign_subscr_1__value;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_ass_subscribed_2 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_ass_subscript_2 = tmp_inplace_assign_subscr_1__subscript;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 33;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    Py_XDECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
    Py_DECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    branch_end_2:;
    if (var_idx == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[15]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 34;
        type_description_1 = "ooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_idx;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_47ac8b96f92f8a89a74d98f97413ba77);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_47ac8b96f92f8a89a74d98f97413ba77);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_47ac8b96f92f8a89a74d98f97413ba77);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_47ac8b96f92f8a89a74d98f97413ba77, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_47ac8b96f92f8a89a74d98f97413ba77->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_47ac8b96f92f8a89a74d98f97413ba77, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_47ac8b96f92f8a89a74d98f97413ba77,
        type_description_1,
        par_self,
        par_s,
        var_idx
    );


    // Release cached frame if used for exception.
    if (frame_47ac8b96f92f8a89a74d98f97413ba77 == cache_frame_47ac8b96f92f8a89a74d98f97413ba77) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_47ac8b96f92f8a89a74d98f97413ba77);
        cache_frame_47ac8b96f92f8a89a74d98f97413ba77 = NULL;
    }

    assertFrameObject(frame_47ac8b96f92f8a89a74d98f97413ba77);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);
    par_s = NULL;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_s);
    par_s = NULL;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__3_add_rt(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_rt = python_pars[1];
    PyObject *var_rtList = NULL;
    PyObject *var_s = NULL;
    PyObject *var_xf = NULL;
    PyObject *var_idx = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_inplace_assign_subscr_1__subscript = NULL;
    PyObject *tmp_inplace_assign_subscr_1__target = NULL;
    PyObject *tmp_inplace_assign_subscr_1__value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_1cde90856d811ea214febc2f185be286;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    bool tmp_result;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_1cde90856d811ea214febc2f185be286 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New(0);
        assert(var_rtList == NULL);
        var_rtList = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_1cde90856d811ea214febc2f185be286)) {
        Py_XDECREF(cache_frame_1cde90856d811ea214febc2f185be286);

#if _DEBUG_REFCOUNTS
        if (cache_frame_1cde90856d811ea214febc2f185be286 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_1cde90856d811ea214febc2f185be286 = MAKE_FUNCTION_FRAME(codeobj_1cde90856d811ea214febc2f185be286, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_1cde90856d811ea214febc2f185be286->m_type_description == NULL);
    frame_1cde90856d811ea214febc2f185be286 = cache_frame_1cde90856d811ea214febc2f185be286;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_1cde90856d811ea214febc2f185be286);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_1cde90856d811ea214febc2f185be286) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_rt);
        tmp_iter_arg_1 = par_rt;
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooo";
                exception_lineno = 38;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 38;
            type_description_1 = "oooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooo";
            exception_lineno = 38;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooo";
            exception_lineno = 38;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooo";
                    exception_lineno = 38;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[16];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooo";
            exception_lineno = 38;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_s;
            var_s = tmp_assign_source_7;
            Py_INCREF(var_s);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_xf;
            var_xf = tmp_assign_source_8;
            Py_INCREF(var_xf);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        int tmp_and_left_truth_1;
        nuitka_bool tmp_and_left_value_1;
        nuitka_bool tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 39;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[0]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_cmp_expr_right_1 = mod_consts[9];
        tmp_and_left_value_1 = RICH_COMPARE_NE_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_and_left_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_and_left_truth_1 = tmp_and_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_1);

            exception_lineno = 39;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        assert(tmp_and_left_value_1 != NUITKA_BOOL_UNASSIGNED);
        CHECK_OBJECT(var_s);
        tmp_isinstance_inst_1 = var_s;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[10]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[10]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_operand_value_1 = (tmp_res != 0) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 39;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        tmp_and_right_value_1 = (tmp_res == 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        tmp_condition_result_1 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_condition_result_1 = tmp_and_left_value_1;
        and_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[11]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[11]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_s);
        tmp_args_element_value_1 = var_s;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 40;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_2 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[0]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        frame_1cde90856d811ea214febc2f185be286->m_frame.f_lineno = 40;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 40;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_s;
            assert(old != NULL);
            var_s = tmp_assign_source_9;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_tuple_element_1;
        if (var_rtList == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[18]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 41;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = var_rtList;
        CHECK_OBJECT(var_s);
        tmp_tuple_element_1 = var_s;
        tmp_args_element_value_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_element_value_3, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_xf);
        tmp_tuple_element_1 = var_xf;
        PyTuple_SET_ITEM0(tmp_args_element_value_3, 1, tmp_tuple_element_1);
        frame_1cde90856d811ea214febc2f185be286->m_frame.f_lineno = 41;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[13], tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 41;
            type_description_1 = "oooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 38;
        type_description_1 = "oooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_tuple_arg_1;
        if (var_rtList == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[18]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 42;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_tuple_arg_1 = var_rtList;
        tmp_assign_source_10 = PySequence_Tuple(tmp_tuple_arg_1);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 42;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = par_rt;
            assert(old != NULL);
            par_rt = tmp_assign_source_10;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_expression_value_3;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 43;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_self;
        tmp_assign_source_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[5]);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_1__value == NULL);
        tmp_inplace_assign_1__value = tmp_assign_source_11;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_1 = tmp_inplace_assign_1__value;
        tmp_right_value_1 = mod_consts[12];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_value_1, tmp_right_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;
            type_description_1 = "oooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_12 = tmp_left_value_1;
        tmp_inplace_assign_1__value = tmp_assign_source_12;

    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_1 = tmp_inplace_assign_1__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 43;
            type_description_1 = "oooooo";
            goto try_except_handler_5;
        }

        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[5], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 43;
            type_description_1 = "oooooo";
            goto try_except_handler_5;
        }
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(par_rt);
        tmp_cmp_expr_left_2 = par_rt;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 44;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_4 = par_self;
        tmp_cmp_expr_right_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[2]);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_2, tmp_cmp_expr_left_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 44;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_left_value_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_right_value_2;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_expression_value_6;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 45;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_5 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[1]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_2 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 45;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_left_value_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 45;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_6 = par_self;
        tmp_len_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[2]);
        if (tmp_len_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 45;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_2 = BUILTIN_LEN(tmp_len_arg_2);
        Py_DECREF(tmp_len_arg_2);
        if (tmp_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 45;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_13 = BINARY_OPERATION_ADD_OBJECT_LONG_LONG(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_left_value_2);
        Py_DECREF(tmp_right_value_2);
        assert(!(tmp_assign_source_13 == NULL));
        assert(var_idx == NULL);
        var_idx = tmp_assign_source_13;
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_idx);
        tmp_ass_subvalue_1 = var_idx;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 46;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_7 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[2]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 46;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_rt);
        tmp_ass_subscript_1 = par_rt;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 46;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_call_result_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 47;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_8 = par_self;
        tmp_called_instance_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[3]);
        if (tmp_called_instance_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        frame_1cde90856d811ea214febc2f185be286->m_frame.f_lineno = 47;
        tmp_call_result_2 = CALL_METHOD_WITH_SINGLE_ARG(
            tmp_called_instance_2,
            mod_consts[13],
            PyTuple_GET_ITEM(mod_consts[14], 0)
        );

        Py_DECREF(tmp_called_instance_2);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 47;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_subscript_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 49;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_10 = par_self;
        tmp_expression_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[2]);
        if (tmp_expression_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_rt);
        tmp_subscript_value_1 = par_rt;
        tmp_assign_source_14 = LOOKUP_SUBSCRIPT(tmp_expression_value_9, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_9);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 49;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_idx == NULL);
        var_idx = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_expression_value_11;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 50;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_11 = par_self;
        tmp_assign_source_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[3]);
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 50;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_subscr_1__target == NULL);
        tmp_inplace_assign_subscr_1__target = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT(var_idx);
        tmp_assign_source_16 = var_idx;
        assert(tmp_inplace_assign_subscr_1__subscript == NULL);
        Py_INCREF(tmp_assign_source_16);
        tmp_inplace_assign_subscr_1__subscript = tmp_assign_source_16;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_subscript_value_2;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_expression_value_12 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_subscript_value_2 = tmp_inplace_assign_subscr_1__subscript;
        tmp_assign_source_17 = LOOKUP_SUBSCRIPT(tmp_expression_value_12, tmp_subscript_value_2);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 50;
            type_description_1 = "oooooo";
            goto try_except_handler_6;
        }
        assert(tmp_inplace_assign_subscr_1__value == NULL);
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_17;
    }
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_left_value_3 = tmp_inplace_assign_subscr_1__value;
        tmp_right_value_3 = mod_consts[12];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_value_3, tmp_right_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 50;
            type_description_1 = "oooooo";
            goto try_except_handler_6;
        }
        tmp_assign_source_18 = tmp_left_value_3;
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_18;

    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_ass_subscript_2;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_ass_subvalue_2 = tmp_inplace_assign_subscr_1__value;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_ass_subscribed_2 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_ass_subscript_2 = tmp_inplace_assign_subscr_1__subscript;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_2, tmp_ass_subscript_2, tmp_ass_subvalue_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 50;
            type_description_1 = "oooooo";
            goto try_except_handler_6;
        }
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    Py_XDECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
    Py_DECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    branch_end_2:;
    if (var_idx == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[15]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 51;
        type_description_1 = "oooooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_idx;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1cde90856d811ea214febc2f185be286);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_1cde90856d811ea214febc2f185be286);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_1cde90856d811ea214febc2f185be286);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_1cde90856d811ea214febc2f185be286, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_1cde90856d811ea214febc2f185be286->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_1cde90856d811ea214febc2f185be286, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_1cde90856d811ea214febc2f185be286,
        type_description_1,
        par_self,
        par_rt,
        var_rtList,
        var_s,
        var_xf,
        var_idx
    );


    // Release cached frame if used for exception.
    if (frame_1cde90856d811ea214febc2f185be286 == cache_frame_1cde90856d811ea214febc2f185be286) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_1cde90856d811ea214febc2f185be286);
        cache_frame_1cde90856d811ea214febc2f185be286 = NULL;
    }

    assertFrameObject(frame_1cde90856d811ea214febc2f185be286);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_rt);
    Py_DECREF(par_rt);
    par_rt = NULL;
    Py_XDECREF(var_rtList);
    var_rtList = NULL;
    Py_XDECREF(var_s);
    var_s = NULL;
    Py_XDECREF(var_xf);
    var_xf = NULL;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_rt);
    par_rt = NULL;
    Py_XDECREF(var_rtList);
    var_rtList = NULL;
    Py_XDECREF(var_s);
    var_s = NULL;
    Py_XDECREF(var_xf);
    var_xf = NULL;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__4_del_str(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_idx = python_pars[1];
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_inplace_assign_subscr_1__subscript = NULL;
    PyObject *tmp_inplace_assign_subscr_1__target = NULL;
    PyObject *tmp_inplace_assign_subscr_1__value = NULL;
    struct Nuitka_FrameObject *frame_04b82f1f74a278b796ebcd7f06cb002e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_04b82f1f74a278b796ebcd7f06cb002e = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_04b82f1f74a278b796ebcd7f06cb002e)) {
        Py_XDECREF(cache_frame_04b82f1f74a278b796ebcd7f06cb002e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_04b82f1f74a278b796ebcd7f06cb002e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_04b82f1f74a278b796ebcd7f06cb002e = MAKE_FUNCTION_FRAME(codeobj_04b82f1f74a278b796ebcd7f06cb002e, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_04b82f1f74a278b796ebcd7f06cb002e->m_type_description == NULL);
    frame_04b82f1f74a278b796ebcd7f06cb002e = cache_frame_04b82f1f74a278b796ebcd7f06cb002e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_04b82f1f74a278b796ebcd7f06cb002e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_04b82f1f74a278b796ebcd7f06cb002e) == 2); // Frame stack

    // Framed code:
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[3]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_idx);
        tmp_subscript_value_1 = par_idx;
        tmp_cmp_expr_left_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[4];
        tmp_operand_value_1 = RICH_COMPARE_GT_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 56;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 56;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[3]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_subscr_1__target == NULL);
        tmp_inplace_assign_subscr_1__target = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(par_idx);
        tmp_assign_source_2 = par_idx;
        assert(tmp_inplace_assign_subscr_1__subscript == NULL);
        Py_INCREF(tmp_assign_source_2);
        tmp_inplace_assign_subscr_1__subscript = tmp_assign_source_2;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_subscript_value_2;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_expression_value_4 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_subscript_value_2 = tmp_inplace_assign_subscr_1__subscript;
        tmp_assign_source_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_4, tmp_subscript_value_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        assert(tmp_inplace_assign_subscr_1__value == NULL);
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_left_value_1 = tmp_inplace_assign_subscr_1__value;
        tmp_right_value_1 = mod_consts[12];
        tmp_result = BINARY_OPERATION_SUB_OBJECT_LONG_INPLACE(&tmp_left_value_1, tmp_right_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
        tmp_assign_source_4 = tmp_left_value_1;
        tmp_inplace_assign_subscr_1__value = tmp_assign_source_4;

    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
        tmp_ass_subvalue_1 = tmp_inplace_assign_subscr_1__value;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
        tmp_ass_subscribed_1 = tmp_inplace_assign_subscr_1__target;
        CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
        tmp_ass_subscript_1 = tmp_inplace_assign_subscr_1__subscript;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 57;
            type_description_1 = "oo";
            goto try_except_handler_1;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    Py_XDECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__target);
    Py_DECREF(tmp_inplace_assign_subscr_1__target);
    tmp_inplace_assign_subscr_1__target = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__subscript);
    Py_DECREF(tmp_inplace_assign_subscr_1__subscript);
    tmp_inplace_assign_subscr_1__subscript = NULL;
    CHECK_OBJECT(tmp_inplace_assign_subscr_1__value);
    Py_DECREF(tmp_inplace_assign_subscr_1__value);
    tmp_inplace_assign_subscr_1__value = NULL;
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_expression_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_assign_source_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[5]);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_1__value == NULL);
        tmp_inplace_assign_1__value = tmp_assign_source_5;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_2 = tmp_inplace_assign_1__value;
        tmp_right_value_2 = mod_consts[12];
        tmp_result = BINARY_OPERATION_SUB_OBJECT_LONG_INPLACE(&tmp_left_value_2, tmp_right_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
        tmp_assign_source_6 = tmp_left_value_2;
        tmp_inplace_assign_1__value = tmp_assign_source_6;

    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_1 = tmp_inplace_assign_1__value;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[5], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 58;
            type_description_1 = "oo";
            goto try_except_handler_2;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_04b82f1f74a278b796ebcd7f06cb002e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_04b82f1f74a278b796ebcd7f06cb002e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_04b82f1f74a278b796ebcd7f06cb002e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_04b82f1f74a278b796ebcd7f06cb002e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_04b82f1f74a278b796ebcd7f06cb002e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_04b82f1f74a278b796ebcd7f06cb002e,
        type_description_1,
        par_self,
        par_idx
    );


    // Release cached frame if used for exception.
    if (frame_04b82f1f74a278b796ebcd7f06cb002e == cache_frame_04b82f1f74a278b796ebcd7f06cb002e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_04b82f1f74a278b796ebcd7f06cb002e);
        cache_frame_04b82f1f74a278b796ebcd7f06cb002e = NULL;
    }

    assertFrameObject(frame_04b82f1f74a278b796ebcd7f06cb002e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_idx);
    Py_DECREF(par_idx);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_idx);
    Py_DECREF(par_idx);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__5_str_index(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_s = python_pars[1];
    struct Nuitka_FrameObject *frame_31cb7173ff6bdf672a790ddcd342a036;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_31cb7173ff6bdf672a790ddcd342a036 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_31cb7173ff6bdf672a790ddcd342a036)) {
        Py_XDECREF(cache_frame_31cb7173ff6bdf672a790ddcd342a036);

#if _DEBUG_REFCOUNTS
        if (cache_frame_31cb7173ff6bdf672a790ddcd342a036 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_31cb7173ff6bdf672a790ddcd342a036 = MAKE_FUNCTION_FRAME(codeobj_31cb7173ff6bdf672a790ddcd342a036, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_31cb7173ff6bdf672a790ddcd342a036->m_type_description == NULL);
    frame_31cb7173ff6bdf672a790ddcd342a036 = cache_frame_31cb7173ff6bdf672a790ddcd342a036;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_31cb7173ff6bdf672a790ddcd342a036);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_31cb7173ff6bdf672a790ddcd342a036) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[1]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_s);
        tmp_subscript_value_1 = par_s;
        tmp_return_value = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 61;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_31cb7173ff6bdf672a790ddcd342a036);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_31cb7173ff6bdf672a790ddcd342a036);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_31cb7173ff6bdf672a790ddcd342a036);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_31cb7173ff6bdf672a790ddcd342a036, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_31cb7173ff6bdf672a790ddcd342a036->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_31cb7173ff6bdf672a790ddcd342a036, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_31cb7173ff6bdf672a790ddcd342a036,
        type_description_1,
        par_self,
        par_s
    );


    // Release cached frame if used for exception.
    if (frame_31cb7173ff6bdf672a790ddcd342a036 == cache_frame_31cb7173ff6bdf672a790ddcd342a036) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_31cb7173ff6bdf672a790ddcd342a036);
        cache_frame_31cb7173ff6bdf672a790ddcd342a036 = NULL;
    }

    assertFrameObject(frame_31cb7173ff6bdf672a790ddcd342a036);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__6_rt_index(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_rt = python_pars[1];
    struct Nuitka_FrameObject *frame_2d430fc1e390f3ff40a47511886a7ff3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_2d430fc1e390f3ff40a47511886a7ff3 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2d430fc1e390f3ff40a47511886a7ff3)) {
        Py_XDECREF(cache_frame_2d430fc1e390f3ff40a47511886a7ff3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2d430fc1e390f3ff40a47511886a7ff3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2d430fc1e390f3ff40a47511886a7ff3 = MAKE_FUNCTION_FRAME(codeobj_2d430fc1e390f3ff40a47511886a7ff3, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2d430fc1e390f3ff40a47511886a7ff3->m_type_description == NULL);
    frame_2d430fc1e390f3ff40a47511886a7ff3 = cache_frame_2d430fc1e390f3ff40a47511886a7ff3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2d430fc1e390f3ff40a47511886a7ff3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2d430fc1e390f3ff40a47511886a7ff3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[2]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 64;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_rt);
        tmp_subscript_value_1 = par_rt;
        tmp_return_value = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 64;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d430fc1e390f3ff40a47511886a7ff3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d430fc1e390f3ff40a47511886a7ff3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2d430fc1e390f3ff40a47511886a7ff3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2d430fc1e390f3ff40a47511886a7ff3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2d430fc1e390f3ff40a47511886a7ff3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2d430fc1e390f3ff40a47511886a7ff3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2d430fc1e390f3ff40a47511886a7ff3,
        type_description_1,
        par_self,
        par_rt
    );


    // Release cached frame if used for exception.
    if (frame_2d430fc1e390f3ff40a47511886a7ff3 == cache_frame_2d430fc1e390f3ff40a47511886a7ff3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2d430fc1e390f3ff40a47511886a7ff3);
        cache_frame_2d430fc1e390f3ff40a47511886a7ff3 = NULL;
    }

    assertFrameObject(frame_2d430fc1e390f3ff40a47511886a7ff3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_rt);
    Py_DECREF(par_rt);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_rt);
    Py_DECREF(par_rt);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__7_get_biff_record(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_data = NULL;
    PyObject *var_idx = NULL;
    PyObject *var_s = NULL;
    PyObject *var_result = NULL;
    PyObject *outline_0_var_s = NULL;
    PyObject *outline_0_var_idx = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_listcomp$tuple_unpack_1__source_iter = NULL;
    PyObject *tmp_listcomp_1__$0 = NULL;
    PyObject *tmp_listcomp_1__contraction = NULL;
    PyObject *tmp_listcomp_1__iter_value_0 = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3c28f476156824c812ee71e45eff6212;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    struct Nuitka_FrameObject *frame_32b4a0063ac6fcf83513d717662046b7_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_32b4a0063ac6fcf83513d717662046b7_2 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    int tmp_res;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    static struct Nuitka_FrameObject *cache_frame_3c28f476156824c812ee71e45eff6212 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_3c28f476156824c812ee71e45eff6212)) {
        Py_XDECREF(cache_frame_3c28f476156824c812ee71e45eff6212);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3c28f476156824c812ee71e45eff6212 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3c28f476156824c812ee71e45eff6212 = MAKE_FUNCTION_FRAME(codeobj_3c28f476156824c812ee71e45eff6212, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3c28f476156824c812ee71e45eff6212->m_type_description == NULL);
    frame_3c28f476156824c812ee71e45eff6212 = cache_frame_3c28f476156824c812ee71e45eff6212;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3c28f476156824c812ee71e45eff6212);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3c28f476156824c812ee71e45eff6212) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = mod_consts[19];
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[6], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 67;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = LIST_COPY(mod_consts[20]);
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[7], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 68;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_3;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 69;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 69;
        tmp_assattr_value_3 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_value_1, mod_consts[22]);

        if (tmp_assattr_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 69;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[8], tmp_assattr_value_3);
        Py_DECREF(tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 69;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        // Tried code:
        {
            PyObject *tmp_assign_source_2;
            PyObject *tmp_iter_arg_1;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_element_value_1;
            PyObject *tmp_expression_value_1;
            tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[23]);

            if (unlikely(tmp_called_value_2 == NULL)) {
                tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[23]);
            }

            if (tmp_called_value_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_1 = par_self;
            tmp_args_element_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[1]);
            if (tmp_args_element_value_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 70;
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_1);
            Py_DECREF(tmp_args_element_value_1);
            if (tmp_iter_arg_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
            Py_DECREF(tmp_iter_arg_1);
            if (tmp_assign_source_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_1 = "ooooo";
                goto try_except_handler_2;
            }
            assert(tmp_listcomp_1__$0 == NULL);
            tmp_listcomp_1__$0 = tmp_assign_source_2;
        }
        {
            PyObject *tmp_assign_source_3;
            tmp_assign_source_3 = PyList_New(0);
            assert(tmp_listcomp_1__contraction == NULL);
            tmp_listcomp_1__contraction = tmp_assign_source_3;
        }
        if (isFrameUnusable(cache_frame_32b4a0063ac6fcf83513d717662046b7_2)) {
            Py_XDECREF(cache_frame_32b4a0063ac6fcf83513d717662046b7_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_32b4a0063ac6fcf83513d717662046b7_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_32b4a0063ac6fcf83513d717662046b7_2 = MAKE_FUNCTION_FRAME(codeobj_32b4a0063ac6fcf83513d717662046b7, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_32b4a0063ac6fcf83513d717662046b7_2->m_type_description == NULL);
        frame_32b4a0063ac6fcf83513d717662046b7_2 = cache_frame_32b4a0063ac6fcf83513d717662046b7_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_32b4a0063ac6fcf83513d717662046b7_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_32b4a0063ac6fcf83513d717662046b7_2) == 2); // Frame stack

        // Framed code:
        // Tried code:
        loop_start_1:;
        {
            PyObject *tmp_next_source_1;
            PyObject *tmp_assign_source_4;
            CHECK_OBJECT(tmp_listcomp_1__$0);
            tmp_next_source_1 = tmp_listcomp_1__$0;
            tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
            if (tmp_assign_source_4 == NULL) {
                if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                    goto loop_end_1;
                } else {

                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                    type_description_2 = "oo";
                    exception_lineno = 70;
                    goto try_except_handler_3;
                }
            }

            {
                PyObject *old = tmp_listcomp_1__iter_value_0;
                tmp_listcomp_1__iter_value_0 = tmp_assign_source_4;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_5;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT(tmp_listcomp_1__iter_value_0);
            tmp_iter_arg_2 = tmp_listcomp_1__iter_value_0;
            tmp_assign_source_5 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
            if (tmp_assign_source_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_2 = "oo";
                goto try_except_handler_4;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__source_iter;
                tmp_listcomp$tuple_unpack_1__source_iter = tmp_assign_source_5;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            PyObject *tmp_assign_source_6;
            PyObject *tmp_unpack_1;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_1 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
            if (tmp_assign_source_6 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 70;
                goto try_except_handler_5;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_1;
                tmp_listcomp$tuple_unpack_1__element_1 = tmp_assign_source_6;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_assign_source_7;
            PyObject *tmp_unpack_2;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_unpack_2 = tmp_listcomp$tuple_unpack_1__source_iter;
            tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
            if (tmp_assign_source_7 == NULL) {
                if (!ERROR_OCCURRED()) {
                    exception_type = PyExc_StopIteration;
                    Py_INCREF(exception_type);
                    exception_value = NULL;
                    exception_tb = NULL;
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                }


                type_description_2 = "oo";
                exception_lineno = 70;
                goto try_except_handler_5;
            }
            {
                PyObject *old = tmp_listcomp$tuple_unpack_1__element_2;
                tmp_listcomp$tuple_unpack_1__element_2 = tmp_assign_source_7;
                Py_XDECREF(old);
            }

        }
        {
            PyObject *tmp_iterator_name_1;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
            tmp_iterator_name_1 = tmp_listcomp$tuple_unpack_1__source_iter;
            // Check if iterator has left-over elements.
            CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

            tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

            if (likely(tmp_iterator_attempt == NULL)) {
                PyObject *error = GET_ERROR_OCCURRED();

                if (error != NULL) {
                    if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                        CLEAR_ERROR_OCCURRED();
                    } else {
                        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                        type_description_2 = "oo";
                        exception_lineno = 70;
                        goto try_except_handler_5;
                    }
                }
            } else {
                Py_DECREF(tmp_iterator_attempt);

                exception_type = PyExc_ValueError;
                Py_INCREF(PyExc_ValueError);
                exception_value = mod_consts[16];
                Py_INCREF(exception_value);
                exception_tb = NULL;

                type_description_2 = "oo";
                exception_lineno = 70;
                goto try_except_handler_5;
            }
        }
        goto try_end_1;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_1 = exception_type;
        exception_keeper_value_1 = exception_value;
        exception_keeper_tb_1 = exception_tb;
        exception_keeper_lineno_1 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_1;
        exception_value = exception_keeper_value_1;
        exception_tb = exception_keeper_tb_1;
        exception_lineno = exception_keeper_lineno_1;

        goto try_except_handler_4;
        // End of try:
        try_end_1:;
        goto try_end_2;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_2 = exception_type;
        exception_keeper_value_2 = exception_value;
        exception_keeper_tb_2 = exception_tb;
        exception_keeper_lineno_2 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_2;
        exception_value = exception_keeper_value_2;
        exception_tb = exception_keeper_tb_2;
        exception_lineno = exception_keeper_lineno_2;

        goto try_except_handler_3;
        // End of try:
        try_end_2:;
        CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__source_iter);
        Py_DECREF(tmp_listcomp$tuple_unpack_1__source_iter);
        tmp_listcomp$tuple_unpack_1__source_iter = NULL;
        {
            PyObject *tmp_assign_source_8;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_1);
            tmp_assign_source_8 = tmp_listcomp$tuple_unpack_1__element_1;
            {
                PyObject *old = outline_0_var_s;
                outline_0_var_s = tmp_assign_source_8;
                Py_INCREF(outline_0_var_s);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_1);
        tmp_listcomp$tuple_unpack_1__element_1 = NULL;

        {
            PyObject *tmp_assign_source_9;
            CHECK_OBJECT(tmp_listcomp$tuple_unpack_1__element_2);
            tmp_assign_source_9 = tmp_listcomp$tuple_unpack_1__element_2;
            {
                PyObject *old = outline_0_var_idx;
                outline_0_var_idx = tmp_assign_source_9;
                Py_INCREF(outline_0_var_idx);
                Py_XDECREF(old);
            }

        }
        Py_XDECREF(tmp_listcomp$tuple_unpack_1__element_2);
        tmp_listcomp$tuple_unpack_1__element_2 = NULL;

        {
            PyObject *tmp_append_list_1;
            PyObject *tmp_append_value_1;
            PyObject *tmp_tuple_element_1;
            CHECK_OBJECT(tmp_listcomp_1__contraction);
            tmp_append_list_1 = tmp_listcomp_1__contraction;
            CHECK_OBJECT(outline_0_var_idx);
            tmp_tuple_element_1 = outline_0_var_idx;
            tmp_append_value_1 = PyTuple_New(2);
            PyTuple_SET_ITEM0(tmp_append_value_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(outline_0_var_s);
            tmp_tuple_element_1 = outline_0_var_s;
            PyTuple_SET_ITEM0(tmp_append_value_1, 1, tmp_tuple_element_1);
            assert(PyList_Check(tmp_append_list_1));
            tmp_result = LIST_APPEND1(tmp_append_list_1, tmp_append_value_1);
            if (tmp_result == false) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 70;
                type_description_2 = "oo";
                goto try_except_handler_3;
            }
        }
        if (CONSIDER_THREADING() == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 70;
            type_description_2 = "oo";
            goto try_except_handler_3;
        }
        goto loop_start_1;
        loop_end_1:;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        tmp_assign_source_1 = tmp_listcomp_1__contraction;
        Py_INCREF(tmp_assign_source_1);
        goto try_return_handler_3;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        goto frame_return_exit_1;
        // Exception handler code:
        try_except_handler_3:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        CHECK_OBJECT(tmp_listcomp_1__$0);
        Py_DECREF(tmp_listcomp_1__$0);
        tmp_listcomp_1__$0 = NULL;
        CHECK_OBJECT(tmp_listcomp_1__contraction);
        Py_DECREF(tmp_listcomp_1__contraction);
        tmp_listcomp_1__contraction = NULL;
        Py_XDECREF(tmp_listcomp_1__iter_value_0);
        tmp_listcomp_1__iter_value_0 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto frame_exception_exit_2;
        // End of try:

#if 0
        RESTORE_FRAME_EXCEPTION(frame_32b4a0063ac6fcf83513d717662046b7_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_return_exit_1:;
#if 0
        RESTORE_FRAME_EXCEPTION(frame_32b4a0063ac6fcf83513d717662046b7_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto try_return_handler_2;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_32b4a0063ac6fcf83513d717662046b7_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_32b4a0063ac6fcf83513d717662046b7_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_32b4a0063ac6fcf83513d717662046b7_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_32b4a0063ac6fcf83513d717662046b7_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_32b4a0063ac6fcf83513d717662046b7_2,
            type_description_2,
            outline_0_var_s,
            outline_0_var_idx
        );


        // Release cached frame if used for exception.
        if (frame_32b4a0063ac6fcf83513d717662046b7_2 == cache_frame_32b4a0063ac6fcf83513d717662046b7_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_32b4a0063ac6fcf83513d717662046b7_2);
            cache_frame_32b4a0063ac6fcf83513d717662046b7_2 = NULL;
        }

        assertFrameObject(frame_32b4a0063ac6fcf83513d717662046b7_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
        skip_nested_handling_1:;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_2:;
        Py_XDECREF(outline_0_var_s);
        outline_0_var_s = NULL;
        Py_XDECREF(outline_0_var_idx);
        outline_0_var_idx = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_2:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_XDECREF(outline_0_var_s);
        outline_0_var_s = NULL;
        Py_XDECREF(outline_0_var_idx);
        outline_0_var_idx = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 70;
        goto frame_exception_exit_1;
        outline_result_1:;
        assert(var_data == NULL);
        var_data = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_2;
        CHECK_OBJECT(var_data);
        tmp_expression_value_2 = var_data;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[24]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_iter_arg_3;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_element_value_3;
            PyObject *tmp_expression_value_3;
            tmp_called_value_4 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[23]);

            if (unlikely(tmp_called_value_4 == NULL)) {
                tmp_called_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[23]);
            }

            if (tmp_called_value_4 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 71;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            CHECK_OBJECT(par_self);
            tmp_expression_value_3 = par_self;
            tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[2]);
            if (tmp_args_element_value_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 71;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 71;
            tmp_iter_arg_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_4, tmp_args_element_value_3);
            Py_DECREF(tmp_args_element_value_3);
            if (tmp_iter_arg_3 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 71;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            tmp_assign_source_10 = MAKE_ITERATOR(tmp_iter_arg_3);
            Py_DECREF(tmp_iter_arg_3);
            if (tmp_assign_source_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 71;
                type_description_1 = "ooooo";
                goto frame_exception_exit_1;
            }
            assert(tmp_genexpr_1__$0 == NULL);
            tmp_genexpr_1__$0 = tmp_assign_source_10;
        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_1[1];

            tmp_closure_1[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);

            tmp_args_element_value_2 = MAKE_GENERATOR_xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr(tmp_closure_1);

            goto try_return_handler_6;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_6:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_2:;
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 71;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_3, tmp_args_element_value_2);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_2);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 71;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_2;
        CHECK_OBJECT(var_data);
        tmp_called_instance_1 = var_data;
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 72;
        tmp_call_result_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[25]);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 72;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_iter_arg_4;
        CHECK_OBJECT(var_data);
        tmp_iter_arg_4 = var_data;
        tmp_assign_source_11 = MAKE_ITERATOR(tmp_iter_arg_4);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 73;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_11;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_2;
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_2 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_12 = ITERATOR_NEXT(tmp_next_source_2);
        if (tmp_assign_source_12 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 73;
                goto try_except_handler_7;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_iter_arg_5;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_5 = tmp_for_loop_1__iter_value;
        tmp_assign_source_13 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_5);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 73;
            type_description_1 = "ooooo";
            goto try_except_handler_8;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_13;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_14 = UNPACK_NEXT(tmp_unpack_3, 0, 2);
        if (tmp_assign_source_14 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 73;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_14;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_15 = UNPACK_NEXT(tmp_unpack_4, 1, 2);
        if (tmp_assign_source_15 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 73;
            goto try_except_handler_9;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_15;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_2 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_2); assert(HAS_ITERNEXT(tmp_iterator_name_2));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_2)->tp_iternext)(tmp_iterator_name_2);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooo";
                    exception_lineno = 73;
                    goto try_except_handler_9;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[16];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooo";
            exception_lineno = 73;
            goto try_except_handler_9;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto try_except_handler_8;
    // End of try:
    try_end_3:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_8:;
    exception_keeper_type_6 = exception_type;
    exception_keeper_value_6 = exception_value;
    exception_keeper_tb_6 = exception_tb;
    exception_keeper_lineno_6 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_6;
    exception_value = exception_keeper_value_6;
    exception_tb = exception_keeper_tb_6;
    exception_lineno = exception_keeper_lineno_6;

    goto try_except_handler_7;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_16;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_16 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_16;
            Py_INCREF(var_idx);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_17;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_17 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_s;
            var_s = tmp_assign_source_17;
            Py_INCREF(var_s);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_subscript_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 74;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }

        tmp_expression_value_5 = par_self;
        tmp_expression_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[3]);
        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }
        CHECK_OBJECT(var_idx);
        tmp_subscript_value_1 = var_idx;
        tmp_cmp_expr_left_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_4, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_4);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }
        tmp_cmp_expr_right_1 = mod_consts[4];
        tmp_condition_result_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 74;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_18;
        tmp_assign_source_18 = mod_consts[26];
        {
            PyObject *old = var_s;
            assert(old != NULL);
            var_s = tmp_assign_source_18;
            Py_INCREF(var_s);
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_s);
        tmp_isinstance_inst_1 = var_s;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[27]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[27]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 76;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }
        tmp_condition_result_2 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_called_instance_2;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_4;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 77;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }

        tmp_called_instance_2 = par_self;
        CHECK_OBJECT(var_s);
        tmp_args_element_value_4 = var_s;
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 77;
        tmp_call_result_3 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_2, mod_consts[28], tmp_args_element_value_4);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 77;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }
        Py_DECREF(tmp_call_result_3);
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_called_instance_3;
        PyObject *tmp_call_result_4;
        PyObject *tmp_args_element_value_5;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 79;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }

        tmp_called_instance_3 = par_self;
        CHECK_OBJECT(var_s);
        tmp_args_element_value_5 = var_s;
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 79;
        tmp_call_result_4 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_3, mod_consts[29], tmp_args_element_value_5);
        if (tmp_call_result_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 79;
            type_description_1 = "ooooo";
            goto try_except_handler_7;
        }
        Py_DECREF(tmp_call_result_4);
    }
    branch_end_2:;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 73;
        type_description_1 = "ooooo";
        goto try_except_handler_7;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_5;
    // Exception handler code:
    try_except_handler_7:;
    exception_keeper_type_7 = exception_type;
    exception_keeper_value_7 = exception_value;
    exception_keeper_tb_7 = exception_tb;
    exception_keeper_lineno_7 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_7;
    exception_value = exception_keeper_value_7;
    exception_tb = exception_keeper_tb_7;
    exception_lineno = exception_keeper_lineno_7;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    CHECK_OBJECT(var_data);
    Py_DECREF(var_data);
    var_data = NULL;

    {
        PyObject *tmp_called_instance_4;
        PyObject *tmp_call_result_5;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 81;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_4 = par_self;
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 81;
        tmp_call_result_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_4, mod_consts[30]);
        if (tmp_call_result_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 81;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_5);
    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_called_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_left_value_1;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_right_value_1;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_ass_subscript_1;
        int tmp_ass_subscript_res_1;
        tmp_called_value_5 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_5 == NULL)) {
            tmp_called_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_6 = mod_consts[31];
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_6 = par_self;
        tmp_args_element_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[32]);
        if (tmp_args_element_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_args_element_value_7);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_7 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[6]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_8 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_8 = par_self;
        tmp_args_element_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[5]);
        if (tmp_args_element_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_9);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_9 = par_self;
        tmp_len_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[1]);
        if (tmp_len_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_9);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = BUILTIN_LEN(tmp_len_arg_2);
        Py_DECREF(tmp_len_arg_2);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_9);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_9);
            Py_DECREF(tmp_left_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_10 = par_self;
        tmp_len_arg_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[2]);
        if (tmp_len_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_9);
            Py_DECREF(tmp_left_value_1);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = BUILTIN_LEN(tmp_len_arg_3);
        Py_DECREF(tmp_len_arg_3);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_9);
            Py_DECREF(tmp_left_value_1);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_10 = BINARY_OPERATION_ADD_OBJECT_LONG_LONG(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_left_value_1);
        Py_DECREF(tmp_right_value_1);
        assert(!(tmp_args_element_value_10 == NULL));
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 82;
        {
            PyObject *call_args[] = {tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9, tmp_args_element_value_10};
            tmp_ass_subvalue_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_args_element_value_7);
        Py_DECREF(tmp_args_element_value_8);
        Py_DECREF(tmp_args_element_value_9);
        Py_DECREF(tmp_args_element_value_10);
        if (tmp_ass_subvalue_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_ass_subvalue_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_11 = par_self;
        tmp_ass_subscribed_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[7]);
        if (tmp_ass_subscribed_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_1);

            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_1 = mod_consts[4];
        tmp_ass_subscript_res_1 = SET_SUBSCRIPT_CONST(tmp_ass_subscribed_1, tmp_ass_subscript_1, 0, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subscribed_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_ass_subscript_res_1 == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 82;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_ass_subvalue_2;
        PyObject *tmp_expression_value_12;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_ass_subscribed_2;
        PyObject *tmp_expression_value_14;
        PyObject *tmp_ass_subscript_2;
        int tmp_ass_subscript_res_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 83;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_13 = par_self;
        tmp_expression_value_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[6]);
        if (tmp_expression_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_value_2 = mod_consts[33];
        tmp_ass_subvalue_2 = LOOKUP_SUBSCRIPT(tmp_expression_value_12, tmp_subscript_value_2);
        Py_DECREF(tmp_expression_value_12);
        if (tmp_ass_subvalue_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (par_self == NULL) {
            Py_DECREF(tmp_ass_subvalue_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 83;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_14 = par_self;
        tmp_ass_subscribed_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[7]);
        if (tmp_ass_subscribed_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_ass_subvalue_2);

            exception_lineno = 83;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_ass_subscript_2 = mod_consts[12];
        tmp_ass_subscript_res_2 = SET_SUBSCRIPT_CONST(tmp_ass_subscribed_2, tmp_ass_subscript_2, 1, tmp_ass_subvalue_2);
        Py_DECREF(tmp_ass_subscribed_2);
        Py_DECREF(tmp_ass_subvalue_2);
        if (tmp_ass_subscript_res_2 == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 83;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_value_4 = Py_None;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 84;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_4 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[6], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 84;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_value_5 = Py_None;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 85;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_5 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[8], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 85;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_value_6;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_expression_value_16;
        tmp_expression_value_15 = mod_consts[19];
        tmp_called_value_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[34]);
        assert(!(tmp_called_value_6 == NULL));
        if (par_self == NULL) {
            Py_DECREF(tmp_called_value_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 86;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_16 = par_self;
        tmp_args_element_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[7]);
        if (tmp_args_element_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_6);

            exception_lineno = 86;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_3c28f476156824c812ee71e45eff6212->m_frame.f_lineno = 86;
        tmp_assign_source_19 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_6, tmp_args_element_value_11);
        Py_DECREF(tmp_called_value_6);
        Py_DECREF(tmp_args_element_value_11);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 86;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_result == NULL);
        var_result = tmp_assign_source_19;
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_assattr_target_6;
        tmp_assattr_value_6 = Py_None;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 87;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }

        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, mod_consts[7], tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 87;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3c28f476156824c812ee71e45eff6212);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_2;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3c28f476156824c812ee71e45eff6212);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3c28f476156824c812ee71e45eff6212, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3c28f476156824c812ee71e45eff6212->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3c28f476156824c812ee71e45eff6212, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3c28f476156824c812ee71e45eff6212,
        type_description_1,
        par_self,
        var_data,
        var_idx,
        var_s,
        var_result
    );


    // Release cached frame if used for exception.
    if (frame_3c28f476156824c812ee71e45eff6212 == cache_frame_3c28f476156824c812ee71e45eff6212) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3c28f476156824c812ee71e45eff6212);
        cache_frame_3c28f476156824c812ee71e45eff6212 = NULL;
    }

    assertFrameObject(frame_3c28f476156824c812ee71e45eff6212);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_2:;
    CHECK_OBJECT(var_result);
    tmp_return_value = var_result;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    Py_XDECREF(var_s);
    var_s = NULL;
    CHECK_OBJECT(var_result);
    Py_DECREF(var_result);
    var_result = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_data);
    var_data = NULL;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    Py_XDECREF(var_s);
    var_s = NULL;
    Py_XDECREF(var_result);
    var_result = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr_locals {
    PyObject *var_s;
    PyObject *var_idx;
    PyObject *tmp_iter_value_0;
    PyObject *tmp_tuple_unpack_1__element_1;
    PyObject *tmp_tuple_unpack_1__element_2;
    PyObject *tmp_tuple_unpack_1__source_iter;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    int exception_keeper_lineno_4;
};

static PyObject *xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr_locals *generator_heap = (struct xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_s = NULL;
    generator_heap->var_idx = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_74aa8347d170e7072e6a2c372abb2f28, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "Noo";
                generator_heap->exception_lineno = 71;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_iter_arg_1 = generator_heap->tmp_iter_value_0;
        tmp_assign_source_2 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 71;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__source_iter;
            generator_heap->tmp_tuple_unpack_1__source_iter = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 71;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_1;
            generator_heap->tmp_tuple_unpack_1__element_1 = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = generator_heap->tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                generator_heap->exception_type = PyExc_StopIteration;
                Py_INCREF(generator_heap->exception_type);
                generator_heap->exception_value = NULL;
                generator_heap->exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
            }


            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 71;
            goto try_except_handler_4;
        }
        {
            PyObject *old = generator_heap->tmp_tuple_unpack_1__element_2;
            generator_heap->tmp_tuple_unpack_1__element_2 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = generator_heap->tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        generator_heap->tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(generator_heap->tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);

                    generator_heap->type_description_1 = "Noo";
                    generator_heap->exception_lineno = 71;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(generator_heap->tmp_iterator_attempt);

            generator_heap->exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            generator_heap->exception_value = mod_consts[16];
            Py_INCREF(generator_heap->exception_value);
            generator_heap->exception_tb = NULL;

            generator_heap->type_description_1 = "Noo";
            generator_heap->exception_lineno = 71;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__source_iter);
    Py_DECREF(generator_heap->tmp_tuple_unpack_1__source_iter);
    generator_heap->tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_1);
        tmp_assign_source_5 = generator_heap->tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = generator_heap->var_s;
            generator_heap->var_s = tmp_assign_source_5;
            Py_INCREF(generator_heap->var_s);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_1);
    generator_heap->tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(generator_heap->tmp_tuple_unpack_1__element_2);
        tmp_assign_source_6 = generator_heap->tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = generator_heap->var_idx;
            generator_heap->var_idx = tmp_assign_source_6;
            Py_INCREF(generator_heap->var_idx);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(generator_heap->tmp_tuple_unpack_1__element_2);
    generator_heap->tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_tuple_element_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        CHECK_OBJECT(generator_heap->var_idx);
        tmp_tuple_element_1 = generator_heap->var_idx;
        tmp_expression_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_expression_value_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(generator_heap->var_s);
        tmp_tuple_element_1 = generator_heap->var_s;
        PyTuple_SET_ITEM0(tmp_expression_value_1, 1, tmp_tuple_element_1);
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_value_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_tuple_element_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 71;
            generator_heap->type_description_1 = "Noo";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 71;
        generator_heap->type_description_1 = "Noo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_3 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_3 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_3 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_3 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_3;
    generator_heap->exception_value = generator_heap->exception_keeper_value_3;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_3;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_s,
            generator_heap->var_idx
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_4 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_4 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_4 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_4 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_s);
    generator_heap->var_s = NULL;
    Py_XDECREF(generator_heap->var_idx);
    generator_heap->var_idx = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_4;
    generator_heap->exception_value = generator_heap->exception_keeper_value_4;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_4;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:
    try_end_4:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_s);
    generator_heap->var_s = NULL;
    Py_XDECREF(generator_heap->var_idx);
    generator_heap->var_idx = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr_context,
        module_xlwt$BIFFRecords,
        mod_consts[35],
#if PYTHON_VERSION >= 0x350
        mod_consts[36],
#endif
        codeobj_74aa8347d170e7072e6a2c372abb2f28,
        closure,
        1,
        sizeof(struct xlwt$BIFFRecords$$$function__7_get_biff_record$$$genexpr__1_genexpr_locals)
    );
}


static PyObject *impl_xlwt$BIFFRecords$$$function__8__add_to_sst(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_s = python_pars[1];
    PyObject *var_u_str = NULL;
    PyObject *var_is_unicode_str = NULL;
    PyObject *var_atom_len = NULL;
    struct Nuitka_FrameObject *frame_ebf2d0a4ef588a5cabfc05807b0e4c2e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e)) {
        Py_XDECREF(cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e = MAKE_FUNCTION_FRAME(codeobj_ebf2d0a4ef588a5cabfc05807b0e4c2e, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e->m_type_description == NULL);
    frame_ebf2d0a4ef588a5cabfc05807b0e4c2e = cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ebf2d0a4ef588a5cabfc05807b0e4c2e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ebf2d0a4ef588a5cabfc05807b0e4c2e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[37]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_s);
        tmp_args_element_value_1 = par_s;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[0]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_ebf2d0a4ef588a5cabfc05807b0e4c2e->m_frame.f_lineno = 92;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 92;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_u_str == NULL);
        var_u_str = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(var_u_str);
        tmp_expression_value_2 = var_u_str;
        tmp_subscript_value_1 = mod_consts[38];
        tmp_cmp_expr_left_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_2, tmp_subscript_value_1, 2);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[12];
        tmp_assign_source_2 = RICH_COMPARE_EQ_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 94;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_is_unicode_str == NULL);
        var_is_unicode_str = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_is_unicode_str);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_is_unicode_str);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 95;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = mod_consts[39];
        assert(var_atom_len == NULL);
        Py_INCREF(tmp_assign_source_3);
        var_atom_len = tmp_assign_source_3;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = mod_consts[40];
        assert(var_atom_len == NULL);
        Py_INCREF(tmp_assign_source_4);
        var_atom_len = tmp_assign_source_4;
    }
    branch_end_1:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_start_value_1;
        PyObject *tmp_stop_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[41]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 104;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_u_str);
        tmp_expression_value_4 = var_u_str;
        tmp_start_value_1 = mod_consts[4];
        CHECK_OBJECT(var_atom_len);
        tmp_stop_value_1 = var_atom_len;
        tmp_subscript_value_2 = MAKE_SLICEOBJ2(tmp_start_value_1, tmp_stop_value_1);
        assert(!(tmp_subscript_value_2 == NULL));
        tmp_args_element_value_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_4, tmp_subscript_value_2);
        Py_DECREF(tmp_subscript_value_2);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 104;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_ebf2d0a4ef588a5cabfc05807b0e4c2e->m_frame.f_lineno = 104;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 104;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_start_value_2;
        PyObject *tmp_stop_value_2;
        PyObject *tmp_args_element_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[42]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_u_str);
        tmp_expression_value_6 = var_u_str;
        CHECK_OBJECT(var_atom_len);
        tmp_start_value_2 = var_atom_len;
        tmp_stop_value_2 = Py_None;
        tmp_subscript_value_3 = MAKE_SLICEOBJ2(tmp_start_value_2, tmp_stop_value_2);
        assert(!(tmp_subscript_value_3 == NULL));
        tmp_args_element_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_6, tmp_subscript_value_3);
        Py_DECREF(tmp_subscript_value_3);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 105;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_is_unicode_str);
        tmp_args_element_value_5 = var_is_unicode_str;
        frame_ebf2d0a4ef588a5cabfc05807b0e4c2e->m_frame.f_lineno = 105;
        {
            PyObject *call_args[] = {tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 105;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ebf2d0a4ef588a5cabfc05807b0e4c2e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ebf2d0a4ef588a5cabfc05807b0e4c2e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ebf2d0a4ef588a5cabfc05807b0e4c2e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ebf2d0a4ef588a5cabfc05807b0e4c2e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ebf2d0a4ef588a5cabfc05807b0e4c2e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ebf2d0a4ef588a5cabfc05807b0e4c2e,
        type_description_1,
        par_self,
        par_s,
        var_u_str,
        var_is_unicode_str,
        var_atom_len
    );


    // Release cached frame if used for exception.
    if (frame_ebf2d0a4ef588a5cabfc05807b0e4c2e == cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e);
        cache_frame_ebf2d0a4ef588a5cabfc05807b0e4c2e = NULL;
    }

    assertFrameObject(frame_ebf2d0a4ef588a5cabfc05807b0e4c2e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_u_str);
    Py_DECREF(var_u_str);
    var_u_str = NULL;
    CHECK_OBJECT(var_is_unicode_str);
    Py_DECREF(var_is_unicode_str);
    var_is_unicode_str = NULL;
    CHECK_OBJECT(var_atom_len);
    Py_DECREF(var_atom_len);
    var_atom_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_u_str);
    var_u_str = NULL;
    Py_XDECREF(var_is_unicode_str);
    var_is_unicode_str = NULL;
    Py_XDECREF(var_atom_len);
    var_atom_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__9__add_rt_to_sst(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_rt = python_pars[1];
    PyObject *var_rt_str = NULL;
    PyObject *var_rt_fr = NULL;
    PyObject *var_is_unicode_str = NULL;
    PyObject *var_atom_len = NULL;
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_bfb0773ba1bcbe5dcf5795e9e54a8ada;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada)) {
        Py_XDECREF(cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada = MAKE_FUNCTION_FRAME(codeobj_bfb0773ba1bcbe5dcf5795e9e54a8ada, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada->m_type_description == NULL);
    frame_bfb0773ba1bcbe5dcf5795e9e54a8ada = cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_bfb0773ba1bcbe5dcf5795e9e54a8ada);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_bfb0773ba1bcbe5dcf5795e9e54a8ada) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[43]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[43]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(par_rt);
        tmp_args_element_value_1 = par_rt;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[0]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        frame_bfb0773ba1bcbe5dcf5795e9e54a8ada->m_frame.f_lineno = 108;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 108;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_2 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooo";
            exception_lineno = 108;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooo";
            exception_lineno = 108;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooo";
                    exception_lineno = 108;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[16];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooo";
            exception_lineno = 108;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_4 = tmp_tuple_unpack_1__element_1;
        assert(var_rt_str == NULL);
        Py_INCREF(tmp_assign_source_4);
        var_rt_str = tmp_assign_source_4;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_5 = tmp_tuple_unpack_1__element_2;
        assert(var_rt_fr == NULL);
        Py_INCREF(tmp_assign_source_5);
        var_rt_fr = tmp_assign_source_5;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(var_rt_str);
        tmp_expression_value_2 = var_rt_str;
        tmp_subscript_value_1 = mod_consts[38];
        tmp_cmp_expr_left_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_2, tmp_subscript_value_1, 2);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[44];
        tmp_assign_source_6 = RICH_COMPARE_EQ_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 109;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_is_unicode_str == NULL);
        var_is_unicode_str = tmp_assign_source_6;
    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_is_unicode_str);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_is_unicode_str);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 110;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_7;
        tmp_assign_source_7 = mod_consts[45];
        assert(var_atom_len == NULL);
        Py_INCREF(tmp_assign_source_7);
        var_atom_len = tmp_assign_source_7;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_8;
        tmp_assign_source_8 = mod_consts[46];
        assert(var_atom_len == NULL);
        Py_INCREF(tmp_assign_source_8);
        var_atom_len = tmp_assign_source_8;
    }
    branch_end_1:;
    {
        PyObject *tmp_called_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_start_value_1;
        PyObject *tmp_stop_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_called_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[41]);
        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_rt_str);
        tmp_expression_value_4 = var_rt_str;
        tmp_start_value_1 = mod_consts[4];
        CHECK_OBJECT(var_atom_len);
        tmp_stop_value_1 = var_atom_len;
        tmp_subscript_value_2 = MAKE_SLICEOBJ2(tmp_start_value_1, tmp_stop_value_1);
        assert(!(tmp_subscript_value_2 == NULL));
        tmp_args_element_value_3 = LOOKUP_SUBSCRIPT(tmp_expression_value_4, tmp_subscript_value_2);
        Py_DECREF(tmp_subscript_value_2);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_2);

            exception_lineno = 120;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_bfb0773ba1bcbe5dcf5795e9e54a8ada->m_frame.f_lineno = 120;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_3);
        Py_DECREF(tmp_called_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 120;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_start_value_2;
        PyObject *tmp_stop_value_2;
        PyObject *tmp_args_element_value_5;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[42]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 121;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_rt_str);
        tmp_expression_value_6 = var_rt_str;
        CHECK_OBJECT(var_atom_len);
        tmp_start_value_2 = var_atom_len;
        tmp_stop_value_2 = Py_None;
        tmp_subscript_value_3 = MAKE_SLICEOBJ2(tmp_start_value_2, tmp_stop_value_2);
        assert(!(tmp_subscript_value_3 == NULL));
        tmp_args_element_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_6, tmp_subscript_value_3);
        Py_DECREF(tmp_subscript_value_3);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_3);

            exception_lineno = 121;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_is_unicode_str);
        tmp_args_element_value_5 = var_is_unicode_str;
        frame_bfb0773ba1bcbe5dcf5795e9e54a8ada->m_frame.f_lineno = 121;
        {
            PyObject *call_args[] = {tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_call_result_2 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 121;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_2);
    }
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_iter_arg_2;
        PyObject *tmp_xrange_low_1;
        PyObject *tmp_xrange_high_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_xrange_step_1;
        tmp_xrange_low_1 = mod_consts[4];
        CHECK_OBJECT(var_rt_fr);
        tmp_len_arg_1 = var_rt_fr;
        tmp_xrange_high_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_xrange_high_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_xrange_step_1 = mod_consts[40];
        tmp_iter_arg_2 = BUILTIN_XRANGE3(tmp_xrange_low_1, tmp_xrange_high_1, tmp_xrange_step_1);
        Py_DECREF(tmp_xrange_high_1);
        if (tmp_iter_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_9 = MAKE_ITERATOR(tmp_iter_arg_2);
        Py_DECREF(tmp_iter_arg_2);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 122;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_9;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_10 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_10 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooo";
                exception_lineno = 122;
                goto try_except_handler_4;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_11 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_11;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_call_result_3;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_subscript_value_4;
        PyObject *tmp_start_value_3;
        PyObject *tmp_stop_value_3;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 123;
            type_description_1 = "ooooooo";
            goto try_except_handler_4;
        }

        tmp_expression_value_7 = par_self;
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[41]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_1 = "ooooooo";
            goto try_except_handler_4;
        }
        CHECK_OBJECT(var_rt_fr);
        tmp_expression_value_8 = var_rt_fr;
        CHECK_OBJECT(var_i);
        tmp_start_value_3 = var_i;
        CHECK_OBJECT(var_i);
        tmp_left_value_1 = var_i;
        tmp_right_value_1 = mod_consts[40];
        tmp_stop_value_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_stop_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 123;
            type_description_1 = "ooooooo";
            goto try_except_handler_4;
        }
        tmp_subscript_value_4 = MAKE_SLICEOBJ2(tmp_start_value_3, tmp_stop_value_3);
        Py_DECREF(tmp_stop_value_3);
        assert(!(tmp_subscript_value_4 == NULL));
        tmp_args_element_value_6 = LOOKUP_SUBSCRIPT(tmp_expression_value_8, tmp_subscript_value_4);
        Py_DECREF(tmp_subscript_value_4);
        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_4);

            exception_lineno = 123;
            type_description_1 = "ooooooo";
            goto try_except_handler_4;
        }
        frame_bfb0773ba1bcbe5dcf5795e9e54a8ada->m_frame.f_lineno = 123;
        tmp_call_result_3 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_4, tmp_args_element_value_6);
        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_6);
        if (tmp_call_result_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 123;
            type_description_1 = "ooooooo";
            goto try_except_handler_4;
        }
        Py_DECREF(tmp_call_result_3);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 122;
        type_description_1 = "ooooooo";
        goto try_except_handler_4;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bfb0773ba1bcbe5dcf5795e9e54a8ada);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bfb0773ba1bcbe5dcf5795e9e54a8ada);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bfb0773ba1bcbe5dcf5795e9e54a8ada, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bfb0773ba1bcbe5dcf5795e9e54a8ada->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bfb0773ba1bcbe5dcf5795e9e54a8ada, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bfb0773ba1bcbe5dcf5795e9e54a8ada,
        type_description_1,
        par_self,
        par_rt,
        var_rt_str,
        var_rt_fr,
        var_is_unicode_str,
        var_atom_len,
        var_i
    );


    // Release cached frame if used for exception.
    if (frame_bfb0773ba1bcbe5dcf5795e9e54a8ada == cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada);
        cache_frame_bfb0773ba1bcbe5dcf5795e9e54a8ada = NULL;
    }

    assertFrameObject(frame_bfb0773ba1bcbe5dcf5795e9e54a8ada);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_rt_str);
    Py_DECREF(var_rt_str);
    var_rt_str = NULL;
    CHECK_OBJECT(var_rt_fr);
    Py_DECREF(var_rt_fr);
    var_rt_fr = NULL;
    CHECK_OBJECT(var_is_unicode_str);
    Py_DECREF(var_is_unicode_str);
    var_is_unicode_str = NULL;
    CHECK_OBJECT(var_atom_len);
    Py_DECREF(var_atom_len);
    var_atom_len = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_rt_str);
    var_rt_str = NULL;
    Py_XDECREF(var_rt_fr);
    var_rt_fr = NULL;
    Py_XDECREF(var_is_unicode_str);
    var_is_unicode_str = NULL;
    Py_XDECREF(var_atom_len);
    var_atom_len = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_rt);
    Py_DECREF(par_rt);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_rt);
    Py_DECREF(par_rt);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__10__new_piece(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_curr_piece_len = NULL;
    struct Nuitka_FrameObject *frame_2bd25db8ea46eb6cfb8c0215c14df7d8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8)) {
        Py_XDECREF(cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8 = MAKE_FUNCTION_FRAME(codeobj_2bd25db8ea46eb6cfb8c0215c14df7d8, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8->m_type_description == NULL);
    frame_2bd25db8ea46eb6cfb8c0215c14df7d8 = cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2bd25db8ea46eb6cfb8c0215c14df7d8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2bd25db8ea46eb6cfb8c0215c14df7d8) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_cmp_expr_left_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[6]);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[19];
        tmp_condition_result_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_BYTES(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 126;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assattr_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[8]);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[6], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 127;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_3;
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[8]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 129;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 129;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        assert(var_curr_piece_len == NULL);
        var_curr_piece_len = tmp_assign_source_1;
    }
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(par_self);
        tmp_expression_value_5 = par_self;
        tmp_expression_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[7]);
        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[13]);
        Py_DECREF(tmp_expression_value_4);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[47];
        CHECK_OBJECT(var_curr_piece_len);
        tmp_right_value_1 = var_curr_piece_len;
        tmp_args_element_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_6 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[48]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_curr_piece_len);
        tmp_args_element_value_4 = var_curr_piece_len;
        CHECK_OBJECT(par_self);
        tmp_expression_value_7 = par_self;
        tmp_args_element_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[8]);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_2bd25db8ea46eb6cfb8c0215c14df7d8->m_frame.f_lineno = 130;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_args_element_value_1 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_2bd25db8ea46eb6cfb8c0215c14df7d8->m_frame.f_lineno = 130;
        tmp_call_result_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 130;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_end_1:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = mod_consts[19];
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[8], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 131;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bd25db8ea46eb6cfb8c0215c14df7d8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2bd25db8ea46eb6cfb8c0215c14df7d8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2bd25db8ea46eb6cfb8c0215c14df7d8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2bd25db8ea46eb6cfb8c0215c14df7d8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2bd25db8ea46eb6cfb8c0215c14df7d8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2bd25db8ea46eb6cfb8c0215c14df7d8,
        type_description_1,
        par_self,
        var_curr_piece_len
    );


    // Release cached frame if used for exception.
    if (frame_2bd25db8ea46eb6cfb8c0215c14df7d8 == cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8);
        cache_frame_2bd25db8ea46eb6cfb8c0215c14df7d8 = NULL;
    }

    assertFrameObject(frame_2bd25db8ea46eb6cfb8c0215c14df7d8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_curr_piece_len);
    var_curr_piece_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_curr_piece_len);
    var_curr_piece_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__11__save_atom(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_s = python_pars[1];
    PyObject *var_atom_len = NULL;
    PyObject *var_free_space = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    struct Nuitka_FrameObject *frame_ac662cc07409ac9a2dff6db2c1130a0c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_ac662cc07409ac9a2dff6db2c1130a0c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_ac662cc07409ac9a2dff6db2c1130a0c)) {
        Py_XDECREF(cache_frame_ac662cc07409ac9a2dff6db2c1130a0c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ac662cc07409ac9a2dff6db2c1130a0c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ac662cc07409ac9a2dff6db2c1130a0c = MAKE_FUNCTION_FRAME(codeobj_ac662cc07409ac9a2dff6db2c1130a0c, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ac662cc07409ac9a2dff6db2c1130a0c->m_type_description == NULL);
    frame_ac662cc07409ac9a2dff6db2c1130a0c = cache_frame_ac662cc07409ac9a2dff6db2c1130a0c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ac662cc07409ac9a2dff6db2c1130a0c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ac662cc07409ac9a2dff6db2c1130a0c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(par_s);
        tmp_len_arg_1 = par_s;
        tmp_assign_source_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 134;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_atom_len == NULL);
        var_atom_len = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_expression_value_1;
        tmp_left_value_1 = mod_consts[49];
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_len_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[8]);
        if (tmp_len_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 135;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = BUILTIN_LEN(tmp_len_arg_2);
        Py_DECREF(tmp_len_arg_2);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 135;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = BINARY_OPERATION_SUB_OBJECT_LONG_LONG(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        assert(!(tmp_assign_source_2 == NULL));
        assert(var_free_space == NULL);
        var_free_space = tmp_assign_source_2;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_free_space);
        tmp_cmp_expr_left_1 = var_free_space;
        CHECK_OBJECT(var_atom_len);
        tmp_cmp_expr_right_1 = var_atom_len;
        tmp_condition_result_1 = RICH_COMPARE_LT_CBOOL_LONG_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_ac662cc07409ac9a2dff6db2c1130a0c->m_frame.f_lineno = 137;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[30]);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 137;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    branch_no_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[8]);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_1__value == NULL);
        tmp_inplace_assign_1__value = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_2 = tmp_inplace_assign_1__value;
        CHECK_OBJECT(par_s);
        tmp_right_value_2 = par_s;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_2, tmp_right_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_4 = tmp_left_value_2;
        tmp_inplace_assign_1__value = tmp_assign_source_4;

    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_1 = tmp_inplace_assign_1__value;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[8], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 138;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ac662cc07409ac9a2dff6db2c1130a0c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ac662cc07409ac9a2dff6db2c1130a0c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ac662cc07409ac9a2dff6db2c1130a0c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ac662cc07409ac9a2dff6db2c1130a0c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ac662cc07409ac9a2dff6db2c1130a0c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ac662cc07409ac9a2dff6db2c1130a0c,
        type_description_1,
        par_self,
        par_s,
        var_atom_len,
        var_free_space
    );


    // Release cached frame if used for exception.
    if (frame_ac662cc07409ac9a2dff6db2c1130a0c == cache_frame_ac662cc07409ac9a2dff6db2c1130a0c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ac662cc07409ac9a2dff6db2c1130a0c);
        cache_frame_ac662cc07409ac9a2dff6db2c1130a0c = NULL;
    }

    assertFrameObject(frame_ac662cc07409ac9a2dff6db2c1130a0c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_atom_len);
    Py_DECREF(var_atom_len);
    var_atom_len = NULL;
    CHECK_OBJECT(var_free_space);
    Py_DECREF(var_free_space);
    var_free_space = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_atom_len);
    var_atom_len = NULL;
    Py_XDECREF(var_free_space);
    var_free_space = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__12__save_splitted(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_s = python_pars[1];
    PyObject *par_is_unicode_str = python_pars[2];
    PyObject *var_i = NULL;
    PyObject *var_str_len = NULL;
    PyObject *var_piece_len = NULL;
    PyObject *var_free_space = NULL;
    PyObject *var_tail_len = NULL;
    PyObject *var_need_more_space = NULL;
    PyObject *var_atom_len = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_inplace_assign_2__value = NULL;
    PyObject *tmp_inplace_assign_3__value = NULL;
    struct Nuitka_FrameObject *frame_e302e7b5bae9cf2ba4737c8ea5abaacf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[4];
        assert(var_i == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_i = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf)) {
        Py_XDECREF(cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf = MAKE_FUNCTION_FRAME(codeobj_e302e7b5bae9cf2ba4737c8ea5abaacf, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf->m_type_description == NULL);
    frame_e302e7b5bae9cf2ba4737c8ea5abaacf = cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e302e7b5bae9cf2ba4737c8ea5abaacf);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e302e7b5bae9cf2ba4737c8ea5abaacf) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(par_s);
        tmp_len_arg_1 = par_s;
        tmp_assign_source_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 142;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_str_len == NULL);
        var_str_len = tmp_assign_source_2;
    }
    loop_start_1:;
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 143;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_1 = var_i;
        if (var_str_len == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 143;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_right_1 = var_str_len;
        tmp_operand_value_1 = RICH_COMPARE_LT_OBJECT_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 143;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_expression_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 144;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_1 = par_self;
        tmp_len_arg_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[8]);
        if (tmp_len_arg_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = BUILTIN_LEN(tmp_len_arg_2);
        Py_DECREF(tmp_len_arg_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 144;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_piece_len;
            var_piece_len = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        tmp_left_value_1 = mod_consts[49];
        CHECK_OBJECT(var_piece_len);
        tmp_right_value_1 = var_piece_len;
        tmp_assign_source_4 = BINARY_OPERATION_SUB_OBJECT_LONG_LONG(tmp_left_value_1, tmp_right_value_1);
        assert(!(tmp_assign_source_4 == NULL));
        {
            PyObject *old = var_free_space;
            var_free_space = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        if (var_str_len == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[51]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 146;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_2 = var_str_len;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 146;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_right_value_2 = var_i;
        tmp_assign_source_5 = BINARY_OPERATION_SUB_OBJECT_OBJECT_OBJECT(tmp_left_value_2, tmp_right_value_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 146;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_tail_len;
            var_tail_len = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(var_free_space);
        tmp_cmp_expr_left_2 = var_free_space;
        CHECK_OBJECT(var_tail_len);
        tmp_cmp_expr_right_2 = var_tail_len;
        tmp_assign_source_6 = RICH_COMPARE_LT_OBJECT_LONG_OBJECT(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 147;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_need_more_space;
            var_need_more_space = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        bool tmp_condition_result_2;
        PyObject *tmp_operand_value_2;
        CHECK_OBJECT(var_need_more_space);
        tmp_operand_value_2 = var_need_more_space;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 149;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(var_tail_len);
        tmp_assign_source_7 = var_tail_len;
        {
            PyObject *old = var_atom_len;
            var_atom_len = tmp_assign_source_7;
            Py_INCREF(var_atom_len);
            Py_XDECREF(old);
        }

    }
    goto branch_end_2;
    branch_no_2:;
    {
        nuitka_bool tmp_condition_result_3;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_is_unicode_str);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_is_unicode_str);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 152;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        CHECK_OBJECT(var_free_space);
        tmp_left_value_3 = var_free_space;
        tmp_right_value_3 = mod_consts[52];
        tmp_assign_source_8 = BINARY_OPERATION_BITAND_OBJECT_LONG_LONG(tmp_left_value_3, tmp_right_value_3);
        assert(!(tmp_assign_source_8 == NULL));
        {
            PyObject *old = var_atom_len;
            var_atom_len = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    goto branch_end_3;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(var_free_space);
        tmp_assign_source_9 = var_free_space;
        {
            PyObject *old = var_atom_len;
            var_atom_len = tmp_assign_source_9;
            Py_INCREF(var_atom_len);
            Py_XDECREF(old);
        }

    }
    branch_end_3:;
    branch_end_2:;
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_expression_value_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_2 = par_self;
        tmp_assign_source_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[8]);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_inplace_assign_1__value;
            tmp_inplace_assign_1__value = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_start_value_1;
        PyObject *tmp_stop_value_1;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_4 = tmp_inplace_assign_1__value;
        CHECK_OBJECT(par_s);
        tmp_expression_value_3 = par_s;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }

        tmp_start_value_1 = var_i;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }

        tmp_left_value_5 = var_i;
        if (var_atom_len == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[53]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }

        tmp_right_value_5 = var_atom_len;
        tmp_stop_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_5, tmp_right_value_5);
        if (tmp_stop_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        tmp_subscript_value_1 = MAKE_SLICEOBJ2(tmp_start_value_1, tmp_stop_value_1);
        Py_DECREF(tmp_stop_value_1);
        assert(!(tmp_subscript_value_1 == NULL));
        tmp_right_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_3, tmp_subscript_value_1);
        Py_DECREF(tmp_subscript_value_1);
        if (tmp_right_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_right_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_11 = tmp_left_value_4;
        tmp_inplace_assign_1__value = tmp_assign_source_11;

    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_1 = tmp_inplace_assign_1__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }

        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[8], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 157;
            type_description_1 = "oooooooooo";
            goto try_except_handler_2;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    {
        nuitka_bool tmp_condition_result_4;
        int tmp_truth_name_2;
        CHECK_OBJECT(var_need_more_space);
        tmp_truth_name_2 = CHECK_IF_TRUE(var_need_more_space);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 159;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
    }
    branch_yes_4:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 160;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = par_self;
        frame_e302e7b5bae9cf2ba4737c8ea5abaacf->m_frame.f_lineno = 160;
        tmp_call_result_1 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[30]);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 160;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        nuitka_bool tmp_condition_result_5;
        int tmp_truth_name_3;
        CHECK_OBJECT(par_is_unicode_str);
        tmp_truth_name_3 = CHECK_IF_TRUE(par_is_unicode_str);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 161;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_expression_value_4;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 162;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_4 = par_self;
        tmp_assign_source_12 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[8]);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_inplace_assign_2__value;
            tmp_inplace_assign_2__value = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_left_value_6;
        PyObject *tmp_right_value_6;
        CHECK_OBJECT(tmp_inplace_assign_2__value);
        tmp_left_value_6 = tmp_inplace_assign_2__value;
        tmp_right_value_6 = mod_consts[54];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_BYTES_INPLACE(&tmp_left_value_6, tmp_right_value_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;
            type_description_1 = "oooooooooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_13 = tmp_left_value_6;
        tmp_inplace_assign_2__value = tmp_assign_source_13;

    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(tmp_inplace_assign_2__value);
        tmp_assattr_value_2 = tmp_inplace_assign_2__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 162;
            type_description_1 = "oooooooooo";
            goto try_except_handler_3;
        }

        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[8], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 162;
            type_description_1 = "oooooooooo";
            goto try_except_handler_3;
        }
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_2__value);
    Py_DECREF(tmp_inplace_assign_2__value);
    tmp_inplace_assign_2__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_inplace_assign_2__value);
    Py_DECREF(tmp_inplace_assign_2__value);
    tmp_inplace_assign_2__value = NULL;
    goto branch_end_5;
    branch_no_5:;
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_expression_value_5;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 164;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_5 = par_self;
        tmp_assign_source_14 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[8]);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_inplace_assign_3__value;
            tmp_inplace_assign_3__value = tmp_assign_source_14;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_left_value_7;
        PyObject *tmp_right_value_7;
        CHECK_OBJECT(tmp_inplace_assign_3__value);
        tmp_left_value_7 = tmp_inplace_assign_3__value;
        tmp_right_value_7 = mod_consts[55];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_BYTES_INPLACE(&tmp_left_value_7, tmp_right_value_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_15 = tmp_left_value_7;
        tmp_inplace_assign_3__value = tmp_assign_source_15;

    }
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        CHECK_OBJECT(tmp_inplace_assign_3__value);
        tmp_assattr_value_3 = tmp_inplace_assign_3__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 164;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }

        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[8], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 164;
            type_description_1 = "oooooooooo";
            goto try_except_handler_4;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_3__value);
    Py_DECREF(tmp_inplace_assign_3__value);
    tmp_inplace_assign_3__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_inplace_assign_3__value);
    Py_DECREF(tmp_inplace_assign_3__value);
    tmp_inplace_assign_3__value = NULL;
    branch_end_5:;
    branch_no_4:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 166;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_8 = var_i;
        if (var_atom_len == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[53]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 166;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_right_value_8 = var_atom_len;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_8, tmp_right_value_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 166;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_16 = tmp_left_value_8;
        var_i = tmp_assign_source_16;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 143;
        type_description_1 = "oooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e302e7b5bae9cf2ba4737c8ea5abaacf);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e302e7b5bae9cf2ba4737c8ea5abaacf);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e302e7b5bae9cf2ba4737c8ea5abaacf, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e302e7b5bae9cf2ba4737c8ea5abaacf->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e302e7b5bae9cf2ba4737c8ea5abaacf, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e302e7b5bae9cf2ba4737c8ea5abaacf,
        type_description_1,
        par_self,
        par_s,
        par_is_unicode_str,
        var_i,
        var_str_len,
        var_piece_len,
        var_free_space,
        var_tail_len,
        var_need_more_space,
        var_atom_len
    );


    // Release cached frame if used for exception.
    if (frame_e302e7b5bae9cf2ba4737c8ea5abaacf == cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf);
        cache_frame_e302e7b5bae9cf2ba4737c8ea5abaacf = NULL;
    }

    assertFrameObject(frame_e302e7b5bae9cf2ba4737c8ea5abaacf);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_str_len);
    var_str_len = NULL;
    Py_XDECREF(var_piece_len);
    var_piece_len = NULL;
    Py_XDECREF(var_free_space);
    var_free_space = NULL;
    Py_XDECREF(var_tail_len);
    var_tail_len = NULL;
    Py_XDECREF(var_need_more_space);
    var_need_more_space = NULL;
    Py_XDECREF(var_atom_len);
    var_atom_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_str_len);
    var_str_len = NULL;
    Py_XDECREF(var_piece_len);
    var_piece_len = NULL;
    Py_XDECREF(var_free_space);
    var_free_space = NULL;
    Py_XDECREF(var_tail_len);
    var_tail_len = NULL;
    Py_XDECREF(var_need_more_space);
    var_need_more_space = NULL;
    Py_XDECREF(var_atom_len);
    var_atom_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);
    CHECK_OBJECT(par_is_unicode_str);
    Py_DECREF(par_is_unicode_str);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_s);
    Py_DECREF(par_s);
    CHECK_OBJECT(par_is_unicode_str);
    Py_DECREF(par_is_unicode_str);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__13_get_rec_header(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a4f59d9bf2976b7bacb1e6680bd92c8c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c)) {
        Py_XDECREF(cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c = MAKE_FUNCTION_FRAME(codeobj_a4f59d9bf2976b7bacb1e6680bd92c8c, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c->m_type_description == NULL);
    frame_a4f59d9bf2976b7bacb1e6680bd92c8c = cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a4f59d9bf2976b7bacb1e6680bd92c8c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a4f59d9bf2976b7bacb1e6680bd92c8c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[56];
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[57]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[58]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 174;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 174;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_a4f59d9bf2976b7bacb1e6680bd92c8c->m_frame.f_lineno = 174;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_return_value = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 174;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a4f59d9bf2976b7bacb1e6680bd92c8c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_a4f59d9bf2976b7bacb1e6680bd92c8c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a4f59d9bf2976b7bacb1e6680bd92c8c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a4f59d9bf2976b7bacb1e6680bd92c8c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a4f59d9bf2976b7bacb1e6680bd92c8c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a4f59d9bf2976b7bacb1e6680bd92c8c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a4f59d9bf2976b7bacb1e6680bd92c8c,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a4f59d9bf2976b7bacb1e6680bd92c8c == cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c);
        cache_frame_a4f59d9bf2976b7bacb1e6680bd92c8c = NULL;
    }

    assertFrameObject(frame_a4f59d9bf2976b7bacb1e6680bd92c8c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__14_get(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_data = NULL;
    PyObject *var_chunks = NULL;
    PyObject *var_pos = NULL;
    PyObject *var_chunk_pos = NULL;
    PyObject *var_chunk = NULL;
    PyObject *var_continues = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    struct Nuitka_FrameObject *frame_53362051894014bd2ad9e909ec9bbaa6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_53362051894014bd2ad9e909ec9bbaa6 = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_53362051894014bd2ad9e909ec9bbaa6)) {
        Py_XDECREF(cache_frame_53362051894014bd2ad9e909ec9bbaa6);

#if _DEBUG_REFCOUNTS
        if (cache_frame_53362051894014bd2ad9e909ec9bbaa6 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_53362051894014bd2ad9e909ec9bbaa6 = MAKE_FUNCTION_FRAME(codeobj_53362051894014bd2ad9e909ec9bbaa6, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_53362051894014bd2ad9e909ec9bbaa6->m_type_description == NULL);
    frame_53362051894014bd2ad9e909ec9bbaa6 = cache_frame_53362051894014bd2ad9e909ec9bbaa6;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_53362051894014bd2ad9e909ec9bbaa6);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_53362051894014bd2ad9e909ec9bbaa6) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_assign_source_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 182;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_data == NULL);
        var_data = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_data);
        tmp_len_arg_1 = var_data;
        tmp_cmp_expr_left_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_cmp_expr_left_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 183;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_cmp_expr_right_1 = mod_consts[49];
        tmp_condition_result_1 = RICH_COMPARE_GT_CBOOL_LONG_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = PyList_New(0);
        assert(var_chunks == NULL);
        var_chunks = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = mod_consts[4];
        assert(var_pos == NULL);
        Py_INCREF(tmp_assign_source_3);
        var_pos = tmp_assign_source_3;
    }
    loop_start_1:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_len_arg_2;
        if (var_pos == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[59]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 186;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_2 = var_pos;
        CHECK_OBJECT(var_data);
        tmp_len_arg_2 = var_data;
        tmp_cmp_expr_right_2 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_cmp_expr_right_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = RICH_COMPARE_LT_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        Py_DECREF(tmp_cmp_expr_right_2);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 186;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    goto loop_end_1;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        if (var_pos == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[59]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 187;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_1 = var_pos;
        tmp_right_value_1 = mod_consts[49];
        tmp_assign_source_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 187;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_chunk_pos;
            var_chunk_pos = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_start_value_1;
        PyObject *tmp_stop_value_1;
        CHECK_OBJECT(var_data);
        tmp_expression_value_2 = var_data;
        if (var_pos == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[59]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 188;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_start_value_1 = var_pos;
        CHECK_OBJECT(var_chunk_pos);
        tmp_stop_value_1 = var_chunk_pos;
        tmp_subscript_value_1 = MAKE_SLICEOBJ2(tmp_start_value_1, tmp_stop_value_1);
        assert(!(tmp_subscript_value_1 == NULL));
        tmp_assign_source_5 = LOOKUP_SUBSCRIPT(tmp_expression_value_2, tmp_subscript_value_1);
        Py_DECREF(tmp_subscript_value_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 188;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_chunk;
            var_chunk = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_1;
        if (var_chunks == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[60]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 189;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_called_instance_1 = var_chunks;
        CHECK_OBJECT(var_chunk);
        tmp_args_element_value_1 = var_chunk;
        frame_53362051894014bd2ad9e909ec9bbaa6->m_frame.f_lineno = 189;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[13], tmp_args_element_value_1);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 189;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_assign_source_6;
        CHECK_OBJECT(var_chunk_pos);
        tmp_assign_source_6 = var_chunk_pos;
        {
            PyObject *old = var_pos;
            var_pos = tmp_assign_source_6;
            Py_INCREF(var_pos);
            Py_XDECREF(old);
        }

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 186;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_left_value_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_subscript_value_3;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[56];
        CHECK_OBJECT(par_self);
        tmp_expression_value_3 = par_self;
        tmp_args_element_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[57]);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (var_chunks == NULL) {
            Py_DECREF(tmp_args_element_value_3);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[60]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_4 = var_chunks;
        tmp_subscript_value_2 = mod_consts[4];
        tmp_len_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_4, tmp_subscript_value_2, 0);
        if (tmp_len_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_4 = BUILTIN_LEN(tmp_len_arg_3);
        Py_DECREF(tmp_len_arg_3);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_53362051894014bd2ad9e909ec9bbaa6->m_frame.f_lineno = 191;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_left_value_2 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_4);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        if (var_chunks == NULL) {
            Py_DECREF(tmp_left_value_2);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[60]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_5 = var_chunks;
        tmp_subscript_value_3 = mod_consts[4];
        tmp_right_value_2 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_5, tmp_subscript_value_3, 0);
        if (tmp_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_7 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_left_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 191;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_continues == NULL);
        var_continues = tmp_assign_source_7;
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_subscript_value_4;
        if (var_chunks == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[60]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 192;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_6 = var_chunks;
        tmp_subscript_value_4 = mod_consts[61];
        tmp_iter_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_6, tmp_subscript_value_4);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 192;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_8 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 192;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_8;
    }
    // Tried code:
    loop_start_2:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_9 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_9 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_2;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooo";
                exception_lineno = 192;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_9;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_10 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_chunk;
            var_chunk = tmp_assign_source_10;
            Py_INCREF(var_chunk);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_len_arg_4;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_len_arg_5;
        PyObject *tmp_args_element_value_8;
        if (var_continues == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[62]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_left_value_3 = var_continues;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_left_value_4 = mod_consts[47];
        CHECK_OBJECT(var_chunk);
        tmp_len_arg_4 = var_chunk;
        tmp_right_value_4 = BUILTIN_LEN(tmp_len_arg_4);
        if (tmp_right_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_LONG(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_right_value_4);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_value_6 = mod_consts[63];
        CHECK_OBJECT(var_chunk);
        tmp_len_arg_5 = var_chunk;
        tmp_args_element_value_7 = BUILTIN_LEN(tmp_len_arg_5);
        if (tmp_args_element_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_5);

            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_chunk);
        tmp_args_element_value_8 = var_chunk;
        frame_53362051894014bd2ad9e909ec9bbaa6->m_frame.f_lineno = 193;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_right_value_3 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_5);
        Py_DECREF(tmp_args_element_value_7);
        if (tmp_right_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 193;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_11 = tmp_left_value_3;
        var_continues = tmp_assign_source_11;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 192;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_2;
    loop_end_2:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    if (var_continues == NULL) {

        FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[62]);
        exception_tb = NULL;
        NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
        CHAIN_EXCEPTION(exception_value);

        exception_lineno = 195;
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }

    tmp_return_value = var_continues;
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_left_value_5;
        PyObject *tmp_called_instance_2;
        PyObject *tmp_right_value_5;
        CHECK_OBJECT(par_self);
        tmp_called_instance_2 = par_self;
        frame_53362051894014bd2ad9e909ec9bbaa6->m_frame.f_lineno = 197;
        tmp_left_value_5 = CALL_METHOD_NO_ARGS(tmp_called_instance_2, mod_consts[64]);
        if (tmp_left_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_data);
        tmp_right_value_5 = var_data;
        tmp_return_value = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_5, tmp_right_value_5);
        Py_DECREF(tmp_left_value_5);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 197;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_53362051894014bd2ad9e909ec9bbaa6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_53362051894014bd2ad9e909ec9bbaa6);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_53362051894014bd2ad9e909ec9bbaa6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_53362051894014bd2ad9e909ec9bbaa6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_53362051894014bd2ad9e909ec9bbaa6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_53362051894014bd2ad9e909ec9bbaa6, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_53362051894014bd2ad9e909ec9bbaa6,
        type_description_1,
        par_self,
        var_data,
        var_chunks,
        var_pos,
        var_chunk_pos,
        var_chunk,
        var_continues
    );


    // Release cached frame if used for exception.
    if (frame_53362051894014bd2ad9e909ec9bbaa6 == cache_frame_53362051894014bd2ad9e909ec9bbaa6) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_53362051894014bd2ad9e909ec9bbaa6);
        cache_frame_53362051894014bd2ad9e909ec9bbaa6 = NULL;
    }

    assertFrameObject(frame_53362051894014bd2ad9e909ec9bbaa6);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_data);
    Py_DECREF(var_data);
    var_data = NULL;
    Py_XDECREF(var_chunks);
    var_chunks = NULL;
    Py_XDECREF(var_pos);
    var_pos = NULL;
    Py_XDECREF(var_chunk_pos);
    var_chunk_pos = NULL;
    Py_XDECREF(var_chunk);
    var_chunk = NULL;
    Py_XDECREF(var_continues);
    var_continues = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_data);
    var_data = NULL;
    Py_XDECREF(var_chunks);
    var_chunks = NULL;
    Py_XDECREF(var_pos);
    var_pos = NULL;
    Py_XDECREF(var_chunk_pos);
    var_chunk_pos = NULL;
    Py_XDECREF(var_chunk);
    var_chunk = NULL;
    Py_XDECREF(var_continues);
    var_continues = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__15___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_rec_type = python_pars[1];
    struct Nuitka_FrameObject *frame_ce2d95f9111fe9843c15f610f8c15941;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ce2d95f9111fe9843c15f610f8c15941 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ce2d95f9111fe9843c15f610f8c15941)) {
        Py_XDECREF(cache_frame_ce2d95f9111fe9843c15f610f8c15941);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ce2d95f9111fe9843c15f610f8c15941 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ce2d95f9111fe9843c15f610f8c15941 = MAKE_FUNCTION_FRAME(codeobj_ce2d95f9111fe9843c15f610f8c15941, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ce2d95f9111fe9843c15f610f8c15941->m_type_description == NULL);
    frame_ce2d95f9111fe9843c15f610f8c15941 = cache_frame_ce2d95f9111fe9843c15f610f8c15941;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ce2d95f9111fe9843c15f610f8c15941);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ce2d95f9111fe9843c15f610f8c15941) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_1 = "ooNNNNN";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[65];
        tmp_args_element_value_2 = mod_consts[66];
        CHECK_OBJECT(par_rec_type);
        tmp_args_element_value_3 = par_rec_type;
        tmp_args_element_value_4 = mod_consts[67];
        tmp_args_element_value_5 = mod_consts[68];
        tmp_args_element_value_6 = mod_consts[4];
        tmp_args_element_value_7 = mod_consts[46];
        frame_ce2d95f9111fe9843c15f610f8c15941->m_frame.f_lineno = 232;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS7(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_1 = "ooNNNNN";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 232;
            type_description_1 = "ooNNNNN";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ce2d95f9111fe9843c15f610f8c15941);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ce2d95f9111fe9843c15f610f8c15941);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ce2d95f9111fe9843c15f610f8c15941, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ce2d95f9111fe9843c15f610f8c15941->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ce2d95f9111fe9843c15f610f8c15941, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ce2d95f9111fe9843c15f610f8c15941,
        type_description_1,
        par_self,
        par_rec_type,
        NULL,
        NULL,
        NULL,
        NULL,
        NULL
    );


    // Release cached frame if used for exception.
    if (frame_ce2d95f9111fe9843c15f610f8c15941 == cache_frame_ce2d95f9111fe9843c15f610f8c15941) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ce2d95f9111fe9843c15f610f8c15941);
        cache_frame_ce2d95f9111fe9843c15f610f8c15941 = NULL;
    }

    assertFrameObject(frame_ce2d95f9111fe9843c15f610f8c15941);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_rec_type);
    Py_DECREF(par_rec_type);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_rec_type);
    Py_DECREF(par_rec_type);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__16___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_b4e2ec9ef0f52c8589e17af589c9d913;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b4e2ec9ef0f52c8589e17af589c9d913 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b4e2ec9ef0f52c8589e17af589c9d913)) {
        Py_XDECREF(cache_frame_b4e2ec9ef0f52c8589e17af589c9d913);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b4e2ec9ef0f52c8589e17af589c9d913 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b4e2ec9ef0f52c8589e17af589c9d913 = MAKE_FUNCTION_FRAME(codeobj_b4e2ec9ef0f52c8589e17af589c9d913, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b4e2ec9ef0f52c8589e17af589c9d913->m_type_description == NULL);
    frame_b4e2ec9ef0f52c8589e17af589c9d913 = cache_frame_b4e2ec9ef0f52c8589e17af589c9d913;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b4e2ec9ef0f52c8589e17af589c9d913);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b4e2ec9ef0f52c8589e17af589c9d913) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 239;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_b4e2ec9ef0f52c8589e17af589c9d913->m_frame.f_lineno = 239;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_value_1, mod_consts[69]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 239;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 239;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b4e2ec9ef0f52c8589e17af589c9d913);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b4e2ec9ef0f52c8589e17af589c9d913);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b4e2ec9ef0f52c8589e17af589c9d913, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b4e2ec9ef0f52c8589e17af589c9d913->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b4e2ec9ef0f52c8589e17af589c9d913, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b4e2ec9ef0f52c8589e17af589c9d913,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_b4e2ec9ef0f52c8589e17af589c9d913 == cache_frame_b4e2ec9ef0f52c8589e17af589c9d913) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b4e2ec9ef0f52c8589e17af589c9d913);
        cache_frame_b4e2ec9ef0f52c8589e17af589c9d913 = NULL;
    }

    assertFrameObject(frame_b4e2ec9ef0f52c8589e17af589c9d913);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__17___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_f665ab6ab8cbd5e425e76fcdc0d39216;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216)) {
        Py_XDECREF(cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216 = MAKE_FUNCTION_FRAME(codeobj_f665ab6ab8cbd5e425e76fcdc0d39216, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216->m_type_description == NULL);
    frame_f665ab6ab8cbd5e425e76fcdc0d39216 = cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f665ab6ab8cbd5e425e76fcdc0d39216);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f665ab6ab8cbd5e425e76fcdc0d39216) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = mod_consts[19];
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 246;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f665ab6ab8cbd5e425e76fcdc0d39216);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f665ab6ab8cbd5e425e76fcdc0d39216);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f665ab6ab8cbd5e425e76fcdc0d39216, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f665ab6ab8cbd5e425e76fcdc0d39216->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f665ab6ab8cbd5e425e76fcdc0d39216, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f665ab6ab8cbd5e425e76fcdc0d39216,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_f665ab6ab8cbd5e425e76fcdc0d39216 == cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216);
        cache_frame_f665ab6ab8cbd5e425e76fcdc0d39216 = NULL;
    }

    assertFrameObject(frame_f665ab6ab8cbd5e425e76fcdc0d39216);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__18___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_5e44a1e371ea3da467db00e790928a98;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_5e44a1e371ea3da467db00e790928a98 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5e44a1e371ea3da467db00e790928a98)) {
        Py_XDECREF(cache_frame_5e44a1e371ea3da467db00e790928a98);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5e44a1e371ea3da467db00e790928a98 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5e44a1e371ea3da467db00e790928a98 = MAKE_FUNCTION_FRAME(codeobj_5e44a1e371ea3da467db00e790928a98, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5e44a1e371ea3da467db00e790928a98->m_type_description == NULL);
    frame_5e44a1e371ea3da467db00e790928a98 = cache_frame_5e44a1e371ea3da467db00e790928a98;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5e44a1e371ea3da467db00e790928a98);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5e44a1e371ea3da467db00e790928a98) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_5e44a1e371ea3da467db00e790928a98->m_frame.f_lineno = 253;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[70]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 253;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5e44a1e371ea3da467db00e790928a98);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5e44a1e371ea3da467db00e790928a98);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5e44a1e371ea3da467db00e790928a98, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5e44a1e371ea3da467db00e790928a98->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5e44a1e371ea3da467db00e790928a98, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5e44a1e371ea3da467db00e790928a98,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_5e44a1e371ea3da467db00e790928a98 == cache_frame_5e44a1e371ea3da467db00e790928a98) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5e44a1e371ea3da467db00e790928a98);
        cache_frame_5e44a1e371ea3da467db00e790928a98 = NULL;
    }

    assertFrameObject(frame_5e44a1e371ea3da467db00e790928a98);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__19___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_owner = python_pars[1];
    PyObject *var_uowner = NULL;
    PyObject *var_uowner_len = NULL;
    struct Nuitka_FrameObject *frame_99dae25125b369f4029a1a0b32c64412;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_99dae25125b369f4029a1a0b32c64412 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_99dae25125b369f4029a1a0b32c64412)) {
        Py_XDECREF(cache_frame_99dae25125b369f4029a1a0b32c64412);

#if _DEBUG_REFCOUNTS
        if (cache_frame_99dae25125b369f4029a1a0b32c64412 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_99dae25125b369f4029a1a0b32c64412 = MAKE_FUNCTION_FRAME(codeobj_99dae25125b369f4029a1a0b32c64412, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_99dae25125b369f4029a1a0b32c64412->m_type_description == NULL);
    frame_99dae25125b369f4029a1a0b32c64412 = cache_frame_99dae25125b369f4029a1a0b32c64412;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_99dae25125b369f4029a1a0b32c64412);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_99dae25125b369f4029a1a0b32c64412) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_owner);
        tmp_expression_value_1 = par_owner;
        tmp_subscript_value_1 = mod_consts[71];
        tmp_assign_source_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 267;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_uowner == NULL);
        var_uowner = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_uowner);
        tmp_len_arg_1 = var_uowner;
        tmp_assign_source_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 268;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_uowner_len == NULL);
        var_uowner_len = tmp_assign_source_2;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_isinstance_inst_1;
        PyObject *tmp_isinstance_cls_1;
        CHECK_OBJECT(var_uowner);
        tmp_isinstance_inst_1 = var_uowner;
        tmp_isinstance_cls_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[10]);

        if (unlikely(tmp_isinstance_cls_1 == NULL)) {
            tmp_isinstance_cls_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[10]);
        }

        if (tmp_isinstance_cls_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 269;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_res = PyObject_IsInstance(tmp_isinstance_inst_1, tmp_isinstance_cls_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 269;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res != 0) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(var_uowner);
        tmp_expression_value_2 = var_uowner;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[72]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 270;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        frame_99dae25125b369f4029a1a0b32c64412->m_frame.f_lineno = 270;
        tmp_assign_source_3 = CALL_FUNCTION_WITH_POSARGS1(tmp_called_value_1, mod_consts[73]);

        Py_DECREF(tmp_called_value_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 270;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_uowner;
            assert(old != NULL);
            var_uowner = tmp_assign_source_3;
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[74];
        CHECK_OBJECT(var_uowner_len);
        tmp_tuple_element_1 = var_uowner_len;
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_left_value_2;
            PyObject *tmp_right_value_2;
            PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_1);
            tmp_left_value_2 = mod_consts[75];
            CHECK_OBJECT(var_uowner_len);
            tmp_right_value_2 = var_uowner_len;
            tmp_tuple_element_1 = BINARY_OPERATION_SUB_OBJECT_LONG_LONG(tmp_left_value_2, tmp_right_value_2);
            assert(!(tmp_tuple_element_1 == NULL));
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_1);
        }
        tmp_args_element_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_args_element_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        if (var_uowner == NULL) {
            Py_DECREF(tmp_args_element_value_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[76]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_2 = var_uowner;
        tmp_left_value_3 = mod_consts[77];
        tmp_left_value_4 = mod_consts[75];
        CHECK_OBJECT(var_uowner_len);
        tmp_right_value_4 = var_uowner_len;
        tmp_right_value_3 = BINARY_OPERATION_SUB_OBJECT_LONG_LONG(tmp_left_value_4, tmp_right_value_4);
        assert(!(tmp_right_value_3 == NULL));
        tmp_args_element_value_3 = BINARY_OPERATION_MULT_OBJECT_BYTES_LONG(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        assert(!(tmp_args_element_value_3 == NULL));
        frame_99dae25125b369f4029a1a0b32c64412->m_frame.f_lineno = 271;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_1);
        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 271;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_99dae25125b369f4029a1a0b32c64412);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_99dae25125b369f4029a1a0b32c64412);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_99dae25125b369f4029a1a0b32c64412, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_99dae25125b369f4029a1a0b32c64412->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_99dae25125b369f4029a1a0b32c64412, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_99dae25125b369f4029a1a0b32c64412,
        type_description_1,
        par_self,
        par_owner,
        var_uowner,
        var_uowner_len
    );


    // Release cached frame if used for exception.
    if (frame_99dae25125b369f4029a1a0b32c64412 == cache_frame_99dae25125b369f4029a1a0b32c64412) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_99dae25125b369f4029a1a0b32c64412);
        cache_frame_99dae25125b369f4029a1a0b32c64412 = NULL;
    }

    assertFrameObject(frame_99dae25125b369f4029a1a0b32c64412);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_uowner);
    var_uowner = NULL;
    CHECK_OBJECT(var_uowner_len);
    Py_DECREF(var_uowner_len);
    var_uowner_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_uowner);
    var_uowner = NULL;
    Py_XDECREF(var_uowner_len);
    var_uowner_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_owner);
    Py_DECREF(par_owner);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_owner);
    Py_DECREF(par_owner);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__20___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_86d0e9d30b5cab15a40e0e253242d11b;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_86d0e9d30b5cab15a40e0e253242d11b = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_86d0e9d30b5cab15a40e0e253242d11b)) {
        Py_XDECREF(cache_frame_86d0e9d30b5cab15a40e0e253242d11b);

#if _DEBUG_REFCOUNTS
        if (cache_frame_86d0e9d30b5cab15a40e0e253242d11b == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_86d0e9d30b5cab15a40e0e253242d11b = MAKE_FUNCTION_FRAME(codeobj_86d0e9d30b5cab15a40e0e253242d11b, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_86d0e9d30b5cab15a40e0e253242d11b->m_type_description == NULL);
    frame_86d0e9d30b5cab15a40e0e253242d11b = cache_frame_86d0e9d30b5cab15a40e0e253242d11b;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_86d0e9d30b5cab15a40e0e253242d11b);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_86d0e9d30b5cab15a40e0e253242d11b) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 289;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_86d0e9d30b5cab15a40e0e253242d11b->m_frame.f_lineno = 289;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[70]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 289;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 289;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_86d0e9d30b5cab15a40e0e253242d11b);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_86d0e9d30b5cab15a40e0e253242d11b);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_86d0e9d30b5cab15a40e0e253242d11b, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_86d0e9d30b5cab15a40e0e253242d11b->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_86d0e9d30b5cab15a40e0e253242d11b, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_86d0e9d30b5cab15a40e0e253242d11b,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_86d0e9d30b5cab15a40e0e253242d11b == cache_frame_86d0e9d30b5cab15a40e0e253242d11b) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_86d0e9d30b5cab15a40e0e253242d11b);
        cache_frame_86d0e9d30b5cab15a40e0e253242d11b = NULL;
    }

    assertFrameObject(frame_86d0e9d30b5cab15a40e0e253242d11b);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__21___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_sheetcount = python_pars[1];
    PyObject *var_i = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    struct Nuitka_FrameObject *frame_2de85c7660081111ac8f25350d5e640c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    static struct Nuitka_FrameObject *cache_frame_2de85c7660081111ac8f25350d5e640c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_2de85c7660081111ac8f25350d5e640c)) {
        Py_XDECREF(cache_frame_2de85c7660081111ac8f25350d5e640c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2de85c7660081111ac8f25350d5e640c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2de85c7660081111ac8f25350d5e640c = MAKE_FUNCTION_FRAME(codeobj_2de85c7660081111ac8f25350d5e640c, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2de85c7660081111ac8f25350d5e640c->m_type_description == NULL);
    frame_2de85c7660081111ac8f25350d5e640c = cache_frame_2de85c7660081111ac8f25350d5e640c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2de85c7660081111ac8f25350d5e640c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2de85c7660081111ac8f25350d5e640c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_xrange_low_1;
        CHECK_OBJECT(par_sheetcount);
        tmp_xrange_low_1 = par_sheetcount;
        tmp_iter_arg_1 = BUILTIN_XRANGE1(tmp_xrange_low_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 296;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooo";
                exception_lineno = 296;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_3 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_3;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_expression_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_1 = par_self;
        tmp_assign_source_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_inplace_assign_1__value;
            tmp_inplace_assign_1__value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_1 = tmp_inplace_assign_1__value;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(var_i);
        tmp_left_value_2 = var_i;
        tmp_right_value_2 = mod_consts[12];
        tmp_args_element_value_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_2, tmp_right_value_2);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        frame_2de85c7660081111ac8f25350d5e640c->m_frame.f_lineno = 297;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_right_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
        tmp_assign_source_5 = tmp_left_value_1;
        tmp_inplace_assign_1__value = tmp_assign_source_5;

    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_1 = tmp_inplace_assign_1__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }

        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 297;
            type_description_1 = "ooo";
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 296;
        type_description_1 = "ooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2de85c7660081111ac8f25350d5e640c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2de85c7660081111ac8f25350d5e640c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2de85c7660081111ac8f25350d5e640c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2de85c7660081111ac8f25350d5e640c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2de85c7660081111ac8f25350d5e640c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2de85c7660081111ac8f25350d5e640c,
        type_description_1,
        par_self,
        par_sheetcount,
        var_i
    );


    // Release cached frame if used for exception.
    if (frame_2de85c7660081111ac8f25350d5e640c == cache_frame_2de85c7660081111ac8f25350d5e640c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2de85c7660081111ac8f25350d5e640c);
        cache_frame_2de85c7660081111ac8f25350d5e640c = NULL;
    }

    assertFrameObject(frame_2de85c7660081111ac8f25350d5e640c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_i);
    var_i = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_i);
    var_i = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_sheetcount);
    Py_DECREF(par_sheetcount);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_sheetcount);
    Py_DECREF(par_sheetcount);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__22___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_9ade00131c317ea67b273aafeac5dd28;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_9ade00131c317ea67b273aafeac5dd28 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9ade00131c317ea67b273aafeac5dd28)) {
        Py_XDECREF(cache_frame_9ade00131c317ea67b273aafeac5dd28);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9ade00131c317ea67b273aafeac5dd28 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9ade00131c317ea67b273aafeac5dd28 = MAKE_FUNCTION_FRAME(codeobj_9ade00131c317ea67b273aafeac5dd28, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9ade00131c317ea67b273aafeac5dd28->m_type_description == NULL);
    frame_9ade00131c317ea67b273aafeac5dd28 = cache_frame_9ade00131c317ea67b273aafeac5dd28;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9ade00131c317ea67b273aafeac5dd28);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9ade00131c317ea67b273aafeac5dd28) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_9ade00131c317ea67b273aafeac5dd28->m_frame.f_lineno = 304;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS3(tmp_called_value_1, mod_consts[79]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 304;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9ade00131c317ea67b273aafeac5dd28);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9ade00131c317ea67b273aafeac5dd28);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9ade00131c317ea67b273aafeac5dd28, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9ade00131c317ea67b273aafeac5dd28->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9ade00131c317ea67b273aafeac5dd28, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9ade00131c317ea67b273aafeac5dd28,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_9ade00131c317ea67b273aafeac5dd28 == cache_frame_9ade00131c317ea67b273aafeac5dd28) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9ade00131c317ea67b273aafeac5dd28);
        cache_frame_9ade00131c317ea67b273aafeac5dd28 = NULL;
    }

    assertFrameObject(frame_9ade00131c317ea67b273aafeac5dd28);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__23___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_wndprotect = python_pars[1];
    struct Nuitka_FrameObject *frame_9cf78652b6901c06289059e25df82a50;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_9cf78652b6901c06289059e25df82a50 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9cf78652b6901c06289059e25df82a50)) {
        Py_XDECREF(cache_frame_9cf78652b6901c06289059e25df82a50);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9cf78652b6901c06289059e25df82a50 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9cf78652b6901c06289059e25df82a50 = MAKE_FUNCTION_FRAME(codeobj_9cf78652b6901c06289059e25df82a50, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9cf78652b6901c06289059e25df82a50->m_type_description == NULL);
    frame_9cf78652b6901c06289059e25df82a50 = cache_frame_9cf78652b6901c06289059e25df82a50;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9cf78652b6901c06289059e25df82a50);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9cf78652b6901c06289059e25df82a50) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_wndprotect);
        tmp_args_element_value_2 = par_wndprotect;
        frame_9cf78652b6901c06289059e25df82a50->m_frame.f_lineno = 316;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 316;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9cf78652b6901c06289059e25df82a50);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9cf78652b6901c06289059e25df82a50);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9cf78652b6901c06289059e25df82a50, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9cf78652b6901c06289059e25df82a50->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9cf78652b6901c06289059e25df82a50, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9cf78652b6901c06289059e25df82a50,
        type_description_1,
        par_self,
        par_wndprotect
    );


    // Release cached frame if used for exception.
    if (frame_9cf78652b6901c06289059e25df82a50 == cache_frame_9cf78652b6901c06289059e25df82a50) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9cf78652b6901c06289059e25df82a50);
        cache_frame_9cf78652b6901c06289059e25df82a50 = NULL;
    }

    assertFrameObject(frame_9cf78652b6901c06289059e25df82a50);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_wndprotect);
    Py_DECREF(par_wndprotect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_wndprotect);
    Py_DECREF(par_wndprotect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__24___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_objprotect = python_pars[1];
    struct Nuitka_FrameObject *frame_72f6a91b1f075fcc9daad85e14b429fc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_72f6a91b1f075fcc9daad85e14b429fc = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_72f6a91b1f075fcc9daad85e14b429fc)) {
        Py_XDECREF(cache_frame_72f6a91b1f075fcc9daad85e14b429fc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_72f6a91b1f075fcc9daad85e14b429fc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_72f6a91b1f075fcc9daad85e14b429fc = MAKE_FUNCTION_FRAME(codeobj_72f6a91b1f075fcc9daad85e14b429fc, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_72f6a91b1f075fcc9daad85e14b429fc->m_type_description == NULL);
    frame_72f6a91b1f075fcc9daad85e14b429fc = cache_frame_72f6a91b1f075fcc9daad85e14b429fc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_72f6a91b1f075fcc9daad85e14b429fc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_72f6a91b1f075fcc9daad85e14b429fc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_objprotect);
        tmp_args_element_value_2 = par_objprotect;
        frame_72f6a91b1f075fcc9daad85e14b429fc->m_frame.f_lineno = 329;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 329;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_72f6a91b1f075fcc9daad85e14b429fc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_72f6a91b1f075fcc9daad85e14b429fc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_72f6a91b1f075fcc9daad85e14b429fc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_72f6a91b1f075fcc9daad85e14b429fc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_72f6a91b1f075fcc9daad85e14b429fc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_72f6a91b1f075fcc9daad85e14b429fc,
        type_description_1,
        par_self,
        par_objprotect
    );


    // Release cached frame if used for exception.
    if (frame_72f6a91b1f075fcc9daad85e14b429fc == cache_frame_72f6a91b1f075fcc9daad85e14b429fc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_72f6a91b1f075fcc9daad85e14b429fc);
        cache_frame_72f6a91b1f075fcc9daad85e14b429fc = NULL;
    }

    assertFrameObject(frame_72f6a91b1f075fcc9daad85e14b429fc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_objprotect);
    Py_DECREF(par_objprotect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_objprotect);
    Py_DECREF(par_objprotect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__25___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_scenprotect = python_pars[1];
    struct Nuitka_FrameObject *frame_a067413cbfb2faf70ef72769156d2f07;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a067413cbfb2faf70ef72769156d2f07 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a067413cbfb2faf70ef72769156d2f07)) {
        Py_XDECREF(cache_frame_a067413cbfb2faf70ef72769156d2f07);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a067413cbfb2faf70ef72769156d2f07 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a067413cbfb2faf70ef72769156d2f07 = MAKE_FUNCTION_FRAME(codeobj_a067413cbfb2faf70ef72769156d2f07, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a067413cbfb2faf70ef72769156d2f07->m_type_description == NULL);
    frame_a067413cbfb2faf70ef72769156d2f07 = cache_frame_a067413cbfb2faf70ef72769156d2f07;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a067413cbfb2faf70ef72769156d2f07);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a067413cbfb2faf70ef72769156d2f07) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 342;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_scenprotect);
        tmp_args_element_value_2 = par_scenprotect;
        frame_a067413cbfb2faf70ef72769156d2f07->m_frame.f_lineno = 342;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 342;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 342;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a067413cbfb2faf70ef72769156d2f07);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a067413cbfb2faf70ef72769156d2f07);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a067413cbfb2faf70ef72769156d2f07, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a067413cbfb2faf70ef72769156d2f07->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a067413cbfb2faf70ef72769156d2f07, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a067413cbfb2faf70ef72769156d2f07,
        type_description_1,
        par_self,
        par_scenprotect
    );


    // Release cached frame if used for exception.
    if (frame_a067413cbfb2faf70ef72769156d2f07 == cache_frame_a067413cbfb2faf70ef72769156d2f07) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a067413cbfb2faf70ef72769156d2f07);
        cache_frame_a067413cbfb2faf70ef72769156d2f07 = NULL;
    }

    assertFrameObject(frame_a067413cbfb2faf70ef72769156d2f07);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_scenprotect);
    Py_DECREF(par_scenprotect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_scenprotect);
    Py_DECREF(par_scenprotect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__26___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_protect = python_pars[1];
    struct Nuitka_FrameObject *frame_79e85dcc3f25428b0b4823f69928c417;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_79e85dcc3f25428b0b4823f69928c417 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_79e85dcc3f25428b0b4823f69928c417)) {
        Py_XDECREF(cache_frame_79e85dcc3f25428b0b4823f69928c417);

#if _DEBUG_REFCOUNTS
        if (cache_frame_79e85dcc3f25428b0b4823f69928c417 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_79e85dcc3f25428b0b4823f69928c417 = MAKE_FUNCTION_FRAME(codeobj_79e85dcc3f25428b0b4823f69928c417, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_79e85dcc3f25428b0b4823f69928c417->m_type_description == NULL);
    frame_79e85dcc3f25428b0b4823f69928c417 = cache_frame_79e85dcc3f25428b0b4823f69928c417;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_79e85dcc3f25428b0b4823f69928c417);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_79e85dcc3f25428b0b4823f69928c417) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 355;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_protect);
        tmp_args_element_value_2 = par_protect;
        frame_79e85dcc3f25428b0b4823f69928c417->m_frame.f_lineno = 355;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 355;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 355;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_79e85dcc3f25428b0b4823f69928c417);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_79e85dcc3f25428b0b4823f69928c417);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_79e85dcc3f25428b0b4823f69928c417, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_79e85dcc3f25428b0b4823f69928c417->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_79e85dcc3f25428b0b4823f69928c417, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_79e85dcc3f25428b0b4823f69928c417,
        type_description_1,
        par_self,
        par_protect
    );


    // Release cached frame if used for exception.
    if (frame_79e85dcc3f25428b0b4823f69928c417 == cache_frame_79e85dcc3f25428b0b4823f69928c417) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_79e85dcc3f25428b0b4823f69928c417);
        cache_frame_79e85dcc3f25428b0b4823f69928c417 = NULL;
    }

    assertFrameObject(frame_79e85dcc3f25428b0b4823f69928c417);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_protect);
    Py_DECREF(par_protect);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_protect);
    Py_DECREF(par_protect);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__27_passwd_hash(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_plaintext = python_pars[1];
    PyObject *var_passwd_hash = NULL;
    PyObject *var_i = NULL;
    PyObject *var_char = NULL;
    PyObject *var_c = NULL;
    PyObject *var_low_15 = NULL;
    PyObject *var_high_15 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_03e3ce7c34485ee489369c620eb9c805;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_return_value = NULL;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_03e3ce7c34485ee489369c620eb9c805 = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_03e3ce7c34485ee489369c620eb9c805)) {
        Py_XDECREF(cache_frame_03e3ce7c34485ee489369c620eb9c805);

#if _DEBUG_REFCOUNTS
        if (cache_frame_03e3ce7c34485ee489369c620eb9c805 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_03e3ce7c34485ee489369c620eb9c805 = MAKE_FUNCTION_FRAME(codeobj_03e3ce7c34485ee489369c620eb9c805, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_03e3ce7c34485ee489369c620eb9c805->m_type_description == NULL);
    frame_03e3ce7c34485ee489369c620eb9c805 = cache_frame_03e3ce7c34485ee489369c620eb9c805;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_03e3ce7c34485ee489369c620eb9c805);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_03e3ce7c34485ee489369c620eb9c805) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_plaintext);
        tmp_cmp_expr_left_1 = par_plaintext;
        tmp_cmp_expr_right_1 = mod_consts[26];
        tmp_condition_result_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 369;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    tmp_return_value = mod_consts[4];
    Py_INCREF(tmp_return_value);
    goto frame_return_exit_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[4];
        assert(var_passwd_hash == NULL);
        Py_INCREF(tmp_assign_source_1);
        var_passwd_hash = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = (PyObject *)&PyEnum_Type;
        CHECK_OBJECT(par_plaintext);
        tmp_args_element_value_1 = par_plaintext;
        frame_03e3ce7c34485ee489369c620eb9c805->m_frame.f_lineno = 373;
        tmp_iter_arg_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_2;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_3;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_3 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_3 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "oooooooo";
                exception_lineno = 373;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 373;
            type_description_1 = "oooooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooo";
            exception_lineno = 373;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooo";
            exception_lineno = 373;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooo";
                    exception_lineno = 373;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[16];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooo";
            exception_lineno = 373;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_i;
            var_i = tmp_assign_source_7;
            Py_INCREF(var_i);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_char;
            var_char = tmp_assign_source_8;
            Py_INCREF(var_char);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_left_value_1;
        PyObject *tmp_ord_arg_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        CHECK_OBJECT(var_char);
        tmp_ord_arg_1 = var_char;
        tmp_left_value_1 = BUILTIN_ORD(tmp_ord_arg_1);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 374;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_i);
        tmp_left_value_2 = var_i;
        tmp_right_value_2 = mod_consts[12];
        tmp_right_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_2, tmp_right_value_2);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_1);

            exception_lineno = 374;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_9 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_left_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 374;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_c;
            var_c = tmp_assign_source_9;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        CHECK_OBJECT(var_c);
        tmp_left_value_3 = var_c;
        tmp_right_value_3 = mod_consts[80];
        tmp_assign_source_10 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_3, tmp_right_value_3);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 375;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_low_15;
            var_low_15 = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        CHECK_OBJECT(var_c);
        tmp_left_value_4 = var_c;
        tmp_right_value_4 = mod_consts[81];
        tmp_assign_source_11 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_4, tmp_right_value_4);
        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 376;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_high_15;
            var_high_15 = tmp_assign_source_11;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        CHECK_OBJECT(var_high_15);
        tmp_left_value_5 = var_high_15;
        tmp_right_value_5 = mod_consts[82];
        tmp_assign_source_12 = BINARY_OPERATION_RSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_5, tmp_right_value_5);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 377;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_high_15;
            assert(old != NULL);
            var_high_15 = tmp_assign_source_12;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_left_value_6;
        PyObject *tmp_right_value_6;
        CHECK_OBJECT(var_low_15);
        tmp_left_value_6 = var_low_15;
        CHECK_OBJECT(var_high_15);
        tmp_right_value_6 = var_high_15;
        tmp_assign_source_13 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_6, tmp_right_value_6);
        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 378;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_c;
            assert(old != NULL);
            var_c = tmp_assign_source_13;
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_left_value_7;
        PyObject *tmp_right_value_7;
        if (var_passwd_hash == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[83]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 379;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }

        tmp_left_value_7 = var_passwd_hash;
        CHECK_OBJECT(var_c);
        tmp_right_value_7 = var_c;
        tmp_result = BINARY_OPERATION_BITXOR_OBJECT_OBJECT_INPLACE(&tmp_left_value_7, tmp_right_value_7);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 379;
            type_description_1 = "oooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_14 = tmp_left_value_7;
        var_passwd_hash = tmp_assign_source_14;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 373;
        type_description_1 = "oooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_3;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        PyObject *tmp_len_arg_1;
        if (var_passwd_hash == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[83]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 380;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_8 = var_passwd_hash;
        CHECK_OBJECT(par_plaintext);
        tmp_len_arg_1 = par_plaintext;
        tmp_right_value_8 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_right_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_result = BINARY_OPERATION_BITXOR_OBJECT_LONG_INPLACE(&tmp_left_value_8, tmp_right_value_8);
        Py_DECREF(tmp_right_value_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 380;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_15 = tmp_left_value_8;
        var_passwd_hash = tmp_assign_source_15;

    }
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_left_value_9;
        PyObject *tmp_right_value_9;
        CHECK_OBJECT(var_passwd_hash);
        tmp_left_value_9 = var_passwd_hash;
        tmp_right_value_9 = mod_consts[84];
        tmp_result = BINARY_OPERATION_BITXOR_OBJECT_LONG_INPLACE(&tmp_left_value_9, tmp_right_value_9);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 381;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_16 = tmp_left_value_9;
        var_passwd_hash = tmp_assign_source_16;

    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_03e3ce7c34485ee489369c620eb9c805);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_03e3ce7c34485ee489369c620eb9c805);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_03e3ce7c34485ee489369c620eb9c805);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_03e3ce7c34485ee489369c620eb9c805, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_03e3ce7c34485ee489369c620eb9c805->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_03e3ce7c34485ee489369c620eb9c805, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_03e3ce7c34485ee489369c620eb9c805,
        type_description_1,
        par_self,
        par_plaintext,
        var_passwd_hash,
        var_i,
        var_char,
        var_c,
        var_low_15,
        var_high_15
    );


    // Release cached frame if used for exception.
    if (frame_03e3ce7c34485ee489369c620eb9c805 == cache_frame_03e3ce7c34485ee489369c620eb9c805) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_03e3ce7c34485ee489369c620eb9c805);
        cache_frame_03e3ce7c34485ee489369c620eb9c805 = NULL;
    }

    assertFrameObject(frame_03e3ce7c34485ee489369c620eb9c805);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(var_passwd_hash);
    tmp_return_value = var_passwd_hash;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_passwd_hash);
    var_passwd_hash = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_char);
    var_char = NULL;
    Py_XDECREF(var_c);
    var_c = NULL;
    Py_XDECREF(var_low_15);
    var_low_15 = NULL;
    Py_XDECREF(var_high_15);
    var_high_15 = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_passwd_hash);
    var_passwd_hash = NULL;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_char);
    var_char = NULL;
    Py_XDECREF(var_c);
    var_c = NULL;
    Py_XDECREF(var_low_15);
    var_low_15 = NULL;
    Py_XDECREF(var_high_15);
    var_high_15 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_plaintext);
    Py_DECREF(par_plaintext);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_plaintext);
    Py_DECREF(par_plaintext);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__28___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_passwd = python_pars[1];
    struct Nuitka_FrameObject *frame_51a240c671a938749056622bc2581c37;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_51a240c671a938749056622bc2581c37 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_51a240c671a938749056622bc2581c37)) {
        Py_XDECREF(cache_frame_51a240c671a938749056622bc2581c37);

#if _DEBUG_REFCOUNTS
        if (cache_frame_51a240c671a938749056622bc2581c37 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_51a240c671a938749056622bc2581c37 = MAKE_FUNCTION_FRAME(codeobj_51a240c671a938749056622bc2581c37, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_51a240c671a938749056622bc2581c37->m_type_description == NULL);
    frame_51a240c671a938749056622bc2581c37 = cache_frame_51a240c671a938749056622bc2581c37;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_51a240c671a938749056622bc2581c37);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_51a240c671a938749056622bc2581c37) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        CHECK_OBJECT(par_passwd);
        tmp_args_element_value_3 = par_passwd;
        frame_51a240c671a938749056622bc2581c37->m_frame.f_lineno = 385;
        tmp_args_element_value_2 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[83], tmp_args_element_value_3);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_51a240c671a938749056622bc2581c37->m_frame.f_lineno = 385;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 385;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51a240c671a938749056622bc2581c37);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51a240c671a938749056622bc2581c37);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_51a240c671a938749056622bc2581c37, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_51a240c671a938749056622bc2581c37->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_51a240c671a938749056622bc2581c37, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_51a240c671a938749056622bc2581c37,
        type_description_1,
        par_self,
        par_passwd
    );


    // Release cached frame if used for exception.
    if (frame_51a240c671a938749056622bc2581c37 == cache_frame_51a240c671a938749056622bc2581c37) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_51a240c671a938749056622bc2581c37);
        cache_frame_51a240c671a938749056622bc2581c37 = NULL;
    }

    assertFrameObject(frame_51a240c671a938749056622bc2581c37);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_passwd);
    Py_DECREF(par_passwd);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_passwd);
    Py_DECREF(par_passwd);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__29___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_2500c7f6f766c749297015a4f9d79917;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_2500c7f6f766c749297015a4f9d79917 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2500c7f6f766c749297015a4f9d79917)) {
        Py_XDECREF(cache_frame_2500c7f6f766c749297015a4f9d79917);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2500c7f6f766c749297015a4f9d79917 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2500c7f6f766c749297015a4f9d79917 = MAKE_FUNCTION_FRAME(codeobj_2500c7f6f766c749297015a4f9d79917, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2500c7f6f766c749297015a4f9d79917->m_type_description == NULL);
    frame_2500c7f6f766c749297015a4f9d79917 = cache_frame_2500c7f6f766c749297015a4f9d79917;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2500c7f6f766c749297015a4f9d79917);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2500c7f6f766c749297015a4f9d79917) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_2500c7f6f766c749297015a4f9d79917->m_frame.f_lineno = 392;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[70]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 392;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2500c7f6f766c749297015a4f9d79917);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2500c7f6f766c749297015a4f9d79917);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2500c7f6f766c749297015a4f9d79917, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2500c7f6f766c749297015a4f9d79917->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2500c7f6f766c749297015a4f9d79917, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2500c7f6f766c749297015a4f9d79917,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_2500c7f6f766c749297015a4f9d79917 == cache_frame_2500c7f6f766c749297015a4f9d79917) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2500c7f6f766c749297015a4f9d79917);
        cache_frame_2500c7f6f766c749297015a4f9d79917 = NULL;
    }

    assertFrameObject(frame_2500c7f6f766c749297015a4f9d79917);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__30___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_184cc342b48440d31b13131520963364;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_184cc342b48440d31b13131520963364 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_184cc342b48440d31b13131520963364)) {
        Py_XDECREF(cache_frame_184cc342b48440d31b13131520963364);

#if _DEBUG_REFCOUNTS
        if (cache_frame_184cc342b48440d31b13131520963364 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_184cc342b48440d31b13131520963364 = MAKE_FUNCTION_FRAME(codeobj_184cc342b48440d31b13131520963364, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_184cc342b48440d31b13131520963364->m_type_description == NULL);
    frame_184cc342b48440d31b13131520963364 = cache_frame_184cc342b48440d31b13131520963364;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_184cc342b48440d31b13131520963364);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_184cc342b48440d31b13131520963364) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_184cc342b48440d31b13131520963364->m_frame.f_lineno = 399;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[70]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 399;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_184cc342b48440d31b13131520963364);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_184cc342b48440d31b13131520963364);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_184cc342b48440d31b13131520963364, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_184cc342b48440d31b13131520963364->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_184cc342b48440d31b13131520963364, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_184cc342b48440d31b13131520963364,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_184cc342b48440d31b13131520963364 == cache_frame_184cc342b48440d31b13131520963364) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_184cc342b48440d31b13131520963364);
        cache_frame_184cc342b48440d31b13131520963364 = NULL;
    }

    assertFrameObject(frame_184cc342b48440d31b13131520963364);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__31___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_backup = python_pars[1];
    struct Nuitka_FrameObject *frame_f26c96a383a5cf2870e4807876308bbb;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_f26c96a383a5cf2870e4807876308bbb = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f26c96a383a5cf2870e4807876308bbb)) {
        Py_XDECREF(cache_frame_f26c96a383a5cf2870e4807876308bbb);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f26c96a383a5cf2870e4807876308bbb == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f26c96a383a5cf2870e4807876308bbb = MAKE_FUNCTION_FRAME(codeobj_f26c96a383a5cf2870e4807876308bbb, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f26c96a383a5cf2870e4807876308bbb->m_type_description == NULL);
    frame_f26c96a383a5cf2870e4807876308bbb = cache_frame_f26c96a383a5cf2870e4807876308bbb;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f26c96a383a5cf2870e4807876308bbb);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f26c96a383a5cf2870e4807876308bbb) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 410;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_backup);
        tmp_args_element_value_2 = par_backup;
        frame_f26c96a383a5cf2870e4807876308bbb->m_frame.f_lineno = 410;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 410;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 410;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f26c96a383a5cf2870e4807876308bbb);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f26c96a383a5cf2870e4807876308bbb);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f26c96a383a5cf2870e4807876308bbb, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f26c96a383a5cf2870e4807876308bbb->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f26c96a383a5cf2870e4807876308bbb, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f26c96a383a5cf2870e4807876308bbb,
        type_description_1,
        par_self,
        par_backup
    );


    // Release cached frame if used for exception.
    if (frame_f26c96a383a5cf2870e4807876308bbb == cache_frame_f26c96a383a5cf2870e4807876308bbb) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f26c96a383a5cf2870e4807876308bbb);
        cache_frame_f26c96a383a5cf2870e4807876308bbb = NULL;
    }

    assertFrameObject(frame_f26c96a383a5cf2870e4807876308bbb);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_backup);
    Py_DECREF(par_backup);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_backup);
    Py_DECREF(par_backup);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__32___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_8eba42381732439c14f710cf323438d5;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_8eba42381732439c14f710cf323438d5 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_8eba42381732439c14f710cf323438d5)) {
        Py_XDECREF(cache_frame_8eba42381732439c14f710cf323438d5);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8eba42381732439c14f710cf323438d5 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8eba42381732439c14f710cf323438d5 = MAKE_FUNCTION_FRAME(codeobj_8eba42381732439c14f710cf323438d5, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_8eba42381732439c14f710cf323438d5->m_type_description == NULL);
    frame_8eba42381732439c14f710cf323438d5 = cache_frame_8eba42381732439c14f710cf323438d5;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8eba42381732439c14f710cf323438d5);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8eba42381732439c14f710cf323438d5) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_8eba42381732439c14f710cf323438d5->m_frame.f_lineno = 426;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[70]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 426;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8eba42381732439c14f710cf323438d5);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8eba42381732439c14f710cf323438d5);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8eba42381732439c14f710cf323438d5, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8eba42381732439c14f710cf323438d5->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8eba42381732439c14f710cf323438d5, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8eba42381732439c14f710cf323438d5,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_8eba42381732439c14f710cf323438d5 == cache_frame_8eba42381732439c14f710cf323438d5) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_8eba42381732439c14f710cf323438d5);
        cache_frame_8eba42381732439c14f710cf323438d5 = NULL;
    }

    assertFrameObject(frame_8eba42381732439c14f710cf323438d5);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__33___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a5903b9868c4a054bb394e26ef2bbf91;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a5903b9868c4a054bb394e26ef2bbf91 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a5903b9868c4a054bb394e26ef2bbf91)) {
        Py_XDECREF(cache_frame_a5903b9868c4a054bb394e26ef2bbf91);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a5903b9868c4a054bb394e26ef2bbf91 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a5903b9868c4a054bb394e26ef2bbf91 = MAKE_FUNCTION_FRAME(codeobj_a5903b9868c4a054bb394e26ef2bbf91, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a5903b9868c4a054bb394e26ef2bbf91->m_type_description == NULL);
    frame_a5903b9868c4a054bb394e26ef2bbf91 = cache_frame_a5903b9868c4a054bb394e26ef2bbf91;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a5903b9868c4a054bb394e26ef2bbf91);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a5903b9868c4a054bb394e26ef2bbf91) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 437;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_a5903b9868c4a054bb394e26ef2bbf91->m_frame.f_lineno = 437;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[70]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 437;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 437;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a5903b9868c4a054bb394e26ef2bbf91);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a5903b9868c4a054bb394e26ef2bbf91);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a5903b9868c4a054bb394e26ef2bbf91, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a5903b9868c4a054bb394e26ef2bbf91->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a5903b9868c4a054bb394e26ef2bbf91, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a5903b9868c4a054bb394e26ef2bbf91,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a5903b9868c4a054bb394e26ef2bbf91 == cache_frame_a5903b9868c4a054bb394e26ef2bbf91) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a5903b9868c4a054bb394e26ef2bbf91);
        cache_frame_a5903b9868c4a054bb394e26ef2bbf91 = NULL;
    }

    assertFrameObject(frame_a5903b9868c4a054bb394e26ef2bbf91);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__34___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_60d405e3ad6d739d895a913d24edf74d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_60d405e3ad6d739d895a913d24edf74d = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_60d405e3ad6d739d895a913d24edf74d)) {
        Py_XDECREF(cache_frame_60d405e3ad6d739d895a913d24edf74d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_60d405e3ad6d739d895a913d24edf74d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_60d405e3ad6d739d895a913d24edf74d = MAKE_FUNCTION_FRAME(codeobj_60d405e3ad6d739d895a913d24edf74d, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_60d405e3ad6d739d895a913d24edf74d->m_type_description == NULL);
    frame_60d405e3ad6d739d895a913d24edf74d = cache_frame_60d405e3ad6d739d895a913d24edf74d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_60d405e3ad6d739d895a913d24edf74d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_60d405e3ad6d739d895a913d24edf74d) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 456;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_60d405e3ad6d739d895a913d24edf74d->m_frame.f_lineno = 456;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[70]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 456;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 456;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_60d405e3ad6d739d895a913d24edf74d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_60d405e3ad6d739d895a913d24edf74d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_60d405e3ad6d739d895a913d24edf74d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_60d405e3ad6d739d895a913d24edf74d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_60d405e3ad6d739d895a913d24edf74d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_60d405e3ad6d739d895a913d24edf74d,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_60d405e3ad6d739d895a913d24edf74d == cache_frame_60d405e3ad6d739d895a913d24edf74d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_60d405e3ad6d739d895a913d24edf74d);
        cache_frame_60d405e3ad6d739d895a913d24edf74d = NULL;
    }

    assertFrameObject(frame_60d405e3ad6d739d895a913d24edf74d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__35___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_ui_id = python_pars[1];
    PyObject *par_sys_settings_id = python_pars[2];
    struct Nuitka_FrameObject *frame_53f60a3bad0a006bb596371c6f1b4795;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_53f60a3bad0a006bb596371c6f1b4795 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_53f60a3bad0a006bb596371c6f1b4795)) {
        Py_XDECREF(cache_frame_53f60a3bad0a006bb596371c6f1b4795);

#if _DEBUG_REFCOUNTS
        if (cache_frame_53f60a3bad0a006bb596371c6f1b4795 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_53f60a3bad0a006bb596371c6f1b4795 = MAKE_FUNCTION_FRAME(codeobj_53f60a3bad0a006bb596371c6f1b4795, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_53f60a3bad0a006bb596371c6f1b4795->m_type_description == NULL);
    frame_53f60a3bad0a006bb596371c6f1b4795 = cache_frame_53f60a3bad0a006bb596371c6f1b4795;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_53f60a3bad0a006bb596371c6f1b4795);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_53f60a3bad0a006bb596371c6f1b4795) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[56];
        CHECK_OBJECT(par_ui_id);
        tmp_args_element_value_2 = par_ui_id;
        CHECK_OBJECT(par_sys_settings_id);
        tmp_args_element_value_3 = par_sys_settings_id;
        frame_53f60a3bad0a006bb596371c6f1b4795->m_frame.f_lineno = 484;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 484;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_53f60a3bad0a006bb596371c6f1b4795);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_53f60a3bad0a006bb596371c6f1b4795);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_53f60a3bad0a006bb596371c6f1b4795, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_53f60a3bad0a006bb596371c6f1b4795->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_53f60a3bad0a006bb596371c6f1b4795, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_53f60a3bad0a006bb596371c6f1b4795,
        type_description_1,
        par_self,
        par_ui_id,
        par_sys_settings_id
    );


    // Release cached frame if used for exception.
    if (frame_53f60a3bad0a006bb596371c6f1b4795 == cache_frame_53f60a3bad0a006bb596371c6f1b4795) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_53f60a3bad0a006bb596371c6f1b4795);
        cache_frame_53f60a3bad0a006bb596371c6f1b4795 = NULL;
    }

    assertFrameObject(frame_53f60a3bad0a006bb596371c6f1b4795);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_ui_id);
    Py_DECREF(par_ui_id);
    CHECK_OBJECT(par_sys_settings_id);
    Py_DECREF(par_sys_settings_id);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_ui_id);
    Py_DECREF(par_ui_id);
    CHECK_OBJECT(par_sys_settings_id);
    Py_DECREF(par_sys_settings_id);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__36___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_ad9c117fd2502751d72e5b33d8a1596a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ad9c117fd2502751d72e5b33d8a1596a = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ad9c117fd2502751d72e5b33d8a1596a)) {
        Py_XDECREF(cache_frame_ad9c117fd2502751d72e5b33d8a1596a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ad9c117fd2502751d72e5b33d8a1596a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ad9c117fd2502751d72e5b33d8a1596a = MAKE_FUNCTION_FRAME(codeobj_ad9c117fd2502751d72e5b33d8a1596a, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ad9c117fd2502751d72e5b33d8a1596a->m_type_description == NULL);
    frame_ad9c117fd2502751d72e5b33d8a1596a = cache_frame_ad9c117fd2502751d72e5b33d8a1596a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ad9c117fd2502751d72e5b33d8a1596a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ad9c117fd2502751d72e5b33d8a1596a) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 504;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_ad9c117fd2502751d72e5b33d8a1596a->m_frame.f_lineno = 504;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[86]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 504;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 504;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ad9c117fd2502751d72e5b33d8a1596a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ad9c117fd2502751d72e5b33d8a1596a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ad9c117fd2502751d72e5b33d8a1596a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ad9c117fd2502751d72e5b33d8a1596a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ad9c117fd2502751d72e5b33d8a1596a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ad9c117fd2502751d72e5b33d8a1596a,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_ad9c117fd2502751d72e5b33d8a1596a == cache_frame_ad9c117fd2502751d72e5b33d8a1596a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ad9c117fd2502751d72e5b33d8a1596a);
        cache_frame_ad9c117fd2502751d72e5b33d8a1596a = NULL;
    }

    assertFrameObject(frame_ad9c117fd2502751d72e5b33d8a1596a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__37___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_ff8f3004697ff5d3d9fbc60e54de79de;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_ff8f3004697ff5d3d9fbc60e54de79de = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ff8f3004697ff5d3d9fbc60e54de79de)) {
        Py_XDECREF(cache_frame_ff8f3004697ff5d3d9fbc60e54de79de);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ff8f3004697ff5d3d9fbc60e54de79de == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ff8f3004697ff5d3d9fbc60e54de79de = MAKE_FUNCTION_FRAME(codeobj_ff8f3004697ff5d3d9fbc60e54de79de, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ff8f3004697ff5d3d9fbc60e54de79de->m_type_description == NULL);
    frame_ff8f3004697ff5d3d9fbc60e54de79de = cache_frame_ff8f3004697ff5d3d9fbc60e54de79de;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ff8f3004697ff5d3d9fbc60e54de79de);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ff8f3004697ff5d3d9fbc60e54de79de) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = mod_consts[19];
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 511;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ff8f3004697ff5d3d9fbc60e54de79de);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ff8f3004697ff5d3d9fbc60e54de79de);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ff8f3004697ff5d3d9fbc60e54de79de, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ff8f3004697ff5d3d9fbc60e54de79de->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ff8f3004697ff5d3d9fbc60e54de79de, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ff8f3004697ff5d3d9fbc60e54de79de,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_ff8f3004697ff5d3d9fbc60e54de79de == cache_frame_ff8f3004697ff5d3d9fbc60e54de79de) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ff8f3004697ff5d3d9fbc60e54de79de);
        cache_frame_ff8f3004697ff5d3d9fbc60e54de79de = NULL;
    }

    assertFrameObject(frame_ff8f3004697ff5d3d9fbc60e54de79de);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__38___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_from1904 = python_pars[1];
    struct Nuitka_FrameObject *frame_b2a1dc0b3f46e6cd53d597c421bffbfc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc)) {
        Py_XDECREF(cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc = MAKE_FUNCTION_FRAME(codeobj_b2a1dc0b3f46e6cd53d597c421bffbfc, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc->m_type_description == NULL);
    frame_b2a1dc0b3f46e6cd53d597c421bffbfc = cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b2a1dc0b3f46e6cd53d597c421bffbfc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b2a1dc0b3f46e6cd53d597c421bffbfc) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_from1904);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_from1904);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 530;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 531;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_b2a1dc0b3f46e6cd53d597c421bffbfc->m_frame.f_lineno = 531;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[86]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 531;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 531;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 533;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_b2a1dc0b3f46e6cd53d597c421bffbfc->m_frame.f_lineno = 533;
        tmp_assattr_value_2 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_2, mod_consts[70]);

        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 533;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[58], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 533;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b2a1dc0b3f46e6cd53d597c421bffbfc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b2a1dc0b3f46e6cd53d597c421bffbfc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b2a1dc0b3f46e6cd53d597c421bffbfc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b2a1dc0b3f46e6cd53d597c421bffbfc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b2a1dc0b3f46e6cd53d597c421bffbfc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b2a1dc0b3f46e6cd53d597c421bffbfc,
        type_description_1,
        par_self,
        par_from1904
    );


    // Release cached frame if used for exception.
    if (frame_b2a1dc0b3f46e6cd53d597c421bffbfc == cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc);
        cache_frame_b2a1dc0b3f46e6cd53d597c421bffbfc = NULL;
    }

    assertFrameObject(frame_b2a1dc0b3f46e6cd53d597c421bffbfc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_from1904);
    Py_DECREF(par_from1904);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_from1904);
    Py_DECREF(par_from1904);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__39___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_use_real_values = python_pars[1];
    struct Nuitka_FrameObject *frame_80d302173983804943ce4e3d7f91d299;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_80d302173983804943ce4e3d7f91d299 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_80d302173983804943ce4e3d7f91d299)) {
        Py_XDECREF(cache_frame_80d302173983804943ce4e3d7f91d299);

#if _DEBUG_REFCOUNTS
        if (cache_frame_80d302173983804943ce4e3d7f91d299 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_80d302173983804943ce4e3d7f91d299 = MAKE_FUNCTION_FRAME(codeobj_80d302173983804943ce4e3d7f91d299, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_80d302173983804943ce4e3d7f91d299->m_type_description == NULL);
    frame_80d302173983804943ce4e3d7f91d299 = cache_frame_80d302173983804943ce4e3d7f91d299;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_80d302173983804943ce4e3d7f91d299);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_80d302173983804943ce4e3d7f91d299) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(par_use_real_values);
        tmp_truth_name_1 = CHECK_IF_TRUE(par_use_real_values);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 552;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 553;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_80d302173983804943ce4e3d7f91d299->m_frame.f_lineno = 553;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_1, mod_consts[86]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 553;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 553;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 555;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        frame_80d302173983804943ce4e3d7f91d299->m_frame.f_lineno = 555;
        tmp_assattr_value_2 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_2, mod_consts[70]);

        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 555;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[58], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 555;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_80d302173983804943ce4e3d7f91d299);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_80d302173983804943ce4e3d7f91d299);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_80d302173983804943ce4e3d7f91d299, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_80d302173983804943ce4e3d7f91d299->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_80d302173983804943ce4e3d7f91d299, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_80d302173983804943ce4e3d7f91d299,
        type_description_1,
        par_self,
        par_use_real_values
    );


    // Release cached frame if used for exception.
    if (frame_80d302173983804943ce4e3d7f91d299 == cache_frame_80d302173983804943ce4e3d7f91d299) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_80d302173983804943ce4e3d7f91d299);
        cache_frame_80d302173983804943ce4e3d7f91d299 = NULL;
    }

    assertFrameObject(frame_80d302173983804943ce4e3d7f91d299);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_use_real_values);
    Py_DECREF(par_use_real_values);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_use_real_values);
    Py_DECREF(par_use_real_values);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__40___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_a573af0ff62e44327b9d368a4b38cde8;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a573af0ff62e44327b9d368a4b38cde8 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a573af0ff62e44327b9d368a4b38cde8)) {
        Py_XDECREF(cache_frame_a573af0ff62e44327b9d368a4b38cde8);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a573af0ff62e44327b9d368a4b38cde8 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a573af0ff62e44327b9d368a4b38cde8 = MAKE_FUNCTION_FRAME(codeobj_a573af0ff62e44327b9d368a4b38cde8, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a573af0ff62e44327b9d368a4b38cde8->m_type_description == NULL);
    frame_a573af0ff62e44327b9d368a4b38cde8 = cache_frame_a573af0ff62e44327b9d368a4b38cde8;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a573af0ff62e44327b9d368a4b38cde8);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a573af0ff62e44327b9d368a4b38cde8) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 612;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_args_element_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[87]);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 612;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_a573af0ff62e44327b9d368a4b38cde8->m_frame.f_lineno = 612;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 612;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 612;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a573af0ff62e44327b9d368a4b38cde8);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a573af0ff62e44327b9d368a4b38cde8);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a573af0ff62e44327b9d368a4b38cde8, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a573af0ff62e44327b9d368a4b38cde8->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a573af0ff62e44327b9d368a4b38cde8, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a573af0ff62e44327b9d368a4b38cde8,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_a573af0ff62e44327b9d368a4b38cde8 == cache_frame_a573af0ff62e44327b9d368a4b38cde8) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a573af0ff62e44327b9d368a4b38cde8);
        cache_frame_a573af0ff62e44327b9d368a4b38cde8 = NULL;
    }

    assertFrameObject(frame_a573af0ff62e44327b9d368a4b38cde8);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__41___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_hpos_twips = python_pars[1];
    PyObject *par_vpos_twips = python_pars[2];
    PyObject *par_width_twips = python_pars[3];
    PyObject *par_height_twips = python_pars[4];
    PyObject *par_flags = python_pars[5];
    PyObject *par_active_sheet = python_pars[6];
    PyObject *par_first_tab_index = python_pars[7];
    PyObject *par_selected_tabs = python_pars[8];
    PyObject *par_tab_width = python_pars[9];
    struct Nuitka_FrameObject *frame_feda2b3250b862bbc547c9658da97310;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_feda2b3250b862bbc547c9658da97310 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_feda2b3250b862bbc547c9658da97310)) {
        Py_XDECREF(cache_frame_feda2b3250b862bbc547c9658da97310);

#if _DEBUG_REFCOUNTS
        if (cache_frame_feda2b3250b862bbc547c9658da97310 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_feda2b3250b862bbc547c9658da97310 = MAKE_FUNCTION_FRAME(codeobj_feda2b3250b862bbc547c9658da97310, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_feda2b3250b862bbc547c9658da97310->m_type_description == NULL);
    frame_feda2b3250b862bbc547c9658da97310 = cache_frame_feda2b3250b862bbc547c9658da97310;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_feda2b3250b862bbc547c9658da97310);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_feda2b3250b862bbc547c9658da97310) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 643;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[88];
        CHECK_OBJECT(par_hpos_twips);
        tmp_args_element_value_2 = par_hpos_twips;
        CHECK_OBJECT(par_vpos_twips);
        tmp_args_element_value_3 = par_vpos_twips;
        CHECK_OBJECT(par_width_twips);
        tmp_args_element_value_4 = par_width_twips;
        CHECK_OBJECT(par_height_twips);
        tmp_args_element_value_5 = par_height_twips;
        CHECK_OBJECT(par_flags);
        tmp_args_element_value_6 = par_flags;
        CHECK_OBJECT(par_active_sheet);
        tmp_args_element_value_7 = par_active_sheet;
        CHECK_OBJECT(par_first_tab_index);
        tmp_args_element_value_8 = par_first_tab_index;
        CHECK_OBJECT(par_selected_tabs);
        tmp_args_element_value_9 = par_selected_tabs;
        CHECK_OBJECT(par_tab_width);
        tmp_args_element_value_10 = par_tab_width;
        frame_feda2b3250b862bbc547c9658da97310->m_frame.f_lineno = 643;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9, tmp_args_element_value_10};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS10(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 643;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 643;
            type_description_1 = "oooooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_feda2b3250b862bbc547c9658da97310);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_feda2b3250b862bbc547c9658da97310);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_feda2b3250b862bbc547c9658da97310, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_feda2b3250b862bbc547c9658da97310->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_feda2b3250b862bbc547c9658da97310, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_feda2b3250b862bbc547c9658da97310,
        type_description_1,
        par_self,
        par_hpos_twips,
        par_vpos_twips,
        par_width_twips,
        par_height_twips,
        par_flags,
        par_active_sheet,
        par_first_tab_index,
        par_selected_tabs,
        par_tab_width
    );


    // Release cached frame if used for exception.
    if (frame_feda2b3250b862bbc547c9658da97310 == cache_frame_feda2b3250b862bbc547c9658da97310) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_feda2b3250b862bbc547c9658da97310);
        cache_frame_feda2b3250b862bbc547c9658da97310 = NULL;
    }

    assertFrameObject(frame_feda2b3250b862bbc547c9658da97310);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_hpos_twips);
    Py_DECREF(par_hpos_twips);
    CHECK_OBJECT(par_vpos_twips);
    Py_DECREF(par_vpos_twips);
    CHECK_OBJECT(par_width_twips);
    Py_DECREF(par_width_twips);
    CHECK_OBJECT(par_height_twips);
    Py_DECREF(par_height_twips);
    CHECK_OBJECT(par_flags);
    Py_DECREF(par_flags);
    CHECK_OBJECT(par_active_sheet);
    Py_DECREF(par_active_sheet);
    CHECK_OBJECT(par_first_tab_index);
    Py_DECREF(par_first_tab_index);
    CHECK_OBJECT(par_selected_tabs);
    Py_DECREF(par_selected_tabs);
    CHECK_OBJECT(par_tab_width);
    Py_DECREF(par_tab_width);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_hpos_twips);
    Py_DECREF(par_hpos_twips);
    CHECK_OBJECT(par_vpos_twips);
    Py_DECREF(par_vpos_twips);
    CHECK_OBJECT(par_width_twips);
    Py_DECREF(par_width_twips);
    CHECK_OBJECT(par_height_twips);
    Py_DECREF(par_height_twips);
    CHECK_OBJECT(par_flags);
    Py_DECREF(par_flags);
    CHECK_OBJECT(par_active_sheet);
    Py_DECREF(par_active_sheet);
    CHECK_OBJECT(par_first_tab_index);
    Py_DECREF(par_first_tab_index);
    CHECK_OBJECT(par_selected_tabs);
    Py_DECREF(par_selected_tabs);
    CHECK_OBJECT(par_tab_width);
    Py_DECREF(par_tab_width);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__42___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_height = python_pars[1];
    PyObject *par_options = python_pars[2];
    PyObject *par_colour_index = python_pars[3];
    PyObject *par_weight = python_pars[4];
    PyObject *par_escapement = python_pars[5];
    PyObject *par_underline = python_pars[6];
    PyObject *par_family = python_pars[7];
    PyObject *par_charset = python_pars[8];
    PyObject *par_name = python_pars[9];
    PyObject *var_uname = NULL;
    PyObject *var_uname_len = NULL;
    struct Nuitka_FrameObject *frame_b11701e4779c094c30dba827e38d0272;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b11701e4779c094c30dba827e38d0272 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_b11701e4779c094c30dba827e38d0272)) {
        Py_XDECREF(cache_frame_b11701e4779c094c30dba827e38d0272);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b11701e4779c094c30dba827e38d0272 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b11701e4779c094c30dba827e38d0272 = MAKE_FUNCTION_FRAME(codeobj_b11701e4779c094c30dba827e38d0272, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b11701e4779c094c30dba827e38d0272->m_type_description == NULL);
    frame_b11701e4779c094c30dba827e38d0272 = cache_frame_b11701e4779c094c30dba827e38d0272;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b11701e4779c094c30dba827e38d0272);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b11701e4779c094c30dba827e38d0272) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[89]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[89]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 722;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_args_element_value_1 = par_name;
        frame_b11701e4779c094c30dba827e38d0272->m_frame.f_lineno = 722;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 722;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_uname == NULL);
        var_uname = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_uname);
        tmp_len_arg_1 = var_uname;
        tmp_assign_source_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 723;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_uname_len == NULL);
        var_uname_len = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 725;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[90];
        CHECK_OBJECT(var_uname_len);
        tmp_right_value_1 = var_uname_len;
        tmp_args_element_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 725;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_height);
        tmp_args_element_value_3 = par_height;
        CHECK_OBJECT(par_options);
        tmp_args_element_value_4 = par_options;
        CHECK_OBJECT(par_colour_index);
        tmp_args_element_value_5 = par_colour_index;
        CHECK_OBJECT(par_weight);
        tmp_args_element_value_6 = par_weight;
        CHECK_OBJECT(par_escapement);
        tmp_args_element_value_7 = par_escapement;
        CHECK_OBJECT(par_underline);
        tmp_args_element_value_8 = par_underline;
        CHECK_OBJECT(par_family);
        tmp_args_element_value_9 = par_family;
        CHECK_OBJECT(par_charset);
        tmp_args_element_value_10 = par_charset;
        tmp_args_element_value_11 = mod_consts[4];
        CHECK_OBJECT(var_uname);
        tmp_args_element_value_12 = var_uname;
        frame_b11701e4779c094c30dba827e38d0272->m_frame.f_lineno = 725;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9, tmp_args_element_value_10, tmp_args_element_value_11, tmp_args_element_value_12};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS11(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 725;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 725;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b11701e4779c094c30dba827e38d0272);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b11701e4779c094c30dba827e38d0272);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b11701e4779c094c30dba827e38d0272, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b11701e4779c094c30dba827e38d0272->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b11701e4779c094c30dba827e38d0272, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b11701e4779c094c30dba827e38d0272,
        type_description_1,
        par_self,
        par_height,
        par_options,
        par_colour_index,
        par_weight,
        par_escapement,
        par_underline,
        par_family,
        par_charset,
        par_name,
        var_uname,
        var_uname_len
    );


    // Release cached frame if used for exception.
    if (frame_b11701e4779c094c30dba827e38d0272 == cache_frame_b11701e4779c094c30dba827e38d0272) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b11701e4779c094c30dba827e38d0272);
        cache_frame_b11701e4779c094c30dba827e38d0272 = NULL;
    }

    assertFrameObject(frame_b11701e4779c094c30dba827e38d0272);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_uname);
    Py_DECREF(var_uname);
    var_uname = NULL;
    CHECK_OBJECT(var_uname_len);
    Py_DECREF(var_uname_len);
    var_uname_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_uname);
    var_uname = NULL;
    Py_XDECREF(var_uname_len);
    var_uname_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_height);
    Py_DECREF(par_height);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_colour_index);
    Py_DECREF(par_colour_index);
    CHECK_OBJECT(par_weight);
    Py_DECREF(par_weight);
    CHECK_OBJECT(par_escapement);
    Py_DECREF(par_escapement);
    CHECK_OBJECT(par_underline);
    Py_DECREF(par_underline);
    CHECK_OBJECT(par_family);
    Py_DECREF(par_family);
    CHECK_OBJECT(par_charset);
    Py_DECREF(par_charset);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_height);
    Py_DECREF(par_height);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_colour_index);
    Py_DECREF(par_colour_index);
    CHECK_OBJECT(par_weight);
    Py_DECREF(par_weight);
    CHECK_OBJECT(par_escapement);
    Py_DECREF(par_escapement);
    CHECK_OBJECT(par_underline);
    Py_DECREF(par_underline);
    CHECK_OBJECT(par_family);
    Py_DECREF(par_family);
    CHECK_OBJECT(par_charset);
    Py_DECREF(par_charset);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__43___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_idx = python_pars[1];
    PyObject *par_fmtstr = python_pars[2];
    PyObject *var_ufmtstr = NULL;
    PyObject *var_ufmtstr_len = NULL;
    struct Nuitka_FrameObject *frame_8007e36a2faaf74fd6c3ea391db80487;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_8007e36a2faaf74fd6c3ea391db80487 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_8007e36a2faaf74fd6c3ea391db80487)) {
        Py_XDECREF(cache_frame_8007e36a2faaf74fd6c3ea391db80487);

#if _DEBUG_REFCOUNTS
        if (cache_frame_8007e36a2faaf74fd6c3ea391db80487 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_8007e36a2faaf74fd6c3ea391db80487 = MAKE_FUNCTION_FRAME(codeobj_8007e36a2faaf74fd6c3ea391db80487, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_8007e36a2faaf74fd6c3ea391db80487->m_type_description == NULL);
    frame_8007e36a2faaf74fd6c3ea391db80487 = cache_frame_8007e36a2faaf74fd6c3ea391db80487;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_8007e36a2faaf74fd6c3ea391db80487);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_8007e36a2faaf74fd6c3ea391db80487) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[37]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 785;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fmtstr);
        tmp_args_element_value_1 = par_fmtstr;
        frame_8007e36a2faaf74fd6c3ea391db80487->m_frame.f_lineno = 785;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 785;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_ufmtstr == NULL);
        var_ufmtstr = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_ufmtstr);
        tmp_len_arg_1 = var_ufmtstr;
        tmp_assign_source_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 786;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(var_ufmtstr_len == NULL);
        var_ufmtstr_len = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[91];
        CHECK_OBJECT(var_ufmtstr_len);
        tmp_right_value_1 = var_ufmtstr_len;
        tmp_args_element_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_idx);
        tmp_args_element_value_3 = par_idx;
        CHECK_OBJECT(var_ufmtstr);
        tmp_args_element_value_4 = var_ufmtstr;
        frame_8007e36a2faaf74fd6c3ea391db80487->m_frame.f_lineno = 788;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 788;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8007e36a2faaf74fd6c3ea391db80487);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_8007e36a2faaf74fd6c3ea391db80487);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_8007e36a2faaf74fd6c3ea391db80487, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_8007e36a2faaf74fd6c3ea391db80487->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_8007e36a2faaf74fd6c3ea391db80487, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_8007e36a2faaf74fd6c3ea391db80487,
        type_description_1,
        par_self,
        par_idx,
        par_fmtstr,
        var_ufmtstr,
        var_ufmtstr_len
    );


    // Release cached frame if used for exception.
    if (frame_8007e36a2faaf74fd6c3ea391db80487 == cache_frame_8007e36a2faaf74fd6c3ea391db80487) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_8007e36a2faaf74fd6c3ea391db80487);
        cache_frame_8007e36a2faaf74fd6c3ea391db80487 = NULL;
    }

    assertFrameObject(frame_8007e36a2faaf74fd6c3ea391db80487);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_ufmtstr);
    Py_DECREF(var_ufmtstr);
    var_ufmtstr = NULL;
    CHECK_OBJECT(var_ufmtstr_len);
    Py_DECREF(var_ufmtstr_len);
    var_ufmtstr_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_ufmtstr);
    var_ufmtstr = NULL;
    Py_XDECREF(var_ufmtstr_len);
    var_ufmtstr_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_idx);
    Py_DECREF(par_idx);
    CHECK_OBJECT(par_fmtstr);
    Py_DECREF(par_fmtstr);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_idx);
    Py_DECREF(par_idx);
    CHECK_OBJECT(par_fmtstr);
    Py_DECREF(par_fmtstr);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__44___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_xf = python_pars[1];
    PyObject *par_xftype = python_pars[2];
    PyObject *var_font_xf_idx = NULL;
    PyObject *var_fmt_str_xf_idx = NULL;
    PyObject *var_alignment = NULL;
    PyObject *var_borders = NULL;
    PyObject *var_pattern = NULL;
    PyObject *var_protection = NULL;
    PyObject *var_fnt = NULL;
    PyObject *var_fmt = NULL;
    PyObject *var_prt = NULL;
    PyObject *var_aln = NULL;
    PyObject *var_rot = NULL;
    PyObject *var_txt = NULL;
    PyObject *var_used_attr = NULL;
    PyObject *var_brd1 = NULL;
    PyObject *var_brd2 = NULL;
    PyObject *var_pat = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__element_5 = NULL;
    PyObject *tmp_tuple_unpack_1__element_6 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_3f79e4d94a8b176e2e31d866f17bf8a4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4)) {
        Py_XDECREF(cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4 = MAKE_FUNCTION_FRAME(codeobj_3f79e4d94a8b176e2e31d866f17bf8a4, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_type_description == NULL);
    frame_3f79e4d94a8b176e2e31d866f17bf8a4 = cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3f79e4d94a8b176e2e31d866f17bf8a4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3f79e4d94a8b176e2e31d866f17bf8a4) == 2); // Frame stack

    // Framed code:
    // Tried code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_xf);
        tmp_iter_arg_1 = par_xf;
        tmp_assign_source_1 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 925;
            type_description_1 = "ooooooooooooooooooo";
            goto try_except_handler_2;
        }
        assert(tmp_tuple_unpack_1__source_iter == NULL);
        tmp_tuple_unpack_1__source_iter = tmp_assign_source_1;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_2 = UNPACK_NEXT(tmp_unpack_1, 0, 6);
        if (tmp_assign_source_2 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooo";
            exception_lineno = 925;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_1 == NULL);
        tmp_tuple_unpack_1__element_1 = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_3 = UNPACK_NEXT(tmp_unpack_2, 1, 6);
        if (tmp_assign_source_3 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooo";
            exception_lineno = 925;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_2 == NULL);
        tmp_tuple_unpack_1__element_2 = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_3, 2, 6);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooo";
            exception_lineno = 925;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_3 == NULL);
        tmp_tuple_unpack_1__element_3 = tmp_assign_source_4;
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_4, 3, 6);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooo";
            exception_lineno = 925;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_4 == NULL);
        tmp_tuple_unpack_1__element_4 = tmp_assign_source_5;
    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_5;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_5 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_5, 4, 6);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooo";
            exception_lineno = 925;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_5 == NULL);
        tmp_tuple_unpack_1__element_5 = tmp_assign_source_6;
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_6;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_6 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_6, 5, 6);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooooooooooooo";
            exception_lineno = 925;
            goto try_except_handler_3;
        }
        assert(tmp_tuple_unpack_1__element_6 == NULL);
        tmp_tuple_unpack_1__element_6 = tmp_assign_source_7;
    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooooooooooooo";
                    exception_lineno = 925;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[92];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooooooooooooo";
            exception_lineno = 925;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_4);
    tmp_tuple_unpack_1__element_4 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_5);
    tmp_tuple_unpack_1__element_5 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_6);
    tmp_tuple_unpack_1__element_6 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        assert(var_font_xf_idx == NULL);
        Py_INCREF(tmp_assign_source_8);
        var_font_xf_idx = tmp_assign_source_8;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        assert(var_fmt_str_xf_idx == NULL);
        Py_INCREF(tmp_assign_source_9);
        var_fmt_str_xf_idx = tmp_assign_source_9;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_3);
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_3;
        assert(var_alignment == NULL);
        Py_INCREF(tmp_assign_source_10);
        var_alignment = tmp_assign_source_10;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_4);
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_4;
        assert(var_borders == NULL);
        Py_INCREF(tmp_assign_source_11);
        var_borders = tmp_assign_source_11;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_4);
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_5);
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_5;
        assert(var_pattern == NULL);
        Py_INCREF(tmp_assign_source_12);
        var_pattern = tmp_assign_source_12;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_5);
    tmp_tuple_unpack_1__element_5 = NULL;

    {
        PyObject *tmp_assign_source_13;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_6);
        tmp_assign_source_13 = tmp_tuple_unpack_1__element_6;
        assert(var_protection == NULL);
        Py_INCREF(tmp_assign_source_13);
        var_protection = tmp_assign_source_13;
    }
    Py_XDECREF(tmp_tuple_unpack_1__element_6);
    tmp_tuple_unpack_1__element_6 = NULL;

    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(var_font_xf_idx);
        tmp_args_element_value_2 = var_font_xf_idx;
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 926;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 926;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_fnt == NULL);
        var_fnt = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 927;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[78];
        CHECK_OBJECT(var_fmt_str_xf_idx);
        tmp_args_element_value_4 = var_fmt_str_xf_idx;
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 927;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assign_source_15 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 927;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_fmt == NULL);
        var_fmt = tmp_assign_source_15;
    }
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_xftype);
        tmp_cmp_expr_left_1 = par_xftype;
        tmp_cmp_expr_right_1 = mod_consts[93];
        tmp_condition_result_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 928;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_left_value_1;
        PyObject *tmp_left_value_2;
        PyObject *tmp_left_value_3;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_right_value_2;
        PyObject *tmp_right_value_3;
        PyObject *tmp_left_value_4;
        PyObject *tmp_left_value_5;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_right_value_4;
        PyObject *tmp_right_value_5;
        tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_3 == NULL)) {
            tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 929;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_5 = mod_consts[78];
        CHECK_OBJECT(var_protection);
        tmp_expression_value_1 = var_protection;
        tmp_left_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[94]);
        if (tmp_left_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 930;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = mod_consts[12];
        tmp_left_value_2 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_3, tmp_right_value_1);
        Py_DECREF(tmp_left_value_3);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 930;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_2 = mod_consts[4];
        tmp_left_value_1 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_left_value_2);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 930;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_protection);
        tmp_expression_value_2 = var_protection;
        tmp_left_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[95]);
        if (tmp_left_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_1);

            exception_lineno = 931;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_4 = mod_consts[12];
        tmp_left_value_4 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_5, tmp_right_value_4);
        Py_DECREF(tmp_left_value_5);
        if (tmp_left_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_1);

            exception_lineno = 931;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_5 = mod_consts[12];
        tmp_right_value_3 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_4, tmp_right_value_5);
        Py_DECREF(tmp_left_value_4);
        if (tmp_right_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_1);

            exception_lineno = 931;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_6 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_3);
        Py_DECREF(tmp_left_value_1);
        Py_DECREF(tmp_right_value_3);
        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 931;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 929;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_assign_source_16 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_args_element_value_6);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 929;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_prt == NULL);
        var_prt = tmp_assign_source_16;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_called_value_4;
        tmp_called_value_4 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_4 == NULL)) {
            tmp_called_value_4 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 934;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 934;
        tmp_assign_source_17 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_4, mod_consts[96]);

        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 934;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_prt == NULL);
        var_prt = tmp_assign_source_17;
    }
    branch_end_1:;
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_value_5;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_left_value_6;
        PyObject *tmp_left_value_7;
        PyObject *tmp_left_value_8;
        PyObject *tmp_left_value_9;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_right_value_6;
        PyObject *tmp_right_value_7;
        PyObject *tmp_right_value_8;
        PyObject *tmp_left_value_10;
        PyObject *tmp_left_value_11;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_right_value_9;
        PyObject *tmp_right_value_10;
        PyObject *tmp_right_value_11;
        PyObject *tmp_left_value_12;
        PyObject *tmp_left_value_13;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_right_value_12;
        PyObject *tmp_right_value_13;
        tmp_called_value_5 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_5 == NULL)) {
            tmp_called_value_5 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 935;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_7 = mod_consts[97];
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_3 = var_alignment;
        tmp_left_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[98]);
        if (tmp_left_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 936;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_6 = mod_consts[45];
        tmp_left_value_8 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_9, tmp_right_value_6);
        Py_DECREF(tmp_left_value_9);
        if (tmp_left_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 936;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_7 = mod_consts[4];
        tmp_left_value_7 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_8, tmp_right_value_7);
        Py_DECREF(tmp_left_value_8);
        if (tmp_left_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 936;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_4 = var_alignment;
        tmp_left_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[99]);
        if (tmp_left_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_7);

            exception_lineno = 937;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_9 = mod_consts[12];
        tmp_left_value_10 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_11, tmp_right_value_9);
        Py_DECREF(tmp_left_value_11);
        if (tmp_left_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_7);

            exception_lineno = 937;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_10 = mod_consts[100];
        tmp_right_value_8 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_10, tmp_right_value_10);
        Py_DECREF(tmp_left_value_10);
        if (tmp_right_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_7);

            exception_lineno = 937;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_6 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_7, tmp_right_value_8);
        Py_DECREF(tmp_left_value_7);
        Py_DECREF(tmp_right_value_8);
        if (tmp_left_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 937;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_5 = var_alignment;
        tmp_left_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[101]);
        if (tmp_left_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_6);

            exception_lineno = 938;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_12 = mod_consts[45];
        tmp_left_value_12 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_13, tmp_right_value_12);
        Py_DECREF(tmp_left_value_13);
        if (tmp_left_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_6);

            exception_lineno = 938;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_13 = mod_consts[40];
        tmp_right_value_11 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_12, tmp_right_value_13);
        Py_DECREF(tmp_left_value_12);
        if (tmp_right_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_6);

            exception_lineno = 938;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_8 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_6, tmp_right_value_11);
        Py_DECREF(tmp_left_value_6);
        Py_DECREF(tmp_right_value_11);
        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 938;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 935;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_assign_source_18 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_5, call_args);
        }

        Py_DECREF(tmp_args_element_value_8);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 935;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_aln == NULL);
        var_aln = tmp_assign_source_18;
    }
    {
        PyObject *tmp_assign_source_19;
        PyObject *tmp_called_value_6;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_expression_value_6;
        tmp_called_value_6 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_6 == NULL)) {
            tmp_called_value_6 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 940;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_9 = mod_consts[97];
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_6 = var_alignment;
        tmp_args_element_value_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[102]);
        if (tmp_args_element_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 940;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 940;
        {
            PyObject *call_args[] = {tmp_args_element_value_9, tmp_args_element_value_10};
            tmp_assign_source_19 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_6, call_args);
        }

        Py_DECREF(tmp_args_element_value_10);
        if (tmp_assign_source_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 940;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_rot == NULL);
        var_rot = tmp_assign_source_19;
    }
    {
        PyObject *tmp_assign_source_20;
        PyObject *tmp_called_value_7;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_left_value_14;
        PyObject *tmp_left_value_15;
        PyObject *tmp_left_value_16;
        PyObject *tmp_left_value_17;
        PyObject *tmp_left_value_18;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_right_value_14;
        PyObject *tmp_right_value_15;
        PyObject *tmp_right_value_16;
        PyObject *tmp_left_value_19;
        PyObject *tmp_left_value_20;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_right_value_17;
        PyObject *tmp_right_value_18;
        PyObject *tmp_right_value_19;
        PyObject *tmp_left_value_21;
        PyObject *tmp_left_value_22;
        PyObject *tmp_expression_value_9;
        PyObject *tmp_right_value_20;
        PyObject *tmp_right_value_21;
        PyObject *tmp_right_value_22;
        PyObject *tmp_left_value_23;
        PyObject *tmp_left_value_24;
        PyObject *tmp_expression_value_10;
        PyObject *tmp_right_value_23;
        PyObject *tmp_right_value_24;
        tmp_called_value_7 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_7 == NULL)) {
            tmp_called_value_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 941;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_11 = mod_consts[97];
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_7 = var_alignment;
        tmp_left_value_18 = LOOKUP_ATTRIBUTE(tmp_expression_value_7, mod_consts[103]);
        if (tmp_left_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_14 = mod_consts[82];
        tmp_left_value_17 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_18, tmp_right_value_14);
        Py_DECREF(tmp_left_value_18);
        if (tmp_left_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_15 = mod_consts[4];
        tmp_left_value_16 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_17, tmp_right_value_15);
        Py_DECREF(tmp_left_value_17);
        if (tmp_left_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 942;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_8 = var_alignment;
        tmp_left_value_20 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[104]);
        if (tmp_left_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_16);

            exception_lineno = 943;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_17 = mod_consts[12];
        tmp_left_value_19 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_20, tmp_right_value_17);
        Py_DECREF(tmp_left_value_20);
        if (tmp_left_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_16);

            exception_lineno = 943;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_18 = mod_consts[40];
        tmp_right_value_16 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_19, tmp_right_value_18);
        Py_DECREF(tmp_left_value_19);
        if (tmp_right_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_16);

            exception_lineno = 943;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_15 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_16, tmp_right_value_16);
        Py_DECREF(tmp_left_value_16);
        Py_DECREF(tmp_right_value_16);
        if (tmp_left_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 943;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_9 = var_alignment;
        tmp_left_value_22 = LOOKUP_ATTRIBUTE(tmp_expression_value_9, mod_consts[105]);
        if (tmp_left_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_15);

            exception_lineno = 944;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_20 = mod_consts[12];
        tmp_left_value_21 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_22, tmp_right_value_20);
        Py_DECREF(tmp_left_value_22);
        if (tmp_left_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_15);

            exception_lineno = 944;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_21 = mod_consts[39];
        tmp_right_value_19 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_21, tmp_right_value_21);
        Py_DECREF(tmp_left_value_21);
        if (tmp_right_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_15);

            exception_lineno = 944;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_14 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_15, tmp_right_value_19);
        Py_DECREF(tmp_left_value_15);
        Py_DECREF(tmp_right_value_19);
        if (tmp_left_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 944;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_alignment);
        tmp_expression_value_10 = var_alignment;
        tmp_left_value_24 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[106]);
        if (tmp_left_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_14);

            exception_lineno = 945;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_23 = mod_consts[100];
        tmp_left_value_23 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_24, tmp_right_value_23);
        Py_DECREF(tmp_left_value_24);
        if (tmp_left_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_14);

            exception_lineno = 945;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_24 = mod_consts[46];
        tmp_right_value_22 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_23, tmp_right_value_24);
        Py_DECREF(tmp_left_value_23);
        if (tmp_right_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_14);

            exception_lineno = 945;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_12 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_14, tmp_right_value_22);
        Py_DECREF(tmp_left_value_14);
        Py_DECREF(tmp_right_value_22);
        if (tmp_args_element_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 945;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 941;
        {
            PyObject *call_args[] = {tmp_args_element_value_11, tmp_args_element_value_12};
            tmp_assign_source_20 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_7, call_args);
        }

        Py_DECREF(tmp_args_element_value_12);
        if (tmp_assign_source_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 941;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_txt == NULL);
        var_txt = tmp_assign_source_20;
    }
    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(par_xftype);
        tmp_cmp_expr_left_2 = par_xftype;
        tmp_cmp_expr_right_2 = mod_consts[93];
        tmp_condition_result_2 = RICH_COMPARE_EQ_NBOOL_OBJECT_UNICODE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 947;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        assert(tmp_condition_result_2 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_21;
        PyObject *tmp_called_value_8;
        tmp_called_value_8 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_8 == NULL)) {
            tmp_called_value_8 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 948;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 948;
        tmp_assign_source_21 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_8, mod_consts[107]);

        if (tmp_assign_source_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 948;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_used_attr == NULL);
        var_used_attr = tmp_assign_source_21;
    }
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_called_value_9;
        tmp_called_value_9 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_9 == NULL)) {
            tmp_called_value_9 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 950;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 950;
        tmp_assign_source_22 = CALL_FUNCTION_WITH_POSARGS2(tmp_called_value_9, mod_consts[108]);

        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 950;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_used_attr == NULL);
        var_used_attr = tmp_assign_source_22;
    }
    branch_end_2:;
    {
        nuitka_bool tmp_condition_result_3;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_expression_value_12;
        CHECK_OBJECT(var_borders);
        tmp_expression_value_11 = var_borders;
        tmp_cmp_expr_left_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_11, mod_consts[109]);
        if (tmp_cmp_expr_left_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 952;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_12 = var_borders;
        tmp_cmp_expr_right_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_12, mod_consts[110]);
        if (tmp_cmp_expr_right_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_3);

            exception_lineno = 952;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
        Py_DECREF(tmp_cmp_expr_left_3);
        Py_DECREF(tmp_cmp_expr_right_3);
        if (tmp_condition_result_3 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 952;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_3 == NUITKA_BOOL_TRUE) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
        assert(tmp_condition_result_3 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_3:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = mod_consts[4];
        CHECK_OBJECT(var_borders);
        tmp_assattr_target_1 = var_borders;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[111], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 953;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_3:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_cmp_expr_left_4;
        PyObject *tmp_cmp_expr_right_4;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_expression_value_14;
        CHECK_OBJECT(var_borders);
        tmp_expression_value_13 = var_borders;
        tmp_cmp_expr_left_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[112]);
        if (tmp_cmp_expr_left_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 954;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_14 = var_borders;
        tmp_cmp_expr_right_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_14, mod_consts[110]);
        if (tmp_cmp_expr_right_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_4);

            exception_lineno = 954;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_4 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
        Py_DECREF(tmp_cmp_expr_left_4);
        Py_DECREF(tmp_cmp_expr_right_4);
        if (tmp_condition_result_4 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 954;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_4;
        } else {
            goto branch_no_4;
        }
        assert(tmp_condition_result_4 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_4:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = mod_consts[4];
        CHECK_OBJECT(var_borders);
        tmp_assattr_target_2 = var_borders;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[113], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 955;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_4:;
    {
        nuitka_bool tmp_condition_result_5;
        PyObject *tmp_cmp_expr_left_5;
        PyObject *tmp_cmp_expr_right_5;
        PyObject *tmp_expression_value_15;
        PyObject *tmp_expression_value_16;
        CHECK_OBJECT(var_borders);
        tmp_expression_value_15 = var_borders;
        tmp_cmp_expr_left_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[114]);
        if (tmp_cmp_expr_left_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 956;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_16 = var_borders;
        tmp_cmp_expr_right_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_16, mod_consts[110]);
        if (tmp_cmp_expr_right_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_5);

            exception_lineno = 956;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_5 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
        Py_DECREF(tmp_cmp_expr_left_5);
        Py_DECREF(tmp_cmp_expr_right_5);
        if (tmp_condition_result_5 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 956;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_5 == NUITKA_BOOL_TRUE) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
        assert(tmp_condition_result_5 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_5:;
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_value_3 = mod_consts[4];
        CHECK_OBJECT(var_borders);
        tmp_assattr_target_3 = var_borders;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[115], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 957;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_6;
        PyObject *tmp_cmp_expr_left_6;
        PyObject *tmp_cmp_expr_right_6;
        PyObject *tmp_expression_value_17;
        PyObject *tmp_expression_value_18;
        CHECK_OBJECT(var_borders);
        tmp_expression_value_17 = var_borders;
        tmp_cmp_expr_left_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_17, mod_consts[116]);
        if (tmp_cmp_expr_left_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 958;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_18 = var_borders;
        tmp_cmp_expr_right_6 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[110]);
        if (tmp_cmp_expr_right_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_6);

            exception_lineno = 958;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_6 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
        Py_DECREF(tmp_cmp_expr_left_6);
        Py_DECREF(tmp_cmp_expr_right_6);
        if (tmp_condition_result_6 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 958;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
        assert(tmp_condition_result_6 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_6:;
    {
        PyObject *tmp_assattr_value_4;
        PyObject *tmp_assattr_target_4;
        tmp_assattr_value_4 = mod_consts[4];
        CHECK_OBJECT(var_borders);
        tmp_assattr_target_4 = var_borders;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_4, mod_consts[117], tmp_assattr_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 959;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_6:;
    {
        nuitka_bool tmp_condition_result_7;
        PyObject *tmp_cmp_expr_left_7;
        PyObject *tmp_cmp_expr_right_7;
        PyObject *tmp_expression_value_19;
        PyObject *tmp_expression_value_20;
        CHECK_OBJECT(var_borders);
        tmp_expression_value_19 = var_borders;
        tmp_cmp_expr_left_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_19, mod_consts[118]);
        if (tmp_cmp_expr_left_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 960;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_20 = var_borders;
        tmp_cmp_expr_right_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[110]);
        if (tmp_cmp_expr_right_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_cmp_expr_left_7);

            exception_lineno = 960;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_7 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
        Py_DECREF(tmp_cmp_expr_left_7);
        Py_DECREF(tmp_cmp_expr_right_7);
        if (tmp_condition_result_7 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 960;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_7 == NUITKA_BOOL_TRUE) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
        assert(tmp_condition_result_7 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_7:;
    {
        PyObject *tmp_assattr_value_5;
        PyObject *tmp_assattr_target_5;
        tmp_assattr_value_5 = mod_consts[4];
        CHECK_OBJECT(var_borders);
        tmp_assattr_target_5 = var_borders;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_5, mod_consts[119], tmp_assattr_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 961;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_no_7:;
    {
        PyObject *tmp_assign_source_23;
        PyObject *tmp_called_value_10;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_left_value_25;
        PyObject *tmp_left_value_26;
        PyObject *tmp_left_value_27;
        PyObject *tmp_left_value_28;
        PyObject *tmp_left_value_29;
        PyObject *tmp_left_value_30;
        PyObject *tmp_left_value_31;
        PyObject *tmp_left_value_32;
        PyObject *tmp_left_value_33;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_right_value_25;
        PyObject *tmp_right_value_26;
        PyObject *tmp_right_value_27;
        PyObject *tmp_left_value_34;
        PyObject *tmp_left_value_35;
        PyObject *tmp_expression_value_22;
        PyObject *tmp_right_value_28;
        PyObject *tmp_right_value_29;
        PyObject *tmp_right_value_30;
        PyObject *tmp_left_value_36;
        PyObject *tmp_left_value_37;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_right_value_31;
        PyObject *tmp_right_value_32;
        PyObject *tmp_right_value_33;
        PyObject *tmp_left_value_38;
        PyObject *tmp_left_value_39;
        PyObject *tmp_expression_value_24;
        PyObject *tmp_right_value_34;
        PyObject *tmp_right_value_35;
        PyObject *tmp_right_value_36;
        PyObject *tmp_left_value_40;
        PyObject *tmp_left_value_41;
        PyObject *tmp_expression_value_25;
        PyObject *tmp_right_value_37;
        PyObject *tmp_right_value_38;
        PyObject *tmp_right_value_39;
        PyObject *tmp_left_value_42;
        PyObject *tmp_left_value_43;
        PyObject *tmp_expression_value_26;
        PyObject *tmp_right_value_40;
        PyObject *tmp_right_value_41;
        PyObject *tmp_right_value_42;
        PyObject *tmp_left_value_44;
        PyObject *tmp_left_value_45;
        PyObject *tmp_expression_value_27;
        PyObject *tmp_right_value_43;
        PyObject *tmp_right_value_44;
        PyObject *tmp_right_value_45;
        PyObject *tmp_left_value_46;
        PyObject *tmp_left_value_47;
        PyObject *tmp_expression_value_28;
        PyObject *tmp_right_value_46;
        PyObject *tmp_right_value_47;
        tmp_called_value_10 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_10 == NULL)) {
            tmp_called_value_10 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 962;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_13 = mod_consts[120];
        CHECK_OBJECT(var_borders);
        tmp_expression_value_21 = var_borders;
        tmp_left_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_21, mod_consts[109]);
        if (tmp_left_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_25 = mod_consts[82];
        tmp_left_value_32 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_33, tmp_right_value_25);
        Py_DECREF(tmp_left_value_33);
        if (tmp_left_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_26 = mod_consts[4];
        tmp_left_value_31 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_32, tmp_right_value_26);
        Py_DECREF(tmp_left_value_32);
        if (tmp_left_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 963;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_22 = var_borders;
        tmp_left_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_22, mod_consts[112]);
        if (tmp_left_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_31);

            exception_lineno = 964;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_28 = mod_consts[82];
        tmp_left_value_34 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_35, tmp_right_value_28);
        Py_DECREF(tmp_left_value_35);
        if (tmp_left_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_31);

            exception_lineno = 964;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_29 = mod_consts[40];
        tmp_right_value_27 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_34, tmp_right_value_29);
        Py_DECREF(tmp_left_value_34);
        if (tmp_right_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_31);

            exception_lineno = 964;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_30 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_31, tmp_right_value_27);
        Py_DECREF(tmp_left_value_31);
        Py_DECREF(tmp_right_value_27);
        if (tmp_left_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 964;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_23 = var_borders;
        tmp_left_value_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[114]);
        if (tmp_left_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_30);

            exception_lineno = 965;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_31 = mod_consts[82];
        tmp_left_value_36 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_37, tmp_right_value_31);
        Py_DECREF(tmp_left_value_37);
        if (tmp_left_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_30);

            exception_lineno = 965;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_32 = mod_consts[121];
        tmp_right_value_30 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_36, tmp_right_value_32);
        Py_DECREF(tmp_left_value_36);
        if (tmp_right_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_30);

            exception_lineno = 965;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_29 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_30, tmp_right_value_30);
        Py_DECREF(tmp_left_value_30);
        Py_DECREF(tmp_right_value_30);
        if (tmp_left_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 965;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_24 = var_borders;
        tmp_left_value_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_24, mod_consts[116]);
        if (tmp_left_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_29);

            exception_lineno = 966;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_34 = mod_consts[82];
        tmp_left_value_38 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_39, tmp_right_value_34);
        Py_DECREF(tmp_left_value_39);
        if (tmp_left_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_29);

            exception_lineno = 966;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_35 = mod_consts[122];
        tmp_right_value_33 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_38, tmp_right_value_35);
        Py_DECREF(tmp_left_value_38);
        if (tmp_right_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_29);

            exception_lineno = 966;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_28 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_29, tmp_right_value_33);
        Py_DECREF(tmp_left_value_29);
        Py_DECREF(tmp_right_value_33);
        if (tmp_left_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 966;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_25 = var_borders;
        tmp_left_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_25, mod_consts[111]);
        if (tmp_left_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_28);

            exception_lineno = 967;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_37 = mod_consts[123];
        tmp_left_value_40 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_41, tmp_right_value_37);
        Py_DECREF(tmp_left_value_41);
        if (tmp_left_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_28);

            exception_lineno = 967;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_38 = mod_consts[124];
        tmp_right_value_36 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_40, tmp_right_value_38);
        Py_DECREF(tmp_left_value_40);
        if (tmp_right_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_28);

            exception_lineno = 967;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_27 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_28, tmp_right_value_36);
        Py_DECREF(tmp_left_value_28);
        Py_DECREF(tmp_right_value_36);
        if (tmp_left_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 967;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_26 = var_borders;
        tmp_left_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_26, mod_consts[113]);
        if (tmp_left_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_27);

            exception_lineno = 968;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_40 = mod_consts[123];
        tmp_left_value_42 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_43, tmp_right_value_40);
        Py_DECREF(tmp_left_value_43);
        if (tmp_left_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_27);

            exception_lineno = 968;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_41 = mod_consts[125];
        tmp_right_value_39 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_42, tmp_right_value_41);
        Py_DECREF(tmp_left_value_42);
        if (tmp_right_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_27);

            exception_lineno = 968;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_26 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_27, tmp_right_value_39);
        Py_DECREF(tmp_left_value_27);
        Py_DECREF(tmp_right_value_39);
        if (tmp_left_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 968;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_27 = var_borders;
        tmp_left_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_27, mod_consts[126]);
        if (tmp_left_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_26);

            exception_lineno = 969;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_43 = mod_consts[12];
        tmp_left_value_44 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_45, tmp_right_value_43);
        Py_DECREF(tmp_left_value_45);
        if (tmp_left_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_26);

            exception_lineno = 969;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_44 = mod_consts[127];
        tmp_right_value_42 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_44, tmp_right_value_44);
        Py_DECREF(tmp_left_value_44);
        if (tmp_right_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_26);

            exception_lineno = 969;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_25 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_26, tmp_right_value_42);
        Py_DECREF(tmp_left_value_26);
        Py_DECREF(tmp_right_value_42);
        if (tmp_left_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 969;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_28 = var_borders;
        tmp_left_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_28, mod_consts[128]);
        if (tmp_left_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_25);

            exception_lineno = 970;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_46 = mod_consts[12];
        tmp_left_value_46 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_47, tmp_right_value_46);
        Py_DECREF(tmp_left_value_47);
        if (tmp_left_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_25);

            exception_lineno = 970;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_47 = mod_consts[129];
        tmp_right_value_45 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_46, tmp_right_value_47);
        Py_DECREF(tmp_left_value_46);
        if (tmp_right_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_25);

            exception_lineno = 970;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_14 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_25, tmp_right_value_45);
        Py_DECREF(tmp_left_value_25);
        Py_DECREF(tmp_right_value_45);
        if (tmp_args_element_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 970;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 962;
        {
            PyObject *call_args[] = {tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_assign_source_23 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_10, call_args);
        }

        Py_DECREF(tmp_args_element_value_14);
        if (tmp_assign_source_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 962;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_brd1 == NULL);
        var_brd1 = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_called_value_11;
        PyObject *tmp_args_element_value_15;
        PyObject *tmp_args_element_value_16;
        PyObject *tmp_left_value_48;
        PyObject *tmp_left_value_49;
        PyObject *tmp_left_value_50;
        PyObject *tmp_left_value_51;
        PyObject *tmp_left_value_52;
        PyObject *tmp_left_value_53;
        PyObject *tmp_expression_value_29;
        PyObject *tmp_right_value_48;
        PyObject *tmp_right_value_49;
        PyObject *tmp_right_value_50;
        PyObject *tmp_left_value_54;
        PyObject *tmp_left_value_55;
        PyObject *tmp_expression_value_30;
        PyObject *tmp_right_value_51;
        PyObject *tmp_right_value_52;
        PyObject *tmp_right_value_53;
        PyObject *tmp_left_value_56;
        PyObject *tmp_left_value_57;
        PyObject *tmp_expression_value_31;
        PyObject *tmp_right_value_54;
        PyObject *tmp_right_value_55;
        PyObject *tmp_right_value_56;
        PyObject *tmp_left_value_58;
        PyObject *tmp_left_value_59;
        PyObject *tmp_expression_value_32;
        PyObject *tmp_right_value_57;
        PyObject *tmp_right_value_58;
        PyObject *tmp_right_value_59;
        PyObject *tmp_left_value_60;
        PyObject *tmp_left_value_61;
        PyObject *tmp_expression_value_33;
        PyObject *tmp_right_value_60;
        PyObject *tmp_right_value_61;
        tmp_called_value_11 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_11 == NULL)) {
            tmp_called_value_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 972;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_15 = mod_consts[120];
        CHECK_OBJECT(var_borders);
        tmp_expression_value_29 = var_borders;
        tmp_left_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_29, mod_consts[115]);
        if (tmp_left_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 973;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_48 = mod_consts[123];
        tmp_left_value_52 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_53, tmp_right_value_48);
        Py_DECREF(tmp_left_value_53);
        if (tmp_left_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 973;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_49 = mod_consts[4];
        tmp_left_value_51 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_52, tmp_right_value_49);
        Py_DECREF(tmp_left_value_52);
        if (tmp_left_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 973;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_30 = var_borders;
        tmp_left_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_30, mod_consts[117]);
        if (tmp_left_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_51);

            exception_lineno = 974;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_51 = mod_consts[123];
        tmp_left_value_54 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_55, tmp_right_value_51);
        Py_DECREF(tmp_left_value_55);
        if (tmp_left_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_51);

            exception_lineno = 974;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_52 = mod_consts[45];
        tmp_right_value_50 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_54, tmp_right_value_52);
        Py_DECREF(tmp_left_value_54);
        if (tmp_right_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_51);

            exception_lineno = 974;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_50 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_51, tmp_right_value_50);
        Py_DECREF(tmp_left_value_51);
        Py_DECREF(tmp_right_value_50);
        if (tmp_left_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 974;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_31 = var_borders;
        tmp_left_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_31, mod_consts[119]);
        if (tmp_left_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_50);

            exception_lineno = 975;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_54 = mod_consts[123];
        tmp_left_value_56 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_57, tmp_right_value_54);
        Py_DECREF(tmp_left_value_57);
        if (tmp_left_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_50);

            exception_lineno = 975;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_55 = mod_consts[130];
        tmp_right_value_53 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_56, tmp_right_value_55);
        Py_DECREF(tmp_left_value_56);
        if (tmp_right_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_50);

            exception_lineno = 975;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_49 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_50, tmp_right_value_53);
        Py_DECREF(tmp_left_value_50);
        Py_DECREF(tmp_right_value_53);
        if (tmp_left_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 975;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_borders);
        tmp_expression_value_32 = var_borders;
        tmp_left_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_32, mod_consts[118]);
        if (tmp_left_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_49);

            exception_lineno = 976;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_57 = mod_consts[82];
        tmp_left_value_58 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_59, tmp_right_value_57);
        Py_DECREF(tmp_left_value_59);
        if (tmp_left_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_49);

            exception_lineno = 976;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_58 = mod_consts[131];
        tmp_right_value_56 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_58, tmp_right_value_58);
        Py_DECREF(tmp_left_value_58);
        if (tmp_right_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_49);

            exception_lineno = 976;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_48 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_49, tmp_right_value_56);
        Py_DECREF(tmp_left_value_49);
        Py_DECREF(tmp_right_value_56);
        if (tmp_left_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 976;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_pattern);
        tmp_expression_value_33 = var_pattern;
        tmp_left_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_33, mod_consts[132]);
        if (tmp_left_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_48);

            exception_lineno = 977;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_60 = mod_consts[133];
        tmp_left_value_60 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_61, tmp_right_value_60);
        Py_DECREF(tmp_left_value_61);
        if (tmp_left_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_48);

            exception_lineno = 977;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_61 = mod_consts[134];
        tmp_right_value_59 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_60, tmp_right_value_61);
        Py_DECREF(tmp_left_value_60);
        if (tmp_right_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_48);

            exception_lineno = 977;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_16 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_48, tmp_right_value_59);
        Py_DECREF(tmp_left_value_48);
        Py_DECREF(tmp_right_value_59);
        if (tmp_args_element_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 977;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 972;
        {
            PyObject *call_args[] = {tmp_args_element_value_15, tmp_args_element_value_16};
            tmp_assign_source_24 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_11, call_args);
        }

        Py_DECREF(tmp_args_element_value_16);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 972;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_brd2 == NULL);
        var_brd2 = tmp_assign_source_24;
    }
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_called_value_12;
        PyObject *tmp_args_element_value_17;
        PyObject *tmp_args_element_value_18;
        PyObject *tmp_left_value_62;
        PyObject *tmp_left_value_63;
        PyObject *tmp_left_value_64;
        PyObject *tmp_expression_value_34;
        PyObject *tmp_right_value_62;
        PyObject *tmp_right_value_63;
        PyObject *tmp_right_value_64;
        PyObject *tmp_left_value_65;
        PyObject *tmp_left_value_66;
        PyObject *tmp_expression_value_35;
        PyObject *tmp_right_value_65;
        PyObject *tmp_right_value_66;
        tmp_called_value_12 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_12 == NULL)) {
            tmp_called_value_12 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 979;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_17 = mod_consts[78];
        CHECK_OBJECT(var_pattern);
        tmp_expression_value_34 = var_pattern;
        tmp_left_value_64 = LOOKUP_ATTRIBUTE(tmp_expression_value_34, mod_consts[135]);
        if (tmp_left_value_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 980;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_62 = mod_consts[123];
        tmp_left_value_63 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_64, tmp_right_value_62);
        Py_DECREF(tmp_left_value_64);
        if (tmp_left_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 980;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_63 = mod_consts[4];
        tmp_left_value_62 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_63, tmp_right_value_63);
        Py_DECREF(tmp_left_value_63);
        if (tmp_left_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 980;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_pattern);
        tmp_expression_value_35 = var_pattern;
        tmp_left_value_66 = LOOKUP_ATTRIBUTE(tmp_expression_value_35, mod_consts[136]);
        if (tmp_left_value_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_62);

            exception_lineno = 981;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_65 = mod_consts[123];
        tmp_left_value_65 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_66, tmp_right_value_65);
        Py_DECREF(tmp_left_value_66);
        if (tmp_left_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_62);

            exception_lineno = 981;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_66 = mod_consts[45];
        tmp_right_value_64 = BINARY_OPERATION_LSHIFT_OBJECT_OBJECT_LONG(tmp_left_value_65, tmp_right_value_66);
        Py_DECREF(tmp_left_value_65);
        if (tmp_right_value_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_62);

            exception_lineno = 981;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_18 = BINARY_OPERATION_BITOR_OBJECT_OBJECT_OBJECT(tmp_left_value_62, tmp_right_value_64);
        Py_DECREF(tmp_left_value_62);
        Py_DECREF(tmp_right_value_64);
        if (tmp_args_element_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 981;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame.f_lineno = 979;
        {
            PyObject *call_args[] = {tmp_args_element_value_17, tmp_args_element_value_18};
            tmp_assign_source_25 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_12, call_args);
        }

        Py_DECREF(tmp_args_element_value_18);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 979;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_pat == NULL);
        var_pat = tmp_assign_source_25;
    }
    {
        PyObject *tmp_assattr_value_6;
        PyObject *tmp_left_value_67;
        PyObject *tmp_left_value_68;
        PyObject *tmp_left_value_69;
        PyObject *tmp_left_value_70;
        PyObject *tmp_left_value_71;
        PyObject *tmp_left_value_72;
        PyObject *tmp_left_value_73;
        PyObject *tmp_left_value_74;
        PyObject *tmp_left_value_75;
        PyObject *tmp_right_value_67;
        PyObject *tmp_right_value_68;
        PyObject *tmp_right_value_69;
        PyObject *tmp_right_value_70;
        PyObject *tmp_right_value_71;
        PyObject *tmp_right_value_72;
        PyObject *tmp_right_value_73;
        PyObject *tmp_right_value_74;
        PyObject *tmp_right_value_75;
        PyObject *tmp_assattr_target_6;
        CHECK_OBJECT(var_fnt);
        tmp_left_value_75 = var_fnt;
        CHECK_OBJECT(var_fmt);
        tmp_right_value_67 = var_fmt;
        tmp_left_value_74 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_75, tmp_right_value_67);
        if (tmp_left_value_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 983;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_prt);
        tmp_right_value_68 = var_prt;
        tmp_left_value_73 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_74, tmp_right_value_68);
        Py_DECREF(tmp_left_value_74);
        if (tmp_left_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 983;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_aln);
        tmp_right_value_69 = var_aln;
        tmp_left_value_72 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_73, tmp_right_value_69);
        Py_DECREF(tmp_left_value_73);
        if (tmp_left_value_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_rot);
        tmp_right_value_70 = var_rot;
        tmp_left_value_71 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_72, tmp_right_value_70);
        Py_DECREF(tmp_left_value_72);
        if (tmp_left_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_txt);
        tmp_right_value_71 = var_txt;
        tmp_left_value_70 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_71, tmp_right_value_71);
        Py_DECREF(tmp_left_value_71);
        if (tmp_left_value_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_used_attr);
        tmp_right_value_72 = var_used_attr;
        tmp_left_value_69 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_70, tmp_right_value_72);
        Py_DECREF(tmp_left_value_70);
        if (tmp_left_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 984;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_brd1);
        tmp_right_value_73 = var_brd1;
        tmp_left_value_68 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_69, tmp_right_value_73);
        Py_DECREF(tmp_left_value_69);
        if (tmp_left_value_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 985;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_brd2);
        tmp_right_value_74 = var_brd2;
        tmp_left_value_67 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_68, tmp_right_value_74);
        Py_DECREF(tmp_left_value_68);
        if (tmp_left_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 985;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_pat);
        tmp_right_value_75 = var_pat;
        tmp_assattr_value_6 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_67, tmp_right_value_75);
        Py_DECREF(tmp_left_value_67);
        if (tmp_assattr_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 986;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_6 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_6, mod_consts[58], tmp_assattr_value_6);
        Py_DECREF(tmp_assattr_value_6);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 983;
            type_description_1 = "ooooooooooooooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3f79e4d94a8b176e2e31d866f17bf8a4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3f79e4d94a8b176e2e31d866f17bf8a4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3f79e4d94a8b176e2e31d866f17bf8a4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3f79e4d94a8b176e2e31d866f17bf8a4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3f79e4d94a8b176e2e31d866f17bf8a4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3f79e4d94a8b176e2e31d866f17bf8a4,
        type_description_1,
        par_self,
        par_xf,
        par_xftype,
        var_font_xf_idx,
        var_fmt_str_xf_idx,
        var_alignment,
        var_borders,
        var_pattern,
        var_protection,
        var_fnt,
        var_fmt,
        var_prt,
        var_aln,
        var_rot,
        var_txt,
        var_used_attr,
        var_brd1,
        var_brd2,
        var_pat
    );


    // Release cached frame if used for exception.
    if (frame_3f79e4d94a8b176e2e31d866f17bf8a4 == cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4);
        cache_frame_3f79e4d94a8b176e2e31d866f17bf8a4 = NULL;
    }

    assertFrameObject(frame_3f79e4d94a8b176e2e31d866f17bf8a4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_font_xf_idx);
    Py_DECREF(var_font_xf_idx);
    var_font_xf_idx = NULL;
    CHECK_OBJECT(var_fmt_str_xf_idx);
    Py_DECREF(var_fmt_str_xf_idx);
    var_fmt_str_xf_idx = NULL;
    CHECK_OBJECT(var_alignment);
    Py_DECREF(var_alignment);
    var_alignment = NULL;
    CHECK_OBJECT(var_borders);
    Py_DECREF(var_borders);
    var_borders = NULL;
    CHECK_OBJECT(var_pattern);
    Py_DECREF(var_pattern);
    var_pattern = NULL;
    CHECK_OBJECT(var_protection);
    Py_DECREF(var_protection);
    var_protection = NULL;
    CHECK_OBJECT(var_fnt);
    Py_DECREF(var_fnt);
    var_fnt = NULL;
    CHECK_OBJECT(var_fmt);
    Py_DECREF(var_fmt);
    var_fmt = NULL;
    CHECK_OBJECT(var_prt);
    Py_DECREF(var_prt);
    var_prt = NULL;
    CHECK_OBJECT(var_aln);
    Py_DECREF(var_aln);
    var_aln = NULL;
    CHECK_OBJECT(var_rot);
    Py_DECREF(var_rot);
    var_rot = NULL;
    CHECK_OBJECT(var_txt);
    Py_DECREF(var_txt);
    var_txt = NULL;
    CHECK_OBJECT(var_used_attr);
    Py_DECREF(var_used_attr);
    var_used_attr = NULL;
    CHECK_OBJECT(var_brd1);
    Py_DECREF(var_brd1);
    var_brd1 = NULL;
    CHECK_OBJECT(var_brd2);
    Py_DECREF(var_brd2);
    var_brd2 = NULL;
    CHECK_OBJECT(var_pat);
    Py_DECREF(var_pat);
    var_pat = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_font_xf_idx);
    var_font_xf_idx = NULL;
    Py_XDECREF(var_fmt_str_xf_idx);
    var_fmt_str_xf_idx = NULL;
    Py_XDECREF(var_alignment);
    var_alignment = NULL;
    Py_XDECREF(var_borders);
    var_borders = NULL;
    Py_XDECREF(var_pattern);
    var_pattern = NULL;
    Py_XDECREF(var_protection);
    var_protection = NULL;
    Py_XDECREF(var_fnt);
    var_fnt = NULL;
    Py_XDECREF(var_fmt);
    var_fmt = NULL;
    Py_XDECREF(var_prt);
    var_prt = NULL;
    Py_XDECREF(var_aln);
    var_aln = NULL;
    Py_XDECREF(var_rot);
    var_rot = NULL;
    Py_XDECREF(var_txt);
    var_txt = NULL;
    Py_XDECREF(var_used_attr);
    var_used_attr = NULL;
    Py_XDECREF(var_brd1);
    var_brd1 = NULL;
    Py_XDECREF(var_brd2);
    var_brd2 = NULL;
    Py_XDECREF(var_pat);
    var_pat = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_xf);
    Py_DECREF(par_xf);
    CHECK_OBJECT(par_xftype);
    Py_DECREF(par_xftype);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_xf);
    Py_DECREF(par_xf);
    CHECK_OBJECT(par_xftype);
    Py_DECREF(par_xftype);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__45___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_3067168ac42d474829aa3fefae9ea311;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_3067168ac42d474829aa3fefae9ea311 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_3067168ac42d474829aa3fefae9ea311)) {
        Py_XDECREF(cache_frame_3067168ac42d474829aa3fefae9ea311);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3067168ac42d474829aa3fefae9ea311 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3067168ac42d474829aa3fefae9ea311 = MAKE_FUNCTION_FRAME(codeobj_3067168ac42d474829aa3fefae9ea311, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3067168ac42d474829aa3fefae9ea311->m_type_description == NULL);
    frame_3067168ac42d474829aa3fefae9ea311 = cache_frame_3067168ac42d474829aa3fefae9ea311;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3067168ac42d474829aa3fefae9ea311);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3067168ac42d474829aa3fefae9ea311) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_3067168ac42d474829aa3fefae9ea311->m_frame.f_lineno = 1023;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS4(tmp_called_value_1, mod_consts[137]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1023;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3067168ac42d474829aa3fefae9ea311);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3067168ac42d474829aa3fefae9ea311);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3067168ac42d474829aa3fefae9ea311, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3067168ac42d474829aa3fefae9ea311->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3067168ac42d474829aa3fefae9ea311, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3067168ac42d474829aa3fefae9ea311,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_3067168ac42d474829aa3fefae9ea311 == cache_frame_3067168ac42d474829aa3fefae9ea311) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3067168ac42d474829aa3fefae9ea311);
        cache_frame_3067168ac42d474829aa3fefae9ea311 = NULL;
    }

    assertFrameObject(frame_3067168ac42d474829aa3fefae9ea311);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__46___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_custom_palette = python_pars[1];
    PyObject *var_n_colours = NULL;
    PyObject *var_fmt = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    struct Nuitka_FrameObject *frame_072645c2450247d76e051a52c6518a58;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    static struct Nuitka_FrameObject *cache_frame_072645c2450247d76e051a52c6518a58 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_072645c2450247d76e051a52c6518a58)) {
        Py_XDECREF(cache_frame_072645c2450247d76e051a52c6518a58);

#if _DEBUG_REFCOUNTS
        if (cache_frame_072645c2450247d76e051a52c6518a58 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_072645c2450247d76e051a52c6518a58 = MAKE_FUNCTION_FRAME(codeobj_072645c2450247d76e051a52c6518a58, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_072645c2450247d76e051a52c6518a58->m_type_description == NULL);
    frame_072645c2450247d76e051a52c6518a58 = cache_frame_072645c2450247d76e051a52c6518a58;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_072645c2450247d76e051a52c6518a58);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_072645c2450247d76e051a52c6518a58) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(par_custom_palette);
        tmp_len_arg_1 = par_custom_palette;
        tmp_assign_source_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1073;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_n_colours == NULL);
        var_n_colours = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(var_n_colours);
        tmp_cmp_expr_left_1 = var_n_colours;
        tmp_cmp_expr_right_1 = mod_consts[138];
        tmp_condition_result_1 = RICH_COMPARE_NE_CBOOL_LONG_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        tmp_raise_type_1 = PyExc_AssertionError;
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_lineno = 1074;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "oooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1076;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(var_n_colours);
        tmp_args_element_value_2 = var_n_colours;
        frame_072645c2450247d76e051a52c6518a58->m_frame.f_lineno = 1076;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1076;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1076;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        tmp_left_value_1 = mod_consts[139];
        CHECK_OBJECT(var_n_colours);
        tmp_right_value_1 = var_n_colours;
        tmp_assign_source_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1079;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(var_fmt == NULL);
        var_fmt = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_assign_source_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_inplace_assign_1__value == NULL);
        tmp_inplace_assign_1__value = tmp_assign_source_3;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_dircall_arg3_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_2 = tmp_inplace_assign_1__value;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_fmt);
        tmp_tuple_element_1 = var_fmt;
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_custom_palette);
        tmp_dircall_arg3_1 = par_custom_palette;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_right_value_2 = impl___main__$$$function__6_complex_call_helper_pos_star_list(dir_call_args);
        }
        if (tmp_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_4 = tmp_left_value_2;
        tmp_inplace_assign_1__value = tmp_assign_source_4;

    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_2 = tmp_inplace_assign_1__value;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[58], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1080;
            type_description_1 = "oooo";
            goto try_except_handler_2;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_072645c2450247d76e051a52c6518a58);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_072645c2450247d76e051a52c6518a58);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_072645c2450247d76e051a52c6518a58, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_072645c2450247d76e051a52c6518a58->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_072645c2450247d76e051a52c6518a58, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_072645c2450247d76e051a52c6518a58,
        type_description_1,
        par_self,
        par_custom_palette,
        var_n_colours,
        var_fmt
    );


    // Release cached frame if used for exception.
    if (frame_072645c2450247d76e051a52c6518a58 == cache_frame_072645c2450247d76e051a52c6518a58) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_072645c2450247d76e051a52c6518a58);
        cache_frame_072645c2450247d76e051a52c6518a58 = NULL;
    }

    assertFrameObject(frame_072645c2450247d76e051a52c6518a58);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_n_colours);
    Py_DECREF(var_n_colours);
    var_n_colours = NULL;
    CHECK_OBJECT(var_fmt);
    Py_DECREF(var_fmt);
    var_fmt = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_n_colours);
    var_n_colours = NULL;
    Py_XDECREF(var_fmt);
    var_fmt = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_custom_palette);
    Py_DECREF(par_custom_palette);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_custom_palette);
    Py_DECREF(par_custom_palette);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__47___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_stream_pos = python_pars[1];
    PyObject *par_visibility = python_pars[2];
    PyObject *par_sheetname = python_pars[3];
    PyObject *par_encoding = python_pars[4];
    PyObject *var_usheetname = NULL;
    PyObject *var_uusheetname_len = NULL;
    struct Nuitka_FrameObject *frame_fccd92954a73c8ea3207ab295728e3ed;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_fccd92954a73c8ea3207ab295728e3ed = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_fccd92954a73c8ea3207ab295728e3ed)) {
        Py_XDECREF(cache_frame_fccd92954a73c8ea3207ab295728e3ed);

#if _DEBUG_REFCOUNTS
        if (cache_frame_fccd92954a73c8ea3207ab295728e3ed == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_fccd92954a73c8ea3207ab295728e3ed = MAKE_FUNCTION_FRAME(codeobj_fccd92954a73c8ea3207ab295728e3ed, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_fccd92954a73c8ea3207ab295728e3ed->m_type_description == NULL);
    frame_fccd92954a73c8ea3207ab295728e3ed = cache_frame_fccd92954a73c8ea3207ab295728e3ed;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fccd92954a73c8ea3207ab295728e3ed);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fccd92954a73c8ea3207ab295728e3ed) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[89]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[89]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1109;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_sheetname);
        tmp_args_element_value_1 = par_sheetname;
        CHECK_OBJECT(par_encoding);
        tmp_args_element_value_2 = par_encoding;
        frame_fccd92954a73c8ea3207ab295728e3ed->m_frame.f_lineno = 1109;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1109;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_usheetname == NULL);
        var_usheetname = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_usheetname);
        tmp_len_arg_1 = var_usheetname;
        tmp_assign_source_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1110;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_uusheetname_len == NULL);
        var_uusheetname_len = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1112;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = mod_consts[140];
        CHECK_OBJECT(var_uusheetname_len);
        tmp_right_value_1 = var_uusheetname_len;
        tmp_args_element_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1112;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_stream_pos);
        tmp_args_element_value_4 = par_stream_pos;
        CHECK_OBJECT(par_visibility);
        tmp_args_element_value_5 = par_visibility;
        tmp_args_element_value_6 = mod_consts[4];
        CHECK_OBJECT(var_usheetname);
        tmp_args_element_value_7 = var_usheetname;
        frame_fccd92954a73c8ea3207ab295728e3ed->m_frame.f_lineno = 1112;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_3);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1112;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1112;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fccd92954a73c8ea3207ab295728e3ed);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fccd92954a73c8ea3207ab295728e3ed);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fccd92954a73c8ea3207ab295728e3ed, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_fccd92954a73c8ea3207ab295728e3ed->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fccd92954a73c8ea3207ab295728e3ed, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_fccd92954a73c8ea3207ab295728e3ed,
        type_description_1,
        par_self,
        par_stream_pos,
        par_visibility,
        par_sheetname,
        par_encoding,
        var_usheetname,
        var_uusheetname_len
    );


    // Release cached frame if used for exception.
    if (frame_fccd92954a73c8ea3207ab295728e3ed == cache_frame_fccd92954a73c8ea3207ab295728e3ed) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_fccd92954a73c8ea3207ab295728e3ed);
        cache_frame_fccd92954a73c8ea3207ab295728e3ed = NULL;
    }

    assertFrameObject(frame_fccd92954a73c8ea3207ab295728e3ed);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_usheetname);
    Py_DECREF(var_usheetname);
    var_usheetname = NULL;
    CHECK_OBJECT(var_uusheetname_len);
    Py_DECREF(var_uusheetname_len);
    var_uusheetname_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_usheetname);
    var_usheetname = NULL;
    Py_XDECREF(var_uusheetname_len);
    var_uusheetname_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_stream_pos);
    Py_DECREF(par_stream_pos);
    CHECK_OBJECT(par_visibility);
    Py_DECREF(par_visibility);
    CHECK_OBJECT(par_sheetname);
    Py_DECREF(par_sheetname);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_stream_pos);
    Py_DECREF(par_stream_pos);
    CHECK_OBJECT(par_visibility);
    Py_DECREF(par_visibility);
    CHECK_OBJECT(par_sheetname);
    Py_DECREF(par_sheetname);
    CHECK_OBJECT(par_encoding);
    Py_DECREF(par_encoding);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__48___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_sst_stream_pos = python_pars[1];
    PyObject *par_str_placement = python_pars[2];
    PyObject *par_portions_len = python_pars[3];
    PyObject *var_extsst = NULL;
    PyObject *var_abs_stream_pos = NULL;
    PyObject *var_str_counter = NULL;
    PyObject *var_portion_counter = NULL;
    PyObject *var_str_chunk_num = NULL;
    PyObject *var_pos_in_chunk = NULL;
    PyObject *var_str_stream_pos = NULL;
    PyObject *var_exsst_str_count_delta = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_0997f74cee2ac62ec2de06377f564562;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_0997f74cee2ac62ec2de06377f564562 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyDict_New();
        assert(var_extsst == NULL);
        var_extsst = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(par_sst_stream_pos);
        tmp_assign_source_2 = par_sst_stream_pos;
        assert(var_abs_stream_pos == NULL);
        Py_INCREF(tmp_assign_source_2);
        var_abs_stream_pos = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = mod_consts[4];
        assert(var_str_counter == NULL);
        Py_INCREF(tmp_assign_source_3);
        var_str_counter = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = mod_consts[4];
        assert(var_portion_counter == NULL);
        Py_INCREF(tmp_assign_source_4);
        var_portion_counter = tmp_assign_source_4;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_0997f74cee2ac62ec2de06377f564562)) {
        Py_XDECREF(cache_frame_0997f74cee2ac62ec2de06377f564562);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0997f74cee2ac62ec2de06377f564562 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0997f74cee2ac62ec2de06377f564562 = MAKE_FUNCTION_FRAME(codeobj_0997f74cee2ac62ec2de06377f564562, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0997f74cee2ac62ec2de06377f564562->m_type_description == NULL);
    frame_0997f74cee2ac62ec2de06377f564562 = cache_frame_0997f74cee2ac62ec2de06377f564562;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0997f74cee2ac62ec2de06377f564562);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0997f74cee2ac62ec2de06377f564562) == 2); // Frame stack

    // Framed code:
    loop_start_1:;
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_len_arg_1;
        if (var_str_counter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1196;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_1 = var_str_counter;
        CHECK_OBJECT(par_str_placement);
        tmp_len_arg_1 = par_str_placement;
        tmp_cmp_expr_right_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_cmp_expr_right_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1196;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_1 = RICH_COMPARE_LT_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_right_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1196;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1196;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_str_placement);
        tmp_expression_value_1 = par_str_placement;
        if (var_str_counter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1197;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }

        tmp_subscript_value_1 = var_str_counter;
        tmp_iter_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1197;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_5 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1197;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_1, 0, 2);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooo";
            exception_lineno = 1197;
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_2, 1, 2);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "oooooooooooo";
            exception_lineno = 1197;
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "oooooooooooo";
                    exception_lineno = 1197;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[16];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "oooooooooooo";
            exception_lineno = 1197;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_str_chunk_num;
            var_str_chunk_num = tmp_assign_source_8;
            Py_INCREF(var_str_chunk_num);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_pos_in_chunk;
            var_pos_in_chunk = tmp_assign_source_9;
            Py_INCREF(var_pos_in_chunk);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        nuitka_bool tmp_condition_result_2;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(var_str_chunk_num);
        tmp_cmp_expr_left_2 = var_str_chunk_num;
        if (var_portion_counter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[142]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1198;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_right_2 = var_portion_counter;
        tmp_condition_result_2 = RICH_COMPARE_NE_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        if (tmp_condition_result_2 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1198;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
        assert(tmp_condition_result_2 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(var_str_chunk_num);
        tmp_assign_source_10 = var_str_chunk_num;
        {
            PyObject *old = var_portion_counter;
            var_portion_counter = tmp_assign_source_10;
            Py_INCREF(var_portion_counter);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        if (var_abs_stream_pos == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1200;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_1 = var_abs_stream_pos;
        CHECK_OBJECT(par_portions_len);
        tmp_expression_value_2 = par_portions_len;
        CHECK_OBJECT(var_portion_counter);
        tmp_left_value_2 = var_portion_counter;
        tmp_right_value_2 = mod_consts[12];
        tmp_subscript_value_2 = BINARY_OPERATION_SUB_OBJECT_OBJECT_LONG(tmp_left_value_2, tmp_right_value_2);
        if (tmp_subscript_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1200;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_2, tmp_subscript_value_2);
        Py_DECREF(tmp_subscript_value_2);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1200;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1200;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_11 = tmp_left_value_1;
        var_abs_stream_pos = tmp_assign_source_11;

    }
    branch_no_2:;
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_left_value_3;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_3;
        PyObject *tmp_right_value_4;
        if (var_abs_stream_pos == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[143]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1202;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_4 = var_abs_stream_pos;
        CHECK_OBJECT(var_pos_in_chunk);
        tmp_right_value_3 = var_pos_in_chunk;
        tmp_left_value_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_4, tmp_right_value_3);
        if (tmp_left_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1202;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_4 = mod_consts[40];
        tmp_assign_source_12 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_3, tmp_right_value_4);
        Py_DECREF(tmp_left_value_3);
        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1202;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = var_str_stream_pos;
            var_str_stream_pos = tmp_assign_source_12;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_ass_subvalue_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_ass_subscribed_1;
        PyObject *tmp_ass_subscript_1;
        CHECK_OBJECT(var_pos_in_chunk);
        tmp_tuple_element_1 = var_pos_in_chunk;
        tmp_ass_subvalue_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_ass_subvalue_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(var_str_stream_pos);
        tmp_tuple_element_1 = var_str_stream_pos;
        PyTuple_SET_ITEM0(tmp_ass_subvalue_1, 1, tmp_tuple_element_1);
        if (var_extsst == NULL) {
            Py_DECREF(tmp_ass_subvalue_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[144]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1203;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscribed_1 = var_extsst;
        if (var_str_counter == NULL) {
            Py_DECREF(tmp_ass_subvalue_1);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1203;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_ass_subscript_1 = var_str_counter;
        tmp_result = SET_SUBSCRIPT(tmp_ass_subscribed_1, tmp_ass_subscript_1, tmp_ass_subvalue_1);
        Py_DECREF(tmp_ass_subvalue_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1203;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        if (var_str_counter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1204;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_5 = var_str_counter;
        tmp_right_value_5 = mod_consts[12];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_value_5, tmp_right_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1204;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_13 = tmp_left_value_5;
        var_str_counter = tmp_assign_source_13;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1196;
        type_description_1 = "oooooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_left_value_6;
        PyObject *tmp_left_value_7;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_right_value_6;
        PyObject *tmp_right_value_7;
        tmp_called_value_1 = LOOKUP_BUILTIN(mod_consts[145]);
        assert(tmp_called_value_1 != NULL);
        tmp_args_element_value_1 = mod_consts[121];
        CHECK_OBJECT(par_str_placement);
        tmp_len_arg_2 = par_str_placement;
        tmp_left_value_7 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_left_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1206;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_6 = mod_consts[121];
        tmp_left_value_6 = BINARY_OPERATION_MULT_OBJECT_LONG_LONG(tmp_left_value_7, tmp_right_value_6);
        Py_DECREF(tmp_left_value_7);
        assert(!(tmp_left_value_6 == NULL));
        tmp_right_value_7 = mod_consts[146];
        tmp_args_element_value_2 = BINARY_OPERATION_TRUEDIV_OBJECT_LONG_LONG(tmp_left_value_6, tmp_right_value_7);
        Py_DECREF(tmp_left_value_6);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1206;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        frame_0997f74cee2ac62ec2de06377f564562->m_frame.f_lineno = 1206;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assign_source_14 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1206;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_exsst_str_count_delta == NULL);
        var_exsst_str_count_delta = tmp_assign_source_14;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1207;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_3 = mod_consts[78];
        CHECK_OBJECT(var_exsst_str_count_delta);
        tmp_args_element_value_4 = var_exsst_str_count_delta;
        frame_0997f74cee2ac62ec2de06377f564562->m_frame.f_lineno = 1207;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1207;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1207;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_15;
        tmp_assign_source_15 = mod_consts[4];
        {
            PyObject *old = var_str_counter;
            var_str_counter = tmp_assign_source_15;
            Py_INCREF(var_str_counter);
            Py_XDECREF(old);
        }

    }
    loop_start_2:;
    {
        bool tmp_condition_result_3;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        PyObject *tmp_len_arg_3;
        if (var_str_counter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1209;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_3 = var_str_counter;
        CHECK_OBJECT(par_str_placement);
        tmp_len_arg_3 = par_str_placement;
        tmp_cmp_expr_right_3 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_cmp_expr_right_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1209;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_2 = RICH_COMPARE_LT_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
        Py_DECREF(tmp_cmp_expr_right_3);
        if (tmp_operand_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1209;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        Py_DECREF(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1209;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_3 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    goto loop_end_2;
    branch_no_3:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_expression_value_3;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_3 = par_self;
        tmp_assign_source_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[58]);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_inplace_assign_1__value;
            tmp_inplace_assign_1__value = tmp_assign_source_16;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_subscript_value_4;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_expression_value_7;
        PyObject *tmp_subscript_value_5;
        PyObject *tmp_subscript_value_6;
        PyObject *tmp_args_element_value_8;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_8 = tmp_inplace_assign_1__value;
        tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_3 == NULL)) {
            tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_args_element_value_5 = mod_consts[147];
        if (var_extsst == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[144]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_expression_value_5 = var_extsst;
        if (var_str_counter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_subscript_value_3 = var_str_counter;
        tmp_expression_value_4 = LOOKUP_SUBSCRIPT(tmp_expression_value_5, tmp_subscript_value_3);
        if (tmp_expression_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_subscript_value_4 = mod_consts[12];
        tmp_args_element_value_6 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_4, tmp_subscript_value_4, 1);
        Py_DECREF(tmp_expression_value_4);
        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        if (var_extsst == NULL) {
            Py_DECREF(tmp_args_element_value_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[144]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_expression_value_7 = var_extsst;
        if (var_str_counter == NULL) {
            Py_DECREF(tmp_args_element_value_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_subscript_value_5 = var_str_counter;
        tmp_expression_value_6 = LOOKUP_SUBSCRIPT(tmp_expression_value_7, tmp_subscript_value_5);
        if (tmp_expression_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_6);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_subscript_value_6 = mod_consts[4];
        tmp_args_element_value_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_6, tmp_subscript_value_6, 0);
        Py_DECREF(tmp_expression_value_6);
        if (tmp_args_element_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_6);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_args_element_value_8 = mod_consts[4];
        frame_0997f74cee2ac62ec2de06377f564562->m_frame.f_lineno = 1210;
        {
            PyObject *call_args[] = {tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_right_value_8 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_args_element_value_6);
        Py_DECREF(tmp_args_element_value_7);
        if (tmp_right_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_8, tmp_right_value_8);
        Py_DECREF(tmp_right_value_8);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_17 = tmp_left_value_8;
        tmp_inplace_assign_1__value = tmp_assign_source_17;

    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_2 = tmp_inplace_assign_1__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }

        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[58], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1210;
            type_description_1 = "oooooooooooo";
            goto try_except_handler_4;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_left_value_9;
        PyObject *tmp_right_value_9;
        if (var_str_counter == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[141]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1211;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_9 = var_str_counter;
        if (var_exsst_str_count_delta == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[148]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1211;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_right_value_9 = var_exsst_str_count_delta;
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_9, tmp_right_value_9);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1211;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_18 = tmp_left_value_9;
        var_str_counter = tmp_assign_source_18;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1209;
        type_description_1 = "oooooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_2;
    loop_end_2:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0997f74cee2ac62ec2de06377f564562);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0997f74cee2ac62ec2de06377f564562);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0997f74cee2ac62ec2de06377f564562, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0997f74cee2ac62ec2de06377f564562->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0997f74cee2ac62ec2de06377f564562, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0997f74cee2ac62ec2de06377f564562,
        type_description_1,
        par_self,
        par_sst_stream_pos,
        par_str_placement,
        par_portions_len,
        var_extsst,
        var_abs_stream_pos,
        var_str_counter,
        var_portion_counter,
        var_str_chunk_num,
        var_pos_in_chunk,
        var_str_stream_pos,
        var_exsst_str_count_delta
    );


    // Release cached frame if used for exception.
    if (frame_0997f74cee2ac62ec2de06377f564562 == cache_frame_0997f74cee2ac62ec2de06377f564562) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_0997f74cee2ac62ec2de06377f564562);
        cache_frame_0997f74cee2ac62ec2de06377f564562 = NULL;
    }

    assertFrameObject(frame_0997f74cee2ac62ec2de06377f564562);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_extsst);
    var_extsst = NULL;
    Py_XDECREF(var_abs_stream_pos);
    var_abs_stream_pos = NULL;
    Py_XDECREF(var_str_counter);
    var_str_counter = NULL;
    Py_XDECREF(var_portion_counter);
    var_portion_counter = NULL;
    Py_XDECREF(var_str_chunk_num);
    var_str_chunk_num = NULL;
    Py_XDECREF(var_pos_in_chunk);
    var_pos_in_chunk = NULL;
    Py_XDECREF(var_str_stream_pos);
    var_str_stream_pos = NULL;
    Py_XDECREF(var_exsst_str_count_delta);
    var_exsst_str_count_delta = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_extsst);
    var_extsst = NULL;
    Py_XDECREF(var_abs_stream_pos);
    var_abs_stream_pos = NULL;
    Py_XDECREF(var_str_counter);
    var_str_counter = NULL;
    Py_XDECREF(var_portion_counter);
    var_portion_counter = NULL;
    Py_XDECREF(var_str_chunk_num);
    var_str_chunk_num = NULL;
    Py_XDECREF(var_pos_in_chunk);
    var_pos_in_chunk = NULL;
    Py_XDECREF(var_str_stream_pos);
    var_str_stream_pos = NULL;
    Py_XDECREF(var_exsst_str_count_delta);
    var_exsst_str_count_delta = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_sst_stream_pos);
    Py_DECREF(par_sst_stream_pos);
    CHECK_OBJECT(par_str_placement);
    Py_DECREF(par_str_placement);
    CHECK_OBJECT(par_portions_len);
    Py_DECREF(par_portions_len);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_sst_stream_pos);
    Py_DECREF(par_sst_stream_pos);
    CHECK_OBJECT(par_str_placement);
    Py_DECREF(par_str_placement);
    CHECK_OBJECT(par_portions_len);
    Py_DECREF(par_portions_len);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__49___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_first_used_row = python_pars[1];
    PyObject *par_last_used_row = python_pars[2];
    PyObject *par_first_used_col = python_pars[3];
    PyObject *par_last_used_col = python_pars[4];
    struct Nuitka_FrameObject *frame_6cdb6e9f8ccf33a3e7b88dd3be597adf;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf)) {
        Py_XDECREF(cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf);

#if _DEBUG_REFCOUNTS
        if (cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf = MAKE_FUNCTION_FRAME(codeobj_6cdb6e9f8ccf33a3e7b88dd3be597adf, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf->m_type_description == NULL);
    frame_6cdb6e9f8ccf33a3e7b88dd3be597adf = cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_6cdb6e9f8ccf33a3e7b88dd3be597adf);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_6cdb6e9f8ccf33a3e7b88dd3be597adf) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_or_left_truth_1;
        nuitka_bool tmp_or_left_value_1;
        nuitka_bool tmp_or_right_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        CHECK_OBJECT(par_first_used_row);
        tmp_cmp_expr_left_1 = par_first_used_row;
        CHECK_OBJECT(par_last_used_row);
        tmp_cmp_expr_right_1 = par_last_used_row;
        tmp_or_left_value_1 = RICH_COMPARE_GT_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_or_left_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1226;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_or_left_truth_1 = tmp_or_left_value_1 == NUITKA_BOOL_TRUE ? 1 : 0;
        if (tmp_or_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_or_left_value_1);

            exception_lineno = 1226;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_or_left_truth_1 == 1) {
            goto or_left_1;
        } else {
            goto or_right_1;
        }
        or_right_1:;
        assert(tmp_or_left_value_1 != NUITKA_BOOL_UNASSIGNED);
        CHECK_OBJECT(par_first_used_col);
        tmp_cmp_expr_left_2 = par_first_used_col;
        CHECK_OBJECT(par_last_used_col);
        tmp_cmp_expr_right_2 = par_last_used_col;
        tmp_or_right_value_1 = RICH_COMPARE_GT_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        if (tmp_or_right_value_1 == NUITKA_BOOL_EXCEPTION) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1226;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = tmp_or_right_value_1;
        goto or_end_1;
        or_left_1:;
        tmp_condition_result_1 = tmp_or_left_value_1;
        or_end_1:;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = mod_consts[4];
        {
            PyObject *old = par_first_used_row;
            assert(old != NULL);
            par_first_used_row = tmp_assign_source_1;
            Py_INCREF(par_first_used_row);
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = mod_consts[4];
        {
            PyObject *old = par_first_used_col;
            assert(old != NULL);
            par_first_used_col = tmp_assign_source_2;
            Py_INCREF(par_first_used_col);
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = mod_consts[149];
        {
            PyObject *old = par_last_used_row;
            assert(old != NULL);
            par_last_used_row = tmp_assign_source_3;
            Py_INCREF(par_last_used_row);
            Py_DECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_4;
        tmp_assign_source_4 = mod_consts[149];
        {
            PyObject *old = par_last_used_col;
            assert(old != NULL);
            par_last_used_col = tmp_assign_source_4;
            Py_INCREF(par_last_used_col);
            Py_DECREF(old);
        }

    }
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1230;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[150];
        CHECK_OBJECT(par_first_used_row);
        tmp_args_element_value_2 = par_first_used_row;
        CHECK_OBJECT(par_last_used_row);
        tmp_left_value_1 = par_last_used_row;
        tmp_right_value_1 = mod_consts[12];
        tmp_args_element_value_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1231;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_first_used_col);
        tmp_args_element_value_4 = par_first_used_col;
        CHECK_OBJECT(par_last_used_col);
        tmp_left_value_2 = par_last_used_col;
        tmp_right_value_2 = mod_consts[12];
        tmp_args_element_value_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_2, tmp_right_value_2);
        if (tmp_args_element_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_3);

            exception_lineno = 1232;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_6 = mod_consts[4];
        frame_6cdb6e9f8ccf33a3e7b88dd3be597adf->m_frame.f_lineno = 1230;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS6(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_3);
        Py_DECREF(tmp_args_element_value_5);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1230;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1230;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6cdb6e9f8ccf33a3e7b88dd3be597adf);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_6cdb6e9f8ccf33a3e7b88dd3be597adf);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_6cdb6e9f8ccf33a3e7b88dd3be597adf, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_6cdb6e9f8ccf33a3e7b88dd3be597adf->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_6cdb6e9f8ccf33a3e7b88dd3be597adf, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_6cdb6e9f8ccf33a3e7b88dd3be597adf,
        type_description_1,
        par_self,
        par_first_used_row,
        par_last_used_row,
        par_first_used_col,
        par_last_used_col
    );


    // Release cached frame if used for exception.
    if (frame_6cdb6e9f8ccf33a3e7b88dd3be597adf == cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf);
        cache_frame_6cdb6e9f8ccf33a3e7b88dd3be597adf = NULL;
    }

    assertFrameObject(frame_6cdb6e9f8ccf33a3e7b88dd3be597adf);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(par_first_used_row);
    Py_DECREF(par_first_used_row);
    par_first_used_row = NULL;
    CHECK_OBJECT(par_last_used_row);
    Py_DECREF(par_last_used_row);
    par_last_used_row = NULL;
    CHECK_OBJECT(par_first_used_col);
    Py_DECREF(par_first_used_col);
    par_first_used_col = NULL;
    CHECK_OBJECT(par_last_used_col);
    Py_DECREF(par_last_used_col);
    par_last_used_col = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(par_first_used_row);
    par_first_used_row = NULL;
    Py_XDECREF(par_last_used_row);
    par_last_used_row = NULL;
    Py_XDECREF(par_first_used_col);
    par_first_used_col = NULL;
    Py_XDECREF(par_last_used_col);
    par_last_used_col = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__50___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_options = python_pars[1];
    PyObject *par_first_visible_row = python_pars[2];
    PyObject *par_first_visible_col = python_pars[3];
    PyObject *par_grid_colour = python_pars[4];
    PyObject *par_preview_magn = python_pars[5];
    PyObject *par_normal_magn = python_pars[6];
    PyObject *par_scl_magn = python_pars[7];
    struct Nuitka_FrameObject *frame_3570e112a799365aa38f96faf7609121;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_3570e112a799365aa38f96faf7609121 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_3570e112a799365aa38f96faf7609121)) {
        Py_XDECREF(cache_frame_3570e112a799365aa38f96faf7609121);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3570e112a799365aa38f96faf7609121 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3570e112a799365aa38f96faf7609121 = MAKE_FUNCTION_FRAME(codeobj_3570e112a799365aa38f96faf7609121, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3570e112a799365aa38f96faf7609121->m_type_description == NULL);
    frame_3570e112a799365aa38f96faf7609121 = cache_frame_3570e112a799365aa38f96faf7609121;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3570e112a799365aa38f96faf7609121);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3570e112a799365aa38f96faf7609121) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1294;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[151];
        CHECK_OBJECT(par_options);
        tmp_args_element_value_2 = par_options;
        CHECK_OBJECT(par_first_visible_row);
        tmp_args_element_value_3 = par_first_visible_row;
        CHECK_OBJECT(par_first_visible_col);
        tmp_args_element_value_4 = par_first_visible_col;
        CHECK_OBJECT(par_grid_colour);
        tmp_args_element_value_5 = par_grid_colour;
        tmp_args_element_value_6 = mod_consts[4];
        CHECK_OBJECT(par_preview_magn);
        tmp_args_element_value_7 = par_preview_magn;
        CHECK_OBJECT(par_normal_magn);
        tmp_args_element_value_8 = par_normal_magn;
        tmp_args_element_value_9 = mod_consts[4];
        frame_3570e112a799365aa38f96faf7609121->m_frame.f_lineno = 1294;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS9(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1294;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1294;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_scl_magn);
        tmp_cmp_expr_left_1 = par_scl_magn;
        tmp_cmp_expr_right_1 = Py_None;
        tmp_condition_result_1 = (tmp_cmp_expr_left_1 != tmp_cmp_expr_right_1) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_assattr_target_2;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1301;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_10 = mod_consts[152];
        tmp_args_element_value_11 = mod_consts[153];
        tmp_args_element_value_12 = mod_consts[40];
        CHECK_OBJECT(par_scl_magn);
        tmp_args_element_value_13 = par_scl_magn;
        tmp_args_element_value_14 = mod_consts[154];
        frame_3570e112a799365aa38f96faf7609121->m_frame.f_lineno = 1301;
        {
            PyObject *call_args[] = {tmp_args_element_value_10, tmp_args_element_value_11, tmp_args_element_value_12, tmp_args_element_value_13, tmp_args_element_value_14};
            tmp_assattr_value_2 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_2, call_args);
        }

        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1301;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[155], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1301;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_3;
        PyObject *tmp_assattr_target_3;
        tmp_assattr_value_3 = mod_consts[19];
        CHECK_OBJECT(par_self);
        tmp_assattr_target_3 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_3, mod_consts[155], tmp_assattr_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1303;
            type_description_1 = "oooooooo";
            goto frame_exception_exit_1;
        }
    }
    branch_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3570e112a799365aa38f96faf7609121);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3570e112a799365aa38f96faf7609121);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3570e112a799365aa38f96faf7609121, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3570e112a799365aa38f96faf7609121->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3570e112a799365aa38f96faf7609121, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3570e112a799365aa38f96faf7609121,
        type_description_1,
        par_self,
        par_options,
        par_first_visible_row,
        par_first_visible_col,
        par_grid_colour,
        par_preview_magn,
        par_normal_magn,
        par_scl_magn
    );


    // Release cached frame if used for exception.
    if (frame_3570e112a799365aa38f96faf7609121 == cache_frame_3570e112a799365aa38f96faf7609121) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3570e112a799365aa38f96faf7609121);
        cache_frame_3570e112a799365aa38f96faf7609121 = NULL;
    }

    assertFrameObject(frame_3570e112a799365aa38f96faf7609121);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_first_visible_row);
    Py_DECREF(par_first_visible_row);
    CHECK_OBJECT(par_first_visible_col);
    Py_DECREF(par_first_visible_col);
    CHECK_OBJECT(par_grid_colour);
    Py_DECREF(par_grid_colour);
    CHECK_OBJECT(par_preview_magn);
    Py_DECREF(par_preview_magn);
    CHECK_OBJECT(par_normal_magn);
    Py_DECREF(par_normal_magn);
    CHECK_OBJECT(par_scl_magn);
    Py_DECREF(par_scl_magn);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_first_visible_row);
    Py_DECREF(par_first_visible_row);
    CHECK_OBJECT(par_first_visible_col);
    Py_DECREF(par_first_visible_col);
    CHECK_OBJECT(par_grid_colour);
    Py_DECREF(par_grid_colour);
    CHECK_OBJECT(par_preview_magn);
    Py_DECREF(par_preview_magn);
    CHECK_OBJECT(par_normal_magn);
    Py_DECREF(par_normal_magn);
    CHECK_OBJECT(par_scl_magn);
    Py_DECREF(par_scl_magn);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__51_get(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_3e9926c4fe83d2d59ac5360b0e6709a4;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4)) {
        Py_XDECREF(cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4);

#if _DEBUG_REFCOUNTS
        if (cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4 = MAKE_FUNCTION_FRAME(codeobj_3e9926c4fe83d2d59ac5360b0e6709a4, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4->m_type_description == NULL);
    frame_3e9926c4fe83d2d59ac5360b0e6709a4 = cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_3e9926c4fe83d2d59ac5360b0e6709a4);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_3e9926c4fe83d2d59ac5360b0e6709a4) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_left_value_1;
        PyObject *tmp_left_value_2;
        PyObject *tmp_called_instance_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_right_value_2;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(par_self);
        tmp_called_instance_1 = par_self;
        frame_3e9926c4fe83d2d59ac5360b0e6709a4->m_frame.f_lineno = 1306;
        tmp_left_value_2 = CALL_METHOD_NO_ARGS(tmp_called_instance_1, mod_consts[64]);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1306;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_right_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 1306;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_2, tmp_right_value_1);
        Py_DECREF(tmp_left_value_2);
        Py_DECREF(tmp_right_value_1);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1306;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_right_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[155]);
        if (tmp_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_1);

            exception_lineno = 1306;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        tmp_return_value = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_2);
        Py_DECREF(tmp_left_value_1);
        Py_DECREF(tmp_right_value_2);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1306;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3e9926c4fe83d2d59ac5360b0e6709a4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_3e9926c4fe83d2d59ac5360b0e6709a4);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_3e9926c4fe83d2d59ac5360b0e6709a4);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_3e9926c4fe83d2d59ac5360b0e6709a4, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_3e9926c4fe83d2d59ac5360b0e6709a4->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_3e9926c4fe83d2d59ac5360b0e6709a4, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_3e9926c4fe83d2d59ac5360b0e6709a4,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_3e9926c4fe83d2d59ac5360b0e6709a4 == cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4);
        cache_frame_3e9926c4fe83d2d59ac5360b0e6709a4 = NULL;
    }

    assertFrameObject(frame_3e9926c4fe83d2d59ac5360b0e6709a4);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__52___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_px = python_pars[1];
    PyObject *par_py = python_pars[2];
    PyObject *par_first_row_bottom = python_pars[3];
    PyObject *par_first_col_right = python_pars[4];
    PyObject *par_active_pane = python_pars[5];
    PyObject *var_allowed = NULL;
    struct Nuitka_FrameObject *frame_0a97e74db3ddcf53340ada9a0ffb159f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_0a97e74db3ddcf53340ada9a0ffb159f = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_0a97e74db3ddcf53340ada9a0ffb159f)) {
        Py_XDECREF(cache_frame_0a97e74db3ddcf53340ada9a0ffb159f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0a97e74db3ddcf53340ada9a0ffb159f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0a97e74db3ddcf53340ada9a0ffb159f = MAKE_FUNCTION_FRAME(codeobj_0a97e74db3ddcf53340ada9a0ffb159f, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0a97e74db3ddcf53340ada9a0ffb159f->m_type_description == NULL);
    frame_0a97e74db3ddcf53340ada9a0ffb159f = cache_frame_0a97e74db3ddcf53340ada9a0ffb159f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0a97e74db3ddcf53340ada9a0ffb159f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0a97e74db3ddcf53340ada9a0ffb159f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_int_arg_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_2 = par_self;
        tmp_expression_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[156]);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1379;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[157]);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1379;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_px);
        tmp_cmp_expr_left_1 = par_px;
        tmp_cmp_expr_right_1 = mod_consts[4];
        tmp_int_arg_1 = RICH_COMPARE_GT_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_int_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1380;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_tuple_element_1 = PyNumber_Int(tmp_int_arg_1);
        Py_DECREF(tmp_int_arg_1);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_called_value_1);

            exception_lineno = 1380;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_int_arg_2;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            PyTuple_SET_ITEM(tmp_args_element_value_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_py);
            tmp_cmp_expr_left_2 = par_py;
            tmp_cmp_expr_right_2 = mod_consts[4];
            tmp_int_arg_2 = RICH_COMPARE_GT_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_int_arg_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1380;
                type_description_1 = "ooooooo";
                goto tuple_build_exception_1;
            }
            tmp_tuple_element_1 = PyNumber_Int(tmp_int_arg_2);
            Py_DECREF(tmp_int_arg_2);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1380;
                type_description_1 = "ooooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_args_element_value_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        frame_0a97e74db3ddcf53340ada9a0ffb159f->m_frame.f_lineno = 1379;
        tmp_assign_source_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_element_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1379;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_allowed == NULL);
        var_allowed = tmp_assign_source_1;
    }
    {
        bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        CHECK_OBJECT(par_active_pane);
        tmp_cmp_expr_left_3 = par_active_pane;
        CHECK_OBJECT(var_allowed);
        tmp_cmp_expr_right_3 = var_allowed;
        tmp_res = PySequence_Contains(tmp_cmp_expr_right_3, tmp_cmp_expr_left_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1382;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_make_exception_arg_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_2;
        tmp_left_value_1 = mod_consts[158];
        CHECK_OBJECT(par_active_pane);
        tmp_tuple_element_2 = par_active_pane;
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_str_arg_value_1;
            PyObject *tmp_iterable_value_1;
            PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_2);
            tmp_str_arg_value_1 = mod_consts[159];
            CHECK_OBJECT(var_allowed);
            tmp_iterable_value_1 = var_allowed;
            tmp_tuple_element_2 = UNICODE_JOIN(tmp_str_arg_value_1, tmp_iterable_value_1);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1384;
                type_description_1 = "ooooooo";
                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_make_exception_arg_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_make_exception_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1383;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_0a97e74db3ddcf53340ada9a0ffb159f->m_frame.f_lineno = 1383;
        tmp_raise_type_1 = CALL_FUNCTION_WITH_SINGLE_ARG(PyExc_ValueError, tmp_make_exception_arg_1);
        Py_DECREF(tmp_make_exception_arg_1);
        assert(!(tmp_raise_type_1 == NULL));
        exception_type = tmp_raise_type_1;
        exception_lineno = 1383;
        RAISE_EXCEPTION_WITH_TYPE(&exception_type, &exception_value, &exception_tb);
        type_description_1 = "ooooooo";
        goto frame_exception_exit_1;
    }
    branch_no_1:;
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1386;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_2 = mod_consts[160];
        CHECK_OBJECT(par_px);
        tmp_args_element_value_3 = par_px;
        CHECK_OBJECT(par_py);
        tmp_args_element_value_4 = par_py;
        CHECK_OBJECT(par_first_row_bottom);
        tmp_args_element_value_5 = par_first_row_bottom;
        CHECK_OBJECT(par_first_col_right);
        tmp_args_element_value_6 = par_first_col_right;
        CHECK_OBJECT(par_active_pane);
        tmp_args_element_value_7 = par_active_pane;
        frame_0a97e74db3ddcf53340ada9a0ffb159f->m_frame.f_lineno = 1386;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS6(tmp_called_value_2, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1386;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1386;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0a97e74db3ddcf53340ada9a0ffb159f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0a97e74db3ddcf53340ada9a0ffb159f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0a97e74db3ddcf53340ada9a0ffb159f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0a97e74db3ddcf53340ada9a0ffb159f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0a97e74db3ddcf53340ada9a0ffb159f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0a97e74db3ddcf53340ada9a0ffb159f,
        type_description_1,
        par_self,
        par_px,
        par_py,
        par_first_row_bottom,
        par_first_col_right,
        par_active_pane,
        var_allowed
    );


    // Release cached frame if used for exception.
    if (frame_0a97e74db3ddcf53340ada9a0ffb159f == cache_frame_0a97e74db3ddcf53340ada9a0ffb159f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_0a97e74db3ddcf53340ada9a0ffb159f);
        cache_frame_0a97e74db3ddcf53340ada9a0ffb159f = NULL;
    }

    assertFrameObject(frame_0a97e74db3ddcf53340ada9a0ffb159f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_allowed);
    Py_DECREF(var_allowed);
    var_allowed = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_allowed);
    var_allowed = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_px);
    Py_DECREF(par_px);
    CHECK_OBJECT(par_py);
    Py_DECREF(par_py);
    CHECK_OBJECT(par_first_row_bottom);
    Py_DECREF(par_first_row_bottom);
    CHECK_OBJECT(par_first_col_right);
    Py_DECREF(par_first_col_right);
    CHECK_OBJECT(par_active_pane);
    Py_DECREF(par_active_pane);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_px);
    Py_DECREF(par_px);
    CHECK_OBJECT(par_py);
    Py_DECREF(par_py);
    CHECK_OBJECT(par_first_row_bottom);
    Py_DECREF(par_first_row_bottom);
    CHECK_OBJECT(par_first_col_right);
    Py_DECREF(par_first_col_right);
    CHECK_OBJECT(par_active_pane);
    Py_DECREF(par_active_pane);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__53___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_index = python_pars[1];
    PyObject *par_first_col = python_pars[2];
    PyObject *par_last_col = python_pars[3];
    PyObject *par_height_options = python_pars[4];
    PyObject *par_options = python_pars[5];
    struct Nuitka_FrameObject *frame_65f06e0465bd87076658d7ce346cf08f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_65f06e0465bd87076658d7ce346cf08f = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_65f06e0465bd87076658d7ce346cf08f)) {
        Py_XDECREF(cache_frame_65f06e0465bd87076658d7ce346cf08f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_65f06e0465bd87076658d7ce346cf08f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_65f06e0465bd87076658d7ce346cf08f = MAKE_FUNCTION_FRAME(codeobj_65f06e0465bd87076658d7ce346cf08f, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_65f06e0465bd87076658d7ce346cf08f->m_type_description == NULL);
    frame_65f06e0465bd87076658d7ce346cf08f = cache_frame_65f06e0465bd87076658d7ce346cf08f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_65f06e0465bd87076658d7ce346cf08f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_65f06e0465bd87076658d7ce346cf08f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1438;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[161];
        CHECK_OBJECT(par_index);
        tmp_args_element_value_2 = par_index;
        CHECK_OBJECT(par_first_col);
        tmp_args_element_value_3 = par_first_col;
        CHECK_OBJECT(par_last_col);
        tmp_left_value_1 = par_last_col;
        tmp_right_value_1 = mod_consts[12];
        tmp_args_element_value_4 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_1, tmp_right_value_1);
        if (tmp_args_element_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1438;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_height_options);
        tmp_args_element_value_5 = par_height_options;
        tmp_args_element_value_6 = mod_consts[4];
        tmp_args_element_value_7 = mod_consts[4];
        CHECK_OBJECT(par_options);
        tmp_args_element_value_8 = par_options;
        frame_65f06e0465bd87076658d7ce346cf08f->m_frame.f_lineno = 1438;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS8(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_4);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1438;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1438;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_65f06e0465bd87076658d7ce346cf08f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_65f06e0465bd87076658d7ce346cf08f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_65f06e0465bd87076658d7ce346cf08f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_65f06e0465bd87076658d7ce346cf08f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_65f06e0465bd87076658d7ce346cf08f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_65f06e0465bd87076658d7ce346cf08f,
        type_description_1,
        par_self,
        par_index,
        par_first_col,
        par_last_col,
        par_height_options,
        par_options
    );


    // Release cached frame if used for exception.
    if (frame_65f06e0465bd87076658d7ce346cf08f == cache_frame_65f06e0465bd87076658d7ce346cf08f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_65f06e0465bd87076658d7ce346cf08f);
        cache_frame_65f06e0465bd87076658d7ce346cf08f = NULL;
    }

    assertFrameObject(frame_65f06e0465bd87076658d7ce346cf08f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    CHECK_OBJECT(par_first_col);
    Py_DECREF(par_first_col);
    CHECK_OBJECT(par_last_col);
    Py_DECREF(par_last_col);
    CHECK_OBJECT(par_height_options);
    Py_DECREF(par_height_options);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    CHECK_OBJECT(par_first_col);
    Py_DECREF(par_first_col);
    CHECK_OBJECT(par_last_col);
    Py_DECREF(par_last_col);
    CHECK_OBJECT(par_height_options);
    Py_DECREF(par_height_options);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__54___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row = python_pars[1];
    PyObject *par_col = python_pars[2];
    PyObject *par_xf_idx = python_pars[3];
    PyObject *par_sst_idx = python_pars[4];
    struct Nuitka_FrameObject *frame_185f17c19f5c7bd780f5a1092441df32;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_185f17c19f5c7bd780f5a1092441df32 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_185f17c19f5c7bd780f5a1092441df32)) {
        Py_XDECREF(cache_frame_185f17c19f5c7bd780f5a1092441df32);

#if _DEBUG_REFCOUNTS
        if (cache_frame_185f17c19f5c7bd780f5a1092441df32 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_185f17c19f5c7bd780f5a1092441df32 = MAKE_FUNCTION_FRAME(codeobj_185f17c19f5c7bd780f5a1092441df32, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_185f17c19f5c7bd780f5a1092441df32->m_type_description == NULL);
    frame_185f17c19f5c7bd780f5a1092441df32 = cache_frame_185f17c19f5c7bd780f5a1092441df32;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_185f17c19f5c7bd780f5a1092441df32);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_185f17c19f5c7bd780f5a1092441df32) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1451;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[162];
        CHECK_OBJECT(par_row);
        tmp_args_element_value_2 = par_row;
        CHECK_OBJECT(par_col);
        tmp_args_element_value_3 = par_col;
        CHECK_OBJECT(par_xf_idx);
        tmp_args_element_value_4 = par_xf_idx;
        CHECK_OBJECT(par_sst_idx);
        tmp_args_element_value_5 = par_sst_idx;
        frame_185f17c19f5c7bd780f5a1092441df32->m_frame.f_lineno = 1451;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1451;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1451;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_185f17c19f5c7bd780f5a1092441df32);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_185f17c19f5c7bd780f5a1092441df32);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_185f17c19f5c7bd780f5a1092441df32, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_185f17c19f5c7bd780f5a1092441df32->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_185f17c19f5c7bd780f5a1092441df32, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_185f17c19f5c7bd780f5a1092441df32,
        type_description_1,
        par_self,
        par_row,
        par_col,
        par_xf_idx,
        par_sst_idx
    );


    // Release cached frame if used for exception.
    if (frame_185f17c19f5c7bd780f5a1092441df32 == cache_frame_185f17c19f5c7bd780f5a1092441df32) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_185f17c19f5c7bd780f5a1092441df32);
        cache_frame_185f17c19f5c7bd780f5a1092441df32 = NULL;
    }

    assertFrameObject(frame_185f17c19f5c7bd780f5a1092441df32);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_idx);
    Py_DECREF(par_xf_idx);
    CHECK_OBJECT(par_sst_idx);
    Py_DECREF(par_sst_idx);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_idx);
    Py_DECREF(par_xf_idx);
    CHECK_OBJECT(par_sst_idx);
    Py_DECREF(par_sst_idx);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__55___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_merged_list = python_pars[1];
    PyObject *var_i = NULL;
    PyObject *var_j = NULL;
    PyObject *var_merged = NULL;
    PyObject *var_r1 = NULL;
    PyObject *var_r2 = NULL;
    PyObject *var_c1 = NULL;
    PyObject *var_c2 = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__element_4 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_a9688412f16ad8d60d657831646ca74c;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    int tmp_res;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    bool tmp_result;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    static struct Nuitka_FrameObject *cache_frame_a9688412f16ad8d60d657831646ca74c = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_a9688412f16ad8d60d657831646ca74c)) {
        Py_XDECREF(cache_frame_a9688412f16ad8d60d657831646ca74c);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a9688412f16ad8d60d657831646ca74c == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a9688412f16ad8d60d657831646ca74c = MAKE_FUNCTION_FRAME(codeobj_a9688412f16ad8d60d657831646ca74c, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a9688412f16ad8d60d657831646ca74c->m_type_description == NULL);
    frame_a9688412f16ad8d60d657831646ca74c = cache_frame_a9688412f16ad8d60d657831646ca74c;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a9688412f16ad8d60d657831646ca74c);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a9688412f16ad8d60d657831646ca74c) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_right_value_1;
        CHECK_OBJECT(par_merged_list);
        tmp_len_arg_1 = par_merged_list;
        tmp_left_value_1 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1487;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_1 = mod_consts[12];
        tmp_assign_source_1 = BINARY_OPERATION_SUB_OBJECT_LONG_LONG(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_left_value_1);
        assert(!(tmp_assign_source_1 == NULL));
        assert(var_i == NULL);
        var_i = tmp_assign_source_1;
    }
    loop_start_1:;
    {
        bool tmp_condition_result_1;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1488;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_1 = var_i;
        tmp_cmp_expr_right_1 = mod_consts[4];
        tmp_operand_value_1 = RICH_COMPARE_GE_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        if (tmp_operand_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1488;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        Py_DECREF(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1488;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_1 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    goto loop_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = mod_consts[4];
        {
            PyObject *old = var_j;
            var_j = tmp_assign_source_2;
            Py_INCREF(var_j);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = mod_consts[19];
        {
            PyObject *old = var_merged;
            var_merged = tmp_assign_source_3;
            Py_INCREF(var_merged);
            Py_XDECREF(old);
        }

    }
    loop_start_2:;
    {
        bool tmp_condition_result_2;
        PyObject *tmp_operand_value_2;
        int tmp_and_left_truth_1;
        PyObject *tmp_and_left_value_1;
        PyObject *tmp_and_right_value_1;
        PyObject *tmp_cmp_expr_left_2;
        PyObject *tmp_cmp_expr_right_2;
        PyObject *tmp_cmp_expr_left_3;
        PyObject *tmp_cmp_expr_right_3;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_2 = var_i;
        tmp_cmp_expr_right_2 = mod_consts[4];
        tmp_and_left_value_1 = RICH_COMPARE_GE_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
        if (tmp_and_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_and_left_truth_1 = CHECK_IF_TRUE(tmp_and_left_value_1);
        if (tmp_and_left_truth_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_and_left_value_1);

            exception_lineno = 1491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        if (tmp_and_left_truth_1 == 1) {
            goto and_right_1;
        } else {
            goto and_left_1;
        }
        and_right_1:;
        Py_DECREF(tmp_and_left_value_1);
        if (var_j == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[163]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_cmp_expr_left_3 = var_j;
        tmp_cmp_expr_right_3 = mod_consts[164];
        tmp_and_right_value_1 = RICH_COMPARE_LT_OBJECT_OBJECT_LONG(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
        if (tmp_and_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_operand_value_2 = tmp_and_right_value_1;
        goto and_end_1;
        and_left_1:;
        tmp_operand_value_2 = tmp_and_left_value_1;
        and_end_1:;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        Py_DECREF(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1491;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_condition_result_2 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_2 != false) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    goto loop_end_2;
    branch_no_2:;
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        CHECK_OBJECT(par_merged_list);
        tmp_expression_value_1 = par_merged_list;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1492;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }

        tmp_subscript_value_1 = var_i;
        tmp_iter_arg_1 = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1492;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        tmp_assign_source_4 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1492;
            type_description_1 = "ooooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_1, 0, 4);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooo";
            exception_lineno = 1492;
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_2, 1, 4);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooo";
            exception_lineno = 1492;
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_7 = UNPACK_NEXT(tmp_unpack_3, 2, 4);
        if (tmp_assign_source_7 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooo";
            exception_lineno = 1492;
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_unpack_4;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_4 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_8 = UNPACK_NEXT(tmp_unpack_4, 3, 4);
        if (tmp_assign_source_8 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooooooo";
            exception_lineno = 1492;
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_4;
            tmp_tuple_unpack_1__element_4 = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooooooo";
                    exception_lineno = 1492;
                    goto try_except_handler_3;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[165];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooooooo";
            exception_lineno = 1492;
            goto try_except_handler_3;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_2;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_4);
    tmp_tuple_unpack_1__element_4 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_r1;
            var_r1 = tmp_assign_source_9;
            Py_INCREF(var_r1);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_10;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_10 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_r2;
            var_r2 = tmp_assign_source_10;
            Py_INCREF(var_r2);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_11;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_3);
        tmp_assign_source_11 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_c1;
            var_c1 = tmp_assign_source_11;
            Py_INCREF(var_c1);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_12;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_4);
        tmp_assign_source_12 = tmp_tuple_unpack_1__element_4;
        {
            PyObject *old = var_c2;
            var_c2 = tmp_assign_source_12;
            Py_INCREF(var_c2);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_4);
    tmp_tuple_unpack_1__element_4 = NULL;

    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        if (var_merged == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[166]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1493;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_2 = var_merged;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1493;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[152];
        CHECK_OBJECT(var_r1);
        tmp_args_element_value_2 = var_r1;
        CHECK_OBJECT(var_r2);
        tmp_args_element_value_3 = var_r2;
        CHECK_OBJECT(var_c1);
        tmp_args_element_value_4 = var_c1;
        CHECK_OBJECT(var_c2);
        tmp_args_element_value_5 = var_c2;
        frame_a9688412f16ad8d60d657831646ca74c->m_frame.f_lineno = 1493;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_right_value_2 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_1, call_args);
        }

        if (tmp_right_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1493;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1493;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_13 = tmp_left_value_2;
        var_merged = tmp_assign_source_13;

    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        if (var_i == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[50]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1494;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_3 = var_i;
        tmp_right_value_3 = mod_consts[12];
        tmp_result = BINARY_OPERATION_SUB_OBJECT_LONG_INPLACE(&tmp_left_value_3, tmp_right_value_3);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1494;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_14 = tmp_left_value_3;
        var_i = tmp_assign_source_14;

    }
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        if (var_j == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[163]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1495;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_left_value_4 = var_j;
        tmp_right_value_4 = mod_consts[12];
        tmp_result = BINARY_OPERATION_ADD_OBJECT_LONG_INPLACE(&tmp_left_value_4, tmp_right_value_4);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1495;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_15 = tmp_left_value_4;
        var_j = tmp_assign_source_15;

    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1491;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_2;
    loop_end_2:;
    {
        PyObject *tmp_assign_source_16;
        PyObject *tmp_expression_value_2;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }

        tmp_expression_value_2 = par_self;
        tmp_assign_source_16 = LOOKUP_ATTRIBUTE(tmp_expression_value_2, mod_consts[58]);
        if (tmp_assign_source_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto frame_exception_exit_1;
        }
        {
            PyObject *old = tmp_inplace_assign_1__value;
            tmp_inplace_assign_1__value = tmp_assign_source_16;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        PyObject *tmp_left_value_6;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_left_value_7;
        PyObject *tmp_len_arg_2;
        PyObject *tmp_right_value_6;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_right_value_7;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_5 = tmp_inplace_assign_1__value;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }
        tmp_args_element_value_6 = mod_consts[167];
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }

        tmp_expression_value_3 = par_self;
        tmp_args_element_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[57]);
        if (tmp_args_element_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }
        if (var_merged == NULL) {
            Py_DECREF(tmp_args_element_value_7);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[166]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }

        tmp_len_arg_2 = var_merged;
        tmp_left_value_7 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_left_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_7);

            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }
        tmp_right_value_6 = mod_consts[38];
        tmp_args_element_value_8 = BINARY_OPERATION_ADD_OBJECT_LONG_LONG(tmp_left_value_7, tmp_right_value_6);
        Py_DECREF(tmp_left_value_7);
        assert(!(tmp_args_element_value_8 == NULL));
        if (var_j == NULL) {
            Py_DECREF(tmp_args_element_value_7);
            Py_DECREF(tmp_args_element_value_8);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[163]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }

        tmp_args_element_value_9 = var_j;
        frame_a9688412f16ad8d60d657831646ca74c->m_frame.f_lineno = 1496;
        {
            PyObject *call_args[] = {tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9};
            tmp_left_value_6 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_7);
        Py_DECREF(tmp_args_element_value_8);
        if (tmp_left_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }
        if (var_merged == NULL) {
            Py_DECREF(tmp_left_value_6);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[166]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1497;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }

        tmp_right_value_7 = var_merged;
        tmp_right_value_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_6, tmp_right_value_7);
        Py_DECREF(tmp_left_value_6);
        if (tmp_right_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1497;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_5, tmp_right_value_5);
        Py_DECREF(tmp_right_value_5);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }
        tmp_assign_source_17 = tmp_left_value_5;
        tmp_inplace_assign_1__value = tmp_assign_source_17;

    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_1 = tmp_inplace_assign_1__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }

        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1496;
            type_description_1 = "ooooooooo";
            goto try_except_handler_4;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1488;
        type_description_1 = "ooooooooo";
        goto frame_exception_exit_1;
    }
    goto loop_start_1;
    loop_end_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a9688412f16ad8d60d657831646ca74c);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a9688412f16ad8d60d657831646ca74c);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a9688412f16ad8d60d657831646ca74c, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a9688412f16ad8d60d657831646ca74c->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a9688412f16ad8d60d657831646ca74c, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a9688412f16ad8d60d657831646ca74c,
        type_description_1,
        par_self,
        par_merged_list,
        var_i,
        var_j,
        var_merged,
        var_r1,
        var_r2,
        var_c1,
        var_c2
    );


    // Release cached frame if used for exception.
    if (frame_a9688412f16ad8d60d657831646ca74c == cache_frame_a9688412f16ad8d60d657831646ca74c) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a9688412f16ad8d60d657831646ca74c);
        cache_frame_a9688412f16ad8d60d657831646ca74c = NULL;
    }

    assertFrameObject(frame_a9688412f16ad8d60d657831646ca74c);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_j);
    var_j = NULL;
    Py_XDECREF(var_merged);
    var_merged = NULL;
    Py_XDECREF(var_r1);
    var_r1 = NULL;
    Py_XDECREF(var_r2);
    var_r2 = NULL;
    Py_XDECREF(var_c1);
    var_c1 = NULL;
    Py_XDECREF(var_c2);
    var_c2 = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_i);
    var_i = NULL;
    Py_XDECREF(var_j);
    var_j = NULL;
    Py_XDECREF(var_merged);
    var_merged = NULL;
    Py_XDECREF(var_r1);
    var_r1 = NULL;
    Py_XDECREF(var_r2);
    var_r2 = NULL;
    Py_XDECREF(var_c1);
    var_c1 = NULL;
    Py_XDECREF(var_c2);
    var_c2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_merged_list);
    Py_DECREF(par_merged_list);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_merged_list);
    Py_DECREF(par_merged_list);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__56_get(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_fa0229e1127bb1f819ef61b7f5dab3c1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1 = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1)) {
        Py_XDECREF(cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1 = MAKE_FUNCTION_FRAME(codeobj_fa0229e1127bb1f819ef61b7f5dab3c1, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1->m_type_description == NULL);
    frame_fa0229e1127bb1f819ef61b7f5dab3c1 = cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fa0229e1127bb1f819ef61b7f5dab3c1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fa0229e1127bb1f819ef61b7f5dab3c1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_return_value = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1501;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fa0229e1127bb1f819ef61b7f5dab3c1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_fa0229e1127bb1f819ef61b7f5dab3c1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto function_return_exit;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fa0229e1127bb1f819ef61b7f5dab3c1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fa0229e1127bb1f819ef61b7f5dab3c1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_fa0229e1127bb1f819ef61b7f5dab3c1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fa0229e1127bb1f819ef61b7f5dab3c1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_fa0229e1127bb1f819ef61b7f5dab3c1,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_fa0229e1127bb1f819ef61b7f5dab3c1 == cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1);
        cache_frame_fa0229e1127bb1f819ef61b7f5dab3c1 = NULL;
    }

    assertFrameObject(frame_fa0229e1127bb1f819ef61b7f5dab3c1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__57___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row = python_pars[1];
    PyObject *par_first_col = python_pars[2];
    PyObject *par_last_col = python_pars[3];
    PyObject *par_xf_index = python_pars[4];
    PyObject *var_blanks_count = NULL;
    struct Nuitka_FrameObject *frame_f3cdd2010eae8181f86204c61e4447a1;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_f3cdd2010eae8181f86204c61e4447a1 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_f3cdd2010eae8181f86204c61e4447a1)) {
        Py_XDECREF(cache_frame_f3cdd2010eae8181f86204c61e4447a1);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f3cdd2010eae8181f86204c61e4447a1 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f3cdd2010eae8181f86204c61e4447a1 = MAKE_FUNCTION_FRAME(codeobj_f3cdd2010eae8181f86204c61e4447a1, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f3cdd2010eae8181f86204c61e4447a1->m_type_description == NULL);
    frame_f3cdd2010eae8181f86204c61e4447a1 = cache_frame_f3cdd2010eae8181f86204c61e4447a1;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f3cdd2010eae8181f86204c61e4447a1);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f3cdd2010eae8181f86204c61e4447a1) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_1;
        PyObject *tmp_right_value_2;
        CHECK_OBJECT(par_last_col);
        tmp_left_value_2 = par_last_col;
        CHECK_OBJECT(par_first_col);
        tmp_right_value_1 = par_first_col;
        tmp_left_value_1 = BINARY_OPERATION_SUB_OBJECT_OBJECT_OBJECT(tmp_left_value_2, tmp_right_value_1);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1519;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_right_value_2 = mod_consts[12];
        tmp_assign_source_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_LONG(tmp_left_value_1, tmp_right_value_2);
        Py_DECREF(tmp_left_value_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1519;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        assert(var_blanks_count == NULL);
        var_blanks_count = tmp_assign_source_1;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_dircall_arg3_1;
        PyObject *tmp_left_value_4;
        PyObject *tmp_list_element_1;
        PyObject *tmp_right_value_4;
        PyObject *tmp_assattr_target_1;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1520;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_3 = mod_consts[168];
        CHECK_OBJECT(var_blanks_count);
        tmp_right_value_3 = var_blanks_count;
        tmp_tuple_element_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_OBJECT(tmp_left_value_3, tmp_right_value_3);
        if (tmp_tuple_element_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1520;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_dircall_arg2_1 = PyTuple_New(1);
        PyTuple_SET_ITEM(tmp_dircall_arg2_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(par_xf_index);
        tmp_list_element_1 = par_xf_index;
        tmp_left_value_4 = PyList_New(1);
        PyList_SET_ITEM0(tmp_left_value_4, 0, tmp_list_element_1);
        CHECK_OBJECT(var_blanks_count);
        tmp_right_value_4 = var_blanks_count;
        tmp_dircall_arg3_1 = BINARY_OPERATION_MULT_OBJECT_LIST_OBJECT(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_left_value_4);
        if (tmp_dircall_arg3_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_dircall_arg2_1);

            exception_lineno = 1520;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_assattr_value_1 = impl___main__$$$function__6_complex_call_helper_pos_star_list(dir_call_args);
        }
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1520;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1520;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_left_value_5;
        PyObject *tmp_left_value_6;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_right_value_5;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_right_value_6;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_assattr_target_2;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[56];
        CHECK_OBJECT(par_row);
        tmp_args_element_value_2 = par_row;
        CHECK_OBJECT(par_first_col);
        tmp_args_element_value_3 = par_first_col;
        frame_f3cdd2010eae8181f86204c61e4447a1->m_frame.f_lineno = 1521;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_left_value_6 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        if (tmp_left_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_right_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_right_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_6);

            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_5 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_6, tmp_right_value_5);
        Py_DECREF(tmp_left_value_6);
        Py_DECREF(tmp_right_value_5);
        if (tmp_left_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_5);

            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_4 = mod_consts[78];
        CHECK_OBJECT(par_last_col);
        tmp_args_element_value_5 = par_last_col;
        frame_f3cdd2010eae8181f86204c61e4447a1->m_frame.f_lineno = 1521;
        {
            PyObject *call_args[] = {tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_right_value_6 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_2, call_args);
        }

        if (tmp_right_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_5);

            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_assattr_value_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_5, tmp_right_value_6);
        Py_DECREF(tmp_left_value_5);
        Py_DECREF(tmp_right_value_6);
        if (tmp_assattr_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[58], tmp_assattr_value_2);
        Py_DECREF(tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1521;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f3cdd2010eae8181f86204c61e4447a1);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f3cdd2010eae8181f86204c61e4447a1);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f3cdd2010eae8181f86204c61e4447a1, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f3cdd2010eae8181f86204c61e4447a1->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f3cdd2010eae8181f86204c61e4447a1, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f3cdd2010eae8181f86204c61e4447a1,
        type_description_1,
        par_self,
        par_row,
        par_first_col,
        par_last_col,
        par_xf_index,
        var_blanks_count
    );


    // Release cached frame if used for exception.
    if (frame_f3cdd2010eae8181f86204c61e4447a1 == cache_frame_f3cdd2010eae8181f86204c61e4447a1) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f3cdd2010eae8181f86204c61e4447a1);
        cache_frame_f3cdd2010eae8181f86204c61e4447a1 = NULL;
    }

    assertFrameObject(frame_f3cdd2010eae8181f86204c61e4447a1);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_blanks_count);
    Py_DECREF(var_blanks_count);
    var_blanks_count = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_blanks_count);
    var_blanks_count = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_first_col);
    Py_DECREF(par_first_col);
    CHECK_OBJECT(par_last_col);
    Py_DECREF(par_last_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_first_col);
    Py_DECREF(par_first_col);
    CHECK_OBJECT(par_last_col);
    Py_DECREF(par_last_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__58___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row = python_pars[1];
    PyObject *par_col = python_pars[2];
    PyObject *par_xf_index = python_pars[3];
    struct Nuitka_FrameObject *frame_447ff9c6f2593525c589f489daf6296d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_447ff9c6f2593525c589f489daf6296d = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_447ff9c6f2593525c589f489daf6296d)) {
        Py_XDECREF(cache_frame_447ff9c6f2593525c589f489daf6296d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_447ff9c6f2593525c589f489daf6296d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_447ff9c6f2593525c589f489daf6296d = MAKE_FUNCTION_FRAME(codeobj_447ff9c6f2593525c589f489daf6296d, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_447ff9c6f2593525c589f489daf6296d->m_type_description == NULL);
    frame_447ff9c6f2593525c589f489daf6296d = cache_frame_447ff9c6f2593525c589f489daf6296d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_447ff9c6f2593525c589f489daf6296d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_447ff9c6f2593525c589f489daf6296d) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[167];
        CHECK_OBJECT(par_row);
        tmp_args_element_value_2 = par_row;
        CHECK_OBJECT(par_col);
        tmp_args_element_value_3 = par_col;
        CHECK_OBJECT(par_xf_index);
        tmp_args_element_value_4 = par_xf_index;
        frame_447ff9c6f2593525c589f489daf6296d->m_frame.f_lineno = 1538;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1538;
            type_description_1 = "oooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_447ff9c6f2593525c589f489daf6296d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_447ff9c6f2593525c589f489daf6296d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_447ff9c6f2593525c589f489daf6296d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_447ff9c6f2593525c589f489daf6296d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_447ff9c6f2593525c589f489daf6296d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_447ff9c6f2593525c589f489daf6296d,
        type_description_1,
        par_self,
        par_row,
        par_col,
        par_xf_index
    );


    // Release cached frame if used for exception.
    if (frame_447ff9c6f2593525c589f489daf6296d == cache_frame_447ff9c6f2593525c589f489daf6296d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_447ff9c6f2593525c589f489daf6296d);
        cache_frame_447ff9c6f2593525c589f489daf6296d = NULL;
    }

    assertFrameObject(frame_447ff9c6f2593525c589f489daf6296d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__59___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row = python_pars[1];
    PyObject *par_col = python_pars[2];
    PyObject *par_xf_index = python_pars[3];
    PyObject *par_rk_encoded = python_pars[4];
    struct Nuitka_FrameObject *frame_552d07b756e2dc5fc14c39d421ac30cc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_552d07b756e2dc5fc14c39d421ac30cc = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_552d07b756e2dc5fc14c39d421ac30cc)) {
        Py_XDECREF(cache_frame_552d07b756e2dc5fc14c39d421ac30cc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_552d07b756e2dc5fc14c39d421ac30cc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_552d07b756e2dc5fc14c39d421ac30cc = MAKE_FUNCTION_FRAME(codeobj_552d07b756e2dc5fc14c39d421ac30cc, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_552d07b756e2dc5fc14c39d421ac30cc->m_type_description == NULL);
    frame_552d07b756e2dc5fc14c39d421ac30cc = cache_frame_552d07b756e2dc5fc14c39d421ac30cc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_552d07b756e2dc5fc14c39d421ac30cc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_552d07b756e2dc5fc14c39d421ac30cc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1550;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[169];
        CHECK_OBJECT(par_row);
        tmp_args_element_value_2 = par_row;
        CHECK_OBJECT(par_col);
        tmp_args_element_value_3 = par_col;
        CHECK_OBJECT(par_xf_index);
        tmp_args_element_value_4 = par_xf_index;
        CHECK_OBJECT(par_rk_encoded);
        tmp_args_element_value_5 = par_rk_encoded;
        frame_552d07b756e2dc5fc14c39d421ac30cc->m_frame.f_lineno = 1550;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1550;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1550;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_552d07b756e2dc5fc14c39d421ac30cc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_552d07b756e2dc5fc14c39d421ac30cc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_552d07b756e2dc5fc14c39d421ac30cc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_552d07b756e2dc5fc14c39d421ac30cc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_552d07b756e2dc5fc14c39d421ac30cc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_552d07b756e2dc5fc14c39d421ac30cc,
        type_description_1,
        par_self,
        par_row,
        par_col,
        par_xf_index,
        par_rk_encoded
    );


    // Release cached frame if used for exception.
    if (frame_552d07b756e2dc5fc14c39d421ac30cc == cache_frame_552d07b756e2dc5fc14c39d421ac30cc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_552d07b756e2dc5fc14c39d421ac30cc);
        cache_frame_552d07b756e2dc5fc14c39d421ac30cc = NULL;
    }

    assertFrameObject(frame_552d07b756e2dc5fc14c39d421ac30cc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_rk_encoded);
    Py_DECREF(par_rk_encoded);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_rk_encoded);
    Py_DECREF(par_rk_encoded);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__60___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row = python_pars[1];
    PyObject *par_col = python_pars[2];
    PyObject *par_xf_index = python_pars[3];
    PyObject *par_number = python_pars[4];
    struct Nuitka_FrameObject *frame_988d4cdf826c744251bbaf66bd59efd9;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_988d4cdf826c744251bbaf66bd59efd9 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_988d4cdf826c744251bbaf66bd59efd9)) {
        Py_XDECREF(cache_frame_988d4cdf826c744251bbaf66bd59efd9);

#if _DEBUG_REFCOUNTS
        if (cache_frame_988d4cdf826c744251bbaf66bd59efd9 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_988d4cdf826c744251bbaf66bd59efd9 = MAKE_FUNCTION_FRAME(codeobj_988d4cdf826c744251bbaf66bd59efd9, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_988d4cdf826c744251bbaf66bd59efd9->m_type_description == NULL);
    frame_988d4cdf826c744251bbaf66bd59efd9 = cache_frame_988d4cdf826c744251bbaf66bd59efd9;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_988d4cdf826c744251bbaf66bd59efd9);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_988d4cdf826c744251bbaf66bd59efd9) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1560;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[170];
        CHECK_OBJECT(par_row);
        tmp_args_element_value_2 = par_row;
        CHECK_OBJECT(par_col);
        tmp_args_element_value_3 = par_col;
        CHECK_OBJECT(par_xf_index);
        tmp_args_element_value_4 = par_xf_index;
        CHECK_OBJECT(par_number);
        tmp_args_element_value_5 = par_number;
        frame_988d4cdf826c744251bbaf66bd59efd9->m_frame.f_lineno = 1560;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1560;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1560;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_988d4cdf826c744251bbaf66bd59efd9);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_988d4cdf826c744251bbaf66bd59efd9);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_988d4cdf826c744251bbaf66bd59efd9, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_988d4cdf826c744251bbaf66bd59efd9->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_988d4cdf826c744251bbaf66bd59efd9, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_988d4cdf826c744251bbaf66bd59efd9,
        type_description_1,
        par_self,
        par_row,
        par_col,
        par_xf_index,
        par_number
    );


    // Release cached frame if used for exception.
    if (frame_988d4cdf826c744251bbaf66bd59efd9 == cache_frame_988d4cdf826c744251bbaf66bd59efd9) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_988d4cdf826c744251bbaf66bd59efd9);
        cache_frame_988d4cdf826c744251bbaf66bd59efd9 = NULL;
    }

    assertFrameObject(frame_988d4cdf826c744251bbaf66bd59efd9);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_number);
    Py_DECREF(par_number);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_number);
    Py_DECREF(par_number);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__61___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row = python_pars[1];
    PyObject *par_col = python_pars[2];
    PyObject *par_xf_index = python_pars[3];
    PyObject *par_number = python_pars[4];
    PyObject *par_is_error = python_pars[5];
    struct Nuitka_FrameObject *frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e)) {
        Py_XDECREF(cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e = MAKE_FUNCTION_FRAME(codeobj_7f37ae4cd9aa1ce8aefd0f7b123a5a5e, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e->m_type_description == NULL);
    frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e = cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1569;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[171];
        CHECK_OBJECT(par_row);
        tmp_args_element_value_2 = par_row;
        CHECK_OBJECT(par_col);
        tmp_args_element_value_3 = par_col;
        CHECK_OBJECT(par_xf_index);
        tmp_args_element_value_4 = par_xf_index;
        CHECK_OBJECT(par_number);
        tmp_args_element_value_5 = par_number;
        CHECK_OBJECT(par_is_error);
        tmp_args_element_value_6 = par_is_error;
        frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e->m_frame.f_lineno = 1569;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS6(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1569;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1569;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e,
        type_description_1,
        par_self,
        par_row,
        par_col,
        par_xf_index,
        par_number,
        par_is_error
    );


    // Release cached frame if used for exception.
    if (frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e == cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e);
        cache_frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e = NULL;
    }

    assertFrameObject(frame_7f37ae4cd9aa1ce8aefd0f7b123a5a5e);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_number);
    Py_DECREF(par_number);
    CHECK_OBJECT(par_is_error);
    Py_DECREF(par_is_error);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_number);
    Py_DECREF(par_number);
    CHECK_OBJECT(par_is_error);
    Py_DECREF(par_is_error);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__62___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row = python_pars[1];
    PyObject *par_col = python_pars[2];
    PyObject *par_xf_index = python_pars[3];
    PyObject *par_rpn = python_pars[4];
    PyObject *par_calc_flags = python_pars[5];
    struct Nuitka_FrameObject *frame_fd5dd612a579647ce251cb71f8c03b48;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_fd5dd612a579647ce251cb71f8c03b48 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_fd5dd612a579647ce251cb71f8c03b48)) {
        Py_XDECREF(cache_frame_fd5dd612a579647ce251cb71f8c03b48);

#if _DEBUG_REFCOUNTS
        if (cache_frame_fd5dd612a579647ce251cb71f8c03b48 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_fd5dd612a579647ce251cb71f8c03b48 = MAKE_FUNCTION_FRAME(codeobj_fd5dd612a579647ce251cb71f8c03b48, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_fd5dd612a579647ce251cb71f8c03b48->m_type_description == NULL);
    frame_fd5dd612a579647ce251cb71f8c03b48 = cache_frame_fd5dd612a579647ce251cb71f8c03b48;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_fd5dd612a579647ce251cb71f8c03b48);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_fd5dd612a579647ce251cb71f8c03b48) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_1;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_right_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1591;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[172];
        CHECK_OBJECT(par_row);
        tmp_args_element_value_2 = par_row;
        CHECK_OBJECT(par_col);
        tmp_args_element_value_3 = par_col;
        CHECK_OBJECT(par_xf_index);
        tmp_args_element_value_4 = par_xf_index;
        tmp_args_element_value_5 = mod_consts[173];
        CHECK_OBJECT(par_calc_flags);
        tmp_left_value_2 = par_calc_flags;
        tmp_right_value_1 = mod_consts[100];
        tmp_args_element_value_6 = BINARY_OPERATION_BITAND_OBJECT_OBJECT_LONG(tmp_left_value_2, tmp_right_value_1);
        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1591;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_7 = mod_consts[4];
        frame_fd5dd612a579647ce251cb71f8c03b48->m_frame.f_lineno = 1591;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7};
            tmp_left_value_1 = CALL_FUNCTION_WITH_ARGS7(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_6);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1591;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_rpn);
        tmp_right_value_2 = par_rpn;
        tmp_assattr_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_2);
        Py_DECREF(tmp_left_value_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1591;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1591;
            type_description_1 = "oooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fd5dd612a579647ce251cb71f8c03b48);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_fd5dd612a579647ce251cb71f8c03b48);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_fd5dd612a579647ce251cb71f8c03b48, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_fd5dd612a579647ce251cb71f8c03b48->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_fd5dd612a579647ce251cb71f8c03b48, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_fd5dd612a579647ce251cb71f8c03b48,
        type_description_1,
        par_self,
        par_row,
        par_col,
        par_xf_index,
        par_rpn,
        par_calc_flags
    );


    // Release cached frame if used for exception.
    if (frame_fd5dd612a579647ce251cb71f8c03b48 == cache_frame_fd5dd612a579647ce251cb71f8c03b48) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_fd5dd612a579647ce251cb71f8c03b48);
        cache_frame_fd5dd612a579647ce251cb71f8c03b48 = NULL;
    }

    assertFrameObject(frame_fd5dd612a579647ce251cb71f8c03b48);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_rpn);
    Py_DECREF(par_rpn);
    CHECK_OBJECT(par_calc_flags);
    Py_DECREF(par_calc_flags);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row);
    Py_DECREF(par_row);
    CHECK_OBJECT(par_col);
    Py_DECREF(par_col);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_rpn);
    Py_DECREF(par_rpn);
    CHECK_OBJECT(par_calc_flags);
    Py_DECREF(par_calc_flags);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__63___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_row_gut_width = python_pars[1];
    PyObject *par_col_gut_height = python_pars[2];
    PyObject *par_row_visible_levels = python_pars[3];
    PyObject *par_col_visible_levels = python_pars[4];
    struct Nuitka_FrameObject *frame_9e21177c98c73aa46b64477decf3d477;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_9e21177c98c73aa46b64477decf3d477 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9e21177c98c73aa46b64477decf3d477)) {
        Py_XDECREF(cache_frame_9e21177c98c73aa46b64477decf3d477);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9e21177c98c73aa46b64477decf3d477 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9e21177c98c73aa46b64477decf3d477 = MAKE_FUNCTION_FRAME(codeobj_9e21177c98c73aa46b64477decf3d477, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9e21177c98c73aa46b64477decf3d477->m_type_description == NULL);
    frame_9e21177c98c73aa46b64477decf3d477 = cache_frame_9e21177c98c73aa46b64477decf3d477;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9e21177c98c73aa46b64477decf3d477);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9e21177c98c73aa46b64477decf3d477) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1611;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[152];
        CHECK_OBJECT(par_row_gut_width);
        tmp_args_element_value_2 = par_row_gut_width;
        CHECK_OBJECT(par_col_gut_height);
        tmp_args_element_value_3 = par_col_gut_height;
        CHECK_OBJECT(par_row_visible_levels);
        tmp_args_element_value_4 = par_row_visible_levels;
        CHECK_OBJECT(par_col_visible_levels);
        tmp_args_element_value_5 = par_col_visible_levels;
        frame_9e21177c98c73aa46b64477decf3d477->m_frame.f_lineno = 1611;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS5(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1611;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1611;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e21177c98c73aa46b64477decf3d477);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9e21177c98c73aa46b64477decf3d477);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9e21177c98c73aa46b64477decf3d477, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9e21177c98c73aa46b64477decf3d477->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9e21177c98c73aa46b64477decf3d477, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9e21177c98c73aa46b64477decf3d477,
        type_description_1,
        par_self,
        par_row_gut_width,
        par_col_gut_height,
        par_row_visible_levels,
        par_col_visible_levels
    );


    // Release cached frame if used for exception.
    if (frame_9e21177c98c73aa46b64477decf3d477 == cache_frame_9e21177c98c73aa46b64477decf3d477) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9e21177c98c73aa46b64477decf3d477);
        cache_frame_9e21177c98c73aa46b64477decf3d477 = NULL;
    }

    assertFrameObject(frame_9e21177c98c73aa46b64477decf3d477);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row_gut_width);
    Py_DECREF(par_row_gut_width);
    CHECK_OBJECT(par_col_gut_height);
    Py_DECREF(par_col_gut_height);
    CHECK_OBJECT(par_row_visible_levels);
    Py_DECREF(par_row_visible_levels);
    CHECK_OBJECT(par_col_visible_levels);
    Py_DECREF(par_col_visible_levels);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_row_gut_width);
    Py_DECREF(par_row_gut_width);
    CHECK_OBJECT(par_col_gut_height);
    Py_DECREF(par_col_gut_height);
    CHECK_OBJECT(par_row_visible_levels);
    Py_DECREF(par_row_visible_levels);
    CHECK_OBJECT(par_col_visible_levels);
    Py_DECREF(par_col_visible_levels);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__64___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_options = python_pars[1];
    struct Nuitka_FrameObject *frame_09150ae0fe6f0cb10a03a044e18b8881;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_09150ae0fe6f0cb10a03a044e18b8881 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_09150ae0fe6f0cb10a03a044e18b8881)) {
        Py_XDECREF(cache_frame_09150ae0fe6f0cb10a03a044e18b8881);

#if _DEBUG_REFCOUNTS
        if (cache_frame_09150ae0fe6f0cb10a03a044e18b8881 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_09150ae0fe6f0cb10a03a044e18b8881 = MAKE_FUNCTION_FRAME(codeobj_09150ae0fe6f0cb10a03a044e18b8881, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_09150ae0fe6f0cb10a03a044e18b8881->m_type_description == NULL);
    frame_09150ae0fe6f0cb10a03a044e18b8881 = cache_frame_09150ae0fe6f0cb10a03a044e18b8881;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_09150ae0fe6f0cb10a03a044e18b8881);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_09150ae0fe6f0cb10a03a044e18b8881) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1655;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_options);
        tmp_args_element_value_2 = par_options;
        frame_09150ae0fe6f0cb10a03a044e18b8881->m_frame.f_lineno = 1655;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1655;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1655;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_09150ae0fe6f0cb10a03a044e18b8881);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_09150ae0fe6f0cb10a03a044e18b8881);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_09150ae0fe6f0cb10a03a044e18b8881, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_09150ae0fe6f0cb10a03a044e18b8881->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_09150ae0fe6f0cb10a03a044e18b8881, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_09150ae0fe6f0cb10a03a044e18b8881,
        type_description_1,
        par_self,
        par_options
    );


    // Release cached frame if used for exception.
    if (frame_09150ae0fe6f0cb10a03a044e18b8881 == cache_frame_09150ae0fe6f0cb10a03a044e18b8881) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_09150ae0fe6f0cb10a03a044e18b8881);
        cache_frame_09150ae0fe6f0cb10a03a044e18b8881 = NULL;
    }

    assertFrameObject(frame_09150ae0fe6f0cb10a03a044e18b8881);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__65___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_first_col = python_pars[1];
    PyObject *par_last_col = python_pars[2];
    PyObject *par_width = python_pars[3];
    PyObject *par_xf_index = python_pars[4];
    PyObject *par_options = python_pars[5];
    PyObject *par_unused = python_pars[6];
    struct Nuitka_FrameObject *frame_73af6f45df356da14fcce15544a75b06;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_73af6f45df356da14fcce15544a75b06 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_73af6f45df356da14fcce15544a75b06)) {
        Py_XDECREF(cache_frame_73af6f45df356da14fcce15544a75b06);

#if _DEBUG_REFCOUNTS
        if (cache_frame_73af6f45df356da14fcce15544a75b06 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_73af6f45df356da14fcce15544a75b06 = MAKE_FUNCTION_FRAME(codeobj_73af6f45df356da14fcce15544a75b06, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_73af6f45df356da14fcce15544a75b06->m_type_description == NULL);
    frame_73af6f45df356da14fcce15544a75b06 = cache_frame_73af6f45df356da14fcce15544a75b06;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_73af6f45df356da14fcce15544a75b06);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_73af6f45df356da14fcce15544a75b06) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1689;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[174];
        CHECK_OBJECT(par_first_col);
        tmp_args_element_value_2 = par_first_col;
        CHECK_OBJECT(par_last_col);
        tmp_args_element_value_3 = par_last_col;
        CHECK_OBJECT(par_width);
        tmp_args_element_value_4 = par_width;
        CHECK_OBJECT(par_xf_index);
        tmp_args_element_value_5 = par_xf_index;
        CHECK_OBJECT(par_options);
        tmp_args_element_value_6 = par_options;
        CHECK_OBJECT(par_unused);
        tmp_args_element_value_7 = par_unused;
        frame_73af6f45df356da14fcce15544a75b06->m_frame.f_lineno = 1689;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS7(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1689;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1689;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_73af6f45df356da14fcce15544a75b06);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_73af6f45df356da14fcce15544a75b06);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_73af6f45df356da14fcce15544a75b06, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_73af6f45df356da14fcce15544a75b06->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_73af6f45df356da14fcce15544a75b06, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_73af6f45df356da14fcce15544a75b06,
        type_description_1,
        par_self,
        par_first_col,
        par_last_col,
        par_width,
        par_xf_index,
        par_options,
        par_unused
    );


    // Release cached frame if used for exception.
    if (frame_73af6f45df356da14fcce15544a75b06 == cache_frame_73af6f45df356da14fcce15544a75b06) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_73af6f45df356da14fcce15544a75b06);
        cache_frame_73af6f45df356da14fcce15544a75b06 = NULL;
    }

    assertFrameObject(frame_73af6f45df356da14fcce15544a75b06);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_first_col);
    Py_DECREF(par_first_col);
    CHECK_OBJECT(par_last_col);
    Py_DECREF(par_last_col);
    CHECK_OBJECT(par_width);
    Py_DECREF(par_width);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_unused);
    Py_DECREF(par_unused);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_first_col);
    Py_DECREF(par_first_col);
    CHECK_OBJECT(par_last_col);
    Py_DECREF(par_last_col);
    CHECK_OBJECT(par_width);
    Py_DECREF(par_width);
    CHECK_OBJECT(par_xf_index);
    Py_DECREF(par_xf_index);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_unused);
    Py_DECREF(par_unused);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__66___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_calc_mode = python_pars[1];
    struct Nuitka_FrameObject *frame_40f57f5666a1151ebb3fd236d76cdcab;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_40f57f5666a1151ebb3fd236d76cdcab = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_40f57f5666a1151ebb3fd236d76cdcab)) {
        Py_XDECREF(cache_frame_40f57f5666a1151ebb3fd236d76cdcab);

#if _DEBUG_REFCOUNTS
        if (cache_frame_40f57f5666a1151ebb3fd236d76cdcab == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_40f57f5666a1151ebb3fd236d76cdcab = MAKE_FUNCTION_FRAME(codeobj_40f57f5666a1151ebb3fd236d76cdcab, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_40f57f5666a1151ebb3fd236d76cdcab->m_type_description == NULL);
    frame_40f57f5666a1151ebb3fd236d76cdcab = cache_frame_40f57f5666a1151ebb3fd236d76cdcab;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_40f57f5666a1151ebb3fd236d76cdcab);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_40f57f5666a1151ebb3fd236d76cdcab) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1707;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[175];
        CHECK_OBJECT(par_calc_mode);
        tmp_args_element_value_2 = par_calc_mode;
        frame_40f57f5666a1151ebb3fd236d76cdcab->m_frame.f_lineno = 1707;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1707;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1707;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_40f57f5666a1151ebb3fd236d76cdcab);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_40f57f5666a1151ebb3fd236d76cdcab);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_40f57f5666a1151ebb3fd236d76cdcab, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_40f57f5666a1151ebb3fd236d76cdcab->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_40f57f5666a1151ebb3fd236d76cdcab, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_40f57f5666a1151ebb3fd236d76cdcab,
        type_description_1,
        par_self,
        par_calc_mode
    );


    // Release cached frame if used for exception.
    if (frame_40f57f5666a1151ebb3fd236d76cdcab == cache_frame_40f57f5666a1151ebb3fd236d76cdcab) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_40f57f5666a1151ebb3fd236d76cdcab);
        cache_frame_40f57f5666a1151ebb3fd236d76cdcab = NULL;
    }

    assertFrameObject(frame_40f57f5666a1151ebb3fd236d76cdcab);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_calc_mode);
    Py_DECREF(par_calc_mode);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_calc_mode);
    Py_DECREF(par_calc_mode);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__67___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_calc_count = python_pars[1];
    struct Nuitka_FrameObject *frame_5d9d53c609625a07c936391a484d25cc;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_5d9d53c609625a07c936391a484d25cc = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5d9d53c609625a07c936391a484d25cc)) {
        Py_XDECREF(cache_frame_5d9d53c609625a07c936391a484d25cc);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5d9d53c609625a07c936391a484d25cc == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5d9d53c609625a07c936391a484d25cc = MAKE_FUNCTION_FRAME(codeobj_5d9d53c609625a07c936391a484d25cc, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5d9d53c609625a07c936391a484d25cc->m_type_description == NULL);
    frame_5d9d53c609625a07c936391a484d25cc = cache_frame_5d9d53c609625a07c936391a484d25cc;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5d9d53c609625a07c936391a484d25cc);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5d9d53c609625a07c936391a484d25cc) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1725;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_calc_count);
        tmp_args_element_value_2 = par_calc_count;
        frame_5d9d53c609625a07c936391a484d25cc->m_frame.f_lineno = 1725;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1725;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1725;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5d9d53c609625a07c936391a484d25cc);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5d9d53c609625a07c936391a484d25cc);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5d9d53c609625a07c936391a484d25cc, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5d9d53c609625a07c936391a484d25cc->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5d9d53c609625a07c936391a484d25cc, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5d9d53c609625a07c936391a484d25cc,
        type_description_1,
        par_self,
        par_calc_count
    );


    // Release cached frame if used for exception.
    if (frame_5d9d53c609625a07c936391a484d25cc == cache_frame_5d9d53c609625a07c936391a484d25cc) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5d9d53c609625a07c936391a484d25cc);
        cache_frame_5d9d53c609625a07c936391a484d25cc = NULL;
    }

    assertFrameObject(frame_5d9d53c609625a07c936391a484d25cc);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_calc_count);
    Py_DECREF(par_calc_count);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_calc_count);
    Py_DECREF(par_calc_count);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__68___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_ref_mode = python_pars[1];
    struct Nuitka_FrameObject *frame_ed2dbae34988d71c8e0c8f882c301143;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_ed2dbae34988d71c8e0c8f882c301143 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_ed2dbae34988d71c8e0c8f882c301143)) {
        Py_XDECREF(cache_frame_ed2dbae34988d71c8e0c8f882c301143);

#if _DEBUG_REFCOUNTS
        if (cache_frame_ed2dbae34988d71c8e0c8f882c301143 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_ed2dbae34988d71c8e0c8f882c301143 = MAKE_FUNCTION_FRAME(codeobj_ed2dbae34988d71c8e0c8f882c301143, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_ed2dbae34988d71c8e0c8f882c301143->m_type_description == NULL);
    frame_ed2dbae34988d71c8e0c8f882c301143 = cache_frame_ed2dbae34988d71c8e0c8f882c301143;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_ed2dbae34988d71c8e0c8f882c301143);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_ed2dbae34988d71c8e0c8f882c301143) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1745;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_ref_mode);
        tmp_args_element_value_2 = par_ref_mode;
        frame_ed2dbae34988d71c8e0c8f882c301143->m_frame.f_lineno = 1745;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1745;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1745;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ed2dbae34988d71c8e0c8f882c301143);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_ed2dbae34988d71c8e0c8f882c301143);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_ed2dbae34988d71c8e0c8f882c301143, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_ed2dbae34988d71c8e0c8f882c301143->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_ed2dbae34988d71c8e0c8f882c301143, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_ed2dbae34988d71c8e0c8f882c301143,
        type_description_1,
        par_self,
        par_ref_mode
    );


    // Release cached frame if used for exception.
    if (frame_ed2dbae34988d71c8e0c8f882c301143 == cache_frame_ed2dbae34988d71c8e0c8f882c301143) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_ed2dbae34988d71c8e0c8f882c301143);
        cache_frame_ed2dbae34988d71c8e0c8f882c301143 = NULL;
    }

    assertFrameObject(frame_ed2dbae34988d71c8e0c8f882c301143);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_ref_mode);
    Py_DECREF(par_ref_mode);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_ref_mode);
    Py_DECREF(par_ref_mode);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__69___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_iterations_on = python_pars[1];
    struct Nuitka_FrameObject *frame_502160976a0cfeaa1dbe28ad4dfe7e99;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99)) {
        Py_XDECREF(cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99);

#if _DEBUG_REFCOUNTS
        if (cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99 = MAKE_FUNCTION_FRAME(codeobj_502160976a0cfeaa1dbe28ad4dfe7e99, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99->m_type_description == NULL);
    frame_502160976a0cfeaa1dbe28ad4dfe7e99 = cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_502160976a0cfeaa1dbe28ad4dfe7e99);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_502160976a0cfeaa1dbe28ad4dfe7e99) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1760;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_iterations_on);
        tmp_args_element_value_2 = par_iterations_on;
        frame_502160976a0cfeaa1dbe28ad4dfe7e99->m_frame.f_lineno = 1760;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1760;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1760;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_502160976a0cfeaa1dbe28ad4dfe7e99);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_502160976a0cfeaa1dbe28ad4dfe7e99);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_502160976a0cfeaa1dbe28ad4dfe7e99, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_502160976a0cfeaa1dbe28ad4dfe7e99->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_502160976a0cfeaa1dbe28ad4dfe7e99, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_502160976a0cfeaa1dbe28ad4dfe7e99,
        type_description_1,
        par_self,
        par_iterations_on
    );


    // Release cached frame if used for exception.
    if (frame_502160976a0cfeaa1dbe28ad4dfe7e99 == cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99);
        cache_frame_502160976a0cfeaa1dbe28ad4dfe7e99 = NULL;
    }

    assertFrameObject(frame_502160976a0cfeaa1dbe28ad4dfe7e99);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_iterations_on);
    Py_DECREF(par_iterations_on);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_iterations_on);
    Py_DECREF(par_iterations_on);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__70___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_delta = python_pars[1];
    struct Nuitka_FrameObject *frame_9dded7108a70b0050b2bcc213080b758;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_9dded7108a70b0050b2bcc213080b758 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_9dded7108a70b0050b2bcc213080b758)) {
        Py_XDECREF(cache_frame_9dded7108a70b0050b2bcc213080b758);

#if _DEBUG_REFCOUNTS
        if (cache_frame_9dded7108a70b0050b2bcc213080b758 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_9dded7108a70b0050b2bcc213080b758 = MAKE_FUNCTION_FRAME(codeobj_9dded7108a70b0050b2bcc213080b758, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_9dded7108a70b0050b2bcc213080b758->m_type_description == NULL);
    frame_9dded7108a70b0050b2bcc213080b758 = cache_frame_9dded7108a70b0050b2bcc213080b758;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_9dded7108a70b0050b2bcc213080b758);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_9dded7108a70b0050b2bcc213080b758) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[176];
        CHECK_OBJECT(par_delta);
        tmp_args_element_value_2 = par_delta;
        frame_9dded7108a70b0050b2bcc213080b758->m_frame.f_lineno = 1777;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1777;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9dded7108a70b0050b2bcc213080b758);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_9dded7108a70b0050b2bcc213080b758);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_9dded7108a70b0050b2bcc213080b758, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_9dded7108a70b0050b2bcc213080b758->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_9dded7108a70b0050b2bcc213080b758, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_9dded7108a70b0050b2bcc213080b758,
        type_description_1,
        par_self,
        par_delta
    );


    // Release cached frame if used for exception.
    if (frame_9dded7108a70b0050b2bcc213080b758 == cache_frame_9dded7108a70b0050b2bcc213080b758) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_9dded7108a70b0050b2bcc213080b758);
        cache_frame_9dded7108a70b0050b2bcc213080b758 = NULL;
    }

    assertFrameObject(frame_9dded7108a70b0050b2bcc213080b758);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_delta);
    Py_DECREF(par_delta);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_delta);
    Py_DECREF(par_delta);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__71___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_recalc = python_pars[1];
    struct Nuitka_FrameObject *frame_d6cb25b0e871d9cffc6240ab47d6b7b2;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2)) {
        Py_XDECREF(cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2 = MAKE_FUNCTION_FRAME(codeobj_d6cb25b0e871d9cffc6240ab47d6b7b2, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2->m_type_description == NULL);
    frame_d6cb25b0e871d9cffc6240ab47d6b7b2 = cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d6cb25b0e871d9cffc6240ab47d6b7b2);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d6cb25b0e871d9cffc6240ab47d6b7b2) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1795;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_recalc);
        tmp_args_element_value_2 = par_recalc;
        frame_d6cb25b0e871d9cffc6240ab47d6b7b2->m_frame.f_lineno = 1795;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1795;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1795;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6cb25b0e871d9cffc6240ab47d6b7b2);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6cb25b0e871d9cffc6240ab47d6b7b2);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d6cb25b0e871d9cffc6240ab47d6b7b2, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d6cb25b0e871d9cffc6240ab47d6b7b2->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d6cb25b0e871d9cffc6240ab47d6b7b2, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d6cb25b0e871d9cffc6240ab47d6b7b2,
        type_description_1,
        par_self,
        par_recalc
    );


    // Release cached frame if used for exception.
    if (frame_d6cb25b0e871d9cffc6240ab47d6b7b2 == cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2);
        cache_frame_d6cb25b0e871d9cffc6240ab47d6b7b2 = NULL;
    }

    assertFrameObject(frame_d6cb25b0e871d9cffc6240ab47d6b7b2);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_recalc);
    Py_DECREF(par_recalc);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_recalc);
    Py_DECREF(par_recalc);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__72___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_print_headers = python_pars[1];
    struct Nuitka_FrameObject *frame_dda76cb9f741fd429a5da9f28502b5a0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_dda76cb9f741fd429a5da9f28502b5a0 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_dda76cb9f741fd429a5da9f28502b5a0)) {
        Py_XDECREF(cache_frame_dda76cb9f741fd429a5da9f28502b5a0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_dda76cb9f741fd429a5da9f28502b5a0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_dda76cb9f741fd429a5da9f28502b5a0 = MAKE_FUNCTION_FRAME(codeobj_dda76cb9f741fd429a5da9f28502b5a0, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_dda76cb9f741fd429a5da9f28502b5a0->m_type_description == NULL);
    frame_dda76cb9f741fd429a5da9f28502b5a0 = cache_frame_dda76cb9f741fd429a5da9f28502b5a0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_dda76cb9f741fd429a5da9f28502b5a0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_dda76cb9f741fd429a5da9f28502b5a0) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1811;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_print_headers);
        tmp_args_element_value_2 = par_print_headers;
        frame_dda76cb9f741fd429a5da9f28502b5a0->m_frame.f_lineno = 1811;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1811;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1811;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dda76cb9f741fd429a5da9f28502b5a0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_dda76cb9f741fd429a5da9f28502b5a0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_dda76cb9f741fd429a5da9f28502b5a0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_dda76cb9f741fd429a5da9f28502b5a0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_dda76cb9f741fd429a5da9f28502b5a0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_dda76cb9f741fd429a5da9f28502b5a0,
        type_description_1,
        par_self,
        par_print_headers
    );


    // Release cached frame if used for exception.
    if (frame_dda76cb9f741fd429a5da9f28502b5a0 == cache_frame_dda76cb9f741fd429a5da9f28502b5a0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_dda76cb9f741fd429a5da9f28502b5a0);
        cache_frame_dda76cb9f741fd429a5da9f28502b5a0 = NULL;
    }

    assertFrameObject(frame_dda76cb9f741fd429a5da9f28502b5a0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_print_headers);
    Py_DECREF(par_print_headers);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_print_headers);
    Py_DECREF(par_print_headers);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__73___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_print_grid = python_pars[1];
    struct Nuitka_FrameObject *frame_537a71675914cd42926a2fe362fdd27d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_537a71675914cd42926a2fe362fdd27d = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_537a71675914cd42926a2fe362fdd27d)) {
        Py_XDECREF(cache_frame_537a71675914cd42926a2fe362fdd27d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_537a71675914cd42926a2fe362fdd27d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_537a71675914cd42926a2fe362fdd27d = MAKE_FUNCTION_FRAME(codeobj_537a71675914cd42926a2fe362fdd27d, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_537a71675914cd42926a2fe362fdd27d->m_type_description == NULL);
    frame_537a71675914cd42926a2fe362fdd27d = cache_frame_537a71675914cd42926a2fe362fdd27d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_537a71675914cd42926a2fe362fdd27d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_537a71675914cd42926a2fe362fdd27d) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1828;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_print_grid);
        tmp_args_element_value_2 = par_print_grid;
        frame_537a71675914cd42926a2fe362fdd27d->m_frame.f_lineno = 1828;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1828;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1828;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_537a71675914cd42926a2fe362fdd27d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_537a71675914cd42926a2fe362fdd27d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_537a71675914cd42926a2fe362fdd27d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_537a71675914cd42926a2fe362fdd27d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_537a71675914cd42926a2fe362fdd27d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_537a71675914cd42926a2fe362fdd27d,
        type_description_1,
        par_self,
        par_print_grid
    );


    // Release cached frame if used for exception.
    if (frame_537a71675914cd42926a2fe362fdd27d == cache_frame_537a71675914cd42926a2fe362fdd27d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_537a71675914cd42926a2fe362fdd27d);
        cache_frame_537a71675914cd42926a2fe362fdd27d = NULL;
    }

    assertFrameObject(frame_537a71675914cd42926a2fe362fdd27d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_print_grid);
    Py_DECREF(par_print_grid);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_print_grid);
    Py_DECREF(par_print_grid);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__74___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_print_grid_changed = python_pars[1];
    struct Nuitka_FrameObject *frame_e56107ca9df71486b84a6a549aefe979;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_e56107ca9df71486b84a6a549aefe979 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_e56107ca9df71486b84a6a549aefe979)) {
        Py_XDECREF(cache_frame_e56107ca9df71486b84a6a549aefe979);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e56107ca9df71486b84a6a549aefe979 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e56107ca9df71486b84a6a549aefe979 = MAKE_FUNCTION_FRAME(codeobj_e56107ca9df71486b84a6a549aefe979, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e56107ca9df71486b84a6a549aefe979->m_type_description == NULL);
    frame_e56107ca9df71486b84a6a549aefe979 = cache_frame_e56107ca9df71486b84a6a549aefe979;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e56107ca9df71486b84a6a549aefe979);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e56107ca9df71486b84a6a549aefe979) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1845;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_print_grid_changed);
        tmp_args_element_value_2 = par_print_grid_changed;
        frame_e56107ca9df71486b84a6a549aefe979->m_frame.f_lineno = 1845;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1845;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1845;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e56107ca9df71486b84a6a549aefe979);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e56107ca9df71486b84a6a549aefe979);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e56107ca9df71486b84a6a549aefe979, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e56107ca9df71486b84a6a549aefe979->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e56107ca9df71486b84a6a549aefe979, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e56107ca9df71486b84a6a549aefe979,
        type_description_1,
        par_self,
        par_print_grid_changed
    );


    // Release cached frame if used for exception.
    if (frame_e56107ca9df71486b84a6a549aefe979 == cache_frame_e56107ca9df71486b84a6a549aefe979) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e56107ca9df71486b84a6a549aefe979);
        cache_frame_e56107ca9df71486b84a6a549aefe979 = NULL;
    }

    assertFrameObject(frame_e56107ca9df71486b84a6a549aefe979);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_print_grid_changed);
    Py_DECREF(par_print_grid_changed);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_print_grid_changed);
    Py_DECREF(par_print_grid_changed);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__75___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_options = python_pars[1];
    PyObject *par_def_height = python_pars[2];
    struct Nuitka_FrameObject *frame_2483467d67d745f9e1d796fac369fad0;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_2483467d67d745f9e1d796fac369fad0 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_2483467d67d745f9e1d796fac369fad0)) {
        Py_XDECREF(cache_frame_2483467d67d745f9e1d796fac369fad0);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2483467d67d745f9e1d796fac369fad0 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2483467d67d745f9e1d796fac369fad0 = MAKE_FUNCTION_FRAME(codeobj_2483467d67d745f9e1d796fac369fad0, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2483467d67d745f9e1d796fac369fad0->m_type_description == NULL);
    frame_2483467d67d745f9e1d796fac369fad0 = cache_frame_2483467d67d745f9e1d796fac369fad0;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2483467d67d745f9e1d796fac369fad0);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2483467d67d745f9e1d796fac369fad0) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1868;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[56];
        CHECK_OBJECT(par_options);
        tmp_args_element_value_2 = par_options;
        CHECK_OBJECT(par_def_height);
        tmp_args_element_value_3 = par_def_height;
        frame_2483467d67d745f9e1d796fac369fad0->m_frame.f_lineno = 1868;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1868;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1868;
            type_description_1 = "ooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2483467d67d745f9e1d796fac369fad0);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2483467d67d745f9e1d796fac369fad0);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2483467d67d745f9e1d796fac369fad0, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2483467d67d745f9e1d796fac369fad0->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2483467d67d745f9e1d796fac369fad0, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2483467d67d745f9e1d796fac369fad0,
        type_description_1,
        par_self,
        par_options,
        par_def_height
    );


    // Release cached frame if used for exception.
    if (frame_2483467d67d745f9e1d796fac369fad0 == cache_frame_2483467d67d745f9e1d796fac369fad0) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2483467d67d745f9e1d796fac369fad0);
        cache_frame_2483467d67d745f9e1d796fac369fad0 = NULL;
    }

    assertFrameObject(frame_2483467d67d745f9e1d796fac369fad0);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_def_height);
    Py_DECREF(par_def_height);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_def_height);
    Py_DECREF(par_def_height);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__76___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_def_width = python_pars[1];
    struct Nuitka_FrameObject *frame_b20307a469cae9c7cc03f186d69ea563;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_b20307a469cae9c7cc03f186d69ea563 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_b20307a469cae9c7cc03f186d69ea563)) {
        Py_XDECREF(cache_frame_b20307a469cae9c7cc03f186d69ea563);

#if _DEBUG_REFCOUNTS
        if (cache_frame_b20307a469cae9c7cc03f186d69ea563 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_b20307a469cae9c7cc03f186d69ea563 = MAKE_FUNCTION_FRAME(codeobj_b20307a469cae9c7cc03f186d69ea563, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_b20307a469cae9c7cc03f186d69ea563->m_type_description == NULL);
    frame_b20307a469cae9c7cc03f186d69ea563 = cache_frame_b20307a469cae9c7cc03f186d69ea563;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_b20307a469cae9c7cc03f186d69ea563);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_b20307a469cae9c7cc03f186d69ea563) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1886;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        tmp_args_element_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[177]);

        if (unlikely(tmp_args_element_value_2 == NULL)) {
            tmp_args_element_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[177]);
        }

        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1886;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_def_width);
        tmp_args_element_value_3 = par_def_width;
        frame_b20307a469cae9c7cc03f186d69ea563->m_frame.f_lineno = 1886;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1886;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1886;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b20307a469cae9c7cc03f186d69ea563);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_b20307a469cae9c7cc03f186d69ea563);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_b20307a469cae9c7cc03f186d69ea563, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_b20307a469cae9c7cc03f186d69ea563->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_b20307a469cae9c7cc03f186d69ea563, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_b20307a469cae9c7cc03f186d69ea563,
        type_description_1,
        par_self,
        par_def_width
    );


    // Release cached frame if used for exception.
    if (frame_b20307a469cae9c7cc03f186d69ea563 == cache_frame_b20307a469cae9c7cc03f186d69ea563) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_b20307a469cae9c7cc03f186d69ea563);
        cache_frame_b20307a469cae9c7cc03f186d69ea563 = NULL;
    }

    assertFrameObject(frame_b20307a469cae9c7cc03f186d69ea563);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_def_width);
    Py_DECREF(par_def_width);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_def_width);
    Py_DECREF(par_def_width);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__77___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_breaks_list = python_pars[1];
    PyObject *var_r = NULL;
    PyObject *var_c1 = NULL;
    PyObject *var_c2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_2aa18dd4561fb2f8df4e3983ab736b89;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_2aa18dd4561fb2f8df4e3983ab736b89 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_2aa18dd4561fb2f8df4e3983ab736b89)) {
        Py_XDECREF(cache_frame_2aa18dd4561fb2f8df4e3983ab736b89);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2aa18dd4561fb2f8df4e3983ab736b89 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2aa18dd4561fb2f8df4e3983ab736b89 = MAKE_FUNCTION_FRAME(codeobj_2aa18dd4561fb2f8df4e3983ab736b89, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2aa18dd4561fb2f8df4e3983ab736b89->m_type_description == NULL);
    frame_2aa18dd4561fb2f8df4e3983ab736b89 = cache_frame_2aa18dd4561fb2f8df4e3983ab736b89;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2aa18dd4561fb2f8df4e3983ab736b89);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2aa18dd4561fb2f8df4e3983ab736b89) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1910;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_breaks_list);
        tmp_len_arg_1 = par_breaks_list;
        tmp_args_element_value_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1910;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_2aa18dd4561fb2f8df4e3983ab736b89->m_frame.f_lineno = 1910;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1910;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1910;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_breaks_list);
        tmp_iter_arg_1 = par_breaks_list;
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1911;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 1911;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1911;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_1, 0, 3);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 1911;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_2, 1, 3);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 1911;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_3, 2, 3);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 1911;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooo";
                    exception_lineno = 1911;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[178];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooo";
            exception_lineno = 1911;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_r;
            var_r = tmp_assign_source_7;
            Py_INCREF(var_r);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_c1;
            var_c1 = tmp_assign_source_8;
            Py_INCREF(var_c1);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_3);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_c2;
            var_c2 = tmp_assign_source_9;
            Py_INCREF(var_c2);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_expression_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1912;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_1 = par_self;
        tmp_assign_source_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1912;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_inplace_assign_1__value;
            tmp_inplace_assign_1__value = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_1 = tmp_inplace_assign_1__value;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1912;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
        tmp_args_element_value_3 = mod_consts[167];
        CHECK_OBJECT(var_r);
        tmp_args_element_value_4 = var_r;
        CHECK_OBJECT(var_c1);
        tmp_args_element_value_5 = var_c1;
        CHECK_OBJECT(var_c2);
        tmp_args_element_value_6 = var_c2;
        frame_2aa18dd4561fb2f8df4e3983ab736b89->m_frame.f_lineno = 1912;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_right_value_1 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_2, call_args);
        }

        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1912;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1912;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_11 = tmp_left_value_1;
        tmp_inplace_assign_1__value = tmp_assign_source_11;

    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_2 = tmp_inplace_assign_1__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1912;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }

        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[58], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1912;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1911;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2aa18dd4561fb2f8df4e3983ab736b89);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2aa18dd4561fb2f8df4e3983ab736b89);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2aa18dd4561fb2f8df4e3983ab736b89, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2aa18dd4561fb2f8df4e3983ab736b89->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2aa18dd4561fb2f8df4e3983ab736b89, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2aa18dd4561fb2f8df4e3983ab736b89,
        type_description_1,
        par_self,
        par_breaks_list,
        var_r,
        var_c1,
        var_c2
    );


    // Release cached frame if used for exception.
    if (frame_2aa18dd4561fb2f8df4e3983ab736b89 == cache_frame_2aa18dd4561fb2f8df4e3983ab736b89) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2aa18dd4561fb2f8df4e3983ab736b89);
        cache_frame_2aa18dd4561fb2f8df4e3983ab736b89 = NULL;
    }

    assertFrameObject(frame_2aa18dd4561fb2f8df4e3983ab736b89);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_r);
    var_r = NULL;
    Py_XDECREF(var_c1);
    var_c1 = NULL;
    Py_XDECREF(var_c2);
    var_c2 = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_r);
    var_r = NULL;
    Py_XDECREF(var_c1);
    var_c1 = NULL;
    Py_XDECREF(var_c2);
    var_c2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_breaks_list);
    Py_DECREF(par_breaks_list);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_breaks_list);
    Py_DECREF(par_breaks_list);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__78___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_breaks_list = python_pars[1];
    PyObject *var_r = NULL;
    PyObject *var_c1 = NULL;
    PyObject *var_c2 = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_inplace_assign_1__value = NULL;
    PyObject *tmp_tuple_unpack_1__element_1 = NULL;
    PyObject *tmp_tuple_unpack_1__element_2 = NULL;
    PyObject *tmp_tuple_unpack_1__element_3 = NULL;
    PyObject *tmp_tuple_unpack_1__source_iter = NULL;
    struct Nuitka_FrameObject *frame_e364fa8b16306c8203fd87d0f395294d;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    PyObject *tmp_iterator_attempt;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    static struct Nuitka_FrameObject *cache_frame_e364fa8b16306c8203fd87d0f395294d = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_e364fa8b16306c8203fd87d0f395294d)) {
        Py_XDECREF(cache_frame_e364fa8b16306c8203fd87d0f395294d);

#if _DEBUG_REFCOUNTS
        if (cache_frame_e364fa8b16306c8203fd87d0f395294d == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_e364fa8b16306c8203fd87d0f395294d = MAKE_FUNCTION_FRAME(codeobj_e364fa8b16306c8203fd87d0f395294d, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_e364fa8b16306c8203fd87d0f395294d->m_type_description == NULL);
    frame_e364fa8b16306c8203fd87d0f395294d = cache_frame_e364fa8b16306c8203fd87d0f395294d;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_e364fa8b16306c8203fd87d0f395294d);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_e364fa8b16306c8203fd87d0f395294d) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1937;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_breaks_list);
        tmp_len_arg_1 = par_breaks_list;
        tmp_args_element_value_2 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1937;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        frame_e364fa8b16306c8203fd87d0f395294d->m_frame.f_lineno = 1937;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1937;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1937;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_iter_arg_1;
        CHECK_OBJECT(par_breaks_list);
        tmp_iter_arg_1 = par_breaks_list;
        tmp_assign_source_1 = MAKE_ITERATOR(tmp_iter_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1938;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_1;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_2 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_2 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooo";
                exception_lineno = 1938;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_2;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_2;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_iter_arg_2 = tmp_for_loop_1__iter_value;
        tmp_assign_source_3 = MAKE_UNPACK_ITERATOR(tmp_iter_arg_2);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1938;
            type_description_1 = "ooooo";
            goto try_except_handler_3;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__source_iter;
            tmp_tuple_unpack_1__source_iter = tmp_assign_source_3;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_unpack_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_1 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_4 = UNPACK_NEXT(tmp_unpack_1, 0, 3);
        if (tmp_assign_source_4 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 1938;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_1;
            tmp_tuple_unpack_1__element_1 = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_unpack_2;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_2 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_5 = UNPACK_NEXT(tmp_unpack_2, 1, 3);
        if (tmp_assign_source_5 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 1938;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_2;
            tmp_tuple_unpack_1__element_2 = tmp_assign_source_5;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_unpack_3;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_unpack_3 = tmp_tuple_unpack_1__source_iter;
        tmp_assign_source_6 = UNPACK_NEXT(tmp_unpack_3, 2, 3);
        if (tmp_assign_source_6 == NULL) {
            if (!ERROR_OCCURRED()) {
                exception_type = PyExc_StopIteration;
                Py_INCREF(exception_type);
                exception_value = NULL;
                exception_tb = NULL;
            } else {
                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            }


            type_description_1 = "ooooo";
            exception_lineno = 1938;
            goto try_except_handler_4;
        }
        {
            PyObject *old = tmp_tuple_unpack_1__element_3;
            tmp_tuple_unpack_1__element_3 = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_iterator_name_1;
        CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
        tmp_iterator_name_1 = tmp_tuple_unpack_1__source_iter;
        // Check if iterator has left-over elements.
        CHECK_OBJECT(tmp_iterator_name_1); assert(HAS_ITERNEXT(tmp_iterator_name_1));

        tmp_iterator_attempt = (*Py_TYPE(tmp_iterator_name_1)->tp_iternext)(tmp_iterator_name_1);

        if (likely(tmp_iterator_attempt == NULL)) {
            PyObject *error = GET_ERROR_OCCURRED();

            if (error != NULL) {
                if (EXCEPTION_MATCH_BOOL_SINGLE(error, PyExc_StopIteration)) {
                    CLEAR_ERROR_OCCURRED();
                } else {
                    FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);

                    type_description_1 = "ooooo";
                    exception_lineno = 1938;
                    goto try_except_handler_4;
                }
            }
        } else {
            Py_DECREF(tmp_iterator_attempt);

            exception_type = PyExc_ValueError;
            Py_INCREF(PyExc_ValueError);
            exception_value = mod_consts[178];
            Py_INCREF(exception_value);
            exception_tb = NULL;

            type_description_1 = "ooooo";
            exception_lineno = 1938;
            goto try_except_handler_4;
        }
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_4:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto try_except_handler_3;
    // End of try:
    try_end_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto try_except_handler_2;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_tuple_unpack_1__source_iter);
    Py_DECREF(tmp_tuple_unpack_1__source_iter);
    tmp_tuple_unpack_1__source_iter = NULL;
    {
        PyObject *tmp_assign_source_7;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_1);
        tmp_assign_source_7 = tmp_tuple_unpack_1__element_1;
        {
            PyObject *old = var_r;
            var_r = tmp_assign_source_7;
            Py_INCREF(var_r);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_1);
    tmp_tuple_unpack_1__element_1 = NULL;

    {
        PyObject *tmp_assign_source_8;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_2);
        tmp_assign_source_8 = tmp_tuple_unpack_1__element_2;
        {
            PyObject *old = var_c1;
            var_c1 = tmp_assign_source_8;
            Py_INCREF(var_c1);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_2);
    tmp_tuple_unpack_1__element_2 = NULL;

    {
        PyObject *tmp_assign_source_9;
        CHECK_OBJECT(tmp_tuple_unpack_1__element_3);
        tmp_assign_source_9 = tmp_tuple_unpack_1__element_3;
        {
            PyObject *old = var_c2;
            var_c2 = tmp_assign_source_9;
            Py_INCREF(var_c2);
            Py_XDECREF(old);
        }

    }
    Py_XDECREF(tmp_tuple_unpack_1__element_3);
    tmp_tuple_unpack_1__element_3 = NULL;

    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_expression_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1939;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_1 = par_self;
        tmp_assign_source_10 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[58]);
        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1939;
            type_description_1 = "ooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = tmp_inplace_assign_1__value;
            tmp_inplace_assign_1__value = tmp_assign_source_10;
            Py_XDECREF(old);
        }

    }
    // Tried code:
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_left_value_1 = tmp_inplace_assign_1__value;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1939;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
        tmp_args_element_value_3 = mod_consts[167];
        CHECK_OBJECT(var_r);
        tmp_args_element_value_4 = var_r;
        CHECK_OBJECT(var_c1);
        tmp_args_element_value_5 = var_c1;
        CHECK_OBJECT(var_c2);
        tmp_args_element_value_6 = var_c2;
        frame_e364fa8b16306c8203fd87d0f395294d->m_frame.f_lineno = 1939;
        {
            PyObject *call_args[] = {tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_right_value_1 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_2, call_args);
        }

        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1939;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
        tmp_result = BINARY_OPERATION_ADD_OBJECT_OBJECT_INPLACE(&tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1939;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
        tmp_assign_source_11 = tmp_left_value_1;
        tmp_inplace_assign_1__value = tmp_assign_source_11;

    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        CHECK_OBJECT(tmp_inplace_assign_1__value);
        tmp_assattr_value_2 = tmp_inplace_assign_1__value;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 1939;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }

        tmp_assattr_target_2 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[58], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1939;
            type_description_1 = "ooooo";
            goto try_except_handler_5;
        }
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_5:;
    exception_keeper_type_3 = exception_type;
    exception_keeper_value_3 = exception_value;
    exception_keeper_tb_3 = exception_tb;
    exception_keeper_lineno_3 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_3;
    exception_value = exception_keeper_value_3;
    exception_tb = exception_keeper_tb_3;
    exception_lineno = exception_keeper_lineno_3;

    goto try_except_handler_2;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_inplace_assign_1__value);
    Py_DECREF(tmp_inplace_assign_1__value);
    tmp_inplace_assign_1__value = NULL;
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1938;
        type_description_1 = "ooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_4;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_4 = exception_type;
    exception_keeper_value_4 = exception_value;
    exception_keeper_tb_4 = exception_tb;
    exception_keeper_lineno_4 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_4;
    exception_value = exception_keeper_value_4;
    exception_tb = exception_keeper_tb_4;
    exception_lineno = exception_keeper_lineno_4;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e364fa8b16306c8203fd87d0f395294d);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_e364fa8b16306c8203fd87d0f395294d);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_e364fa8b16306c8203fd87d0f395294d, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_e364fa8b16306c8203fd87d0f395294d->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_e364fa8b16306c8203fd87d0f395294d, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_e364fa8b16306c8203fd87d0f395294d,
        type_description_1,
        par_self,
        par_breaks_list,
        var_r,
        var_c1,
        var_c2
    );


    // Release cached frame if used for exception.
    if (frame_e364fa8b16306c8203fd87d0f395294d == cache_frame_e364fa8b16306c8203fd87d0f395294d) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_e364fa8b16306c8203fd87d0f395294d);
        cache_frame_e364fa8b16306c8203fd87d0f395294d = NULL;
    }

    assertFrameObject(frame_e364fa8b16306c8203fd87d0f395294d);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_r);
    var_r = NULL;
    Py_XDECREF(var_c1);
    var_c1 = NULL;
    Py_XDECREF(var_c2);
    var_c2 = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_r);
    var_r = NULL;
    Py_XDECREF(var_c1);
    var_c1 = NULL;
    Py_XDECREF(var_c2);
    var_c2 = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_breaks_list);
    Py_DECREF(par_breaks_list);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_breaks_list);
    Py_DECREF(par_breaks_list);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__79___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_header_str = python_pars[1];
    struct Nuitka_FrameObject *frame_f8398672376fca6e76bd4f891257a737;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_f8398672376fca6e76bd4f891257a737 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_f8398672376fca6e76bd4f891257a737)) {
        Py_XDECREF(cache_frame_f8398672376fca6e76bd4f891257a737);

#if _DEBUG_REFCOUNTS
        if (cache_frame_f8398672376fca6e76bd4f891257a737 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_f8398672376fca6e76bd4f891257a737 = MAKE_FUNCTION_FRAME(codeobj_f8398672376fca6e76bd4f891257a737, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_f8398672376fca6e76bd4f891257a737->m_type_description == NULL);
    frame_f8398672376fca6e76bd4f891257a737 = cache_frame_f8398672376fca6e76bd4f891257a737;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_f8398672376fca6e76bd4f891257a737);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_f8398672376fca6e76bd4f891257a737) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[37]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2005;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_header_str);
        tmp_args_element_value_1 = par_header_str;
        frame_f8398672376fca6e76bd4f891257a737->m_frame.f_lineno = 2005;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2005;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2005;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f8398672376fca6e76bd4f891257a737);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_f8398672376fca6e76bd4f891257a737);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_f8398672376fca6e76bd4f891257a737, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_f8398672376fca6e76bd4f891257a737->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_f8398672376fca6e76bd4f891257a737, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_f8398672376fca6e76bd4f891257a737,
        type_description_1,
        par_self,
        par_header_str
    );


    // Release cached frame if used for exception.
    if (frame_f8398672376fca6e76bd4f891257a737 == cache_frame_f8398672376fca6e76bd4f891257a737) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_f8398672376fca6e76bd4f891257a737);
        cache_frame_f8398672376fca6e76bd4f891257a737 = NULL;
    }

    assertFrameObject(frame_f8398672376fca6e76bd4f891257a737);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_header_str);
    Py_DECREF(par_header_str);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_header_str);
    Py_DECREF(par_header_str);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__80___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_footer_str = python_pars[1];
    struct Nuitka_FrameObject *frame_a0462e21ef12e31f64d2a134d7204e09;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_a0462e21ef12e31f64d2a134d7204e09 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_a0462e21ef12e31f64d2a134d7204e09)) {
        Py_XDECREF(cache_frame_a0462e21ef12e31f64d2a134d7204e09);

#if _DEBUG_REFCOUNTS
        if (cache_frame_a0462e21ef12e31f64d2a134d7204e09 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_a0462e21ef12e31f64d2a134d7204e09 = MAKE_FUNCTION_FRAME(codeobj_a0462e21ef12e31f64d2a134d7204e09, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_a0462e21ef12e31f64d2a134d7204e09->m_type_description == NULL);
    frame_a0462e21ef12e31f64d2a134d7204e09 = cache_frame_a0462e21ef12e31f64d2a134d7204e09;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_a0462e21ef12e31f64d2a134d7204e09);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_a0462e21ef12e31f64d2a134d7204e09) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[37]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[37]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_footer_str);
        tmp_args_element_value_1 = par_footer_str;
        frame_a0462e21ef12e31f64d2a134d7204e09->m_frame.f_lineno = 2014;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2014;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a0462e21ef12e31f64d2a134d7204e09);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_a0462e21ef12e31f64d2a134d7204e09);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_a0462e21ef12e31f64d2a134d7204e09, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_a0462e21ef12e31f64d2a134d7204e09->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_a0462e21ef12e31f64d2a134d7204e09, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_a0462e21ef12e31f64d2a134d7204e09,
        type_description_1,
        par_self,
        par_footer_str
    );


    // Release cached frame if used for exception.
    if (frame_a0462e21ef12e31f64d2a134d7204e09 == cache_frame_a0462e21ef12e31f64d2a134d7204e09) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_a0462e21ef12e31f64d2a134d7204e09);
        cache_frame_a0462e21ef12e31f64d2a134d7204e09 = NULL;
    }

    assertFrameObject(frame_a0462e21ef12e31f64d2a134d7204e09);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_footer_str);
    Py_DECREF(par_footer_str);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_footer_str);
    Py_DECREF(par_footer_str);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__81___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_is_horz_center = python_pars[1];
    struct Nuitka_FrameObject *frame_c48eabe6c3b0b5012b9481c096e4b445;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_c48eabe6c3b0b5012b9481c096e4b445 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c48eabe6c3b0b5012b9481c096e4b445)) {
        Py_XDECREF(cache_frame_c48eabe6c3b0b5012b9481c096e4b445);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c48eabe6c3b0b5012b9481c096e4b445 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c48eabe6c3b0b5012b9481c096e4b445 = MAKE_FUNCTION_FRAME(codeobj_c48eabe6c3b0b5012b9481c096e4b445, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c48eabe6c3b0b5012b9481c096e4b445->m_type_description == NULL);
    frame_c48eabe6c3b0b5012b9481c096e4b445 = cache_frame_c48eabe6c3b0b5012b9481c096e4b445;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c48eabe6c3b0b5012b9481c096e4b445);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c48eabe6c3b0b5012b9481c096e4b445) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2032;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_is_horz_center);
        tmp_args_element_value_2 = par_is_horz_center;
        frame_c48eabe6c3b0b5012b9481c096e4b445->m_frame.f_lineno = 2032;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2032;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2032;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c48eabe6c3b0b5012b9481c096e4b445);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c48eabe6c3b0b5012b9481c096e4b445);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c48eabe6c3b0b5012b9481c096e4b445, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c48eabe6c3b0b5012b9481c096e4b445->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c48eabe6c3b0b5012b9481c096e4b445, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c48eabe6c3b0b5012b9481c096e4b445,
        type_description_1,
        par_self,
        par_is_horz_center
    );


    // Release cached frame if used for exception.
    if (frame_c48eabe6c3b0b5012b9481c096e4b445 == cache_frame_c48eabe6c3b0b5012b9481c096e4b445) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c48eabe6c3b0b5012b9481c096e4b445);
        cache_frame_c48eabe6c3b0b5012b9481c096e4b445 = NULL;
    }

    assertFrameObject(frame_c48eabe6c3b0b5012b9481c096e4b445);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_is_horz_center);
    Py_DECREF(par_is_horz_center);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_is_horz_center);
    Py_DECREF(par_is_horz_center);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__82___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_is_vert_center = python_pars[1];
    struct Nuitka_FrameObject *frame_d094b75bf1b24c9cd064bc390f01d272;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_d094b75bf1b24c9cd064bc390f01d272 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d094b75bf1b24c9cd064bc390f01d272)) {
        Py_XDECREF(cache_frame_d094b75bf1b24c9cd064bc390f01d272);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d094b75bf1b24c9cd064bc390f01d272 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d094b75bf1b24c9cd064bc390f01d272 = MAKE_FUNCTION_FRAME(codeobj_d094b75bf1b24c9cd064bc390f01d272, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d094b75bf1b24c9cd064bc390f01d272->m_type_description == NULL);
    frame_d094b75bf1b24c9cd064bc390f01d272 = cache_frame_d094b75bf1b24c9cd064bc390f01d272;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d094b75bf1b24c9cd064bc390f01d272);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d094b75bf1b24c9cd064bc390f01d272) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2050;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[78];
        CHECK_OBJECT(par_is_vert_center);
        tmp_args_element_value_2 = par_is_vert_center;
        frame_d094b75bf1b24c9cd064bc390f01d272->m_frame.f_lineno = 2050;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2050;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2050;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d094b75bf1b24c9cd064bc390f01d272);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d094b75bf1b24c9cd064bc390f01d272);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d094b75bf1b24c9cd064bc390f01d272, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d094b75bf1b24c9cd064bc390f01d272->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d094b75bf1b24c9cd064bc390f01d272, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d094b75bf1b24c9cd064bc390f01d272,
        type_description_1,
        par_self,
        par_is_vert_center
    );


    // Release cached frame if used for exception.
    if (frame_d094b75bf1b24c9cd064bc390f01d272 == cache_frame_d094b75bf1b24c9cd064bc390f01d272) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d094b75bf1b24c9cd064bc390f01d272);
        cache_frame_d094b75bf1b24c9cd064bc390f01d272 = NULL;
    }

    assertFrameObject(frame_d094b75bf1b24c9cd064bc390f01d272);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_is_vert_center);
    Py_DECREF(par_is_vert_center);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_is_vert_center);
    Py_DECREF(par_is_vert_center);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__83___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_margin = python_pars[1];
    struct Nuitka_FrameObject *frame_70513fad6e7ab75ee7652434222515ea;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_70513fad6e7ab75ee7652434222515ea = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_70513fad6e7ab75ee7652434222515ea)) {
        Py_XDECREF(cache_frame_70513fad6e7ab75ee7652434222515ea);

#if _DEBUG_REFCOUNTS
        if (cache_frame_70513fad6e7ab75ee7652434222515ea == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_70513fad6e7ab75ee7652434222515ea = MAKE_FUNCTION_FRAME(codeobj_70513fad6e7ab75ee7652434222515ea, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_70513fad6e7ab75ee7652434222515ea->m_type_description == NULL);
    frame_70513fad6e7ab75ee7652434222515ea = cache_frame_70513fad6e7ab75ee7652434222515ea;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_70513fad6e7ab75ee7652434222515ea);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_70513fad6e7ab75ee7652434222515ea) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2068;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[176];
        CHECK_OBJECT(par_margin);
        tmp_args_element_value_2 = par_margin;
        frame_70513fad6e7ab75ee7652434222515ea->m_frame.f_lineno = 2068;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2068;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2068;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_70513fad6e7ab75ee7652434222515ea);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_70513fad6e7ab75ee7652434222515ea);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_70513fad6e7ab75ee7652434222515ea, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_70513fad6e7ab75ee7652434222515ea->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_70513fad6e7ab75ee7652434222515ea, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_70513fad6e7ab75ee7652434222515ea,
        type_description_1,
        par_self,
        par_margin
    );


    // Release cached frame if used for exception.
    if (frame_70513fad6e7ab75ee7652434222515ea == cache_frame_70513fad6e7ab75ee7652434222515ea) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_70513fad6e7ab75ee7652434222515ea);
        cache_frame_70513fad6e7ab75ee7652434222515ea = NULL;
    }

    assertFrameObject(frame_70513fad6e7ab75ee7652434222515ea);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__84___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_margin = python_pars[1];
    struct Nuitka_FrameObject *frame_5c5814c497bc07a5ea8ed634fb03a704;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_5c5814c497bc07a5ea8ed634fb03a704 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_5c5814c497bc07a5ea8ed634fb03a704)) {
        Py_XDECREF(cache_frame_5c5814c497bc07a5ea8ed634fb03a704);

#if _DEBUG_REFCOUNTS
        if (cache_frame_5c5814c497bc07a5ea8ed634fb03a704 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_5c5814c497bc07a5ea8ed634fb03a704 = MAKE_FUNCTION_FRAME(codeobj_5c5814c497bc07a5ea8ed634fb03a704, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_5c5814c497bc07a5ea8ed634fb03a704->m_type_description == NULL);
    frame_5c5814c497bc07a5ea8ed634fb03a704 = cache_frame_5c5814c497bc07a5ea8ed634fb03a704;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_5c5814c497bc07a5ea8ed634fb03a704);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_5c5814c497bc07a5ea8ed634fb03a704) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2084;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[176];
        CHECK_OBJECT(par_margin);
        tmp_args_element_value_2 = par_margin;
        frame_5c5814c497bc07a5ea8ed634fb03a704->m_frame.f_lineno = 2084;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2084;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2084;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5c5814c497bc07a5ea8ed634fb03a704);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_5c5814c497bc07a5ea8ed634fb03a704);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_5c5814c497bc07a5ea8ed634fb03a704, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_5c5814c497bc07a5ea8ed634fb03a704->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_5c5814c497bc07a5ea8ed634fb03a704, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_5c5814c497bc07a5ea8ed634fb03a704,
        type_description_1,
        par_self,
        par_margin
    );


    // Release cached frame if used for exception.
    if (frame_5c5814c497bc07a5ea8ed634fb03a704 == cache_frame_5c5814c497bc07a5ea8ed634fb03a704) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_5c5814c497bc07a5ea8ed634fb03a704);
        cache_frame_5c5814c497bc07a5ea8ed634fb03a704 = NULL;
    }

    assertFrameObject(frame_5c5814c497bc07a5ea8ed634fb03a704);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__85___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_margin = python_pars[1];
    struct Nuitka_FrameObject *frame_7368b0ad9ae527c5af4cf659ffe52f2f;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f)) {
        Py_XDECREF(cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f);

#if _DEBUG_REFCOUNTS
        if (cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f = MAKE_FUNCTION_FRAME(codeobj_7368b0ad9ae527c5af4cf659ffe52f2f, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f->m_type_description == NULL);
    frame_7368b0ad9ae527c5af4cf659ffe52f2f = cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_7368b0ad9ae527c5af4cf659ffe52f2f);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_7368b0ad9ae527c5af4cf659ffe52f2f) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2099;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[176];
        CHECK_OBJECT(par_margin);
        tmp_args_element_value_2 = par_margin;
        frame_7368b0ad9ae527c5af4cf659ffe52f2f->m_frame.f_lineno = 2099;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2099;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2099;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7368b0ad9ae527c5af4cf659ffe52f2f);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_7368b0ad9ae527c5af4cf659ffe52f2f);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_7368b0ad9ae527c5af4cf659ffe52f2f, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_7368b0ad9ae527c5af4cf659ffe52f2f->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_7368b0ad9ae527c5af4cf659ffe52f2f, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_7368b0ad9ae527c5af4cf659ffe52f2f,
        type_description_1,
        par_self,
        par_margin
    );


    // Release cached frame if used for exception.
    if (frame_7368b0ad9ae527c5af4cf659ffe52f2f == cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f);
        cache_frame_7368b0ad9ae527c5af4cf659ffe52f2f = NULL;
    }

    assertFrameObject(frame_7368b0ad9ae527c5af4cf659ffe52f2f);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__86___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_margin = python_pars[1];
    struct Nuitka_FrameObject *frame_bfaffc32173ea11cfb6876d30cb6c545;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_bfaffc32173ea11cfb6876d30cb6c545 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_bfaffc32173ea11cfb6876d30cb6c545)) {
        Py_XDECREF(cache_frame_bfaffc32173ea11cfb6876d30cb6c545);

#if _DEBUG_REFCOUNTS
        if (cache_frame_bfaffc32173ea11cfb6876d30cb6c545 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_bfaffc32173ea11cfb6876d30cb6c545 = MAKE_FUNCTION_FRAME(codeobj_bfaffc32173ea11cfb6876d30cb6c545, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_bfaffc32173ea11cfb6876d30cb6c545->m_type_description == NULL);
    frame_bfaffc32173ea11cfb6876d30cb6c545 = cache_frame_bfaffc32173ea11cfb6876d30cb6c545;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_bfaffc32173ea11cfb6876d30cb6c545);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_bfaffc32173ea11cfb6876d30cb6c545) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2115;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[176];
        CHECK_OBJECT(par_margin);
        tmp_args_element_value_2 = par_margin;
        frame_bfaffc32173ea11cfb6876d30cb6c545->m_frame.f_lineno = 2115;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS2(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2115;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2115;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bfaffc32173ea11cfb6876d30cb6c545);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_bfaffc32173ea11cfb6876d30cb6c545);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_bfaffc32173ea11cfb6876d30cb6c545, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_bfaffc32173ea11cfb6876d30cb6c545->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_bfaffc32173ea11cfb6876d30cb6c545, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_bfaffc32173ea11cfb6876d30cb6c545,
        type_description_1,
        par_self,
        par_margin
    );


    // Release cached frame if used for exception.
    if (frame_bfaffc32173ea11cfb6876d30cb6c545 == cache_frame_bfaffc32173ea11cfb6876d30cb6c545) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_bfaffc32173ea11cfb6876d30cb6c545);
        cache_frame_bfaffc32173ea11cfb6876d30cb6c545 = NULL;
    }

    assertFrameObject(frame_bfaffc32173ea11cfb6876d30cb6c545);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_margin);
    Py_DECREF(par_margin);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__87___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_paper = python_pars[1];
    PyObject *par_scaling = python_pars[2];
    PyObject *par_start_num = python_pars[3];
    PyObject *par_fit_width_to = python_pars[4];
    PyObject *par_fit_height_to = python_pars[5];
    PyObject *par_options = python_pars[6];
    PyObject *par_hres = python_pars[7];
    PyObject *par_vres = python_pars[8];
    PyObject *par_header_margin = python_pars[9];
    PyObject *par_footer_margin = python_pars[10];
    PyObject *par_num_copies = python_pars[11];
    struct Nuitka_FrameObject *frame_0304d334a91b8581a12ab647083af742;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_0304d334a91b8581a12ab647083af742 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_0304d334a91b8581a12ab647083af742)) {
        Py_XDECREF(cache_frame_0304d334a91b8581a12ab647083af742);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0304d334a91b8581a12ab647083af742 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0304d334a91b8581a12ab647083af742 = MAKE_FUNCTION_FRAME(codeobj_0304d334a91b8581a12ab647083af742, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0304d334a91b8581a12ab647083af742->m_type_description == NULL);
    frame_0304d334a91b8581a12ab647083af742 = cache_frame_0304d334a91b8581a12ab647083af742;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0304d334a91b8581a12ab647083af742);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0304d334a91b8581a12ab647083af742) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[179];
        CHECK_OBJECT(par_paper);
        tmp_args_element_value_2 = par_paper;
        CHECK_OBJECT(par_scaling);
        tmp_args_element_value_3 = par_scaling;
        CHECK_OBJECT(par_start_num);
        tmp_args_element_value_4 = par_start_num;
        CHECK_OBJECT(par_fit_width_to);
        tmp_args_element_value_5 = par_fit_width_to;
        CHECK_OBJECT(par_fit_height_to);
        tmp_args_element_value_6 = par_fit_height_to;
        CHECK_OBJECT(par_options);
        tmp_args_element_value_7 = par_options;
        CHECK_OBJECT(par_hres);
        tmp_args_element_value_8 = par_hres;
        CHECK_OBJECT(par_vres);
        tmp_args_element_value_9 = par_vres;
        CHECK_OBJECT(par_header_margin);
        tmp_args_element_value_10 = par_header_margin;
        CHECK_OBJECT(par_footer_margin);
        tmp_args_element_value_11 = par_footer_margin;
        CHECK_OBJECT(par_num_copies);
        tmp_args_element_value_12 = par_num_copies;
        frame_0304d334a91b8581a12ab647083af742->m_frame.f_lineno = 2276;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9, tmp_args_element_value_10, tmp_args_element_value_11, tmp_args_element_value_12};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS12(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2276;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0304d334a91b8581a12ab647083af742);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0304d334a91b8581a12ab647083af742);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0304d334a91b8581a12ab647083af742, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0304d334a91b8581a12ab647083af742->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0304d334a91b8581a12ab647083af742, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0304d334a91b8581a12ab647083af742,
        type_description_1,
        par_self,
        par_paper,
        par_scaling,
        par_start_num,
        par_fit_width_to,
        par_fit_height_to,
        par_options,
        par_hres,
        par_vres,
        par_header_margin,
        par_footer_margin,
        par_num_copies
    );


    // Release cached frame if used for exception.
    if (frame_0304d334a91b8581a12ab647083af742 == cache_frame_0304d334a91b8581a12ab647083af742) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_0304d334a91b8581a12ab647083af742);
        cache_frame_0304d334a91b8581a12ab647083af742 = NULL;
    }

    assertFrameObject(frame_0304d334a91b8581a12ab647083af742);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_paper);
    Py_DECREF(par_paper);
    CHECK_OBJECT(par_scaling);
    Py_DECREF(par_scaling);
    CHECK_OBJECT(par_start_num);
    Py_DECREF(par_start_num);
    CHECK_OBJECT(par_fit_width_to);
    Py_DECREF(par_fit_width_to);
    CHECK_OBJECT(par_fit_height_to);
    Py_DECREF(par_fit_height_to);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_hres);
    Py_DECREF(par_hres);
    CHECK_OBJECT(par_vres);
    Py_DECREF(par_vres);
    CHECK_OBJECT(par_header_margin);
    Py_DECREF(par_header_margin);
    CHECK_OBJECT(par_footer_margin);
    Py_DECREF(par_footer_margin);
    CHECK_OBJECT(par_num_copies);
    Py_DECREF(par_num_copies);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_paper);
    Py_DECREF(par_paper);
    CHECK_OBJECT(par_scaling);
    Py_DECREF(par_scaling);
    CHECK_OBJECT(par_start_num);
    Py_DECREF(par_start_num);
    CHECK_OBJECT(par_fit_width_to);
    Py_DECREF(par_fit_width_to);
    CHECK_OBJECT(par_fit_height_to);
    Py_DECREF(par_fit_height_to);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_hres);
    Py_DECREF(par_hres);
    CHECK_OBJECT(par_vres);
    Py_DECREF(par_vres);
    CHECK_OBJECT(par_header_margin);
    Py_DECREF(par_header_margin);
    CHECK_OBJECT(par_footer_margin);
    Py_DECREF(par_footer_margin);
    CHECK_OBJECT(par_num_copies);
    Py_DECREF(par_num_copies);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__88___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_options = python_pars[1];
    PyObject *par_keyboard_shortcut = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_sheet_index = python_pars[4];
    PyObject *par_rpn = python_pars[5];
    PyObject *par_menu_text = python_pars[6];
    PyObject *par_desc_text = python_pars[7];
    PyObject *par_help_text = python_pars[8];
    PyObject *par_status_text = python_pars[9];
    PyObject *var_uname = NULL;
    PyObject *var_uname_len = NULL;
    struct Nuitka_FrameObject *frame_0019030f07e4f5510040a6fc4739c565;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_0019030f07e4f5510040a6fc4739c565 = NULL;
    PyObject *tmp_return_value = NULL;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;

    // Actual function body.
    // Tried code:
    if (isFrameUnusable(cache_frame_0019030f07e4f5510040a6fc4739c565)) {
        Py_XDECREF(cache_frame_0019030f07e4f5510040a6fc4739c565);

#if _DEBUG_REFCOUNTS
        if (cache_frame_0019030f07e4f5510040a6fc4739c565 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_0019030f07e4f5510040a6fc4739c565 = MAKE_FUNCTION_FRAME(codeobj_0019030f07e4f5510040a6fc4739c565, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_0019030f07e4f5510040a6fc4739c565->m_type_description == NULL);
    frame_0019030f07e4f5510040a6fc4739c565 = cache_frame_0019030f07e4f5510040a6fc4739c565;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_0019030f07e4f5510040a6fc4739c565);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_0019030f07e4f5510040a6fc4739c565) == 2); // Frame stack

    // Framed code:
    {
        nuitka_bool tmp_condition_result_1;
        PyObject *tmp_cmp_expr_left_1;
        PyObject *tmp_cmp_expr_right_1;
        PyObject *tmp_type_arg_1;
        CHECK_OBJECT(par_name);
        tmp_type_arg_1 = par_name;
        tmp_cmp_expr_left_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        assert(!(tmp_cmp_expr_left_1 == NULL));
        tmp_cmp_expr_right_1 = (PyObject *)&PyLong_Type;
        tmp_condition_result_1 = RICH_COMPARE_EQ_NBOOL_OBJECT_OBJECT(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
        Py_DECREF(tmp_cmp_expr_left_1);
        assert(!(tmp_condition_result_1 == NUITKA_BOOL_EXCEPTION));
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
        assert(tmp_condition_result_1 != NUITKA_BOOL_UNASSIGNED);
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_1;
        PyObject *tmp_chr_arg_1;
        CHECK_OBJECT(par_name);
        tmp_chr_arg_1 = par_name;
        tmp_assign_source_1 = BUILTIN_CHR(tmp_chr_arg_1);
        if (tmp_assign_source_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2331;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_uname == NULL);
        var_uname = tmp_assign_source_1;
    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_subscript_value_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[89]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[89]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2333;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_args_element_value_1 = par_name;
        frame_0019030f07e4f5510040a6fc4739c565->m_frame.f_lineno = 2333;
        tmp_expression_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_1, tmp_args_element_value_1);
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2333;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_subscript_value_1 = mod_consts[61];
        tmp_assign_source_2 = LOOKUP_SUBSCRIPT(tmp_expression_value_1, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2333;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_uname == NULL);
        var_uname = tmp_assign_source_2;
    }
    branch_end_1:;
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_len_arg_1;
        CHECK_OBJECT(var_uname);
        tmp_len_arg_1 = var_uname;
        tmp_assign_source_3 = BUILTIN_LEN(tmp_len_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2334;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_uname_len == NULL);
        var_uname_len = tmp_assign_source_3;
    }
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_left_value_2;
        PyObject *tmp_left_value_3;
        PyObject *tmp_left_value_4;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_len_arg_3;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_args_element_value_10;
        PyObject *tmp_len_arg_4;
        PyObject *tmp_args_element_value_11;
        PyObject *tmp_len_arg_5;
        PyObject *tmp_args_element_value_12;
        PyObject *tmp_len_arg_6;
        PyObject *tmp_args_element_value_13;
        PyObject *tmp_len_arg_7;
        PyObject *tmp_args_element_value_14;
        PyObject *tmp_args_element_value_15;
        PyObject *tmp_right_value_2;
        PyObject *tmp_right_value_3;
        PyObject *tmp_right_value_4;
        PyObject *tmp_right_value_5;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_5 = mod_consts[180];
        CHECK_OBJECT(var_uname_len);
        tmp_tuple_element_1 = var_uname_len;
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_len_arg_2;
            PyTuple_SET_ITEM0(tmp_right_value_1, 0, tmp_tuple_element_1);
            CHECK_OBJECT(par_rpn);
            tmp_len_arg_2 = par_rpn;
            tmp_tuple_element_1 = BUILTIN_LEN(tmp_len_arg_2);
            if (tmp_tuple_element_1 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2337;
                type_description_1 = "oooooooooooo";
                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_1);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_value_1);
        goto frame_exception_exit_1;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_args_element_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_5, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_args_element_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_options);
        tmp_args_element_value_3 = par_options;
        CHECK_OBJECT(par_keyboard_shortcut);
        tmp_args_element_value_4 = par_keyboard_shortcut;
        CHECK_OBJECT(var_uname_len);
        tmp_args_element_value_5 = var_uname_len;
        CHECK_OBJECT(par_rpn);
        tmp_len_arg_3 = par_rpn;
        tmp_args_element_value_6 = BUILTIN_LEN(tmp_len_arg_3);
        if (tmp_args_element_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_2);

            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_7 = mod_consts[4];
        CHECK_OBJECT(par_sheet_index);
        tmp_args_element_value_8 = par_sheet_index;
        tmp_args_element_value_9 = mod_consts[4];
        CHECK_OBJECT(par_menu_text);
        tmp_len_arg_4 = par_menu_text;
        tmp_args_element_value_10 = BUILTIN_LEN(tmp_len_arg_4);
        if (tmp_args_element_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_args_element_value_6);

            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_desc_text);
        tmp_len_arg_5 = par_desc_text;
        tmp_args_element_value_11 = BUILTIN_LEN(tmp_len_arg_5);
        if (tmp_args_element_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_args_element_value_6);
            Py_DECREF(tmp_args_element_value_10);

            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_help_text);
        tmp_len_arg_6 = par_help_text;
        tmp_args_element_value_12 = BUILTIN_LEN(tmp_len_arg_6);
        if (tmp_args_element_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_args_element_value_6);
            Py_DECREF(tmp_args_element_value_10);
            Py_DECREF(tmp_args_element_value_11);

            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_status_text);
        tmp_len_arg_7 = par_status_text;
        tmp_args_element_value_13 = BUILTIN_LEN(tmp_len_arg_7);
        if (tmp_args_element_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_args_element_value_2);
            Py_DECREF(tmp_args_element_value_6);
            Py_DECREF(tmp_args_element_value_10);
            Py_DECREF(tmp_args_element_value_11);
            Py_DECREF(tmp_args_element_value_12);

            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(var_uname);
        tmp_args_element_value_14 = var_uname;
        CHECK_OBJECT(par_rpn);
        tmp_args_element_value_15 = par_rpn;
        frame_0019030f07e4f5510040a6fc4739c565->m_frame.f_lineno = 2337;
        {
            PyObject *call_args[] = {tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6, tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9, tmp_args_element_value_10, tmp_args_element_value_11, tmp_args_element_value_12, tmp_args_element_value_13, tmp_args_element_value_14, tmp_args_element_value_15};
            tmp_left_value_4 = CALL_FUNCTION_WITH_ARGS14(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_2);
        Py_DECREF(tmp_args_element_value_6);
        Py_DECREF(tmp_args_element_value_10);
        Py_DECREF(tmp_args_element_value_11);
        Py_DECREF(tmp_args_element_value_12);
        Py_DECREF(tmp_args_element_value_13);
        if (tmp_left_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_menu_text);
        tmp_right_value_2 = par_menu_text;
        tmp_left_value_3 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_4, tmp_right_value_2);
        Py_DECREF(tmp_left_value_4);
        if (tmp_left_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_desc_text);
        tmp_right_value_3 = par_desc_text;
        tmp_left_value_2 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_left_value_3);
        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_help_text);
        tmp_right_value_4 = par_help_text;
        tmp_left_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_2, tmp_right_value_4);
        Py_DECREF(tmp_left_value_2);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_status_text);
        tmp_right_value_5 = par_status_text;
        tmp_assattr_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_5);
        Py_DECREF(tmp_left_value_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2337;
            type_description_1 = "oooooooooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0019030f07e4f5510040a6fc4739c565);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_0019030f07e4f5510040a6fc4739c565);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_0019030f07e4f5510040a6fc4739c565, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_0019030f07e4f5510040a6fc4739c565->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_0019030f07e4f5510040a6fc4739c565, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_0019030f07e4f5510040a6fc4739c565,
        type_description_1,
        par_self,
        par_options,
        par_keyboard_shortcut,
        par_name,
        par_sheet_index,
        par_rpn,
        par_menu_text,
        par_desc_text,
        par_help_text,
        par_status_text,
        var_uname,
        var_uname_len
    );


    // Release cached frame if used for exception.
    if (frame_0019030f07e4f5510040a6fc4739c565 == cache_frame_0019030f07e4f5510040a6fc4739c565) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_0019030f07e4f5510040a6fc4739c565);
        cache_frame_0019030f07e4f5510040a6fc4739c565 = NULL;
    }

    assertFrameObject(frame_0019030f07e4f5510040a6fc4739c565);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto try_return_handler_1;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    CHECK_OBJECT(var_uname);
    Py_DECREF(var_uname);
    var_uname = NULL;
    CHECK_OBJECT(var_uname_len);
    Py_DECREF(var_uname_len);
    var_uname_len = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_uname);
    var_uname = NULL;
    Py_XDECREF(var_uname_len);
    var_uname_len = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_keyboard_shortcut);
    Py_DECREF(par_keyboard_shortcut);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_sheet_index);
    Py_DECREF(par_sheet_index);
    CHECK_OBJECT(par_rpn);
    Py_DECREF(par_rpn);
    CHECK_OBJECT(par_menu_text);
    Py_DECREF(par_menu_text);
    CHECK_OBJECT(par_desc_text);
    Py_DECREF(par_desc_text);
    CHECK_OBJECT(par_help_text);
    Py_DECREF(par_help_text);
    CHECK_OBJECT(par_status_text);
    Py_DECREF(par_status_text);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_keyboard_shortcut);
    Py_DECREF(par_keyboard_shortcut);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_sheet_index);
    Py_DECREF(par_sheet_index);
    CHECK_OBJECT(par_rpn);
    Py_DECREF(par_rpn);
    CHECK_OBJECT(par_menu_text);
    Py_DECREF(par_menu_text);
    CHECK_OBJECT(par_desc_text);
    Py_DECREF(par_desc_text);
    CHECK_OBJECT(par_help_text);
    Py_DECREF(par_help_text);
    CHECK_OBJECT(par_status_text);
    Py_DECREF(par_status_text);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__89___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_refs = python_pars[1];
    struct Nuitka_FrameObject *frame_d6b2736c0ed242f33e75d86bccb6dcbd;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    static struct Nuitka_FrameObject *cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd)) {
        Py_XDECREF(cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd);

#if _DEBUG_REFCOUNTS
        if (cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd = MAKE_FUNCTION_FRAME(codeobj_d6b2736c0ed242f33e75d86bccb6dcbd, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd->m_type_description == NULL);
    frame_d6b2736c0ed242f33e75d86bccb6dcbd = cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_d6b2736c0ed242f33e75d86bccb6dcbd);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_d6b2736c0ed242f33e75d86bccb6dcbd) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        CHECK_OBJECT(par_refs);
        tmp_assattr_value_1 = par_refs;
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[181], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2372;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6b2736c0ed242f33e75d86bccb6dcbd);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_d6b2736c0ed242f33e75d86bccb6dcbd);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_d6b2736c0ed242f33e75d86bccb6dcbd, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_d6b2736c0ed242f33e75d86bccb6dcbd->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_d6b2736c0ed242f33e75d86bccb6dcbd, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_d6b2736c0ed242f33e75d86bccb6dcbd,
        type_description_1,
        par_self,
        par_refs
    );


    // Release cached frame if used for exception.
    if (frame_d6b2736c0ed242f33e75d86bccb6dcbd == cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd);
        cache_frame_d6b2736c0ed242f33e75d86bccb6dcbd = NULL;
    }

    assertFrameObject(frame_d6b2736c0ed242f33e75d86bccb6dcbd);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_refs);
    Py_DECREF(par_refs);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_refs);
    Py_DECREF(par_refs);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__90_get(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *var_res = NULL;
    PyObject *var_nrefs = NULL;
    PyObject *var_idx = NULL;
    PyObject *var_chunk = NULL;
    PyObject *var_krefs = NULL;
    PyObject *var_header = NULL;
    PyObject *tmp_for_loop_1__for_iterator = NULL;
    PyObject *tmp_for_loop_1__iter_value = NULL;
    PyObject *tmp_genexpr_1__$0 = NULL;
    struct Nuitka_FrameObject *frame_2334f07556c5cd0fd6c2b38f771990ef;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *tmp_return_value = NULL;
    static struct Nuitka_FrameObject *cache_frame_2334f07556c5cd0fd6c2b38f771990ef = NULL;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;

    // Actual function body.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = PyList_New(0);
        assert(var_res == NULL);
        var_res = tmp_assign_source_1;
    }
    // Tried code:
    if (isFrameUnusable(cache_frame_2334f07556c5cd0fd6c2b38f771990ef)) {
        Py_XDECREF(cache_frame_2334f07556c5cd0fd6c2b38f771990ef);

#if _DEBUG_REFCOUNTS
        if (cache_frame_2334f07556c5cd0fd6c2b38f771990ef == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_2334f07556c5cd0fd6c2b38f771990ef = MAKE_FUNCTION_FRAME(codeobj_2334f07556c5cd0fd6c2b38f771990ef, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_2334f07556c5cd0fd6c2b38f771990ef->m_type_description == NULL);
    frame_2334f07556c5cd0fd6c2b38f771990ef = cache_frame_2334f07556c5cd0fd6c2b38f771990ef;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_2334f07556c5cd0fd6c2b38f771990ef);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_2334f07556c5cd0fd6c2b38f771990ef) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assign_source_2;
        PyObject *tmp_len_arg_1;
        PyObject *tmp_expression_value_1;
        CHECK_OBJECT(par_self);
        tmp_expression_value_1 = par_self;
        tmp_len_arg_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_1, mod_consts[181]);
        if (tmp_len_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2376;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_2 = BUILTIN_LEN(tmp_len_arg_1);
        Py_DECREF(tmp_len_arg_1);
        if (tmp_assign_source_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2376;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(var_nrefs == NULL);
        var_nrefs = tmp_assign_source_2;
    }
    {
        PyObject *tmp_assign_source_3;
        PyObject *tmp_iter_arg_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[182]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[182]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2377;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[4];
        CHECK_OBJECT(var_nrefs);
        tmp_args_element_value_2 = var_nrefs;
        tmp_args_element_value_3 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[183]);

        if (unlikely(tmp_args_element_value_3 == NULL)) {
            tmp_args_element_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[183]);
        }

        if (tmp_args_element_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2377;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        frame_2334f07556c5cd0fd6c2b38f771990ef->m_frame.f_lineno = 2377;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3};
            tmp_iter_arg_1 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_1, call_args);
        }

        if (tmp_iter_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2377;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        tmp_assign_source_3 = MAKE_ITERATOR(tmp_iter_arg_1);
        Py_DECREF(tmp_iter_arg_1);
        if (tmp_assign_source_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2377;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        assert(tmp_for_loop_1__for_iterator == NULL);
        tmp_for_loop_1__for_iterator = tmp_assign_source_3;
    }
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_4;
        CHECK_OBJECT(tmp_for_loop_1__for_iterator);
        tmp_next_source_1 = tmp_for_loop_1__for_iterator;
        tmp_assign_source_4 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_4 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
                type_description_1 = "ooooooo";
                exception_lineno = 2377;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = tmp_for_loop_1__iter_value;
            tmp_for_loop_1__iter_value = tmp_assign_source_4;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_5;
        CHECK_OBJECT(tmp_for_loop_1__iter_value);
        tmp_assign_source_5 = tmp_for_loop_1__iter_value;
        {
            PyObject *old = var_idx;
            var_idx = tmp_assign_source_5;
            Py_INCREF(var_idx);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_expression_value_2;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_start_value_1;
        PyObject *tmp_stop_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2378;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_3 = par_self;
        tmp_expression_value_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[181]);
        if (tmp_expression_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2378;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        CHECK_OBJECT(var_idx);
        tmp_start_value_1 = var_idx;
        CHECK_OBJECT(var_idx);
        tmp_left_value_1 = var_idx;
        tmp_right_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[183]);

        if (unlikely(tmp_right_value_1 == NULL)) {
            tmp_right_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[183]);
        }

        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_expression_value_2);

            exception_lineno = 2378;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_stop_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_1);
        if (tmp_stop_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_expression_value_2);

            exception_lineno = 2378;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_subscript_value_1 = MAKE_SLICEOBJ2(tmp_start_value_1, tmp_stop_value_1);
        Py_DECREF(tmp_stop_value_1);
        assert(!(tmp_subscript_value_1 == NULL));
        tmp_assign_source_6 = LOOKUP_SUBSCRIPT(tmp_expression_value_2, tmp_subscript_value_1);
        Py_DECREF(tmp_expression_value_2);
        Py_DECREF(tmp_subscript_value_1);
        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2378;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_chunk;
            var_chunk = tmp_assign_source_6;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_len_arg_2;
        CHECK_OBJECT(var_chunk);
        tmp_len_arg_2 = var_chunk;
        tmp_assign_source_7 = BUILTIN_LEN(tmp_len_arg_2);
        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2379;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_krefs;
            var_krefs = tmp_assign_source_7;
            Py_XDECREF(old);
        }

    }
    {
        nuitka_bool tmp_condition_result_1;
        int tmp_truth_name_1;
        CHECK_OBJECT(var_idx);
        tmp_truth_name_1 = CHECK_IF_TRUE(var_idx);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2380;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_condition_result_1 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_1 == NUITKA_BOOL_TRUE) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_args_element_value_6;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2381;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_value_4 = mod_consts[184];
        tmp_args_element_value_5 = mod_consts[63];
        tmp_left_value_2 = mod_consts[46];
        CHECK_OBJECT(var_krefs);
        tmp_right_value_2 = var_krefs;
        tmp_args_element_value_6 = BINARY_OPERATION_MULT_OBJECT_LONG_LONG(tmp_left_value_2, tmp_right_value_2);
        assert(!(tmp_args_element_value_6 == NULL));
        frame_2334f07556c5cd0fd6c2b38f771990ef->m_frame.f_lineno = 2381;
        {
            PyObject *call_args[] = {tmp_args_element_value_4, tmp_args_element_value_5, tmp_args_element_value_6};
            tmp_assign_source_8 = CALL_FUNCTION_WITH_ARGS3(tmp_called_value_2, call_args);
        }

        Py_DECREF(tmp_args_element_value_6);
        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2381;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_header;
            var_header = tmp_assign_source_8;
            Py_XDECREF(old);
        }

    }
    goto branch_end_1;
    branch_no_1:;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_called_value_3;
        PyObject *tmp_args_element_value_7;
        PyObject *tmp_args_element_value_8;
        PyObject *tmp_expression_value_4;
        PyObject *tmp_args_element_value_9;
        PyObject *tmp_left_value_3;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_3;
        PyObject *tmp_right_value_4;
        PyObject *tmp_args_element_value_10;
        tmp_called_value_3 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_3 == NULL)) {
            tmp_called_value_3 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2383;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_args_element_value_7 = mod_consts[185];
        if (par_self == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[17]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2383;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_4 = par_self;
        tmp_args_element_value_8 = LOOKUP_ATTRIBUTE(tmp_expression_value_4, mod_consts[57]);
        if (tmp_args_element_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2383;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        tmp_left_value_4 = mod_consts[46];
        CHECK_OBJECT(var_krefs);
        tmp_right_value_3 = var_krefs;
        tmp_left_value_3 = BINARY_OPERATION_MULT_OBJECT_LONG_LONG(tmp_left_value_4, tmp_right_value_3);
        assert(!(tmp_left_value_3 == NULL));
        tmp_right_value_4 = mod_consts[38];
        tmp_args_element_value_9 = BINARY_OPERATION_ADD_OBJECT_LONG_LONG(tmp_left_value_3, tmp_right_value_4);
        Py_DECREF(tmp_left_value_3);
        assert(!(tmp_args_element_value_9 == NULL));
        if (var_nrefs == NULL) {
            Py_DECREF(tmp_args_element_value_8);
            Py_DECREF(tmp_args_element_value_9);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[186]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2383;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_args_element_value_10 = var_nrefs;
        frame_2334f07556c5cd0fd6c2b38f771990ef->m_frame.f_lineno = 2383;
        {
            PyObject *call_args[] = {tmp_args_element_value_7, tmp_args_element_value_8, tmp_args_element_value_9, tmp_args_element_value_10};
            tmp_assign_source_9 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_3, call_args);
        }

        Py_DECREF(tmp_args_element_value_8);
        Py_DECREF(tmp_args_element_value_9);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2383;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *old = var_header;
            var_header = tmp_assign_source_9;
            Py_XDECREF(old);
        }

    }
    branch_end_1:;
    {
        PyObject *tmp_called_instance_1;
        PyObject *tmp_call_result_1;
        PyObject *tmp_args_element_value_11;
        if (var_res == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[187]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2384;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_called_instance_1 = var_res;
        CHECK_OBJECT(var_header);
        tmp_args_element_value_11 = var_header;
        frame_2334f07556c5cd0fd6c2b38f771990ef->m_frame.f_lineno = 2384;
        tmp_call_result_1 = CALL_METHOD_WITH_SINGLE_ARG(tmp_called_instance_1, mod_consts[13], tmp_args_element_value_11);
        if (tmp_call_result_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2384;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_1);
    }
    {
        PyObject *tmp_called_value_4;
        PyObject *tmp_expression_value_5;
        PyObject *tmp_call_result_2;
        PyObject *tmp_args_element_value_12;
        if (var_res == NULL) {

            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[187]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2385;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }

        tmp_expression_value_5 = var_res;
        tmp_called_value_4 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[24]);
        if (tmp_called_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2385;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        {
            PyObject *tmp_assign_source_10;
            PyObject *tmp_iter_arg_2;
            CHECK_OBJECT(var_chunk);
            tmp_iter_arg_2 = var_chunk;
            tmp_assign_source_10 = MAKE_ITERATOR(tmp_iter_arg_2);
            if (tmp_assign_source_10 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2385;
                type_description_1 = "ooooooo";
                goto try_except_handler_2;
            }
            {
                PyObject *old = tmp_genexpr_1__$0;
                tmp_genexpr_1__$0 = tmp_assign_source_10;
                Py_XDECREF(old);
            }

        }
        // Tried code:
        {
            struct Nuitka_CellObject *tmp_closure_1[1];

            tmp_closure_1[0] = Nuitka_Cell_New0(tmp_genexpr_1__$0);

            tmp_args_element_value_12 = MAKE_GENERATOR_xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr(tmp_closure_1);

            goto try_return_handler_3;
        }
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_3:;
        CHECK_OBJECT(tmp_genexpr_1__$0);
        Py_DECREF(tmp_genexpr_1__$0);
        tmp_genexpr_1__$0 = NULL;
        goto outline_result_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_result_1:;
        frame_2334f07556c5cd0fd6c2b38f771990ef->m_frame.f_lineno = 2385;
        tmp_call_result_2 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_4, tmp_args_element_value_12);
        Py_DECREF(tmp_called_value_4);
        Py_DECREF(tmp_args_element_value_12);
        if (tmp_call_result_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2385;
            type_description_1 = "ooooooo";
            goto try_except_handler_2;
        }
        Py_DECREF(tmp_call_result_2);
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2377;
        type_description_1 = "ooooooo";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    Py_XDECREF(tmp_for_loop_1__iter_value);
    tmp_for_loop_1__iter_value = NULL;
    CHECK_OBJECT(tmp_for_loop_1__for_iterator);
    Py_DECREF(tmp_for_loop_1__for_iterator);
    tmp_for_loop_1__for_iterator = NULL;
    {
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_args_element_value_13;
        tmp_expression_value_6 = mod_consts[19];
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_6, mod_consts[34]);
        assert(!(tmp_called_value_5 == NULL));
        if (var_res == NULL) {
            Py_DECREF(tmp_called_value_5);
            FORMAT_UNBOUND_LOCAL_ERROR(&exception_type, &exception_value, mod_consts[187]);
            exception_tb = NULL;
            NORMALIZE_EXCEPTION(&exception_type, &exception_value, &exception_tb);
            CHAIN_EXCEPTION(exception_value);

            exception_lineno = 2386;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }

        tmp_args_element_value_13 = var_res;
        frame_2334f07556c5cd0fd6c2b38f771990ef->m_frame.f_lineno = 2386;
        tmp_return_value = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_5, tmp_args_element_value_13);
        Py_DECREF(tmp_called_value_5);
        if (tmp_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2386;
            type_description_1 = "ooooooo";
            goto frame_exception_exit_1;
        }
        goto frame_return_exit_1;
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2334f07556c5cd0fd6c2b38f771990ef);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_return_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_2334f07556c5cd0fd6c2b38f771990ef);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto try_return_handler_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_2334f07556c5cd0fd6c2b38f771990ef);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_2334f07556c5cd0fd6c2b38f771990ef, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_2334f07556c5cd0fd6c2b38f771990ef->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_2334f07556c5cd0fd6c2b38f771990ef, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_2334f07556c5cd0fd6c2b38f771990ef,
        type_description_1,
        par_self,
        var_res,
        var_nrefs,
        var_idx,
        var_chunk,
        var_krefs,
        var_header
    );


    // Release cached frame if used for exception.
    if (frame_2334f07556c5cd0fd6c2b38f771990ef == cache_frame_2334f07556c5cd0fd6c2b38f771990ef) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_2334f07556c5cd0fd6c2b38f771990ef);
        cache_frame_2334f07556c5cd0fd6c2b38f771990ef = NULL;
    }

    assertFrameObject(frame_2334f07556c5cd0fd6c2b38f771990ef);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
    return NULL;
    // Return handler code:
    try_return_handler_1:;
    Py_XDECREF(var_res);
    var_res = NULL;
    Py_XDECREF(var_nrefs);
    var_nrefs = NULL;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    Py_XDECREF(var_chunk);
    var_chunk = NULL;
    Py_XDECREF(var_krefs);
    var_krefs = NULL;
    Py_XDECREF(var_header);
    var_header = NULL;
    goto function_return_exit;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(var_res);
    var_res = NULL;
    Py_XDECREF(var_nrefs);
    var_nrefs = NULL;
    Py_XDECREF(var_idx);
    var_idx = NULL;
    Py_XDECREF(var_chunk);
    var_chunk = NULL;
    Py_XDECREF(var_krefs);
    var_krefs = NULL;
    Py_XDECREF(var_header);
    var_header = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



struct xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr_locals {
    PyObject *var_r;
    PyObject *tmp_iter_value_0;
    char const *type_description_1;
    PyObject *exception_type;
    PyObject *exception_value;
    PyTracebackObject *exception_tb;
    int exception_lineno;
    char yield_tmps[1024];
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    int exception_keeper_lineno_2;
};

static PyObject *xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr_context(struct Nuitka_GeneratorObject *generator, PyObject *yield_return_value) {
    CHECK_OBJECT(generator);
    assert(Nuitka_Generator_Check((PyObject *)generator));
    CHECK_OBJECT_X(yield_return_value);

    // Heap access if used.
    struct xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr_locals *generator_heap = (struct xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr_locals *)generator->m_heap_storage;

    // Dispatch to yield based on return label index:
    switch(generator->m_yield_return_index) {
    case 1: goto yield_return_1;
    }

    // Local variable initialization
    NUITKA_MAY_BE_UNUSED nuitka_void tmp_unused;
    static struct Nuitka_FrameObject *cache_m_frame = NULL;
    generator_heap->var_r = NULL;
    generator_heap->tmp_iter_value_0 = NULL;
    generator_heap->type_description_1 = NULL;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    // Actual generator function body.
    // Tried code:
    if (isFrameUnusable(cache_m_frame)) {
        Py_XDECREF(cache_m_frame);

#if _DEBUG_REFCOUNTS
        if (cache_m_frame == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_m_frame = MAKE_FUNCTION_FRAME(codeobj_c4e7041b801dcda22c8796a53d10d4e6, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    generator->m_frame = cache_m_frame;

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    Py_INCREF(generator->m_frame);
    assert(Py_REFCNT(generator->m_frame) == 2); // Frame stack

#if PYTHON_VERSION >= 0x340
    generator->m_frame->m_frame.f_gen = (PyObject *)generator;
#endif

    assert(generator->m_frame->m_frame.f_back == NULL);
    Py_CLEAR(generator->m_frame->m_frame.f_back);

    generator->m_frame->m_frame.f_back = PyThreadState_GET()->frame;
    Py_INCREF(generator->m_frame->m_frame.f_back);

    PyThreadState_GET()->frame = &generator->m_frame->m_frame;
    Py_INCREF(generator->m_frame);

    Nuitka_Frame_MarkAsExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    // Accept currently existing exception as the one to publish again when we
    // yield or yield from.
    {
        PyThreadState *thread_state = PyThreadState_GET();

        EXC_TYPE_F(generator) = EXC_TYPE(thread_state);
        if (EXC_TYPE_F(generator) == Py_None) EXC_TYPE_F(generator) = NULL;
        Py_XINCREF(EXC_TYPE_F(generator));
        EXC_VALUE_F(generator) = EXC_VALUE(thread_state);
        Py_XINCREF(EXC_VALUE_F(generator));
        EXC_TRACEBACK_F(generator) = EXC_TRACEBACK(thread_state);
        Py_XINCREF(EXC_TRACEBACK_F(generator));
    }

#endif

    // Framed code:
    // Tried code:
    loop_start_1:;
    {
        PyObject *tmp_next_source_1;
        PyObject *tmp_assign_source_1;
        CHECK_OBJECT(Nuitka_Cell_GET(generator->m_closure[0]));
        tmp_next_source_1 = Nuitka_Cell_GET(generator->m_closure[0]);
        tmp_assign_source_1 = ITERATOR_NEXT(tmp_next_source_1);
        if (tmp_assign_source_1 == NULL) {
            if (CHECK_AND_CLEAR_STOP_ITERATION_OCCURRED()) {

                goto loop_end_1;
            } else {

                FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);
                generator_heap->type_description_1 = "No";
                generator_heap->exception_lineno = 2385;
                goto try_except_handler_2;
            }
        }

        {
            PyObject *old = generator_heap->tmp_iter_value_0;
            generator_heap->tmp_iter_value_0 = tmp_assign_source_1;
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_assign_source_2;
        CHECK_OBJECT(generator_heap->tmp_iter_value_0);
        tmp_assign_source_2 = generator_heap->tmp_iter_value_0;
        {
            PyObject *old = generator_heap->var_r;
            generator_heap->var_r = tmp_assign_source_2;
            Py_INCREF(generator_heap->var_r);
            Py_XDECREF(old);
        }

    }
    {
        PyObject *tmp_expression_value_1;
        PyObject *tmp_dircall_arg1_1;
        PyObject *tmp_dircall_arg2_1;
        PyObject *tmp_dircall_arg3_1;
        NUITKA_MAY_BE_UNUSED PyObject *tmp_yield_result_1;
        tmp_dircall_arg1_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_dircall_arg1_1 == NULL)) {
            tmp_dircall_arg1_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_dircall_arg1_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2385;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_dircall_arg2_1 = mod_consts[188];
        CHECK_OBJECT(generator_heap->var_r);
        tmp_dircall_arg3_1 = generator_heap->var_r;
        Py_INCREF(tmp_dircall_arg1_1);
        Py_INCREF(tmp_dircall_arg2_1);
        Py_INCREF(tmp_dircall_arg3_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1, tmp_dircall_arg2_1, tmp_dircall_arg3_1};
            tmp_expression_value_1 = impl___main__$$$function__6_complex_call_helper_pos_star_list(dir_call_args);
        }
        if (tmp_expression_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2385;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        Nuitka_PreserveHeap(generator_heap->yield_tmps, &tmp_dircall_arg1_1, sizeof(PyObject *), &tmp_dircall_arg2_1, sizeof(PyObject *), &tmp_dircall_arg3_1, sizeof(PyObject *), NULL);
        generator->m_yield_return_index = 1;
        return tmp_expression_value_1;
        yield_return_1:
        Nuitka_RestoreHeap(generator_heap->yield_tmps, &tmp_dircall_arg1_1, sizeof(PyObject *), &tmp_dircall_arg2_1, sizeof(PyObject *), &tmp_dircall_arg3_1, sizeof(PyObject *), NULL);
        if (yield_return_value == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


            generator_heap->exception_lineno = 2385;
            generator_heap->type_description_1 = "No";
            goto try_except_handler_2;
        }
        tmp_yield_result_1 = yield_return_value;
    }
    if (CONSIDER_THREADING() == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&generator_heap->exception_type, &generator_heap->exception_value, &generator_heap->exception_tb);


        generator_heap->exception_lineno = 2385;
        generator_heap->type_description_1 = "No";
        goto try_except_handler_2;
    }
    goto loop_start_1;
    loop_end_1:;
    goto try_end_1;
    // Exception handler code:
    try_except_handler_2:;
    generator_heap->exception_keeper_type_1 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_1 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_1 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_1 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_1;
    generator_heap->exception_value = generator_heap->exception_keeper_value_1;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_1;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;

    Nuitka_Frame_MarkAsNotExecuting(generator->m_frame);

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    // Allow re-use of the frame again.
    Py_DECREF(generator->m_frame);
    goto frame_no_exception_1;

    frame_exception_exit_1:;

    // If it's not an exit exception, consider and create a traceback for it.
    if (!EXCEPTION_MATCH_GENERATOR(generator_heap->exception_type)) {
        if (generator_heap->exception_tb == NULL) {
            generator_heap->exception_tb = MAKE_TRACEBACK(generator->m_frame, generator_heap->exception_lineno);
        } else if (generator_heap->exception_tb->tb_frame != &generator->m_frame->m_frame) {
            generator_heap->exception_tb = ADD_TRACEBACK(generator_heap->exception_tb, generator->m_frame, generator_heap->exception_lineno);
        }

        Nuitka_Frame_AttachLocals(
            generator->m_frame,
            generator_heap->type_description_1,
            NULL,
            generator_heap->var_r
        );


        // Release cached frame if used for exception.
        if (generator->m_frame == cache_m_frame) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_m_frame);
            cache_m_frame = NULL;
        }

        assertFrameObject(generator->m_frame);
    }

#if PYTHON_VERSION >= 0x300
    Py_CLEAR(EXC_TYPE_F(generator));
    Py_CLEAR(EXC_VALUE_F(generator));
    Py_CLEAR(EXC_TRACEBACK_F(generator));
#endif

    Py_DECREF(generator->m_frame);

    // Return the error.
    goto try_except_handler_1;

    frame_no_exception_1:;
    goto try_end_2;
    // Exception handler code:
    try_except_handler_1:;
    generator_heap->exception_keeper_type_2 = generator_heap->exception_type;
    generator_heap->exception_keeper_value_2 = generator_heap->exception_value;
    generator_heap->exception_keeper_tb_2 = generator_heap->exception_tb;
    generator_heap->exception_keeper_lineno_2 = generator_heap->exception_lineno;
    generator_heap->exception_type = NULL;
    generator_heap->exception_value = NULL;
    generator_heap->exception_tb = NULL;
    generator_heap->exception_lineno = 0;

    Py_XDECREF(generator_heap->var_r);
    generator_heap->var_r = NULL;
    // Re-raise.
    generator_heap->exception_type = generator_heap->exception_keeper_type_2;
    generator_heap->exception_value = generator_heap->exception_keeper_value_2;
    generator_heap->exception_tb = generator_heap->exception_keeper_tb_2;
    generator_heap->exception_lineno = generator_heap->exception_keeper_lineno_2;

    goto function_exception_exit;
    // End of try:
    try_end_2:;
    Py_XDECREF(generator_heap->tmp_iter_value_0);
    generator_heap->tmp_iter_value_0 = NULL;
    Py_XDECREF(generator_heap->var_r);
    generator_heap->var_r = NULL;


    return NULL;

    function_exception_exit:
    assert(generator_heap->exception_type);
    RESTORE_ERROR_OCCURRED(generator_heap->exception_type, generator_heap->exception_value, generator_heap->exception_tb);

    return NULL;

}

static PyObject *MAKE_GENERATOR_xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr(struct Nuitka_CellObject **closure) {
    return Nuitka_Generator_New(
        xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr_context,
        module_xlwt$BIFFRecords,
        mod_consts[35],
#if PYTHON_VERSION >= 0x350
        mod_consts[189],
#endif
        codeobj_c4e7041b801dcda22c8796a53d10d4e6,
        closure,
        1,
        sizeof(struct xlwt$BIFFRecords$$$function__90_get$$$genexpr__1_genexpr_locals)
    );
}


static PyObject *impl_xlwt$BIFFRecords$$$function__91___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_num_sheets = python_pars[1];
    struct Nuitka_FrameObject *frame_64a0e5fa4b539414ea6af82d2dcbdf2a;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a)) {
        Py_XDECREF(cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a);

#if _DEBUG_REFCOUNTS
        if (cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a = MAKE_FUNCTION_FRAME(codeobj_64a0e5fa4b539414ea6af82d2dcbdf2a, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a->m_type_description == NULL);
    frame_64a0e5fa4b539414ea6af82d2dcbdf2a = cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_64a0e5fa4b539414ea6af82d2dcbdf2a);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_64a0e5fa4b539414ea6af82d2dcbdf2a) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2412;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[190];
        CHECK_OBJECT(par_num_sheets);
        tmp_args_element_value_2 = par_num_sheets;
        tmp_args_element_value_3 = mod_consts[12];
        tmp_args_element_value_4 = mod_consts[40];
        frame_64a0e5fa4b539414ea6af82d2dcbdf2a->m_frame.f_lineno = 2412;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_assattr_value_1 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_1, call_args);
        }

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2412;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2412;
            type_description_1 = "oo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_64a0e5fa4b539414ea6af82d2dcbdf2a);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_64a0e5fa4b539414ea6af82d2dcbdf2a);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_64a0e5fa4b539414ea6af82d2dcbdf2a, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_64a0e5fa4b539414ea6af82d2dcbdf2a->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_64a0e5fa4b539414ea6af82d2dcbdf2a, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_64a0e5fa4b539414ea6af82d2dcbdf2a,
        type_description_1,
        par_self,
        par_num_sheets
    );


    // Release cached frame if used for exception.
    if (frame_64a0e5fa4b539414ea6af82d2dcbdf2a == cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a);
        cache_frame_64a0e5fa4b539414ea6af82d2dcbdf2a = NULL;
    }

    assertFrameObject(frame_64a0e5fa4b539414ea6af82d2dcbdf2a);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_num_sheets);
    Py_DECREF(par_num_sheets);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_num_sheets);
    Py_DECREF(par_num_sheets);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__92___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    struct Nuitka_FrameObject *frame_51bfc52abdcf109a8a5ed7d102f6ebf3;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3)) {
        Py_XDECREF(cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3);

#if _DEBUG_REFCOUNTS
        if (cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3 = MAKE_FUNCTION_FRAME(codeobj_51bfc52abdcf109a8a5ed7d102f6ebf3, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3->m_type_description == NULL);
    frame_51bfc52abdcf109a8a5ed7d102f6ebf3 = cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_51bfc52abdcf109a8a5ed7d102f6ebf3);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_51bfc52abdcf109a8a5ed7d102f6ebf3) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_called_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2425;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        frame_51bfc52abdcf109a8a5ed7d102f6ebf3->m_frame.f_lineno = 2425;
        tmp_assattr_value_1 = CALL_FUNCTION_WITH_POSARGS4(tmp_called_value_1, mod_consts[191]);

        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2425;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2425;
            type_description_1 = "o";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51bfc52abdcf109a8a5ed7d102f6ebf3);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_51bfc52abdcf109a8a5ed7d102f6ebf3);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_51bfc52abdcf109a8a5ed7d102f6ebf3, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_51bfc52abdcf109a8a5ed7d102f6ebf3->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_51bfc52abdcf109a8a5ed7d102f6ebf3, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_51bfc52abdcf109a8a5ed7d102f6ebf3,
        type_description_1,
        par_self
    );


    // Release cached frame if used for exception.
    if (frame_51bfc52abdcf109a8a5ed7d102f6ebf3 == cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3);
        cache_frame_51bfc52abdcf109a8a5ed7d102f6ebf3 = NULL;
    }

    assertFrameObject(frame_51bfc52abdcf109a8a5ed7d102f6ebf3);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}


static PyObject *impl_xlwt$BIFFRecords$$$function__93___init__(struct Nuitka_FunctionObject const *self, PyObject **python_pars) {
    // Preserve error status for checks
#ifndef __NUITKA_NO_ASSERT__
    NUITKA_MAY_BE_UNUSED bool had_error = ERROR_OCCURRED();
#endif

    // Local variable declarations.
    PyObject *par_self = python_pars[0];
    PyObject *par_options = python_pars[1];
    PyObject *par_index = python_pars[2];
    PyObject *par_name = python_pars[3];
    PyObject *par_fmla = python_pars[4];
    struct Nuitka_FrameObject *frame_c9ffedb86d933674835e078ee2e1a124;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    bool tmp_result;
    static struct Nuitka_FrameObject *cache_frame_c9ffedb86d933674835e078ee2e1a124 = NULL;
    PyObject *tmp_return_value = NULL;

    // Actual function body.
    if (isFrameUnusable(cache_frame_c9ffedb86d933674835e078ee2e1a124)) {
        Py_XDECREF(cache_frame_c9ffedb86d933674835e078ee2e1a124);

#if _DEBUG_REFCOUNTS
        if (cache_frame_c9ffedb86d933674835e078ee2e1a124 == NULL) {
            count_active_frame_cache_instances += 1;
        } else {
            count_released_frame_cache_instances += 1;
        }
        count_allocated_frame_cache_instances += 1;
#endif
        cache_frame_c9ffedb86d933674835e078ee2e1a124 = MAKE_FUNCTION_FRAME(codeobj_c9ffedb86d933674835e078ee2e1a124, module_xlwt$BIFFRecords, sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *)+sizeof(void *));
#if _DEBUG_REFCOUNTS
    } else {
        count_hit_frame_cache_instances += 1;
#endif
    }
    assert(cache_frame_c9ffedb86d933674835e078ee2e1a124->m_type_description == NULL);
    frame_c9ffedb86d933674835e078ee2e1a124 = cache_frame_c9ffedb86d933674835e078ee2e1a124;

    // Push the new frame as the currently active one.
    pushFrameStack(frame_c9ffedb86d933674835e078ee2e1a124);

    // Mark the frame object as in use, ref count 1 will be up for reuse.
    assert(Py_REFCNT(frame_c9ffedb86d933674835e078ee2e1a124) == 2); // Frame stack

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_left_value_2;
        PyObject *tmp_called_value_1;
        PyObject *tmp_args_element_value_1;
        PyObject *tmp_args_element_value_2;
        PyObject *tmp_args_element_value_3;
        PyObject *tmp_args_element_value_4;
        PyObject *tmp_right_value_1;
        PyObject *tmp_called_value_2;
        PyObject *tmp_args_element_value_5;
        PyObject *tmp_right_value_2;
        PyObject *tmp_assattr_target_1;
        tmp_called_value_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21]);

        if (unlikely(tmp_called_value_1 == NULL)) {
            tmp_called_value_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[21]);
        }

        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2456;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_args_element_value_1 = mod_consts[185];
        CHECK_OBJECT(par_options);
        tmp_args_element_value_2 = par_options;
        CHECK_OBJECT(par_index);
        tmp_args_element_value_3 = par_index;
        tmp_args_element_value_4 = mod_consts[4];
        frame_c9ffedb86d933674835e078ee2e1a124->m_frame.f_lineno = 2456;
        {
            PyObject *call_args[] = {tmp_args_element_value_1, tmp_args_element_value_2, tmp_args_element_value_3, tmp_args_element_value_4};
            tmp_left_value_2 = CALL_FUNCTION_WITH_ARGS4(tmp_called_value_1, call_args);
        }

        if (tmp_left_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2456;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_called_value_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[89]);

        if (unlikely(tmp_called_value_2 == NULL)) {
            tmp_called_value_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[89]);
        }

        if (tmp_called_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 2456;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_name);
        tmp_args_element_value_5 = par_name;
        frame_c9ffedb86d933674835e078ee2e1a124->m_frame.f_lineno = 2456;
        tmp_right_value_1 = CALL_FUNCTION_WITH_SINGLE_ARG(tmp_called_value_2, tmp_args_element_value_5);
        if (tmp_right_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);
            Py_DECREF(tmp_left_value_2);

            exception_lineno = 2456;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        tmp_left_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_2, tmp_right_value_1);
        Py_DECREF(tmp_left_value_2);
        Py_DECREF(tmp_right_value_1);
        if (tmp_left_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2456;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_fmla);
        tmp_right_value_2 = par_fmla;
        tmp_assattr_value_1 = BINARY_OPERATION_ADD_OBJECT_OBJECT_OBJECT(tmp_left_value_1, tmp_right_value_2);
        Py_DECREF(tmp_left_value_1);
        if (tmp_assattr_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2456;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
        CHECK_OBJECT(par_self);
        tmp_assattr_target_1 = par_self;
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[58], tmp_assattr_value_1);
        Py_DECREF(tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2456;
            type_description_1 = "ooooo";
            goto frame_exception_exit_1;
        }
    }

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c9ffedb86d933674835e078ee2e1a124);
#endif

    // Put the previous frame back on top.
    popFrameStack();

    goto frame_no_exception_1;

    frame_exception_exit_1:;

#if 0
    RESTORE_FRAME_EXCEPTION(frame_c9ffedb86d933674835e078ee2e1a124);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_c9ffedb86d933674835e078ee2e1a124, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_c9ffedb86d933674835e078ee2e1a124->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_c9ffedb86d933674835e078ee2e1a124, exception_lineno);
    }

    // Attaches locals to frame if any.
    Nuitka_Frame_AttachLocals(
        frame_c9ffedb86d933674835e078ee2e1a124,
        type_description_1,
        par_self,
        par_options,
        par_index,
        par_name,
        par_fmla
    );


    // Release cached frame if used for exception.
    if (frame_c9ffedb86d933674835e078ee2e1a124 == cache_frame_c9ffedb86d933674835e078ee2e1a124) {
#if _DEBUG_REFCOUNTS
        count_active_frame_cache_instances -= 1;
        count_released_frame_cache_instances += 1;
#endif

        Py_DECREF(cache_frame_c9ffedb86d933674835e078ee2e1a124);
        cache_frame_c9ffedb86d933674835e078ee2e1a124 = NULL;
    }

    assertFrameObject(frame_c9ffedb86d933674835e078ee2e1a124);

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto function_exception_exit;

    frame_no_exception_1:;
    tmp_return_value = Py_None;
    Py_INCREF(tmp_return_value);
    goto function_return_exit;

    NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
    return NULL;

function_exception_exit:
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_fmla);
    Py_DECREF(par_fmla);    assert(exception_type);
    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);

    return NULL;

function_return_exit:
   // Function cleanup code if any.
    CHECK_OBJECT(par_self);
    Py_DECREF(par_self);
    CHECK_OBJECT(par_options);
    Py_DECREF(par_options);
    CHECK_OBJECT(par_index);
    Py_DECREF(par_index);
    CHECK_OBJECT(par_name);
    Py_DECREF(par_name);
    CHECK_OBJECT(par_fmla);
    Py_DECREF(par_fmla);

   // Actual function exit with return value, making sure we did not make
   // the error status worse despite non-NULL return.
   CHECK_OBJECT(tmp_return_value);
   assert(had_error || !ERROR_OCCURRED());
   return tmp_return_value;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__10__new_piece() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__10__new_piece,
        mod_consts[30],
#if PYTHON_VERSION >= 0x300
        mod_consts[232],
#endif
        codeobj_2bd25db8ea46eb6cfb8c0215c14df7d8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__11__save_atom() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__11__save_atom,
        mod_consts[41],
#if PYTHON_VERSION >= 0x300
        mod_consts[233],
#endif
        codeobj_ac662cc07409ac9a2dff6db2c1130a0c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__12__save_splitted() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__12__save_splitted,
        mod_consts[42],
#if PYTHON_VERSION >= 0x300
        mod_consts[234],
#endif
        codeobj_e302e7b5bae9cf2ba4737c8ea5abaacf,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__13_get_rec_header() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__13_get_rec_header,
        mod_consts[64],
#if PYTHON_VERSION >= 0x300
        mod_consts[237],
#endif
        codeobj_a4f59d9bf2976b7bacb1e6680bd92c8c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__14_get() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__14_get,
        mod_consts[157],
#if PYTHON_VERSION >= 0x300
        mod_consts[238],
#endif
        codeobj_53362051894014bd2ad9e909ec9bbaa6,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__15___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__15___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[251],
#endif
        codeobj_ce2d95f9111fe9843c15f610f8c15941,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__16___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__16___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[254],
#endif
        codeobj_b4e2ec9ef0f52c8589e17af589c9d913,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__17___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__17___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[257],
#endif
        codeobj_f665ab6ab8cbd5e425e76fcdc0d39216,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__18___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__18___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[260],
#endif
        codeobj_5e44a1e371ea3da467db00e790928a98,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__19___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__19___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[264],
#endif
        codeobj_99dae25125b369f4029a1a0b32c64412,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__1___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__1___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[217],
#endif
        codeobj_4ec38c358b9599634f4c80a478258973,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__20___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__20___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[268],
#endif
        codeobj_86d0e9d30b5cab15a40e0e253242d11b,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__21___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__21___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[271],
#endif
        codeobj_2de85c7660081111ac8f25350d5e640c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__22___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__22___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[274],
#endif
        codeobj_9ade00131c317ea67b273aafeac5dd28,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__23___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__23___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[278],
#endif
        codeobj_9cf78652b6901c06289059e25df82a50,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__24___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__24___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[282],
#endif
        codeobj_72f6a91b1f075fcc9daad85e14b429fc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__25___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__25___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[286],
#endif
        codeobj_a067413cbfb2faf70ef72769156d2f07,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__26___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__26___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[290],
#endif
        codeobj_79e85dcc3f25428b0b4823f69928c417,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__27_passwd_hash() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__27_passwd_hash,
        mod_consts[83],
#if PYTHON_VERSION >= 0x300
        mod_consts[294],
#endif
        codeobj_03e3ce7c34485ee489369c620eb9c805,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        mod_consts[85],
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__28___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__28___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[296],
#endif
        codeobj_51a240c671a938749056622bc2581c37,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__29___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__29___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[299],
#endif
        codeobj_2500c7f6f766c749297015a4f9d79917,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__2_add_str() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__2_add_str,
        mod_consts[218],
#if PYTHON_VERSION >= 0x300
        mod_consts[219],
#endif
        codeobj_47ac8b96f92f8a89a74d98f97413ba77,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__30___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__30___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[302],
#endif
        codeobj_184cc342b48440d31b13131520963364,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__31___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__31___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[305],
#endif
        codeobj_f26c96a383a5cf2870e4807876308bbb,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__32___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__32___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[309],
#endif
        codeobj_8eba42381732439c14f710cf323438d5,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__33___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__33___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[313],
#endif
        codeobj_a5903b9868c4a054bb394e26ef2bbf91,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__34___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__34___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[317],
#endif
        codeobj_60d405e3ad6d739d895a913d24edf74d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__35___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__35___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[321],
#endif
        codeobj_53f60a3bad0a006bb596371c6f1b4795,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__36___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__36___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[325],
#endif
        codeobj_ad9c117fd2502751d72e5b33d8a1596a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__37___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__37___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[328],
#endif
        codeobj_ff8f3004697ff5d3d9fbc60e54de79de,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__38___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__38___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[332],
#endif
        codeobj_b2a1dc0b3f46e6cd53d597c421bffbfc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__39___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__39___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[335],
#endif
        codeobj_80d302173983804943ce4e3d7f91d299,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__3_add_rt() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__3_add_rt,
        mod_consts[220],
#if PYTHON_VERSION >= 0x300
        mod_consts[221],
#endif
        codeobj_1cde90856d811ea214febc2f185be286,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__40___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__40___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[340],
#endif
        codeobj_a573af0ff62e44327b9d368a4b38cde8,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__41___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__41___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[344],
#endif
        codeobj_feda2b3250b862bbc547c9658da97310,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__42___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__42___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[348],
#endif
        codeobj_b11701e4779c094c30dba827e38d0272,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__43___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__43___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[352],
#endif
        codeobj_8007e36a2faaf74fd6c3ea391db80487,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__44___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__44___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[357],
#endif
        codeobj_3f79e4d94a8b176e2e31d866f17bf8a4,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__45___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__45___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[361],
#endif
        codeobj_3067168ac42d474829aa3fefae9ea311,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__46___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__46___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[365],
#endif
        codeobj_072645c2450247d76e051a52c6518a58,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__47___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__47___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[369],
#endif
        codeobj_fccd92954a73c8ea3207ab295728e3ed,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__48___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__48___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[377],
#endif
        codeobj_0997f74cee2ac62ec2de06377f564562,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__49___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__49___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[381],
#endif
        codeobj_6cdb6e9f8ccf33a3e7b88dd3be597adf,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__4_del_str() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__4_del_str,
        mod_consts[222],
#if PYTHON_VERSION >= 0x300
        mod_consts[223],
#endif
        codeobj_04b82f1f74a278b796ebcd7f06cb002e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__50___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__50___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[385],
#endif
        codeobj_3570e112a799365aa38f96faf7609121,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__51_get() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__51_get,
        mod_consts[157],
#if PYTHON_VERSION >= 0x300
        mod_consts[386],
#endif
        codeobj_3e9926c4fe83d2d59ac5360b0e6709a4,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__52___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__52___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[391],
#endif
        codeobj_0a97e74db3ddcf53340ada9a0ffb159f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__53___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__53___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[395],
#endif
        codeobj_65f06e0465bd87076658d7ce346cf08f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__54___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__54___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[399],
#endif
        codeobj_185f17c19f5c7bd780f5a1092441df32,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__55___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__55___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[403],
#endif
        codeobj_a9688412f16ad8d60d657831646ca74c,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__56_get() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__56_get,
        mod_consts[157],
#if PYTHON_VERSION >= 0x300
        mod_consts[404],
#endif
        codeobj_fa0229e1127bb1f819ef61b7f5dab3c1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__57___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__57___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[408],
#endif
        codeobj_f3cdd2010eae8181f86204c61e4447a1,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__58___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__58___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[412],
#endif
        codeobj_447ff9c6f2593525c589f489daf6296d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__59___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__59___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[416],
#endif
        codeobj_552d07b756e2dc5fc14c39d421ac30cc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__5_str_index() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__5_str_index,
        mod_consts[224],
#if PYTHON_VERSION >= 0x300
        mod_consts[225],
#endif
        codeobj_31cb7173ff6bdf672a790ddcd342a036,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__60___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__60___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[420],
#endif
        codeobj_988d4cdf826c744251bbaf66bd59efd9,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__61___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__61___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[424],
#endif
        codeobj_7f37ae4cd9aa1ce8aefd0f7b123a5a5e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__62___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__62___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[428],
#endif
        codeobj_fd5dd612a579647ce251cb71f8c03b48,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__63___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__63___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[432],
#endif
        codeobj_9e21177c98c73aa46b64477decf3d477,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__64___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__64___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[436],
#endif
        codeobj_09150ae0fe6f0cb10a03a044e18b8881,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__65___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__65___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[440],
#endif
        codeobj_73af6f45df356da14fcce15544a75b06,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__66___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__66___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[444],
#endif
        codeobj_40f57f5666a1151ebb3fd236d76cdcab,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__67___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__67___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[447],
#endif
        codeobj_5d9d53c609625a07c936391a484d25cc,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__68___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__68___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[450],
#endif
        codeobj_ed2dbae34988d71c8e0c8f882c301143,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__69___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__69___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[454],
#endif
        codeobj_502160976a0cfeaa1dbe28ad4dfe7e99,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__6_rt_index() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__6_rt_index,
        mod_consts[226],
#if PYTHON_VERSION >= 0x300
        mod_consts[227],
#endif
        codeobj_2d430fc1e390f3ff40a47511886a7ff3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__70___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__70___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[457],
#endif
        codeobj_9dded7108a70b0050b2bcc213080b758,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__71___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__71___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[461],
#endif
        codeobj_d6cb25b0e871d9cffc6240ab47d6b7b2,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__72___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__72___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[465],
#endif
        codeobj_dda76cb9f741fd429a5da9f28502b5a0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__73___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__73___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[469],
#endif
        codeobj_537a71675914cd42926a2fe362fdd27d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__74___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__74___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[473],
#endif
        codeobj_e56107ca9df71486b84a6a549aefe979,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__75___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__75___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[477],
#endif
        codeobj_2483467d67d745f9e1d796fac369fad0,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__76___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__76___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[481],
#endif
        codeobj_b20307a469cae9c7cc03f186d69ea563,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__77___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__77___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[485],
#endif
        codeobj_2aa18dd4561fb2f8df4e3983ab736b89,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__78___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__78___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[488],
#endif
        codeobj_e364fa8b16306c8203fd87d0f395294d,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__79___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__79___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[492],
#endif
        codeobj_f8398672376fca6e76bd4f891257a737,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__7_get_biff_record() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__7_get_biff_record,
        mod_consts[228],
#if PYTHON_VERSION >= 0x300
        mod_consts[229],
#endif
        codeobj_3c28f476156824c812ee71e45eff6212,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__80___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__80___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[495],
#endif
        codeobj_a0462e21ef12e31f64d2a134d7204e09,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__81___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__81___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[499],
#endif
        codeobj_c48eabe6c3b0b5012b9481c096e4b445,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__82___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__82___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[503],
#endif
        codeobj_d094b75bf1b24c9cd064bc390f01d272,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__83___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__83___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[507],
#endif
        codeobj_70513fad6e7ab75ee7652434222515ea,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__84___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__84___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[511],
#endif
        codeobj_5c5814c497bc07a5ea8ed634fb03a704,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__85___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__85___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[515],
#endif
        codeobj_7368b0ad9ae527c5af4cf659ffe52f2f,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__86___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__86___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[519],
#endif
        codeobj_bfaffc32173ea11cfb6876d30cb6c545,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__87___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__87___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[523],
#endif
        codeobj_0304d334a91b8581a12ab647083af742,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__88___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__88___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[528],
#endif
        codeobj_0019030f07e4f5510040a6fc4739c565,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__89___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__89___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[532],
#endif
        codeobj_d6b2736c0ed242f33e75d86bccb6dcbd,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__8__add_to_sst() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__8__add_to_sst,
        mod_consts[28],
#if PYTHON_VERSION >= 0x300
        mod_consts[230],
#endif
        codeobj_ebf2d0a4ef588a5cabfc05807b0e4c2e,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__90_get() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__90_get,
        mod_consts[157],
#if PYTHON_VERSION >= 0x300
        mod_consts[533],
#endif
        codeobj_2334f07556c5cd0fd6c2b38f771990ef,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__91___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__91___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[539],
#endif
        codeobj_64a0e5fa4b539414ea6af82d2dcbdf2a,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__92___init__() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__92___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[542],
#endif
        codeobj_51bfc52abdcf109a8a5ed7d102f6ebf3,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__93___init__(PyObject *defaults) {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__93___init__,
        mod_consts[216],
#if PYTHON_VERSION >= 0x300
        mod_consts[547],
#endif
        codeobj_c9ffedb86d933674835e078ee2e1a124,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}



static PyObject *MAKE_FUNCTION_xlwt$BIFFRecords$$$function__9__add_rt_to_sst() {
    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        impl_xlwt$BIFFRecords$$$function__9__add_rt_to_sst,
        mod_consts[29],
#if PYTHON_VERSION >= 0x300
        mod_consts[231],
#endif
        codeobj_bfb0773ba1bcbe5dcf5795e9e54a8ada,
        NULL,
#if PYTHON_VERSION >= 0x300
        NULL,
        NULL,
#endif
        module_xlwt$BIFFRecords,
        NULL,
        NULL,
        0
    );


    return (PyObject *)result;
}


extern void _initCompiledCellType();
extern void _initCompiledGeneratorType();
extern void _initCompiledFunctionType();
extern void _initCompiledMethodType();
extern void _initCompiledFrameType();

extern PyTypeObject Nuitka_Loader_Type;

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
// Provide a way to create find a function via its C code and create it back
// in another process, useful for multiprocessing extensions like dill
extern void registerDillPluginTables(char const *module_name, PyMethodDef *reduce_compiled_function, PyMethodDef *create_compiled_function);

function_impl_code functable_xlwt$BIFFRecords[] = {
    impl_xlwt$BIFFRecords$$$function__1___init__,
    impl_xlwt$BIFFRecords$$$function__2_add_str,
    impl_xlwt$BIFFRecords$$$function__3_add_rt,
    impl_xlwt$BIFFRecords$$$function__4_del_str,
    impl_xlwt$BIFFRecords$$$function__5_str_index,
    impl_xlwt$BIFFRecords$$$function__6_rt_index,
    impl_xlwt$BIFFRecords$$$function__7_get_biff_record,
    impl_xlwt$BIFFRecords$$$function__8__add_to_sst,
    impl_xlwt$BIFFRecords$$$function__9__add_rt_to_sst,
    impl_xlwt$BIFFRecords$$$function__10__new_piece,
    impl_xlwt$BIFFRecords$$$function__11__save_atom,
    impl_xlwt$BIFFRecords$$$function__12__save_splitted,
    impl_xlwt$BIFFRecords$$$function__13_get_rec_header,
    impl_xlwt$BIFFRecords$$$function__14_get,
    impl_xlwt$BIFFRecords$$$function__15___init__,
    impl_xlwt$BIFFRecords$$$function__16___init__,
    impl_xlwt$BIFFRecords$$$function__17___init__,
    impl_xlwt$BIFFRecords$$$function__18___init__,
    impl_xlwt$BIFFRecords$$$function__19___init__,
    impl_xlwt$BIFFRecords$$$function__20___init__,
    impl_xlwt$BIFFRecords$$$function__21___init__,
    impl_xlwt$BIFFRecords$$$function__22___init__,
    impl_xlwt$BIFFRecords$$$function__23___init__,
    impl_xlwt$BIFFRecords$$$function__24___init__,
    impl_xlwt$BIFFRecords$$$function__25___init__,
    impl_xlwt$BIFFRecords$$$function__26___init__,
    impl_xlwt$BIFFRecords$$$function__27_passwd_hash,
    impl_xlwt$BIFFRecords$$$function__28___init__,
    impl_xlwt$BIFFRecords$$$function__29___init__,
    impl_xlwt$BIFFRecords$$$function__30___init__,
    impl_xlwt$BIFFRecords$$$function__31___init__,
    impl_xlwt$BIFFRecords$$$function__32___init__,
    impl_xlwt$BIFFRecords$$$function__33___init__,
    impl_xlwt$BIFFRecords$$$function__34___init__,
    impl_xlwt$BIFFRecords$$$function__35___init__,
    impl_xlwt$BIFFRecords$$$function__36___init__,
    impl_xlwt$BIFFRecords$$$function__37___init__,
    impl_xlwt$BIFFRecords$$$function__38___init__,
    impl_xlwt$BIFFRecords$$$function__39___init__,
    impl_xlwt$BIFFRecords$$$function__40___init__,
    impl_xlwt$BIFFRecords$$$function__41___init__,
    impl_xlwt$BIFFRecords$$$function__42___init__,
    impl_xlwt$BIFFRecords$$$function__43___init__,
    impl_xlwt$BIFFRecords$$$function__44___init__,
    impl_xlwt$BIFFRecords$$$function__45___init__,
    impl_xlwt$BIFFRecords$$$function__46___init__,
    impl_xlwt$BIFFRecords$$$function__47___init__,
    impl_xlwt$BIFFRecords$$$function__48___init__,
    impl_xlwt$BIFFRecords$$$function__49___init__,
    impl_xlwt$BIFFRecords$$$function__50___init__,
    impl_xlwt$BIFFRecords$$$function__51_get,
    impl_xlwt$BIFFRecords$$$function__52___init__,
    impl_xlwt$BIFFRecords$$$function__53___init__,
    impl_xlwt$BIFFRecords$$$function__54___init__,
    impl_xlwt$BIFFRecords$$$function__55___init__,
    impl_xlwt$BIFFRecords$$$function__56_get,
    impl_xlwt$BIFFRecords$$$function__57___init__,
    impl_xlwt$BIFFRecords$$$function__58___init__,
    impl_xlwt$BIFFRecords$$$function__59___init__,
    impl_xlwt$BIFFRecords$$$function__60___init__,
    impl_xlwt$BIFFRecords$$$function__61___init__,
    impl_xlwt$BIFFRecords$$$function__62___init__,
    impl_xlwt$BIFFRecords$$$function__63___init__,
    impl_xlwt$BIFFRecords$$$function__64___init__,
    impl_xlwt$BIFFRecords$$$function__65___init__,
    impl_xlwt$BIFFRecords$$$function__66___init__,
    impl_xlwt$BIFFRecords$$$function__67___init__,
    impl_xlwt$BIFFRecords$$$function__68___init__,
    impl_xlwt$BIFFRecords$$$function__69___init__,
    impl_xlwt$BIFFRecords$$$function__70___init__,
    impl_xlwt$BIFFRecords$$$function__71___init__,
    impl_xlwt$BIFFRecords$$$function__72___init__,
    impl_xlwt$BIFFRecords$$$function__73___init__,
    impl_xlwt$BIFFRecords$$$function__74___init__,
    impl_xlwt$BIFFRecords$$$function__75___init__,
    impl_xlwt$BIFFRecords$$$function__76___init__,
    impl_xlwt$BIFFRecords$$$function__77___init__,
    impl_xlwt$BIFFRecords$$$function__78___init__,
    impl_xlwt$BIFFRecords$$$function__79___init__,
    impl_xlwt$BIFFRecords$$$function__80___init__,
    impl_xlwt$BIFFRecords$$$function__81___init__,
    impl_xlwt$BIFFRecords$$$function__82___init__,
    impl_xlwt$BIFFRecords$$$function__83___init__,
    impl_xlwt$BIFFRecords$$$function__84___init__,
    impl_xlwt$BIFFRecords$$$function__85___init__,
    impl_xlwt$BIFFRecords$$$function__86___init__,
    impl_xlwt$BIFFRecords$$$function__87___init__,
    impl_xlwt$BIFFRecords$$$function__88___init__,
    impl_xlwt$BIFFRecords$$$function__89___init__,
    impl_xlwt$BIFFRecords$$$function__90_get,
    impl_xlwt$BIFFRecords$$$function__91___init__,
    impl_xlwt$BIFFRecords$$$function__92___init__,
    impl_xlwt$BIFFRecords$$$function__93___init__,
    NULL
};

static char const *_reduce_compiled_function_argnames[] = {
    "func",
    NULL
};

static PyObject *_reduce_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    PyObject *func;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "O:reduce_compiled_function", (char **)_reduce_compiled_function_argnames, &func, NULL)) {
        return NULL;
    }

    if (Nuitka_Function_Check(func) == false) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "not a compiled function");
        return NULL;
    }

    struct Nuitka_FunctionObject *function = (struct Nuitka_FunctionObject *)func;

    function_impl_code *current = functable_xlwt$BIFFRecords;
    int offset = 0;

    while (*current != NULL) {
        if (*current == function->m_c_code) {
            break;
        }

        current += 1;
        offset += 1;
    }

    if (*current == NULL) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Cannot find compiled function in module.");
        return NULL;
    }

    PyObject *code_object_desc = PyTuple_New(6);
    PyTuple_SET_ITEM0(code_object_desc, 0, function->m_code_object->co_filename);
    PyTuple_SET_ITEM0(code_object_desc, 1, function->m_code_object->co_name);
    PyTuple_SET_ITEM(code_object_desc, 2, PyLong_FromLong(function->m_code_object->co_firstlineno));
    PyTuple_SET_ITEM0(code_object_desc, 3, function->m_code_object->co_varnames);
    PyTuple_SET_ITEM(code_object_desc, 4, PyLong_FromLong(function->m_code_object->co_argcount));
    PyTuple_SET_ITEM(code_object_desc, 5, PyLong_FromLong(function->m_code_object->co_flags));

    CHECK_OBJECT_DEEP(code_object_desc);

    PyObject *result = PyTuple_New(4);
    PyTuple_SET_ITEM(result, 0, PyLong_FromLong(offset));
    PyTuple_SET_ITEM(result, 1, code_object_desc);
    PyTuple_SET_ITEM0(result, 2, function->m_defaults);
    PyTuple_SET_ITEM0(result, 3, function->m_doc != NULL ? function->m_doc : Py_None);

    CHECK_OBJECT_DEEP(result);

    return result;
}

static PyMethodDef _method_def_reduce_compiled_function = {"reduce_compiled_function", (PyCFunction)_reduce_compiled_function,
                                                           METH_VARARGS | METH_KEYWORDS, NULL};

static char const *_create_compiled_function_argnames[] = {
    "func",
    "code_object_desc",
    "defaults",
    "doc",
    NULL
};


static PyObject *_create_compiled_function(PyObject *self, PyObject *args, PyObject *kwds) {
    CHECK_OBJECT_DEEP(args);

    PyObject *func;
    PyObject *code_object_desc;
    PyObject *defaults;
    PyObject *doc;

    if (!PyArg_ParseTupleAndKeywords(args, kwds, "OOOO:create_compiled_function", (char **)_create_compiled_function_argnames, &func, &code_object_desc, &defaults, &doc, NULL)) {
        return NULL;
    }

    int offset = PyLong_AsLong(func);

    if (offset == -1 && ERROR_OCCURRED()) {
        return NULL;
    }

    if (offset > sizeof(functable_xlwt$BIFFRecords) || offset < 0) {
        SET_CURRENT_EXCEPTION_TYPE0_STR(PyExc_TypeError, "Wrong offset for compiled function.");
        return NULL;
    }

    PyObject *filename = PyTuple_GET_ITEM(code_object_desc, 0);
    PyObject *function_name = PyTuple_GET_ITEM(code_object_desc, 1);
    PyObject *line = PyTuple_GET_ITEM(code_object_desc, 2);
    int line_int = PyLong_AsLong(line);
    assert(!ERROR_OCCURRED());

    PyObject *argnames = PyTuple_GET_ITEM(code_object_desc, 3);
    PyObject *arg_count = PyTuple_GET_ITEM(code_object_desc, 4);
    int arg_count_int = PyLong_AsLong(arg_count);
    assert(!ERROR_OCCURRED());
    PyObject *flags = PyTuple_GET_ITEM(code_object_desc, 5);
    int flags_int = PyLong_AsLong(flags);
    assert(!ERROR_OCCURRED());

    PyCodeObject *code_object = MAKE_CODEOBJECT(
        filename,
        line_int,
        flags_int,
        function_name,
        argnames,
        NULL, // freevars
        arg_count_int,
        0, // TODO: Missing kw_only_count
        0 // TODO: Missing pos_only_count
    );

    struct Nuitka_FunctionObject *result = Nuitka_Function_New(
        functable_xlwt$BIFFRecords[offset],
        code_object->co_name,
#if PYTHON_VERSION >= 0x300
        NULL, // TODO: Not transferring qualname yet
#endif
        code_object,
        defaults,
#if PYTHON_VERSION >= 0x300
        NULL, // kwdefaults are done on the outside currently
        NULL, // TODO: Not transferring annotations
#endif
        module_xlwt$BIFFRecords,
        doc,
        NULL,
        0
    );

    return (PyObject *)result;
}

static PyMethodDef _method_def_create_compiled_function = {
    "create_compiled_function",
    (PyCFunction)_create_compiled_function,
    METH_VARARGS | METH_KEYWORDS, NULL
};


#endif

// Internal entry point for module code.
PyObject *modulecode_xlwt$BIFFRecords(PyObject *module, struct Nuitka_MetaPathBasedLoaderEntry const *loader_entry) {
    // Report entry to PGO.
    PGO_onModuleEntered("xlwt.BIFFRecords");

    // Store the module for future use.
    module_xlwt$BIFFRecords = module;

    // Modules can be loaded again in case of errors, avoid the init being done again.
    static bool init_done = false;

    if (init_done == false) {
#if defined(_NUITKA_MODULE) && 0
        // In case of an extension module loaded into a process, we need to call
        // initialization here because that's the first and potentially only time
        // we are going called.

        // Initialize the constant values used.
        _initBuiltinModule();
        createGlobalConstants();

        /* Initialize the compiled types of Nuitka. */
        _initCompiledCellType();
        _initCompiledGeneratorType();
        _initCompiledFunctionType();
        _initCompiledMethodType();
        _initCompiledFrameType();

        _initSlotCompare();
#if PYTHON_VERSION >= 0x270
        _initSlotIterNext();
#endif

        patchTypeComparison();

        // Enable meta path based loader if not already done.
#ifdef _NUITKA_TRACE
        PRINT_STRING("xlwt.BIFFRecords: Calling setupMetaPathBasedLoader().\n");
#endif
        setupMetaPathBasedLoader();

#if PYTHON_VERSION >= 0x300
        patchInspectModule();
#endif

#endif

        /* The constants only used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("xlwt.BIFFRecords: Calling createModuleConstants().\n");
#endif
        createModuleConstants();

        /* The code objects used by this module are created now. */
#ifdef _NUITKA_TRACE
        PRINT_STRING("xlwt.BIFFRecords: Calling createModuleCodeObjects().\n");
#endif
        createModuleCodeObjects();

        init_done = true;
    }

    // PRINT_STRING("in initxlwt$BIFFRecords\n");

    moduledict_xlwt$BIFFRecords = MODULE_DICT(module_xlwt$BIFFRecords);

#ifdef _NUITKA_PLUGIN_DILL_ENABLED
    registerDillPluginTables(loader_entry->name, &_method_def_reduce_compiled_function, &_method_def_create_compiled_function);
#endif

    // Set "__compiled__" to what version information we have.
    UPDATE_STRING_DICT0(
        moduledict_xlwt$BIFFRecords,
        (Nuitka_StringObject *)const_str_plain___compiled__,
        Nuitka_dunder_compiled_value
    );

    // Update "__package__" value to what it ought to be.
    {
#if 0
        UPDATE_STRING_DICT0(
            moduledict_xlwt$BIFFRecords,
            (Nuitka_StringObject *)const_str_plain___package__,
            mod_consts[26]
        );
#elif 0
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___name__);

        UPDATE_STRING_DICT0(
            moduledict_xlwt$BIFFRecords,
            (Nuitka_StringObject *)const_str_plain___package__,
            module_name
        );
#else

#if PYTHON_VERSION < 0x300
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___name__);
        char const *module_name_cstr = PyString_AS_STRING(module_name);

        char const *last_dot = strrchr(module_name_cstr, '.');

        if (last_dot != NULL) {
            UPDATE_STRING_DICT1(
                moduledict_xlwt$BIFFRecords,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyString_FromStringAndSize(module_name_cstr, last_dot - module_name_cstr)
            );
        }
#else
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___name__);
        Py_ssize_t dot_index = PyUnicode_Find(module_name, const_str_dot, 0, PyUnicode_GetLength(module_name), -1);

        if (dot_index != -1) {
            UPDATE_STRING_DICT1(
                moduledict_xlwt$BIFFRecords,
                (Nuitka_StringObject *)const_str_plain___package__,
                PyUnicode_Substring(module_name, 0, dot_index)
            );
        }
#endif
#endif
    }

    CHECK_OBJECT(module_xlwt$BIFFRecords);

    // For deep importing of a module we need to have "__builtins__", so we set
    // it ourselves in the same way than CPython does. Note: This must be done
    // before the frame object is allocated, or else it may fail.

    if (GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___builtins__) == NULL) {
        PyObject *value = (PyObject *)builtin_module;

        // Check if main module, not a dict then but the module itself.
#if defined(_NUITKA_MODULE) || !0
        value = PyModule_GetDict(value);
#endif

        UPDATE_STRING_DICT0(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___builtins__, value);
    }

#if PYTHON_VERSION >= 0x300
    UPDATE_STRING_DICT0(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___loader__, (PyObject *)&Nuitka_Loader_Type);
#endif

#if PYTHON_VERSION >= 0x340
// Set the "__spec__" value

#if 0
    // Main modules just get "None" as spec.
    UPDATE_STRING_DICT0(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___spec__, Py_None);
#else
    // Other modules get a "ModuleSpec" from the standard mechanism.
    {
        PyObject *bootstrap_module = getImportLibBootstrapModule();
        CHECK_OBJECT(bootstrap_module);

        PyObject *_spec_from_module = PyObject_GetAttrString(bootstrap_module, "_spec_from_module");
        CHECK_OBJECT(_spec_from_module);

        PyObject *spec_value = CALL_FUNCTION_WITH_SINGLE_ARG(_spec_from_module, module_xlwt$BIFFRecords);
        Py_DECREF(_spec_from_module);

        // We can assume this to never fail, or else we are in trouble anyway.
        // CHECK_OBJECT(spec_value);

        if (spec_value == NULL) {
            PyErr_PrintEx(0);
            abort();
        }

// Mark the execution in the "__spec__" value.
        SET_ATTRIBUTE(spec_value, const_str_plain__initializing, Py_True);

        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___spec__, spec_value);
    }
#endif
#endif

    // Temp variables if any
    PyObject *outline_0_var___class__ = NULL;
    PyObject *outline_1_var___class__ = NULL;
    PyObject *outline_2_var___class__ = NULL;
    PyObject *outline_3_var___class__ = NULL;
    PyObject *outline_4_var___class__ = NULL;
    PyObject *outline_5_var___class__ = NULL;
    PyObject *outline_6_var___class__ = NULL;
    PyObject *outline_7_var___class__ = NULL;
    PyObject *outline_8_var___class__ = NULL;
    PyObject *outline_9_var___class__ = NULL;
    PyObject *outline_10_var___class__ = NULL;
    PyObject *outline_11_var___class__ = NULL;
    PyObject *outline_12_var___class__ = NULL;
    PyObject *outline_13_var___class__ = NULL;
    PyObject *outline_14_var___class__ = NULL;
    PyObject *outline_15_var___class__ = NULL;
    PyObject *outline_16_var___class__ = NULL;
    PyObject *outline_17_var___class__ = NULL;
    PyObject *outline_18_var___class__ = NULL;
    PyObject *outline_19_var___class__ = NULL;
    PyObject *outline_20_var___class__ = NULL;
    PyObject *outline_21_var___class__ = NULL;
    PyObject *outline_22_var___class__ = NULL;
    PyObject *outline_23_var___class__ = NULL;
    PyObject *outline_24_var___class__ = NULL;
    PyObject *outline_25_var___class__ = NULL;
    PyObject *outline_26_var___class__ = NULL;
    PyObject *outline_27_var___class__ = NULL;
    PyObject *outline_28_var___class__ = NULL;
    PyObject *outline_29_var___class__ = NULL;
    PyObject *outline_30_var___class__ = NULL;
    PyObject *outline_31_var___class__ = NULL;
    PyObject *outline_32_var___class__ = NULL;
    PyObject *outline_33_var___class__ = NULL;
    PyObject *outline_34_var___class__ = NULL;
    PyObject *outline_35_var___class__ = NULL;
    PyObject *outline_36_var___class__ = NULL;
    PyObject *outline_37_var___class__ = NULL;
    PyObject *outline_38_var___class__ = NULL;
    PyObject *outline_39_var___class__ = NULL;
    PyObject *outline_40_var___class__ = NULL;
    PyObject *outline_41_var___class__ = NULL;
    PyObject *outline_42_var___class__ = NULL;
    PyObject *outline_43_var___class__ = NULL;
    PyObject *outline_44_var___class__ = NULL;
    PyObject *outline_45_var___class__ = NULL;
    PyObject *outline_46_var___class__ = NULL;
    PyObject *outline_47_var___class__ = NULL;
    PyObject *outline_48_var___class__ = NULL;
    PyObject *outline_49_var___class__ = NULL;
    PyObject *outline_50_var___class__ = NULL;
    PyObject *outline_51_var___class__ = NULL;
    PyObject *outline_52_var___class__ = NULL;
    PyObject *outline_53_var___class__ = NULL;
    PyObject *outline_54_var___class__ = NULL;
    PyObject *outline_55_var___class__ = NULL;
    PyObject *outline_56_var___class__ = NULL;
    PyObject *outline_57_var___class__ = NULL;
    PyObject *outline_58_var___class__ = NULL;
    PyObject *outline_59_var___class__ = NULL;
    PyObject *outline_60_var___class__ = NULL;
    PyObject *outline_61_var___class__ = NULL;
    PyObject *outline_62_var___class__ = NULL;
    PyObject *outline_63_var___class__ = NULL;
    PyObject *outline_64_var___class__ = NULL;
    PyObject *outline_65_var___class__ = NULL;
    PyObject *outline_66_var___class__ = NULL;
    PyObject *outline_67_var___class__ = NULL;
    PyObject *outline_68_var___class__ = NULL;
    PyObject *outline_69_var___class__ = NULL;
    PyObject *outline_70_var___class__ = NULL;
    PyObject *outline_71_var___class__ = NULL;
    PyObject *outline_72_var___class__ = NULL;
    PyObject *outline_73_var___class__ = NULL;
    PyObject *outline_74_var___class__ = NULL;
    PyObject *outline_75_var___class__ = NULL;
    PyObject *outline_76_var___class__ = NULL;
    PyObject *outline_77_var___class__ = NULL;
    PyObject *outline_78_var___class__ = NULL;
    PyObject *outline_79_var___class__ = NULL;
    PyObject *tmp_class_creation_10__bases = NULL;
    PyObject *tmp_class_creation_10__bases_orig = NULL;
    PyObject *tmp_class_creation_10__class_decl_dict = NULL;
    PyObject *tmp_class_creation_10__metaclass = NULL;
    PyObject *tmp_class_creation_10__prepared = NULL;
    PyObject *tmp_class_creation_11__bases = NULL;
    PyObject *tmp_class_creation_11__bases_orig = NULL;
    PyObject *tmp_class_creation_11__class_decl_dict = NULL;
    PyObject *tmp_class_creation_11__metaclass = NULL;
    PyObject *tmp_class_creation_11__prepared = NULL;
    PyObject *tmp_class_creation_12__bases = NULL;
    PyObject *tmp_class_creation_12__bases_orig = NULL;
    PyObject *tmp_class_creation_12__class_decl_dict = NULL;
    PyObject *tmp_class_creation_12__metaclass = NULL;
    PyObject *tmp_class_creation_12__prepared = NULL;
    PyObject *tmp_class_creation_13__bases = NULL;
    PyObject *tmp_class_creation_13__bases_orig = NULL;
    PyObject *tmp_class_creation_13__class_decl_dict = NULL;
    PyObject *tmp_class_creation_13__metaclass = NULL;
    PyObject *tmp_class_creation_13__prepared = NULL;
    PyObject *tmp_class_creation_14__bases = NULL;
    PyObject *tmp_class_creation_14__bases_orig = NULL;
    PyObject *tmp_class_creation_14__class_decl_dict = NULL;
    PyObject *tmp_class_creation_14__metaclass = NULL;
    PyObject *tmp_class_creation_14__prepared = NULL;
    PyObject *tmp_class_creation_15__bases = NULL;
    PyObject *tmp_class_creation_15__bases_orig = NULL;
    PyObject *tmp_class_creation_15__class_decl_dict = NULL;
    PyObject *tmp_class_creation_15__metaclass = NULL;
    PyObject *tmp_class_creation_15__prepared = NULL;
    PyObject *tmp_class_creation_16__bases = NULL;
    PyObject *tmp_class_creation_16__bases_orig = NULL;
    PyObject *tmp_class_creation_16__class_decl_dict = NULL;
    PyObject *tmp_class_creation_16__metaclass = NULL;
    PyObject *tmp_class_creation_16__prepared = NULL;
    PyObject *tmp_class_creation_17__bases = NULL;
    PyObject *tmp_class_creation_17__bases_orig = NULL;
    PyObject *tmp_class_creation_17__class_decl_dict = NULL;
    PyObject *tmp_class_creation_17__metaclass = NULL;
    PyObject *tmp_class_creation_17__prepared = NULL;
    PyObject *tmp_class_creation_18__bases = NULL;
    PyObject *tmp_class_creation_18__bases_orig = NULL;
    PyObject *tmp_class_creation_18__class_decl_dict = NULL;
    PyObject *tmp_class_creation_18__metaclass = NULL;
    PyObject *tmp_class_creation_18__prepared = NULL;
    PyObject *tmp_class_creation_19__bases = NULL;
    PyObject *tmp_class_creation_19__bases_orig = NULL;
    PyObject *tmp_class_creation_19__class_decl_dict = NULL;
    PyObject *tmp_class_creation_19__metaclass = NULL;
    PyObject *tmp_class_creation_19__prepared = NULL;
    PyObject *tmp_class_creation_1__bases = NULL;
    PyObject *tmp_class_creation_1__class_decl_dict = NULL;
    PyObject *tmp_class_creation_1__metaclass = NULL;
    PyObject *tmp_class_creation_1__prepared = NULL;
    PyObject *tmp_class_creation_20__bases = NULL;
    PyObject *tmp_class_creation_20__bases_orig = NULL;
    PyObject *tmp_class_creation_20__class_decl_dict = NULL;
    PyObject *tmp_class_creation_20__metaclass = NULL;
    PyObject *tmp_class_creation_20__prepared = NULL;
    PyObject *tmp_class_creation_21__bases = NULL;
    PyObject *tmp_class_creation_21__bases_orig = NULL;
    PyObject *tmp_class_creation_21__class_decl_dict = NULL;
    PyObject *tmp_class_creation_21__metaclass = NULL;
    PyObject *tmp_class_creation_21__prepared = NULL;
    PyObject *tmp_class_creation_22__bases = NULL;
    PyObject *tmp_class_creation_22__bases_orig = NULL;
    PyObject *tmp_class_creation_22__class_decl_dict = NULL;
    PyObject *tmp_class_creation_22__metaclass = NULL;
    PyObject *tmp_class_creation_22__prepared = NULL;
    PyObject *tmp_class_creation_23__bases = NULL;
    PyObject *tmp_class_creation_23__bases_orig = NULL;
    PyObject *tmp_class_creation_23__class_decl_dict = NULL;
    PyObject *tmp_class_creation_23__metaclass = NULL;
    PyObject *tmp_class_creation_23__prepared = NULL;
    PyObject *tmp_class_creation_24__bases = NULL;
    PyObject *tmp_class_creation_24__bases_orig = NULL;
    PyObject *tmp_class_creation_24__class_decl_dict = NULL;
    PyObject *tmp_class_creation_24__metaclass = NULL;
    PyObject *tmp_class_creation_24__prepared = NULL;
    PyObject *tmp_class_creation_25__bases = NULL;
    PyObject *tmp_class_creation_25__bases_orig = NULL;
    PyObject *tmp_class_creation_25__class_decl_dict = NULL;
    PyObject *tmp_class_creation_25__metaclass = NULL;
    PyObject *tmp_class_creation_25__prepared = NULL;
    PyObject *tmp_class_creation_26__bases = NULL;
    PyObject *tmp_class_creation_26__bases_orig = NULL;
    PyObject *tmp_class_creation_26__class_decl_dict = NULL;
    PyObject *tmp_class_creation_26__metaclass = NULL;
    PyObject *tmp_class_creation_26__prepared = NULL;
    PyObject *tmp_class_creation_27__bases = NULL;
    PyObject *tmp_class_creation_27__bases_orig = NULL;
    PyObject *tmp_class_creation_27__class_decl_dict = NULL;
    PyObject *tmp_class_creation_27__metaclass = NULL;
    PyObject *tmp_class_creation_27__prepared = NULL;
    PyObject *tmp_class_creation_28__bases = NULL;
    PyObject *tmp_class_creation_28__bases_orig = NULL;
    PyObject *tmp_class_creation_28__class_decl_dict = NULL;
    PyObject *tmp_class_creation_28__metaclass = NULL;
    PyObject *tmp_class_creation_28__prepared = NULL;
    PyObject *tmp_class_creation_29__bases = NULL;
    PyObject *tmp_class_creation_29__bases_orig = NULL;
    PyObject *tmp_class_creation_29__class_decl_dict = NULL;
    PyObject *tmp_class_creation_29__metaclass = NULL;
    PyObject *tmp_class_creation_29__prepared = NULL;
    PyObject *tmp_class_creation_2__bases = NULL;
    PyObject *tmp_class_creation_2__class_decl_dict = NULL;
    PyObject *tmp_class_creation_2__metaclass = NULL;
    PyObject *tmp_class_creation_2__prepared = NULL;
    PyObject *tmp_class_creation_30__bases = NULL;
    PyObject *tmp_class_creation_30__bases_orig = NULL;
    PyObject *tmp_class_creation_30__class_decl_dict = NULL;
    PyObject *tmp_class_creation_30__metaclass = NULL;
    PyObject *tmp_class_creation_30__prepared = NULL;
    PyObject *tmp_class_creation_31__bases = NULL;
    PyObject *tmp_class_creation_31__bases_orig = NULL;
    PyObject *tmp_class_creation_31__class_decl_dict = NULL;
    PyObject *tmp_class_creation_31__metaclass = NULL;
    PyObject *tmp_class_creation_31__prepared = NULL;
    PyObject *tmp_class_creation_32__bases = NULL;
    PyObject *tmp_class_creation_32__bases_orig = NULL;
    PyObject *tmp_class_creation_32__class_decl_dict = NULL;
    PyObject *tmp_class_creation_32__metaclass = NULL;
    PyObject *tmp_class_creation_32__prepared = NULL;
    PyObject *tmp_class_creation_33__bases = NULL;
    PyObject *tmp_class_creation_33__bases_orig = NULL;
    PyObject *tmp_class_creation_33__class_decl_dict = NULL;
    PyObject *tmp_class_creation_33__metaclass = NULL;
    PyObject *tmp_class_creation_33__prepared = NULL;
    PyObject *tmp_class_creation_34__bases = NULL;
    PyObject *tmp_class_creation_34__bases_orig = NULL;
    PyObject *tmp_class_creation_34__class_decl_dict = NULL;
    PyObject *tmp_class_creation_34__metaclass = NULL;
    PyObject *tmp_class_creation_34__prepared = NULL;
    PyObject *tmp_class_creation_35__bases = NULL;
    PyObject *tmp_class_creation_35__bases_orig = NULL;
    PyObject *tmp_class_creation_35__class_decl_dict = NULL;
    PyObject *tmp_class_creation_35__metaclass = NULL;
    PyObject *tmp_class_creation_35__prepared = NULL;
    PyObject *tmp_class_creation_36__bases = NULL;
    PyObject *tmp_class_creation_36__bases_orig = NULL;
    PyObject *tmp_class_creation_36__class_decl_dict = NULL;
    PyObject *tmp_class_creation_36__metaclass = NULL;
    PyObject *tmp_class_creation_36__prepared = NULL;
    PyObject *tmp_class_creation_37__bases = NULL;
    PyObject *tmp_class_creation_37__bases_orig = NULL;
    PyObject *tmp_class_creation_37__class_decl_dict = NULL;
    PyObject *tmp_class_creation_37__metaclass = NULL;
    PyObject *tmp_class_creation_37__prepared = NULL;
    PyObject *tmp_class_creation_38__bases = NULL;
    PyObject *tmp_class_creation_38__bases_orig = NULL;
    PyObject *tmp_class_creation_38__class_decl_dict = NULL;
    PyObject *tmp_class_creation_38__metaclass = NULL;
    PyObject *tmp_class_creation_38__prepared = NULL;
    PyObject *tmp_class_creation_39__bases = NULL;
    PyObject *tmp_class_creation_39__bases_orig = NULL;
    PyObject *tmp_class_creation_39__class_decl_dict = NULL;
    PyObject *tmp_class_creation_39__metaclass = NULL;
    PyObject *tmp_class_creation_39__prepared = NULL;
    PyObject *tmp_class_creation_3__bases = NULL;
    PyObject *tmp_class_creation_3__bases_orig = NULL;
    PyObject *tmp_class_creation_3__class_decl_dict = NULL;
    PyObject *tmp_class_creation_3__metaclass = NULL;
    PyObject *tmp_class_creation_3__prepared = NULL;
    PyObject *tmp_class_creation_40__bases = NULL;
    PyObject *tmp_class_creation_40__bases_orig = NULL;
    PyObject *tmp_class_creation_40__class_decl_dict = NULL;
    PyObject *tmp_class_creation_40__metaclass = NULL;
    PyObject *tmp_class_creation_40__prepared = NULL;
    PyObject *tmp_class_creation_41__bases = NULL;
    PyObject *tmp_class_creation_41__bases_orig = NULL;
    PyObject *tmp_class_creation_41__class_decl_dict = NULL;
    PyObject *tmp_class_creation_41__metaclass = NULL;
    PyObject *tmp_class_creation_41__prepared = NULL;
    PyObject *tmp_class_creation_42__bases = NULL;
    PyObject *tmp_class_creation_42__bases_orig = NULL;
    PyObject *tmp_class_creation_42__class_decl_dict = NULL;
    PyObject *tmp_class_creation_42__metaclass = NULL;
    PyObject *tmp_class_creation_42__prepared = NULL;
    PyObject *tmp_class_creation_43__bases = NULL;
    PyObject *tmp_class_creation_43__bases_orig = NULL;
    PyObject *tmp_class_creation_43__class_decl_dict = NULL;
    PyObject *tmp_class_creation_43__metaclass = NULL;
    PyObject *tmp_class_creation_43__prepared = NULL;
    PyObject *tmp_class_creation_44__bases = NULL;
    PyObject *tmp_class_creation_44__bases_orig = NULL;
    PyObject *tmp_class_creation_44__class_decl_dict = NULL;
    PyObject *tmp_class_creation_44__metaclass = NULL;
    PyObject *tmp_class_creation_44__prepared = NULL;
    PyObject *tmp_class_creation_45__bases = NULL;
    PyObject *tmp_class_creation_45__bases_orig = NULL;
    PyObject *tmp_class_creation_45__class_decl_dict = NULL;
    PyObject *tmp_class_creation_45__metaclass = NULL;
    PyObject *tmp_class_creation_45__prepared = NULL;
    PyObject *tmp_class_creation_46__bases = NULL;
    PyObject *tmp_class_creation_46__bases_orig = NULL;
    PyObject *tmp_class_creation_46__class_decl_dict = NULL;
    PyObject *tmp_class_creation_46__metaclass = NULL;
    PyObject *tmp_class_creation_46__prepared = NULL;
    PyObject *tmp_class_creation_47__bases = NULL;
    PyObject *tmp_class_creation_47__bases_orig = NULL;
    PyObject *tmp_class_creation_47__class_decl_dict = NULL;
    PyObject *tmp_class_creation_47__metaclass = NULL;
    PyObject *tmp_class_creation_47__prepared = NULL;
    PyObject *tmp_class_creation_48__bases = NULL;
    PyObject *tmp_class_creation_48__bases_orig = NULL;
    PyObject *tmp_class_creation_48__class_decl_dict = NULL;
    PyObject *tmp_class_creation_48__metaclass = NULL;
    PyObject *tmp_class_creation_48__prepared = NULL;
    PyObject *tmp_class_creation_49__bases = NULL;
    PyObject *tmp_class_creation_49__bases_orig = NULL;
    PyObject *tmp_class_creation_49__class_decl_dict = NULL;
    PyObject *tmp_class_creation_49__metaclass = NULL;
    PyObject *tmp_class_creation_49__prepared = NULL;
    PyObject *tmp_class_creation_4__bases = NULL;
    PyObject *tmp_class_creation_4__bases_orig = NULL;
    PyObject *tmp_class_creation_4__class_decl_dict = NULL;
    PyObject *tmp_class_creation_4__metaclass = NULL;
    PyObject *tmp_class_creation_4__prepared = NULL;
    PyObject *tmp_class_creation_50__bases = NULL;
    PyObject *tmp_class_creation_50__bases_orig = NULL;
    PyObject *tmp_class_creation_50__class_decl_dict = NULL;
    PyObject *tmp_class_creation_50__metaclass = NULL;
    PyObject *tmp_class_creation_50__prepared = NULL;
    PyObject *tmp_class_creation_51__bases = NULL;
    PyObject *tmp_class_creation_51__bases_orig = NULL;
    PyObject *tmp_class_creation_51__class_decl_dict = NULL;
    PyObject *tmp_class_creation_51__metaclass = NULL;
    PyObject *tmp_class_creation_51__prepared = NULL;
    PyObject *tmp_class_creation_52__bases = NULL;
    PyObject *tmp_class_creation_52__bases_orig = NULL;
    PyObject *tmp_class_creation_52__class_decl_dict = NULL;
    PyObject *tmp_class_creation_52__metaclass = NULL;
    PyObject *tmp_class_creation_52__prepared = NULL;
    PyObject *tmp_class_creation_53__bases = NULL;
    PyObject *tmp_class_creation_53__bases_orig = NULL;
    PyObject *tmp_class_creation_53__class_decl_dict = NULL;
    PyObject *tmp_class_creation_53__metaclass = NULL;
    PyObject *tmp_class_creation_53__prepared = NULL;
    PyObject *tmp_class_creation_54__bases = NULL;
    PyObject *tmp_class_creation_54__bases_orig = NULL;
    PyObject *tmp_class_creation_54__class_decl_dict = NULL;
    PyObject *tmp_class_creation_54__metaclass = NULL;
    PyObject *tmp_class_creation_54__prepared = NULL;
    PyObject *tmp_class_creation_55__bases = NULL;
    PyObject *tmp_class_creation_55__bases_orig = NULL;
    PyObject *tmp_class_creation_55__class_decl_dict = NULL;
    PyObject *tmp_class_creation_55__metaclass = NULL;
    PyObject *tmp_class_creation_55__prepared = NULL;
    PyObject *tmp_class_creation_56__bases = NULL;
    PyObject *tmp_class_creation_56__bases_orig = NULL;
    PyObject *tmp_class_creation_56__class_decl_dict = NULL;
    PyObject *tmp_class_creation_56__metaclass = NULL;
    PyObject *tmp_class_creation_56__prepared = NULL;
    PyObject *tmp_class_creation_57__bases = NULL;
    PyObject *tmp_class_creation_57__bases_orig = NULL;
    PyObject *tmp_class_creation_57__class_decl_dict = NULL;
    PyObject *tmp_class_creation_57__metaclass = NULL;
    PyObject *tmp_class_creation_57__prepared = NULL;
    PyObject *tmp_class_creation_58__bases = NULL;
    PyObject *tmp_class_creation_58__bases_orig = NULL;
    PyObject *tmp_class_creation_58__class_decl_dict = NULL;
    PyObject *tmp_class_creation_58__metaclass = NULL;
    PyObject *tmp_class_creation_58__prepared = NULL;
    PyObject *tmp_class_creation_59__bases = NULL;
    PyObject *tmp_class_creation_59__bases_orig = NULL;
    PyObject *tmp_class_creation_59__class_decl_dict = NULL;
    PyObject *tmp_class_creation_59__metaclass = NULL;
    PyObject *tmp_class_creation_59__prepared = NULL;
    PyObject *tmp_class_creation_5__bases = NULL;
    PyObject *tmp_class_creation_5__bases_orig = NULL;
    PyObject *tmp_class_creation_5__class_decl_dict = NULL;
    PyObject *tmp_class_creation_5__metaclass = NULL;
    PyObject *tmp_class_creation_5__prepared = NULL;
    PyObject *tmp_class_creation_60__bases = NULL;
    PyObject *tmp_class_creation_60__bases_orig = NULL;
    PyObject *tmp_class_creation_60__class_decl_dict = NULL;
    PyObject *tmp_class_creation_60__metaclass = NULL;
    PyObject *tmp_class_creation_60__prepared = NULL;
    PyObject *tmp_class_creation_61__bases = NULL;
    PyObject *tmp_class_creation_61__bases_orig = NULL;
    PyObject *tmp_class_creation_61__class_decl_dict = NULL;
    PyObject *tmp_class_creation_61__metaclass = NULL;
    PyObject *tmp_class_creation_61__prepared = NULL;
    PyObject *tmp_class_creation_62__bases = NULL;
    PyObject *tmp_class_creation_62__bases_orig = NULL;
    PyObject *tmp_class_creation_62__class_decl_dict = NULL;
    PyObject *tmp_class_creation_62__metaclass = NULL;
    PyObject *tmp_class_creation_62__prepared = NULL;
    PyObject *tmp_class_creation_63__bases = NULL;
    PyObject *tmp_class_creation_63__bases_orig = NULL;
    PyObject *tmp_class_creation_63__class_decl_dict = NULL;
    PyObject *tmp_class_creation_63__metaclass = NULL;
    PyObject *tmp_class_creation_63__prepared = NULL;
    PyObject *tmp_class_creation_64__bases = NULL;
    PyObject *tmp_class_creation_64__bases_orig = NULL;
    PyObject *tmp_class_creation_64__class_decl_dict = NULL;
    PyObject *tmp_class_creation_64__metaclass = NULL;
    PyObject *tmp_class_creation_64__prepared = NULL;
    PyObject *tmp_class_creation_65__bases = NULL;
    PyObject *tmp_class_creation_65__bases_orig = NULL;
    PyObject *tmp_class_creation_65__class_decl_dict = NULL;
    PyObject *tmp_class_creation_65__metaclass = NULL;
    PyObject *tmp_class_creation_65__prepared = NULL;
    PyObject *tmp_class_creation_66__bases = NULL;
    PyObject *tmp_class_creation_66__bases_orig = NULL;
    PyObject *tmp_class_creation_66__class_decl_dict = NULL;
    PyObject *tmp_class_creation_66__metaclass = NULL;
    PyObject *tmp_class_creation_66__prepared = NULL;
    PyObject *tmp_class_creation_67__bases = NULL;
    PyObject *tmp_class_creation_67__bases_orig = NULL;
    PyObject *tmp_class_creation_67__class_decl_dict = NULL;
    PyObject *tmp_class_creation_67__metaclass = NULL;
    PyObject *tmp_class_creation_67__prepared = NULL;
    PyObject *tmp_class_creation_68__bases = NULL;
    PyObject *tmp_class_creation_68__bases_orig = NULL;
    PyObject *tmp_class_creation_68__class_decl_dict = NULL;
    PyObject *tmp_class_creation_68__metaclass = NULL;
    PyObject *tmp_class_creation_68__prepared = NULL;
    PyObject *tmp_class_creation_69__bases = NULL;
    PyObject *tmp_class_creation_69__bases_orig = NULL;
    PyObject *tmp_class_creation_69__class_decl_dict = NULL;
    PyObject *tmp_class_creation_69__metaclass = NULL;
    PyObject *tmp_class_creation_69__prepared = NULL;
    PyObject *tmp_class_creation_6__bases = NULL;
    PyObject *tmp_class_creation_6__bases_orig = NULL;
    PyObject *tmp_class_creation_6__class_decl_dict = NULL;
    PyObject *tmp_class_creation_6__metaclass = NULL;
    PyObject *tmp_class_creation_6__prepared = NULL;
    PyObject *tmp_class_creation_70__bases = NULL;
    PyObject *tmp_class_creation_70__bases_orig = NULL;
    PyObject *tmp_class_creation_70__class_decl_dict = NULL;
    PyObject *tmp_class_creation_70__metaclass = NULL;
    PyObject *tmp_class_creation_70__prepared = NULL;
    PyObject *tmp_class_creation_71__bases = NULL;
    PyObject *tmp_class_creation_71__bases_orig = NULL;
    PyObject *tmp_class_creation_71__class_decl_dict = NULL;
    PyObject *tmp_class_creation_71__metaclass = NULL;
    PyObject *tmp_class_creation_71__prepared = NULL;
    PyObject *tmp_class_creation_72__bases = NULL;
    PyObject *tmp_class_creation_72__bases_orig = NULL;
    PyObject *tmp_class_creation_72__class_decl_dict = NULL;
    PyObject *tmp_class_creation_72__metaclass = NULL;
    PyObject *tmp_class_creation_72__prepared = NULL;
    PyObject *tmp_class_creation_73__bases = NULL;
    PyObject *tmp_class_creation_73__bases_orig = NULL;
    PyObject *tmp_class_creation_73__class_decl_dict = NULL;
    PyObject *tmp_class_creation_73__metaclass = NULL;
    PyObject *tmp_class_creation_73__prepared = NULL;
    PyObject *tmp_class_creation_74__bases = NULL;
    PyObject *tmp_class_creation_74__bases_orig = NULL;
    PyObject *tmp_class_creation_74__class_decl_dict = NULL;
    PyObject *tmp_class_creation_74__metaclass = NULL;
    PyObject *tmp_class_creation_74__prepared = NULL;
    PyObject *tmp_class_creation_75__bases = NULL;
    PyObject *tmp_class_creation_75__bases_orig = NULL;
    PyObject *tmp_class_creation_75__class_decl_dict = NULL;
    PyObject *tmp_class_creation_75__metaclass = NULL;
    PyObject *tmp_class_creation_75__prepared = NULL;
    PyObject *tmp_class_creation_76__bases = NULL;
    PyObject *tmp_class_creation_76__bases_orig = NULL;
    PyObject *tmp_class_creation_76__class_decl_dict = NULL;
    PyObject *tmp_class_creation_76__metaclass = NULL;
    PyObject *tmp_class_creation_76__prepared = NULL;
    PyObject *tmp_class_creation_77__bases = NULL;
    PyObject *tmp_class_creation_77__bases_orig = NULL;
    PyObject *tmp_class_creation_77__class_decl_dict = NULL;
    PyObject *tmp_class_creation_77__metaclass = NULL;
    PyObject *tmp_class_creation_77__prepared = NULL;
    PyObject *tmp_class_creation_78__bases = NULL;
    PyObject *tmp_class_creation_78__bases_orig = NULL;
    PyObject *tmp_class_creation_78__class_decl_dict = NULL;
    PyObject *tmp_class_creation_78__metaclass = NULL;
    PyObject *tmp_class_creation_78__prepared = NULL;
    PyObject *tmp_class_creation_79__bases = NULL;
    PyObject *tmp_class_creation_79__bases_orig = NULL;
    PyObject *tmp_class_creation_79__class_decl_dict = NULL;
    PyObject *tmp_class_creation_79__metaclass = NULL;
    PyObject *tmp_class_creation_79__prepared = NULL;
    PyObject *tmp_class_creation_7__bases = NULL;
    PyObject *tmp_class_creation_7__bases_orig = NULL;
    PyObject *tmp_class_creation_7__class_decl_dict = NULL;
    PyObject *tmp_class_creation_7__metaclass = NULL;
    PyObject *tmp_class_creation_7__prepared = NULL;
    PyObject *tmp_class_creation_80__bases = NULL;
    PyObject *tmp_class_creation_80__bases_orig = NULL;
    PyObject *tmp_class_creation_80__class_decl_dict = NULL;
    PyObject *tmp_class_creation_80__metaclass = NULL;
    PyObject *tmp_class_creation_80__prepared = NULL;
    PyObject *tmp_class_creation_8__bases = NULL;
    PyObject *tmp_class_creation_8__bases_orig = NULL;
    PyObject *tmp_class_creation_8__class_decl_dict = NULL;
    PyObject *tmp_class_creation_8__metaclass = NULL;
    PyObject *tmp_class_creation_8__prepared = NULL;
    PyObject *tmp_class_creation_9__bases = NULL;
    PyObject *tmp_class_creation_9__bases_orig = NULL;
    PyObject *tmp_class_creation_9__class_decl_dict = NULL;
    PyObject *tmp_class_creation_9__metaclass = NULL;
    PyObject *tmp_class_creation_9__prepared = NULL;
    PyObject *tmp_import_from_1__module = NULL;
    PyObject *tmp_import_from_2__module = NULL;
    struct Nuitka_FrameObject *frame_88dc2af7ecc241487f3fbeb03bff5bd6;
    NUITKA_MAY_BE_UNUSED char const *type_description_1 = NULL;
    bool tmp_result;
    PyObject *exception_type = NULL;
    PyObject *exception_value = NULL;
    PyTracebackObject *exception_tb = NULL;
    NUITKA_MAY_BE_UNUSED int exception_lineno = 0;
    PyObject *exception_keeper_type_1;
    PyObject *exception_keeper_value_1;
    PyTracebackObject *exception_keeper_tb_1;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_1;
    PyObject *exception_keeper_type_2;
    PyObject *exception_keeper_value_2;
    PyTracebackObject *exception_keeper_tb_2;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_2;
    int tmp_res;
    PyObject *tmp_dictdel_dict;
    PyObject *tmp_dictdel_key;
    PyObject *locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6 = NULL;
    PyObject *tmp_dictset_value;
    struct Nuitka_FrameObject *frame_c593638a5b9a9f2f12e59b970e88f7d3_2;
    NUITKA_MAY_BE_UNUSED char const *type_description_2 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2 = NULL;
    PyObject *exception_keeper_type_3;
    PyObject *exception_keeper_value_3;
    PyTracebackObject *exception_keeper_tb_3;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_3;
    PyObject *exception_keeper_type_4;
    PyObject *exception_keeper_value_4;
    PyTracebackObject *exception_keeper_tb_4;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_4;
    PyObject *exception_keeper_type_5;
    PyObject *exception_keeper_value_5;
    PyTracebackObject *exception_keeper_tb_5;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_5;
    PyObject *locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169 = NULL;
    struct Nuitka_FrameObject *frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3;
    NUITKA_MAY_BE_UNUSED char const *type_description_3 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3 = NULL;
    PyObject *exception_keeper_type_6;
    PyObject *exception_keeper_value_6;
    PyTracebackObject *exception_keeper_tb_6;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_6;
    PyObject *exception_keeper_type_7;
    PyObject *exception_keeper_value_7;
    PyTracebackObject *exception_keeper_tb_7;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_7;
    PyObject *exception_keeper_type_8;
    PyObject *exception_keeper_value_8;
    PyTracebackObject *exception_keeper_tb_8;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_8;
    PyObject *locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200 = NULL;
    struct Nuitka_FrameObject *frame_4e6547dd46356bdab15f7d7e7a94d5f3_4;
    NUITKA_MAY_BE_UNUSED char const *type_description_4 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4 = NULL;
    PyObject *exception_keeper_type_9;
    PyObject *exception_keeper_value_9;
    PyTracebackObject *exception_keeper_tb_9;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_9;
    PyObject *exception_keeper_type_10;
    PyObject *exception_keeper_value_10;
    PyTracebackObject *exception_keeper_tb_10;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_10;
    PyObject *exception_keeper_type_11;
    PyObject *exception_keeper_value_11;
    PyTracebackObject *exception_keeper_tb_11;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_11;
    PyObject *locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235 = NULL;
    struct Nuitka_FrameObject *frame_dac98c301a043976501e17d0d18f84cc_5;
    NUITKA_MAY_BE_UNUSED char const *type_description_5 = NULL;
    static struct Nuitka_FrameObject *cache_frame_dac98c301a043976501e17d0d18f84cc_5 = NULL;
    PyObject *exception_keeper_type_12;
    PyObject *exception_keeper_value_12;
    PyTracebackObject *exception_keeper_tb_12;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_12;
    PyObject *exception_keeper_type_13;
    PyObject *exception_keeper_value_13;
    PyTracebackObject *exception_keeper_tb_13;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_13;
    PyObject *exception_keeper_type_14;
    PyObject *exception_keeper_value_14;
    PyTracebackObject *exception_keeper_tb_14;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_14;
    PyObject *locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242 = NULL;
    struct Nuitka_FrameObject *frame_825fcb6aae5c99280c991a32ed2f61fb_6;
    NUITKA_MAY_BE_UNUSED char const *type_description_6 = NULL;
    static struct Nuitka_FrameObject *cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6 = NULL;
    PyObject *exception_keeper_type_15;
    PyObject *exception_keeper_value_15;
    PyTracebackObject *exception_keeper_tb_15;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_15;
    PyObject *exception_keeper_type_16;
    PyObject *exception_keeper_value_16;
    PyTracebackObject *exception_keeper_tb_16;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_16;
    PyObject *exception_keeper_type_17;
    PyObject *exception_keeper_value_17;
    PyTracebackObject *exception_keeper_tb_17;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_17;
    PyObject *locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249 = NULL;
    struct Nuitka_FrameObject *frame_264fedeff712f5ba78d0c8dd95cdeb3b_7;
    NUITKA_MAY_BE_UNUSED char const *type_description_7 = NULL;
    static struct Nuitka_FrameObject *cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7 = NULL;
    PyObject *exception_keeper_type_18;
    PyObject *exception_keeper_value_18;
    PyTracebackObject *exception_keeper_tb_18;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_18;
    PyObject *exception_keeper_type_19;
    PyObject *exception_keeper_value_19;
    PyTracebackObject *exception_keeper_tb_19;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_19;
    PyObject *exception_keeper_type_20;
    PyObject *exception_keeper_value_20;
    PyTracebackObject *exception_keeper_tb_20;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_20;
    PyObject *locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256 = NULL;
    struct Nuitka_FrameObject *frame_5b4eac466b0c6de52a9d9f1115a88b6d_8;
    NUITKA_MAY_BE_UNUSED char const *type_description_8 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8 = NULL;
    PyObject *exception_keeper_type_21;
    PyObject *exception_keeper_value_21;
    PyTracebackObject *exception_keeper_tb_21;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_21;
    PyObject *exception_keeper_type_22;
    PyObject *exception_keeper_value_22;
    PyTracebackObject *exception_keeper_tb_22;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_22;
    PyObject *exception_keeper_type_23;
    PyObject *exception_keeper_value_23;
    PyTracebackObject *exception_keeper_tb_23;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_23;
    PyObject *locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274 = NULL;
    struct Nuitka_FrameObject *frame_71973e9e3b112676dcae3b9d9d82953b_9;
    NUITKA_MAY_BE_UNUSED char const *type_description_9 = NULL;
    static struct Nuitka_FrameObject *cache_frame_71973e9e3b112676dcae3b9d9d82953b_9 = NULL;
    PyObject *exception_keeper_type_24;
    PyObject *exception_keeper_value_24;
    PyTracebackObject *exception_keeper_tb_24;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_24;
    PyObject *exception_keeper_type_25;
    PyObject *exception_keeper_value_25;
    PyTracebackObject *exception_keeper_tb_25;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_25;
    PyObject *exception_keeper_type_26;
    PyObject *exception_keeper_value_26;
    PyTracebackObject *exception_keeper_tb_26;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_26;
    PyObject *locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292 = NULL;
    struct Nuitka_FrameObject *frame_6fd42d253644a3b3a202917650af8f53_10;
    NUITKA_MAY_BE_UNUSED char const *type_description_10 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6fd42d253644a3b3a202917650af8f53_10 = NULL;
    PyObject *exception_keeper_type_27;
    PyObject *exception_keeper_value_27;
    PyTracebackObject *exception_keeper_tb_27;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_27;
    PyObject *exception_keeper_type_28;
    PyObject *exception_keeper_value_28;
    PyTracebackObject *exception_keeper_tb_28;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_28;
    PyObject *exception_keeper_type_29;
    PyObject *exception_keeper_value_29;
    PyTracebackObject *exception_keeper_tb_29;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_29;
    PyObject *locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300 = NULL;
    struct Nuitka_FrameObject *frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11;
    NUITKA_MAY_BE_UNUSED char const *type_description_11 = NULL;
    static struct Nuitka_FrameObject *cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11 = NULL;
    PyObject *exception_keeper_type_30;
    PyObject *exception_keeper_value_30;
    PyTracebackObject *exception_keeper_tb_30;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_30;
    PyObject *exception_keeper_type_31;
    PyObject *exception_keeper_value_31;
    PyTracebackObject *exception_keeper_tb_31;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_31;
    PyObject *exception_keeper_type_32;
    PyObject *exception_keeper_value_32;
    PyTracebackObject *exception_keeper_tb_32;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_32;
    PyObject *locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307 = NULL;
    struct Nuitka_FrameObject *frame_f1c2ab19a0e30602078d2b66e5a8544c_12;
    NUITKA_MAY_BE_UNUSED char const *type_description_12 = NULL;
    static struct Nuitka_FrameObject *cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12 = NULL;
    PyObject *exception_keeper_type_33;
    PyObject *exception_keeper_value_33;
    PyTracebackObject *exception_keeper_tb_33;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_33;
    PyObject *exception_keeper_type_34;
    PyObject *exception_keeper_value_34;
    PyTracebackObject *exception_keeper_tb_34;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_34;
    PyObject *exception_keeper_type_35;
    PyObject *exception_keeper_value_35;
    PyTracebackObject *exception_keeper_tb_35;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_35;
    PyObject *locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319 = NULL;
    struct Nuitka_FrameObject *frame_b2d9f266ef29efb234678d853cbf49f0_13;
    NUITKA_MAY_BE_UNUSED char const *type_description_13 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b2d9f266ef29efb234678d853cbf49f0_13 = NULL;
    PyObject *exception_keeper_type_36;
    PyObject *exception_keeper_value_36;
    PyTracebackObject *exception_keeper_tb_36;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_36;
    PyObject *exception_keeper_type_37;
    PyObject *exception_keeper_value_37;
    PyTracebackObject *exception_keeper_tb_37;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_37;
    PyObject *exception_keeper_type_38;
    PyObject *exception_keeper_value_38;
    PyTracebackObject *exception_keeper_tb_38;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_38;
    PyObject *locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332 = NULL;
    struct Nuitka_FrameObject *frame_92837687c0bee20483d0c5c47759bb8c_14;
    NUITKA_MAY_BE_UNUSED char const *type_description_14 = NULL;
    static struct Nuitka_FrameObject *cache_frame_92837687c0bee20483d0c5c47759bb8c_14 = NULL;
    PyObject *exception_keeper_type_39;
    PyObject *exception_keeper_value_39;
    PyTracebackObject *exception_keeper_tb_39;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_39;
    PyObject *exception_keeper_type_40;
    PyObject *exception_keeper_value_40;
    PyTracebackObject *exception_keeper_tb_40;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_40;
    PyObject *exception_keeper_type_41;
    PyObject *exception_keeper_value_41;
    PyTracebackObject *exception_keeper_tb_41;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_41;
    PyObject *locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345 = NULL;
    struct Nuitka_FrameObject *frame_e2edf237c71f4392ee23f56d4c98decf_15;
    NUITKA_MAY_BE_UNUSED char const *type_description_15 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e2edf237c71f4392ee23f56d4c98decf_15 = NULL;
    PyObject *exception_keeper_type_42;
    PyObject *exception_keeper_value_42;
    PyTracebackObject *exception_keeper_tb_42;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_42;
    PyObject *exception_keeper_type_43;
    PyObject *exception_keeper_value_43;
    PyTracebackObject *exception_keeper_tb_43;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_43;
    PyObject *exception_keeper_type_44;
    PyObject *exception_keeper_value_44;
    PyTracebackObject *exception_keeper_tb_44;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_44;
    PyObject *locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358 = NULL;
    struct Nuitka_FrameObject *frame_5c802a66aef8c15382108a98b969f15b_16;
    NUITKA_MAY_BE_UNUSED char const *type_description_16 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5c802a66aef8c15382108a98b969f15b_16 = NULL;
    PyObject *exception_keeper_type_45;
    PyObject *exception_keeper_value_45;
    PyTracebackObject *exception_keeper_tb_45;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_45;
    PyObject *exception_keeper_type_46;
    PyObject *exception_keeper_value_46;
    PyTracebackObject *exception_keeper_tb_46;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_46;
    PyObject *exception_keeper_type_47;
    PyObject *exception_keeper_value_47;
    PyTracebackObject *exception_keeper_tb_47;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_47;
    PyObject *locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388 = NULL;
    struct Nuitka_FrameObject *frame_4232dd8f2e9491305b1e88a0fa397d57_17;
    NUITKA_MAY_BE_UNUSED char const *type_description_17 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17 = NULL;
    PyObject *exception_keeper_type_48;
    PyObject *exception_keeper_value_48;
    PyTracebackObject *exception_keeper_tb_48;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_48;
    PyObject *exception_keeper_type_49;
    PyObject *exception_keeper_value_49;
    PyTracebackObject *exception_keeper_tb_49;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_49;
    PyObject *exception_keeper_type_50;
    PyObject *exception_keeper_value_50;
    PyTracebackObject *exception_keeper_tb_50;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_50;
    PyObject *locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395 = NULL;
    struct Nuitka_FrameObject *frame_e3d71cf09d70965a7229fa6a418a7117_18;
    NUITKA_MAY_BE_UNUSED char const *type_description_18 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e3d71cf09d70965a7229fa6a418a7117_18 = NULL;
    PyObject *exception_keeper_type_51;
    PyObject *exception_keeper_value_51;
    PyTracebackObject *exception_keeper_tb_51;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_51;
    PyObject *exception_keeper_type_52;
    PyObject *exception_keeper_value_52;
    PyTracebackObject *exception_keeper_tb_52;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_52;
    PyObject *exception_keeper_type_53;
    PyObject *exception_keeper_value_53;
    PyTracebackObject *exception_keeper_tb_53;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_53;
    PyObject *locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402 = NULL;
    struct Nuitka_FrameObject *frame_c460d39964371e886c3e28f376c697dc_19;
    NUITKA_MAY_BE_UNUSED char const *type_description_19 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c460d39964371e886c3e28f376c697dc_19 = NULL;
    PyObject *exception_keeper_type_54;
    PyObject *exception_keeper_value_54;
    PyTracebackObject *exception_keeper_tb_54;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_54;
    PyObject *exception_keeper_type_55;
    PyObject *exception_keeper_value_55;
    PyTracebackObject *exception_keeper_tb_55;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_55;
    PyObject *exception_keeper_type_56;
    PyObject *exception_keeper_value_56;
    PyTracebackObject *exception_keeper_tb_56;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_56;
    PyObject *locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412 = NULL;
    struct Nuitka_FrameObject *frame_447dcf1d02dedc1362df90b3bd876041_20;
    NUITKA_MAY_BE_UNUSED char const *type_description_20 = NULL;
    static struct Nuitka_FrameObject *cache_frame_447dcf1d02dedc1362df90b3bd876041_20 = NULL;
    PyObject *exception_keeper_type_57;
    PyObject *exception_keeper_value_57;
    PyTracebackObject *exception_keeper_tb_57;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_57;
    PyObject *exception_keeper_type_58;
    PyObject *exception_keeper_value_58;
    PyTracebackObject *exception_keeper_tb_58;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_58;
    PyObject *exception_keeper_type_59;
    PyObject *exception_keeper_value_59;
    PyTracebackObject *exception_keeper_tb_59;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_59;
    PyObject *locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430 = NULL;
    struct Nuitka_FrameObject *frame_395dfd1de6ea01095e6a35437746ac0b_21;
    NUITKA_MAY_BE_UNUSED char const *type_description_21 = NULL;
    static struct Nuitka_FrameObject *cache_frame_395dfd1de6ea01095e6a35437746ac0b_21 = NULL;
    PyObject *exception_keeper_type_60;
    PyObject *exception_keeper_value_60;
    PyTracebackObject *exception_keeper_tb_60;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_60;
    PyObject *exception_keeper_type_61;
    PyObject *exception_keeper_value_61;
    PyTracebackObject *exception_keeper_tb_61;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_61;
    PyObject *exception_keeper_type_62;
    PyObject *exception_keeper_value_62;
    PyTracebackObject *exception_keeper_tb_62;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_62;
    PyObject *locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440 = NULL;
    struct Nuitka_FrameObject *frame_601c63e1fdb04378a4c4921abe7ef6c0_22;
    NUITKA_MAY_BE_UNUSED char const *type_description_22 = NULL;
    static struct Nuitka_FrameObject *cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22 = NULL;
    PyObject *exception_keeper_type_63;
    PyObject *exception_keeper_value_63;
    PyTracebackObject *exception_keeper_tb_63;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_63;
    PyObject *exception_keeper_type_64;
    PyObject *exception_keeper_value_64;
    PyTracebackObject *exception_keeper_tb_64;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_64;
    PyObject *exception_keeper_type_65;
    PyObject *exception_keeper_value_65;
    PyTracebackObject *exception_keeper_tb_65;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_65;
    PyObject *locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459 = NULL;
    struct Nuitka_FrameObject *frame_d16779ec4e9badd20ed67c7ecc33a4e0_23;
    NUITKA_MAY_BE_UNUSED char const *type_description_23 = NULL;
    static struct Nuitka_FrameObject *cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23 = NULL;
    PyObject *exception_keeper_type_66;
    PyObject *exception_keeper_value_66;
    PyTracebackObject *exception_keeper_tb_66;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_66;
    PyObject *exception_keeper_type_67;
    PyObject *exception_keeper_value_67;
    PyTracebackObject *exception_keeper_tb_67;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_67;
    PyObject *exception_keeper_type_68;
    PyObject *exception_keeper_value_68;
    PyTracebackObject *exception_keeper_tb_68;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_68;
    PyObject *locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487 = NULL;
    struct Nuitka_FrameObject *frame_07010f3711b0d04fdbc1b55715cf6869_24;
    NUITKA_MAY_BE_UNUSED char const *type_description_24 = NULL;
    static struct Nuitka_FrameObject *cache_frame_07010f3711b0d04fdbc1b55715cf6869_24 = NULL;
    PyObject *exception_keeper_type_69;
    PyObject *exception_keeper_value_69;
    PyTracebackObject *exception_keeper_tb_69;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_69;
    PyObject *exception_keeper_type_70;
    PyObject *exception_keeper_value_70;
    PyTracebackObject *exception_keeper_tb_70;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_70;
    PyObject *exception_keeper_type_71;
    PyObject *exception_keeper_value_71;
    PyTracebackObject *exception_keeper_tb_71;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_71;
    PyObject *locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507 = NULL;
    struct Nuitka_FrameObject *frame_30567aa98a8fa95095e670d33eac5b49_25;
    NUITKA_MAY_BE_UNUSED char const *type_description_25 = NULL;
    static struct Nuitka_FrameObject *cache_frame_30567aa98a8fa95095e670d33eac5b49_25 = NULL;
    PyObject *exception_keeper_type_72;
    PyObject *exception_keeper_value_72;
    PyTracebackObject *exception_keeper_tb_72;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_72;
    PyObject *exception_keeper_type_73;
    PyObject *exception_keeper_value_73;
    PyTracebackObject *exception_keeper_tb_73;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_73;
    PyObject *exception_keeper_type_74;
    PyObject *exception_keeper_value_74;
    PyTracebackObject *exception_keeper_tb_74;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_74;
    PyObject *locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514 = NULL;
    struct Nuitka_FrameObject *frame_a2c801938d65272271263b45b7e978ff_26;
    NUITKA_MAY_BE_UNUSED char const *type_description_26 = NULL;
    static struct Nuitka_FrameObject *cache_frame_a2c801938d65272271263b45b7e978ff_26 = NULL;
    PyObject *exception_keeper_type_75;
    PyObject *exception_keeper_value_75;
    PyTracebackObject *exception_keeper_tb_75;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_75;
    PyObject *exception_keeper_type_76;
    PyObject *exception_keeper_value_76;
    PyTracebackObject *exception_keeper_tb_76;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_76;
    PyObject *exception_keeper_type_77;
    PyObject *exception_keeper_value_77;
    PyTracebackObject *exception_keeper_tb_77;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_77;
    PyObject *locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536 = NULL;
    struct Nuitka_FrameObject *frame_4dd76817f64931cc19522cf900f29b3d_27;
    NUITKA_MAY_BE_UNUSED char const *type_description_27 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4dd76817f64931cc19522cf900f29b3d_27 = NULL;
    PyObject *exception_keeper_type_78;
    PyObject *exception_keeper_value_78;
    PyTracebackObject *exception_keeper_tb_78;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_78;
    PyObject *exception_keeper_type_79;
    PyObject *exception_keeper_value_79;
    PyTracebackObject *exception_keeper_tb_79;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_79;
    PyObject *exception_keeper_type_80;
    PyObject *exception_keeper_value_80;
    PyTracebackObject *exception_keeper_tb_80;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_80;
    PyObject *locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558 = NULL;
    struct Nuitka_FrameObject *frame_4ae7df40eff3fded78999a10de4f37af_28;
    NUITKA_MAY_BE_UNUSED char const *type_description_28 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4ae7df40eff3fded78999a10de4f37af_28 = NULL;
    PyObject *exception_keeper_type_81;
    PyObject *exception_keeper_value_81;
    PyTracebackObject *exception_keeper_tb_81;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_81;
    PyObject *exception_keeper_type_82;
    PyObject *exception_keeper_value_82;
    PyTracebackObject *exception_keeper_tb_82;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_82;
    PyObject *exception_keeper_type_83;
    PyObject *exception_keeper_value_83;
    PyTracebackObject *exception_keeper_tb_83;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_83;
    PyObject *locals_xlwt$BIFFRecords$$$class__28_Window1Record_614 = NULL;
    struct Nuitka_FrameObject *frame_9681e027f11210e14065bef3e5100ede_29;
    NUITKA_MAY_BE_UNUSED char const *type_description_29 = NULL;
    static struct Nuitka_FrameObject *cache_frame_9681e027f11210e14065bef3e5100ede_29 = NULL;
    PyObject *exception_keeper_type_84;
    PyObject *exception_keeper_value_84;
    PyTracebackObject *exception_keeper_tb_84;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_84;
    PyObject *exception_keeper_type_85;
    PyObject *exception_keeper_value_85;
    PyTracebackObject *exception_keeper_tb_85;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_85;
    PyObject *exception_keeper_type_86;
    PyObject *exception_keeper_value_86;
    PyTracebackObject *exception_keeper_tb_86;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_86;
    PyObject *locals_xlwt$BIFFRecords$$$class__29_FontRecord_649 = NULL;
    struct Nuitka_FrameObject *frame_8152037321aedae08e78b64fab5cc474_30;
    NUITKA_MAY_BE_UNUSED char const *type_description_30 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8152037321aedae08e78b64fab5cc474_30 = NULL;
    PyObject *exception_keeper_type_87;
    PyObject *exception_keeper_value_87;
    PyTracebackObject *exception_keeper_tb_87;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_87;
    PyObject *exception_keeper_type_88;
    PyObject *exception_keeper_value_88;
    PyTracebackObject *exception_keeper_tb_88;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_88;
    PyObject *exception_keeper_type_89;
    PyObject *exception_keeper_value_89;
    PyTracebackObject *exception_keeper_tb_89;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_89;
    PyObject *locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729 = NULL;
    struct Nuitka_FrameObject *frame_062df5792298b4a7928d15d17dc48814_31;
    NUITKA_MAY_BE_UNUSED char const *type_description_31 = NULL;
    static struct Nuitka_FrameObject *cache_frame_062df5792298b4a7928d15d17dc48814_31 = NULL;
    PyObject *exception_keeper_type_90;
    PyObject *exception_keeper_value_90;
    PyTracebackObject *exception_keeper_tb_90;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_90;
    PyObject *exception_keeper_type_91;
    PyObject *exception_keeper_value_91;
    PyTracebackObject *exception_keeper_tb_91;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_91;
    PyObject *exception_keeper_type_92;
    PyObject *exception_keeper_value_92;
    PyTracebackObject *exception_keeper_tb_92;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_92;
    PyObject *locals_xlwt$BIFFRecords$$$class__31_XFRecord_791 = NULL;
    struct Nuitka_FrameObject *frame_e50b2904296655817fac37212bb44d8e_32;
    NUITKA_MAY_BE_UNUSED char const *type_description_32 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e50b2904296655817fac37212bb44d8e_32 = NULL;
    PyObject *exception_keeper_type_93;
    PyObject *exception_keeper_value_93;
    PyTracebackObject *exception_keeper_tb_93;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_93;
    PyObject *exception_keeper_type_94;
    PyObject *exception_keeper_value_94;
    PyTracebackObject *exception_keeper_tb_94;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_94;
    PyObject *exception_keeper_type_95;
    PyObject *exception_keeper_value_95;
    PyTracebackObject *exception_keeper_tb_95;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_95;
    PyObject *locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988 = NULL;
    struct Nuitka_FrameObject *frame_be74ee3365a0729e839e44f2456dae4c_33;
    NUITKA_MAY_BE_UNUSED char const *type_description_33 = NULL;
    static struct Nuitka_FrameObject *cache_frame_be74ee3365a0729e839e44f2456dae4c_33 = NULL;
    PyObject *exception_keeper_type_96;
    PyObject *exception_keeper_value_96;
    PyTracebackObject *exception_keeper_tb_96;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_96;
    PyObject *exception_keeper_type_97;
    PyObject *exception_keeper_value_97;
    PyTracebackObject *exception_keeper_tb_97;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_97;
    PyObject *exception_keeper_type_98;
    PyObject *exception_keeper_value_98;
    PyTracebackObject *exception_keeper_tb_98;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_98;
    PyObject *locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027 = NULL;
    struct Nuitka_FrameObject *frame_37590bfdc658e8c7f52448be0f0de734_34;
    NUITKA_MAY_BE_UNUSED char const *type_description_34 = NULL;
    static struct Nuitka_FrameObject *cache_frame_37590bfdc658e8c7f52448be0f0de734_34 = NULL;
    PyObject *exception_keeper_type_99;
    PyObject *exception_keeper_value_99;
    PyTracebackObject *exception_keeper_tb_99;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_99;
    PyObject *exception_keeper_type_100;
    PyObject *exception_keeper_value_100;
    PyTracebackObject *exception_keeper_tb_100;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_100;
    PyObject *exception_keeper_type_101;
    PyObject *exception_keeper_value_101;
    PyTracebackObject *exception_keeper_tb_101;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_101;
    PyObject *locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082 = NULL;
    struct Nuitka_FrameObject *frame_fb361f9d0e6a182ca93af130c75a50b2_35;
    NUITKA_MAY_BE_UNUSED char const *type_description_35 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35 = NULL;
    PyObject *exception_keeper_type_102;
    PyObject *exception_keeper_value_102;
    PyTracebackObject *exception_keeper_tb_102;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_102;
    PyObject *exception_keeper_type_103;
    PyObject *exception_keeper_value_103;
    PyTracebackObject *exception_keeper_tb_103;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_103;
    PyObject *exception_keeper_type_104;
    PyObject *exception_keeper_value_104;
    PyTracebackObject *exception_keeper_tb_104;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_104;
    PyObject *locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115 = NULL;
    struct Nuitka_FrameObject *frame_fead5254e6910aca50851e0d22b77d62_36;
    NUITKA_MAY_BE_UNUSED char const *type_description_36 = NULL;
    static struct Nuitka_FrameObject *cache_frame_fead5254e6910aca50851e0d22b77d62_36 = NULL;
    PyObject *exception_keeper_type_105;
    PyObject *exception_keeper_value_105;
    PyTracebackObject *exception_keeper_tb_105;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_105;
    PyObject *exception_keeper_type_106;
    PyObject *exception_keeper_value_106;
    PyTracebackObject *exception_keeper_tb_106;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_106;
    PyObject *exception_keeper_type_107;
    PyObject *exception_keeper_value_107;
    PyTracebackObject *exception_keeper_tb_107;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_107;
    PyObject *locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148 = NULL;
    struct Nuitka_FrameObject *frame_71dfa77e0090cb598bd714737eb7d809_37;
    NUITKA_MAY_BE_UNUSED char const *type_description_37 = NULL;
    static struct Nuitka_FrameObject *cache_frame_71dfa77e0090cb598bd714737eb7d809_37 = NULL;
    PyObject *exception_keeper_type_108;
    PyObject *exception_keeper_value_108;
    PyTracebackObject *exception_keeper_tb_108;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_108;
    PyObject *exception_keeper_type_109;
    PyObject *exception_keeper_value_109;
    PyTracebackObject *exception_keeper_tb_109;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_109;
    PyObject *exception_keeper_type_110;
    PyObject *exception_keeper_value_110;
    PyTracebackObject *exception_keeper_tb_110;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_110;
    PyObject *locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168 = NULL;
    struct Nuitka_FrameObject *frame_e9649dbd698081b9d5f1a8ee1bac32ff_38;
    NUITKA_MAY_BE_UNUSED char const *type_description_38 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38 = NULL;
    PyObject *exception_keeper_type_111;
    PyObject *exception_keeper_value_111;
    PyTracebackObject *exception_keeper_tb_111;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_111;
    PyObject *exception_keeper_type_112;
    PyObject *exception_keeper_value_112;
    PyTracebackObject *exception_keeper_tb_112;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_112;
    PyObject *exception_keeper_type_113;
    PyObject *exception_keeper_value_113;
    PyTracebackObject *exception_keeper_tb_113;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_113;
    PyObject *locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213 = NULL;
    struct Nuitka_FrameObject *frame_60f323f0adceb50b521402f588e9ed7c_39;
    NUITKA_MAY_BE_UNUSED char const *type_description_39 = NULL;
    static struct Nuitka_FrameObject *cache_frame_60f323f0adceb50b521402f588e9ed7c_39 = NULL;
    PyObject *exception_keeper_type_114;
    PyObject *exception_keeper_value_114;
    PyTracebackObject *exception_keeper_tb_114;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_114;
    PyObject *exception_keeper_type_115;
    PyObject *exception_keeper_value_115;
    PyTracebackObject *exception_keeper_tb_115;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_115;
    PyObject *exception_keeper_type_116;
    PyObject *exception_keeper_value_116;
    PyTracebackObject *exception_keeper_tb_116;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_116;
    PyObject *locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236 = NULL;
    struct Nuitka_FrameObject *frame_47ccf13e66f6ac61a011a47329c53a4b_40;
    NUITKA_MAY_BE_UNUSED char const *type_description_40 = NULL;
    static struct Nuitka_FrameObject *cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40 = NULL;
    PyObject *exception_keeper_type_117;
    PyObject *exception_keeper_value_117;
    PyTracebackObject *exception_keeper_tb_117;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_117;
    PyObject *exception_keeper_type_118;
    PyObject *exception_keeper_value_118;
    PyTracebackObject *exception_keeper_tb_118;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_118;
    PyObject *exception_keeper_type_119;
    PyObject *exception_keeper_value_119;
    PyTracebackObject *exception_keeper_tb_119;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_119;
    PyObject *locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309 = NULL;
    struct Nuitka_FrameObject *frame_52f176b2df23f42535d2dfb28a602c31_41;
    NUITKA_MAY_BE_UNUSED char const *type_description_41 = NULL;
    static struct Nuitka_FrameObject *cache_frame_52f176b2df23f42535d2dfb28a602c31_41 = NULL;
    PyObject *exception_keeper_type_120;
    PyObject *exception_keeper_value_120;
    PyTracebackObject *exception_keeper_tb_120;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_120;
    PyObject *exception_keeper_type_121;
    PyObject *exception_keeper_value_121;
    PyTracebackObject *exception_keeper_tb_121;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_121;
    PyObject *exception_keeper_type_122;
    PyObject *exception_keeper_value_122;
    PyTracebackObject *exception_keeper_tb_122;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_122;
    PyObject *locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392 = NULL;
    struct Nuitka_FrameObject *frame_e6579948de04ebf98f1b99b896a713f4_42;
    NUITKA_MAY_BE_UNUSED char const *type_description_42 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e6579948de04ebf98f1b99b896a713f4_42 = NULL;
    PyObject *exception_keeper_type_123;
    PyObject *exception_keeper_value_123;
    PyTracebackObject *exception_keeper_tb_123;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_123;
    PyObject *exception_keeper_type_124;
    PyObject *exception_keeper_value_124;
    PyTracebackObject *exception_keeper_tb_124;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_124;
    PyObject *exception_keeper_type_125;
    PyObject *exception_keeper_value_125;
    PyTracebackObject *exception_keeper_tb_125;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_125;
    PyObject *locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443 = NULL;
    struct Nuitka_FrameObject *frame_5d58bba435feb3d9176e957cd07d5a36_43;
    NUITKA_MAY_BE_UNUSED char const *type_description_43 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5d58bba435feb3d9176e957cd07d5a36_43 = NULL;
    PyObject *exception_keeper_type_126;
    PyObject *exception_keeper_value_126;
    PyTracebackObject *exception_keeper_tb_126;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_126;
    PyObject *exception_keeper_type_127;
    PyObject *exception_keeper_value_127;
    PyTracebackObject *exception_keeper_tb_127;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_127;
    PyObject *exception_keeper_type_128;
    PyObject *exception_keeper_value_128;
    PyTracebackObject *exception_keeper_tb_128;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_128;
    PyObject *locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454 = NULL;
    struct Nuitka_FrameObject *frame_659ce73c83fdc67382c3bdad711f5c3d_44;
    NUITKA_MAY_BE_UNUSED char const *type_description_44 = NULL;
    static struct Nuitka_FrameObject *cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44 = NULL;
    PyObject *exception_keeper_type_129;
    PyObject *exception_keeper_value_129;
    PyTracebackObject *exception_keeper_tb_129;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_129;
    PyObject *exception_keeper_type_130;
    PyObject *exception_keeper_value_130;
    PyTracebackObject *exception_keeper_tb_130;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_130;
    PyObject *exception_keeper_type_131;
    PyObject *exception_keeper_value_131;
    PyTracebackObject *exception_keeper_tb_131;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_131;
    PyObject *locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503 = NULL;
    struct Nuitka_FrameObject *frame_4ef073419cc668bd91e82aa4780efd47_45;
    NUITKA_MAY_BE_UNUSED char const *type_description_45 = NULL;
    static struct Nuitka_FrameObject *cache_frame_4ef073419cc668bd91e82aa4780efd47_45 = NULL;
    PyObject *exception_keeper_type_132;
    PyObject *exception_keeper_value_132;
    PyTracebackObject *exception_keeper_tb_132;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_132;
    PyObject *exception_keeper_type_133;
    PyObject *exception_keeper_value_133;
    PyTracebackObject *exception_keeper_tb_133;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_133;
    PyObject *exception_keeper_type_134;
    PyObject *exception_keeper_value_134;
    PyTracebackObject *exception_keeper_tb_134;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_134;
    PyObject *locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524 = NULL;
    struct Nuitka_FrameObject *frame_035b581453d59e71e72b510a88054ab9_46;
    NUITKA_MAY_BE_UNUSED char const *type_description_46 = NULL;
    static struct Nuitka_FrameObject *cache_frame_035b581453d59e71e72b510a88054ab9_46 = NULL;
    PyObject *exception_keeper_type_135;
    PyObject *exception_keeper_value_135;
    PyTracebackObject *exception_keeper_tb_135;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_135;
    PyObject *exception_keeper_type_136;
    PyObject *exception_keeper_value_136;
    PyTracebackObject *exception_keeper_tb_136;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_136;
    PyObject *exception_keeper_type_137;
    PyObject *exception_keeper_value_137;
    PyTracebackObject *exception_keeper_tb_137;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_137;
    PyObject *locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541 = NULL;
    struct Nuitka_FrameObject *frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47;
    NUITKA_MAY_BE_UNUSED char const *type_description_47 = NULL;
    static struct Nuitka_FrameObject *cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47 = NULL;
    PyObject *exception_keeper_type_138;
    PyObject *exception_keeper_value_138;
    PyTracebackObject *exception_keeper_tb_138;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_138;
    PyObject *exception_keeper_type_139;
    PyObject *exception_keeper_value_139;
    PyTracebackObject *exception_keeper_tb_139;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_139;
    PyObject *exception_keeper_type_140;
    PyObject *exception_keeper_value_140;
    PyTracebackObject *exception_keeper_tb_140;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_140;
    PyObject *locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553 = NULL;
    struct Nuitka_FrameObject *frame_49399aedf390a01df790981af0c8265a_48;
    NUITKA_MAY_BE_UNUSED char const *type_description_48 = NULL;
    static struct Nuitka_FrameObject *cache_frame_49399aedf390a01df790981af0c8265a_48 = NULL;
    PyObject *exception_keeper_type_141;
    PyObject *exception_keeper_value_141;
    PyTracebackObject *exception_keeper_tb_141;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_141;
    PyObject *exception_keeper_type_142;
    PyObject *exception_keeper_value_142;
    PyTracebackObject *exception_keeper_tb_142;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_142;
    PyObject *exception_keeper_type_143;
    PyObject *exception_keeper_value_143;
    PyTracebackObject *exception_keeper_tb_143;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_143;
    PyObject *locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562 = NULL;
    struct Nuitka_FrameObject *frame_b0dc467e698887b60e489f0e52ea2185_49;
    NUITKA_MAY_BE_UNUSED char const *type_description_49 = NULL;
    static struct Nuitka_FrameObject *cache_frame_b0dc467e698887b60e489f0e52ea2185_49 = NULL;
    PyObject *exception_keeper_type_144;
    PyObject *exception_keeper_value_144;
    PyTracebackObject *exception_keeper_tb_144;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_144;
    PyObject *exception_keeper_type_145;
    PyObject *exception_keeper_value_145;
    PyTracebackObject *exception_keeper_tb_145;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_145;
    PyObject *exception_keeper_type_146;
    PyObject *exception_keeper_value_146;
    PyTracebackObject *exception_keeper_tb_146;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_146;
    PyObject *locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572 = NULL;
    struct Nuitka_FrameObject *frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50;
    NUITKA_MAY_BE_UNUSED char const *type_description_50 = NULL;
    static struct Nuitka_FrameObject *cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50 = NULL;
    PyObject *exception_keeper_type_147;
    PyObject *exception_keeper_value_147;
    PyTracebackObject *exception_keeper_tb_147;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_147;
    PyObject *exception_keeper_type_148;
    PyObject *exception_keeper_value_148;
    PyTracebackObject *exception_keeper_tb_148;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_148;
    PyObject *exception_keeper_type_149;
    PyObject *exception_keeper_value_149;
    PyTracebackObject *exception_keeper_tb_149;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_149;
    PyObject *locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594 = NULL;
    struct Nuitka_FrameObject *frame_37446e5a2111d93541316d30618de356_51;
    NUITKA_MAY_BE_UNUSED char const *type_description_51 = NULL;
    static struct Nuitka_FrameObject *cache_frame_37446e5a2111d93541316d30618de356_51 = NULL;
    PyObject *exception_keeper_type_150;
    PyObject *exception_keeper_value_150;
    PyTracebackObject *exception_keeper_tb_150;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_150;
    PyObject *exception_keeper_type_151;
    PyObject *exception_keeper_value_151;
    PyTracebackObject *exception_keeper_tb_151;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_151;
    PyObject *exception_keeper_type_152;
    PyObject *exception_keeper_value_152;
    PyTracebackObject *exception_keeper_tb_152;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_152;
    PyObject *locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613 = NULL;
    struct Nuitka_FrameObject *frame_e374c386233b40d6ca51aa04a77e7b89_52;
    NUITKA_MAY_BE_UNUSED char const *type_description_52 = NULL;
    static struct Nuitka_FrameObject *cache_frame_e374c386233b40d6ca51aa04a77e7b89_52 = NULL;
    PyObject *exception_keeper_type_153;
    PyObject *exception_keeper_value_153;
    PyTracebackObject *exception_keeper_tb_153;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_153;
    PyObject *exception_keeper_type_154;
    PyObject *exception_keeper_value_154;
    PyTracebackObject *exception_keeper_tb_154;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_154;
    PyObject *exception_keeper_type_155;
    PyObject *exception_keeper_value_155;
    PyTracebackObject *exception_keeper_tb_155;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_155;
    PyObject *locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657 = NULL;
    struct Nuitka_FrameObject *frame_f9d029bca8c7a917ba89af906edb8305_53;
    NUITKA_MAY_BE_UNUSED char const *type_description_53 = NULL;
    static struct Nuitka_FrameObject *cache_frame_f9d029bca8c7a917ba89af906edb8305_53 = NULL;
    PyObject *exception_keeper_type_156;
    PyObject *exception_keeper_value_156;
    PyTracebackObject *exception_keeper_tb_156;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_156;
    PyObject *exception_keeper_type_157;
    PyObject *exception_keeper_value_157;
    PyTracebackObject *exception_keeper_tb_157;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_157;
    PyObject *exception_keeper_type_158;
    PyObject *exception_keeper_value_158;
    PyTracebackObject *exception_keeper_tb_158;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_158;
    PyObject *locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691 = NULL;
    struct Nuitka_FrameObject *frame_df8d05b1b2ef188f7c8026d8fe4d3254_54;
    NUITKA_MAY_BE_UNUSED char const *type_description_54 = NULL;
    static struct Nuitka_FrameObject *cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54 = NULL;
    PyObject *exception_keeper_type_159;
    PyObject *exception_keeper_value_159;
    PyTracebackObject *exception_keeper_tb_159;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_159;
    PyObject *exception_keeper_type_160;
    PyObject *exception_keeper_value_160;
    PyTracebackObject *exception_keeper_tb_160;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_160;
    PyObject *exception_keeper_type_161;
    PyObject *exception_keeper_value_161;
    PyTracebackObject *exception_keeper_tb_161;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_161;
    PyObject *locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710 = NULL;
    struct Nuitka_FrameObject *frame_c91fc6ae200aa2c49184944ca23ff1cd_55;
    NUITKA_MAY_BE_UNUSED char const *type_description_55 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55 = NULL;
    PyObject *exception_keeper_type_162;
    PyObject *exception_keeper_value_162;
    PyTracebackObject *exception_keeper_tb_162;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_162;
    PyObject *exception_keeper_type_163;
    PyObject *exception_keeper_value_163;
    PyTracebackObject *exception_keeper_tb_163;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_163;
    PyObject *exception_keeper_type_164;
    PyObject *exception_keeper_value_164;
    PyTracebackObject *exception_keeper_tb_164;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_164;
    PyObject *locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727 = NULL;
    struct Nuitka_FrameObject *frame_698264c1f95e7255beac586bba3e4976_56;
    NUITKA_MAY_BE_UNUSED char const *type_description_56 = NULL;
    static struct Nuitka_FrameObject *cache_frame_698264c1f95e7255beac586bba3e4976_56 = NULL;
    PyObject *exception_keeper_type_165;
    PyObject *exception_keeper_value_165;
    PyTracebackObject *exception_keeper_tb_165;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_165;
    PyObject *exception_keeper_type_166;
    PyObject *exception_keeper_value_166;
    PyTracebackObject *exception_keeper_tb_166;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_166;
    PyObject *exception_keeper_type_167;
    PyObject *exception_keeper_value_167;
    PyTracebackObject *exception_keeper_tb_167;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_167;
    PyObject *locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747 = NULL;
    struct Nuitka_FrameObject *frame_8987c5e333df8307c65806c9e7ea5ece_57;
    NUITKA_MAY_BE_UNUSED char const *type_description_57 = NULL;
    static struct Nuitka_FrameObject *cache_frame_8987c5e333df8307c65806c9e7ea5ece_57 = NULL;
    PyObject *exception_keeper_type_168;
    PyObject *exception_keeper_value_168;
    PyTracebackObject *exception_keeper_tb_168;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_168;
    PyObject *exception_keeper_type_169;
    PyObject *exception_keeper_value_169;
    PyTracebackObject *exception_keeper_tb_169;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_169;
    PyObject *exception_keeper_type_170;
    PyObject *exception_keeper_value_170;
    PyTracebackObject *exception_keeper_tb_170;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_170;
    PyObject *locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762 = NULL;
    struct Nuitka_FrameObject *frame_bee931302d6d7c04ed91e8db13caec43_58;
    NUITKA_MAY_BE_UNUSED char const *type_description_58 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bee931302d6d7c04ed91e8db13caec43_58 = NULL;
    PyObject *exception_keeper_type_171;
    PyObject *exception_keeper_value_171;
    PyTracebackObject *exception_keeper_tb_171;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_171;
    PyObject *exception_keeper_type_172;
    PyObject *exception_keeper_value_172;
    PyTracebackObject *exception_keeper_tb_172;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_172;
    PyObject *exception_keeper_type_173;
    PyObject *exception_keeper_value_173;
    PyTracebackObject *exception_keeper_tb_173;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_173;
    PyObject *locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779 = NULL;
    struct Nuitka_FrameObject *frame_834022953fc71d0d186819157ff38c61_59;
    NUITKA_MAY_BE_UNUSED char const *type_description_59 = NULL;
    static struct Nuitka_FrameObject *cache_frame_834022953fc71d0d186819157ff38c61_59 = NULL;
    PyObject *exception_keeper_type_174;
    PyObject *exception_keeper_value_174;
    PyTracebackObject *exception_keeper_tb_174;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_174;
    PyObject *exception_keeper_type_175;
    PyObject *exception_keeper_value_175;
    PyTracebackObject *exception_keeper_tb_175;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_175;
    PyObject *exception_keeper_type_176;
    PyObject *exception_keeper_value_176;
    PyTracebackObject *exception_keeper_tb_176;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_176;
    PyObject *locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797 = NULL;
    struct Nuitka_FrameObject *frame_9bf27a23d2621973323203e1e5e4c776_60;
    NUITKA_MAY_BE_UNUSED char const *type_description_60 = NULL;
    static struct Nuitka_FrameObject *cache_frame_9bf27a23d2621973323203e1e5e4c776_60 = NULL;
    PyObject *exception_keeper_type_177;
    PyObject *exception_keeper_value_177;
    PyTracebackObject *exception_keeper_tb_177;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_177;
    PyObject *exception_keeper_type_178;
    PyObject *exception_keeper_value_178;
    PyTracebackObject *exception_keeper_tb_178;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_178;
    PyObject *exception_keeper_type_179;
    PyObject *exception_keeper_value_179;
    PyTracebackObject *exception_keeper_tb_179;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_179;
    PyObject *locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814 = NULL;
    struct Nuitka_FrameObject *frame_915114ef9d3450c26095aa1c64f5cff8_61;
    NUITKA_MAY_BE_UNUSED char const *type_description_61 = NULL;
    static struct Nuitka_FrameObject *cache_frame_915114ef9d3450c26095aa1c64f5cff8_61 = NULL;
    PyObject *exception_keeper_type_180;
    PyObject *exception_keeper_value_180;
    PyTracebackObject *exception_keeper_tb_180;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_180;
    PyObject *exception_keeper_type_181;
    PyObject *exception_keeper_value_181;
    PyTracebackObject *exception_keeper_tb_181;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_181;
    PyObject *exception_keeper_type_182;
    PyObject *exception_keeper_value_182;
    PyTracebackObject *exception_keeper_tb_182;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_182;
    PyObject *locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831 = NULL;
    struct Nuitka_FrameObject *frame_05e77e612c40531fa5a2e138b677bf86_62;
    NUITKA_MAY_BE_UNUSED char const *type_description_62 = NULL;
    static struct Nuitka_FrameObject *cache_frame_05e77e612c40531fa5a2e138b677bf86_62 = NULL;
    PyObject *exception_keeper_type_183;
    PyObject *exception_keeper_value_183;
    PyTracebackObject *exception_keeper_tb_183;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_183;
    PyObject *exception_keeper_type_184;
    PyObject *exception_keeper_value_184;
    PyTracebackObject *exception_keeper_tb_184;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_184;
    PyObject *exception_keeper_type_185;
    PyObject *exception_keeper_value_185;
    PyTracebackObject *exception_keeper_tb_185;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_185;
    PyObject *locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848 = NULL;
    struct Nuitka_FrameObject *frame_3308b9c1b29985c42c72dff729bd22e2_63;
    NUITKA_MAY_BE_UNUSED char const *type_description_63 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3308b9c1b29985c42c72dff729bd22e2_63 = NULL;
    PyObject *exception_keeper_type_186;
    PyObject *exception_keeper_value_186;
    PyTracebackObject *exception_keeper_tb_186;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_186;
    PyObject *exception_keeper_type_187;
    PyObject *exception_keeper_value_187;
    PyTracebackObject *exception_keeper_tb_187;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_187;
    PyObject *exception_keeper_type_188;
    PyObject *exception_keeper_value_188;
    PyTracebackObject *exception_keeper_tb_188;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_188;
    PyObject *locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871 = NULL;
    struct Nuitka_FrameObject *frame_bb4461a74cd64b13c71a398ee47bf2dd_64;
    NUITKA_MAY_BE_UNUSED char const *type_description_64 = NULL;
    static struct Nuitka_FrameObject *cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64 = NULL;
    PyObject *exception_keeper_type_189;
    PyObject *exception_keeper_value_189;
    PyTracebackObject *exception_keeper_tb_189;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_189;
    PyObject *exception_keeper_type_190;
    PyObject *exception_keeper_value_190;
    PyTracebackObject *exception_keeper_tb_190;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_190;
    PyObject *exception_keeper_type_191;
    PyObject *exception_keeper_value_191;
    PyTracebackObject *exception_keeper_tb_191;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_191;
    PyObject *locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888 = NULL;
    struct Nuitka_FrameObject *frame_3e04e45c250346b1dc880d5576b2b21c_65;
    NUITKA_MAY_BE_UNUSED char const *type_description_65 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3e04e45c250346b1dc880d5576b2b21c_65 = NULL;
    PyObject *exception_keeper_type_192;
    PyObject *exception_keeper_value_192;
    PyTracebackObject *exception_keeper_tb_192;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_192;
    PyObject *exception_keeper_type_193;
    PyObject *exception_keeper_value_193;
    PyTracebackObject *exception_keeper_tb_193;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_193;
    PyObject *exception_keeper_type_194;
    PyObject *exception_keeper_value_194;
    PyTracebackObject *exception_keeper_tb_194;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_194;
    PyObject *locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914 = NULL;
    struct Nuitka_FrameObject *frame_420c74893f5ac550a2780b8b6f23f4e1_66;
    NUITKA_MAY_BE_UNUSED char const *type_description_66 = NULL;
    static struct Nuitka_FrameObject *cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66 = NULL;
    PyObject *exception_keeper_type_195;
    PyObject *exception_keeper_value_195;
    PyTracebackObject *exception_keeper_tb_195;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_195;
    PyObject *exception_keeper_type_196;
    PyObject *exception_keeper_value_196;
    PyTracebackObject *exception_keeper_tb_196;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_196;
    PyObject *exception_keeper_type_197;
    PyObject *exception_keeper_value_197;
    PyTracebackObject *exception_keeper_tb_197;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_197;
    PyObject *locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941 = NULL;
    struct Nuitka_FrameObject *frame_3f229872e1d9b508ea65b444089c9772_67;
    NUITKA_MAY_BE_UNUSED char const *type_description_67 = NULL;
    static struct Nuitka_FrameObject *cache_frame_3f229872e1d9b508ea65b444089c9772_67 = NULL;
    PyObject *exception_keeper_type_198;
    PyObject *exception_keeper_value_198;
    PyTracebackObject *exception_keeper_tb_198;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_198;
    PyObject *exception_keeper_type_199;
    PyObject *exception_keeper_value_199;
    PyTracebackObject *exception_keeper_tb_199;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_199;
    PyObject *exception_keeper_type_200;
    PyObject *exception_keeper_value_200;
    PyTracebackObject *exception_keeper_tb_200;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_200;
    PyObject *locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007 = NULL;
    struct Nuitka_FrameObject *frame_428cc430c5cebac713e1ec07decdff67_68;
    NUITKA_MAY_BE_UNUSED char const *type_description_68 = NULL;
    static struct Nuitka_FrameObject *cache_frame_428cc430c5cebac713e1ec07decdff67_68 = NULL;
    PyObject *exception_keeper_type_201;
    PyObject *exception_keeper_value_201;
    PyTracebackObject *exception_keeper_tb_201;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_201;
    PyObject *exception_keeper_type_202;
    PyObject *exception_keeper_value_202;
    PyTracebackObject *exception_keeper_tb_202;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_202;
    PyObject *exception_keeper_type_203;
    PyObject *exception_keeper_value_203;
    PyTracebackObject *exception_keeper_tb_203;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_203;
    PyObject *locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017 = NULL;
    struct Nuitka_FrameObject *frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69;
    NUITKA_MAY_BE_UNUSED char const *type_description_69 = NULL;
    static struct Nuitka_FrameObject *cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69 = NULL;
    PyObject *exception_keeper_type_204;
    PyObject *exception_keeper_value_204;
    PyTracebackObject *exception_keeper_tb_204;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_204;
    PyObject *exception_keeper_type_205;
    PyObject *exception_keeper_value_205;
    PyTracebackObject *exception_keeper_tb_205;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_205;
    PyObject *exception_keeper_type_206;
    PyObject *exception_keeper_value_206;
    PyTracebackObject *exception_keeper_tb_206;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_206;
    PyObject *locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035 = NULL;
    struct Nuitka_FrameObject *frame_37535882bc8300a848a9f37e914f83db_70;
    NUITKA_MAY_BE_UNUSED char const *type_description_70 = NULL;
    static struct Nuitka_FrameObject *cache_frame_37535882bc8300a848a9f37e914f83db_70 = NULL;
    PyObject *exception_keeper_type_207;
    PyObject *exception_keeper_value_207;
    PyTracebackObject *exception_keeper_tb_207;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_207;
    PyObject *exception_keeper_type_208;
    PyObject *exception_keeper_value_208;
    PyTracebackObject *exception_keeper_tb_208;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_208;
    PyObject *exception_keeper_type_209;
    PyObject *exception_keeper_value_209;
    PyTracebackObject *exception_keeper_tb_209;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_209;
    PyObject *locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053 = NULL;
    struct Nuitka_FrameObject *frame_9110c19c45fe954399b4d74c6b87570c_71;
    NUITKA_MAY_BE_UNUSED char const *type_description_71 = NULL;
    static struct Nuitka_FrameObject *cache_frame_9110c19c45fe954399b4d74c6b87570c_71 = NULL;
    PyObject *exception_keeper_type_210;
    PyObject *exception_keeper_value_210;
    PyTracebackObject *exception_keeper_tb_210;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_210;
    PyObject *exception_keeper_type_211;
    PyObject *exception_keeper_value_211;
    PyTracebackObject *exception_keeper_tb_211;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_211;
    PyObject *exception_keeper_type_212;
    PyObject *exception_keeper_value_212;
    PyTracebackObject *exception_keeper_tb_212;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_212;
    PyObject *locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071 = NULL;
    struct Nuitka_FrameObject *frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72;
    NUITKA_MAY_BE_UNUSED char const *type_description_72 = NULL;
    static struct Nuitka_FrameObject *cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72 = NULL;
    PyObject *exception_keeper_type_213;
    PyObject *exception_keeper_value_213;
    PyTracebackObject *exception_keeper_tb_213;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_213;
    PyObject *exception_keeper_type_214;
    PyObject *exception_keeper_value_214;
    PyTracebackObject *exception_keeper_tb_214;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_214;
    PyObject *exception_keeper_type_215;
    PyObject *exception_keeper_value_215;
    PyTracebackObject *exception_keeper_tb_215;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_215;
    PyObject *locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086 = NULL;
    struct Nuitka_FrameObject *frame_2444ccdaada2cc63083cc0ad74fe2f85_73;
    NUITKA_MAY_BE_UNUSED char const *type_description_73 = NULL;
    static struct Nuitka_FrameObject *cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73 = NULL;
    PyObject *exception_keeper_type_216;
    PyObject *exception_keeper_value_216;
    PyTracebackObject *exception_keeper_tb_216;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_216;
    PyObject *exception_keeper_type_217;
    PyObject *exception_keeper_value_217;
    PyTracebackObject *exception_keeper_tb_217;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_217;
    PyObject *exception_keeper_type_218;
    PyObject *exception_keeper_value_218;
    PyTracebackObject *exception_keeper_tb_218;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_218;
    PyObject *locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102 = NULL;
    struct Nuitka_FrameObject *frame_034ad0af446622c3ecd8ba9adc3a33cc_74;
    NUITKA_MAY_BE_UNUSED char const *type_description_74 = NULL;
    static struct Nuitka_FrameObject *cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74 = NULL;
    PyObject *exception_keeper_type_219;
    PyObject *exception_keeper_value_219;
    PyTracebackObject *exception_keeper_tb_219;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_219;
    PyObject *exception_keeper_type_220;
    PyObject *exception_keeper_value_220;
    PyTracebackObject *exception_keeper_tb_220;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_220;
    PyObject *exception_keeper_type_221;
    PyObject *exception_keeper_value_221;
    PyTracebackObject *exception_keeper_tb_221;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_221;
    PyObject *locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117 = NULL;
    struct Nuitka_FrameObject *frame_7992ed49c326376cded28b8fcb250867_75;
    NUITKA_MAY_BE_UNUSED char const *type_description_75 = NULL;
    static struct Nuitka_FrameObject *cache_frame_7992ed49c326376cded28b8fcb250867_75 = NULL;
    PyObject *exception_keeper_type_222;
    PyObject *exception_keeper_value_222;
    PyTracebackObject *exception_keeper_tb_222;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_222;
    PyObject *exception_keeper_type_223;
    PyObject *exception_keeper_value_223;
    PyTracebackObject *exception_keeper_tb_223;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_223;
    PyObject *exception_keeper_type_224;
    PyObject *exception_keeper_value_224;
    PyTracebackObject *exception_keeper_tb_224;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_224;
    PyObject *locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283 = NULL;
    struct Nuitka_FrameObject *frame_1a39e3c6afe661befd8785a2fb1c282b_76;
    NUITKA_MAY_BE_UNUSED char const *type_description_76 = NULL;
    static struct Nuitka_FrameObject *cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76 = NULL;
    PyObject *exception_keeper_type_225;
    PyObject *exception_keeper_value_225;
    PyTracebackObject *exception_keeper_tb_225;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_225;
    PyObject *exception_keeper_type_226;
    PyObject *exception_keeper_value_226;
    PyTracebackObject *exception_keeper_tb_226;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_226;
    PyObject *exception_keeper_type_227;
    PyObject *exception_keeper_value_227;
    PyTracebackObject *exception_keeper_tb_227;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_227;
    PyObject *locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349 = NULL;
    struct Nuitka_FrameObject *frame_1b61623f19ea6c773d273d92b82ad4ee_77;
    NUITKA_MAY_BE_UNUSED char const *type_description_77 = NULL;
    static struct Nuitka_FrameObject *cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77 = NULL;
    PyObject *exception_keeper_type_228;
    PyObject *exception_keeper_value_228;
    PyTracebackObject *exception_keeper_tb_228;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_228;
    PyObject *exception_keeper_type_229;
    PyObject *exception_keeper_value_229;
    PyTracebackObject *exception_keeper_tb_229;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_229;
    PyObject *exception_keeper_type_230;
    PyObject *exception_keeper_value_230;
    PyTracebackObject *exception_keeper_tb_230;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_230;
    PyObject *locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388 = NULL;
    struct Nuitka_FrameObject *frame_5035e25540c4e70761378104f51a1dca_78;
    NUITKA_MAY_BE_UNUSED char const *type_description_78 = NULL;
    static struct Nuitka_FrameObject *cache_frame_5035e25540c4e70761378104f51a1dca_78 = NULL;
    PyObject *exception_keeper_type_231;
    PyObject *exception_keeper_value_231;
    PyTracebackObject *exception_keeper_tb_231;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_231;
    PyObject *exception_keeper_type_232;
    PyObject *exception_keeper_value_232;
    PyTracebackObject *exception_keeper_tb_232;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_232;
    PyObject *exception_keeper_type_233;
    PyObject *exception_keeper_value_233;
    PyTracebackObject *exception_keeper_tb_233;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_233;
    PyObject *locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399 = NULL;
    struct Nuitka_FrameObject *frame_418ffe1546171364aabe614fca25901a_79;
    NUITKA_MAY_BE_UNUSED char const *type_description_79 = NULL;
    static struct Nuitka_FrameObject *cache_frame_418ffe1546171364aabe614fca25901a_79 = NULL;
    PyObject *exception_keeper_type_234;
    PyObject *exception_keeper_value_234;
    PyTracebackObject *exception_keeper_tb_234;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_234;
    PyObject *exception_keeper_type_235;
    PyObject *exception_keeper_value_235;
    PyTracebackObject *exception_keeper_tb_235;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_235;
    PyObject *exception_keeper_type_236;
    PyObject *exception_keeper_value_236;
    PyTracebackObject *exception_keeper_tb_236;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_236;
    PyObject *locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414 = NULL;
    struct Nuitka_FrameObject *frame_c66154f52b7ee4ea1e98d18dee65f508_80;
    NUITKA_MAY_BE_UNUSED char const *type_description_80 = NULL;
    static struct Nuitka_FrameObject *cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80 = NULL;
    PyObject *exception_keeper_type_237;
    PyObject *exception_keeper_value_237;
    PyTracebackObject *exception_keeper_tb_237;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_237;
    PyObject *exception_keeper_type_238;
    PyObject *exception_keeper_value_238;
    PyTracebackObject *exception_keeper_tb_238;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_238;
    PyObject *exception_keeper_type_239;
    PyObject *exception_keeper_value_239;
    PyTracebackObject *exception_keeper_tb_239;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_239;
    PyObject *locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428 = NULL;
    struct Nuitka_FrameObject *frame_26b6e5472ab4c32d26e93d4434d6e615_81;
    NUITKA_MAY_BE_UNUSED char const *type_description_81 = NULL;
    static struct Nuitka_FrameObject *cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81 = NULL;
    PyObject *exception_keeper_type_240;
    PyObject *exception_keeper_value_240;
    PyTracebackObject *exception_keeper_tb_240;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_240;
    PyObject *exception_keeper_type_241;
    PyObject *exception_keeper_value_241;
    PyTracebackObject *exception_keeper_tb_241;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_241;
    PyObject *exception_keeper_type_242;
    PyObject *exception_keeper_value_242;
    PyTracebackObject *exception_keeper_tb_242;
    NUITKA_MAY_BE_UNUSED int exception_keeper_lineno_242;

    // Module code.
    {
        PyObject *tmp_assign_source_1;
        tmp_assign_source_1 = Py_None;
        UPDATE_STRING_DICT0(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[192], tmp_assign_source_1);
    }
    {
        PyObject *tmp_assign_source_2;
        tmp_assign_source_2 = module_filename_obj;
        UPDATE_STRING_DICT0(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[193], tmp_assign_source_2);
    }
    // Frame without reuse.
    frame_88dc2af7ecc241487f3fbeb03bff5bd6 = MAKE_MODULE_FRAME(codeobj_88dc2af7ecc241487f3fbeb03bff5bd6, module_xlwt$BIFFRecords);

    // Push the new frame as the currently active one, and we should be exclusively
    // owning it.
    pushFrameStack(frame_88dc2af7ecc241487f3fbeb03bff5bd6);
    assert(Py_REFCNT(frame_88dc2af7ecc241487f3fbeb03bff5bd6) == 2);

    // Framed code:
    {
        PyObject *tmp_assattr_value_1;
        PyObject *tmp_assattr_target_1;
        tmp_assattr_value_1 = module_filename_obj;
        tmp_assattr_target_1 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[194]);

        if (unlikely(tmp_assattr_target_1 == NULL)) {
            tmp_assattr_target_1 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[194]);
        }

        assert(!(tmp_assattr_target_1 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_1, mod_consts[195], tmp_assattr_value_1);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assattr_value_2;
        PyObject *tmp_assattr_target_2;
        tmp_assattr_value_2 = Py_True;
        tmp_assattr_target_2 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[194]);

        if (unlikely(tmp_assattr_target_2 == NULL)) {
            tmp_assattr_target_2 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[194]);
        }

        assert(!(tmp_assattr_target_2 == NULL));
        tmp_result = SET_ATTRIBUTE(tmp_assattr_target_2, mod_consts[196], tmp_assattr_value_2);
        if (tmp_result == false) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1;

            goto frame_exception_exit_1;
        }
    }
    {
        PyObject *tmp_assign_source_3;
        tmp_assign_source_3 = Py_None;
        UPDATE_STRING_DICT0(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[197], tmp_assign_source_3);
    }
    {
        PyObject *tmp_assign_source_4;
        PyObject *tmp_import_name_from_1;
        PyObject *tmp_name_value_1;
        PyObject *tmp_globals_arg_value_1;
        PyObject *tmp_locals_arg_value_1;
        PyObject *tmp_fromlist_value_1;
        PyObject *tmp_level_value_1;
        tmp_name_value_1 = mod_consts[198];
        tmp_globals_arg_value_1 = (PyObject *)moduledict_xlwt$BIFFRecords;
        tmp_locals_arg_value_1 = Py_None;
        tmp_fromlist_value_1 = mod_consts[199];
        tmp_level_value_1 = mod_consts[4];
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2;
        tmp_import_name_from_1 = IMPORT_MODULE5(tmp_name_value_1, tmp_globals_arg_value_1, tmp_locals_arg_value_1, tmp_fromlist_value_1, tmp_level_value_1);
        if (tmp_import_name_from_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto frame_exception_exit_1;
        }
        if (PyModule_Check(tmp_import_name_from_1)) {
            tmp_assign_source_4 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_1,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[21],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_4 = IMPORT_NAME(tmp_import_name_from_1, mod_consts[21]);
        }

        Py_DECREF(tmp_import_name_from_1);
        if (tmp_assign_source_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2;

            goto frame_exception_exit_1;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[21], tmp_assign_source_4);
    }
    {
        PyObject *tmp_assign_source_5;
        PyObject *tmp_name_value_2;
        PyObject *tmp_globals_arg_value_2;
        PyObject *tmp_locals_arg_value_2;
        PyObject *tmp_fromlist_value_2;
        PyObject *tmp_level_value_2;
        tmp_name_value_2 = mod_consts[200];
        tmp_globals_arg_value_2 = (PyObject *)moduledict_xlwt$BIFFRecords;
        tmp_locals_arg_value_2 = Py_None;
        tmp_fromlist_value_2 = mod_consts[201];
        tmp_level_value_2 = mod_consts[12];
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 3;
        tmp_assign_source_5 = IMPORT_MODULE5(tmp_name_value_2, tmp_globals_arg_value_2, tmp_locals_arg_value_2, tmp_fromlist_value_2, tmp_level_value_2);
        if (tmp_assign_source_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_1__module == NULL);
        tmp_import_from_1__module = tmp_assign_source_5;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_6;
        PyObject *tmp_import_name_from_2;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_2 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_2)) {
            tmp_assign_source_6 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_2,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[89],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_6 = IMPORT_NAME(tmp_import_name_from_2, mod_consts[89]);
        }

        if (tmp_assign_source_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[89], tmp_assign_source_6);
    }
    {
        PyObject *tmp_assign_source_7;
        PyObject *tmp_import_name_from_3;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_3 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_3)) {
            tmp_assign_source_7 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_3,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[37],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_7 = IMPORT_NAME(tmp_import_name_from_3, mod_consts[37]);
        }

        if (tmp_assign_source_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[37], tmp_assign_source_7);
    }
    {
        PyObject *tmp_assign_source_8;
        PyObject *tmp_import_name_from_4;
        CHECK_OBJECT(tmp_import_from_1__module);
        tmp_import_name_from_4 = tmp_import_from_1__module;
        if (PyModule_Check(tmp_import_name_from_4)) {
            tmp_assign_source_8 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_4,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[43],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_8 = IMPORT_NAME(tmp_import_name_from_4, mod_consts[43]);
        }

        if (tmp_assign_source_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 3;

            goto try_except_handler_1;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[43], tmp_assign_source_8);
    }
    goto try_end_1;
    // Exception handler code:
    try_except_handler_1:;
    exception_keeper_type_1 = exception_type;
    exception_keeper_value_1 = exception_value;
    exception_keeper_tb_1 = exception_tb;
    exception_keeper_lineno_1 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_1;
    exception_value = exception_keeper_value_1;
    exception_tb = exception_keeper_tb_1;
    exception_lineno = exception_keeper_lineno_1;

    goto frame_exception_exit_1;
    // End of try:
    try_end_1:;
    CHECK_OBJECT(tmp_import_from_1__module);
    Py_DECREF(tmp_import_from_1__module);
    tmp_import_from_1__module = NULL;
    {
        PyObject *tmp_assign_source_9;
        PyObject *tmp_name_value_3;
        PyObject *tmp_globals_arg_value_3;
        PyObject *tmp_locals_arg_value_3;
        PyObject *tmp_fromlist_value_3;
        PyObject *tmp_level_value_3;
        tmp_name_value_3 = mod_consts[202];
        tmp_globals_arg_value_3 = (PyObject *)moduledict_xlwt$BIFFRecords;
        tmp_locals_arg_value_3 = Py_None;
        tmp_fromlist_value_3 = mod_consts[203];
        tmp_level_value_3 = mod_consts[12];
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 4;
        tmp_assign_source_9 = IMPORT_MODULE5(tmp_name_value_3, tmp_globals_arg_value_3, tmp_locals_arg_value_3, tmp_fromlist_value_3, tmp_level_value_3);
        if (tmp_assign_source_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto frame_exception_exit_1;
        }
        assert(tmp_import_from_2__module == NULL);
        tmp_import_from_2__module = tmp_assign_source_9;
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_10;
        PyObject *tmp_import_name_from_5;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_5 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_5)) {
            tmp_assign_source_10 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_5,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[27],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_10 = IMPORT_NAME(tmp_import_name_from_5, mod_consts[27]);
        }

        if (tmp_assign_source_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[27], tmp_assign_source_10);
    }
    {
        PyObject *tmp_assign_source_11;
        PyObject *tmp_import_name_from_6;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_6 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_6)) {
            tmp_assign_source_11 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_6,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[11],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_11 = IMPORT_NAME(tmp_import_name_from_6, mod_consts[11]);
        }

        if (tmp_assign_source_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[11], tmp_assign_source_11);
    }
    {
        PyObject *tmp_assign_source_12;
        PyObject *tmp_import_name_from_7;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_7 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_7)) {
            tmp_assign_source_12 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_7,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[10],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_12 = IMPORT_NAME(tmp_import_name_from_7, mod_consts[10]);
        }

        if (tmp_assign_source_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[10], tmp_assign_source_12);
    }
    {
        PyObject *tmp_assign_source_13;
        PyObject *tmp_import_name_from_8;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_8 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_8)) {
            tmp_assign_source_13 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_8,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[182],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_13 = IMPORT_NAME(tmp_import_name_from_8, mod_consts[182]);
        }

        if (tmp_assign_source_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[182], tmp_assign_source_13);
    }
    {
        PyObject *tmp_assign_source_14;
        PyObject *tmp_import_name_from_9;
        CHECK_OBJECT(tmp_import_from_2__module);
        tmp_import_name_from_9 = tmp_import_from_2__module;
        if (PyModule_Check(tmp_import_name_from_9)) {
            tmp_assign_source_14 = IMPORT_NAME_OR_MODULE(
                tmp_import_name_from_9,
                (PyObject *)moduledict_xlwt$BIFFRecords,
                mod_consts[23],
                mod_consts[4]
            );
        } else {
            tmp_assign_source_14 = IMPORT_NAME(tmp_import_name_from_9, mod_consts[23]);
        }

        if (tmp_assign_source_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 4;

            goto try_except_handler_2;
        }
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[23], tmp_assign_source_14);
    }
    goto try_end_2;
    // Exception handler code:
    try_except_handler_2:;
    exception_keeper_type_2 = exception_type;
    exception_keeper_value_2 = exception_value;
    exception_keeper_tb_2 = exception_tb;
    exception_keeper_lineno_2 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_2;
    exception_value = exception_keeper_value_2;
    exception_tb = exception_keeper_tb_2;
    exception_lineno = exception_keeper_lineno_2;

    goto frame_exception_exit_1;
    // End of try:
    try_end_2:;
    CHECK_OBJECT(tmp_import_from_2__module);
    Py_DECREF(tmp_import_from_2__module);
    tmp_import_from_2__module = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_15;
        PyObject *tmp_dircall_arg1_1;
        tmp_dircall_arg1_1 = mod_consts[204];
        Py_INCREF(tmp_dircall_arg1_1);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_1};
            tmp_assign_source_15 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        assert(tmp_class_creation_1__bases == NULL);
        tmp_class_creation_1__bases = tmp_assign_source_15;
    }
    {
        PyObject *tmp_assign_source_16;
        tmp_assign_source_16 = PyDict_New();
        assert(tmp_class_creation_1__class_decl_dict == NULL);
        tmp_class_creation_1__class_decl_dict = tmp_assign_source_16;
    }
    {
        PyObject *tmp_assign_source_17;
        PyObject *tmp_metaclass_value_1;
        bool tmp_condition_result_1;
        PyObject *tmp_key_value_1;
        PyObject *tmp_dict_arg_value_1;
        PyObject *tmp_dict_arg_value_2;
        PyObject *tmp_key_value_2;
        nuitka_bool tmp_condition_result_2;
        int tmp_truth_name_1;
        PyObject *tmp_type_arg_1;
        PyObject *tmp_expression_value_1;
        PyObject *tmp_subscript_value_1;
        PyObject *tmp_bases_value_1;
        tmp_key_value_1 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_1 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_1, tmp_key_value_1);
        assert(!(tmp_res == -1));
        tmp_condition_result_1 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_1 != false) {
            goto condexpr_true_1;
        } else {
            goto condexpr_false_1;
        }
        condexpr_true_1:;
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_2 = tmp_class_creation_1__class_decl_dict;
        tmp_key_value_2 = mod_consts[205];
        tmp_metaclass_value_1 = DICT_GET_ITEM0(tmp_dict_arg_value_2, tmp_key_value_2);
        if (tmp_metaclass_value_1 == NULL) {
            tmp_metaclass_value_1 = Py_None;
        }
        assert(!(tmp_metaclass_value_1 == NULL));
        Py_INCREF(tmp_metaclass_value_1);
        goto condexpr_end_1;
        condexpr_false_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_truth_name_1 = CHECK_IF_TRUE(tmp_class_creation_1__bases);
        if (tmp_truth_name_1 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        tmp_condition_result_2 = tmp_truth_name_1 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_2 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_2;
        } else {
            goto condexpr_false_2;
        }
        condexpr_true_2:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_expression_value_1 = tmp_class_creation_1__bases;
        tmp_subscript_value_1 = mod_consts[4];
        tmp_type_arg_1 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_1, tmp_subscript_value_1, 0);
        if (tmp_type_arg_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        tmp_metaclass_value_1 = BUILTIN_TYPE1(tmp_type_arg_1);
        Py_DECREF(tmp_type_arg_1);
        if (tmp_metaclass_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        goto condexpr_end_2;
        condexpr_false_2:;
        tmp_metaclass_value_1 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_1);
        condexpr_end_2:;
        condexpr_end_1:;
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_bases_value_1 = tmp_class_creation_1__bases;
        tmp_assign_source_17 = SELECT_METACLASS(tmp_metaclass_value_1, tmp_bases_value_1);
        Py_DECREF(tmp_metaclass_value_1);
        if (tmp_assign_source_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        assert(tmp_class_creation_1__metaclass == NULL);
        tmp_class_creation_1__metaclass = tmp_assign_source_17;
    }
    {
        bool tmp_condition_result_3;
        PyObject *tmp_key_value_3;
        PyObject *tmp_dict_arg_value_3;
        tmp_key_value_3 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_dict_arg_value_3 = tmp_class_creation_1__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_3, tmp_key_value_3);
        assert(!(tmp_res == -1));
        tmp_condition_result_3 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_3 != false) {
            goto branch_yes_1;
        } else {
            goto branch_no_1;
        }
    }
    branch_yes_1:;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_1__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 6;

        goto try_except_handler_3;
    }
    branch_no_1:;
    {
        nuitka_bool tmp_condition_result_4;
        PyObject *tmp_expression_value_2;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_2 = tmp_class_creation_1__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_2, mod_consts[206]);
        tmp_condition_result_4 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_4 == NUITKA_BOOL_TRUE) {
            goto branch_yes_2;
        } else {
            goto branch_no_2;
        }
    }
    branch_yes_2:;
    {
        PyObject *tmp_assign_source_18;
        PyObject *tmp_called_value_1;
        PyObject *tmp_expression_value_3;
        PyObject *tmp_args_value_1;
        PyObject *tmp_tuple_element_1;
        PyObject *tmp_kwargs_value_1;
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_expression_value_3 = tmp_class_creation_1__metaclass;
        tmp_called_value_1 = LOOKUP_ATTRIBUTE(tmp_expression_value_3, mod_consts[206]);
        if (tmp_called_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        tmp_tuple_element_1 = mod_consts[207];
        tmp_args_value_1 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_1, 0, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__bases);
        tmp_tuple_element_1 = tmp_class_creation_1__bases;
        PyTuple_SET_ITEM0(tmp_args_value_1, 1, tmp_tuple_element_1);
        CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
        tmp_kwargs_value_1 = tmp_class_creation_1__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 6;
        tmp_assign_source_18 = CALL_FUNCTION(tmp_called_value_1, tmp_args_value_1, tmp_kwargs_value_1);
        Py_DECREF(tmp_called_value_1);
        Py_DECREF(tmp_args_value_1);
        if (tmp_assign_source_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_18;
    }
    {
        bool tmp_condition_result_5;
        PyObject *tmp_operand_value_1;
        PyObject *tmp_expression_value_4;
        CHECK_OBJECT(tmp_class_creation_1__prepared);
        tmp_expression_value_4 = tmp_class_creation_1__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_4, mod_consts[208]);
        tmp_operand_value_1 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_1);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        tmp_condition_result_5 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_5 != false) {
            goto branch_yes_3;
        } else {
            goto branch_no_3;
        }
    }
    branch_yes_3:;
    {
        PyObject *tmp_raise_type_1;
        PyObject *tmp_raise_value_1;
        PyObject *tmp_left_value_1;
        PyObject *tmp_right_value_1;
        PyObject *tmp_tuple_element_2;
        PyObject *tmp_getattr_target_1;
        PyObject *tmp_getattr_attr_1;
        PyObject *tmp_getattr_default_1;
        tmp_raise_type_1 = PyExc_TypeError;
        tmp_left_value_1 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_1__metaclass);
        tmp_getattr_target_1 = tmp_class_creation_1__metaclass;
        tmp_getattr_attr_1 = mod_consts[210];
        tmp_getattr_default_1 = mod_consts[211];
        tmp_tuple_element_2 = BUILTIN_GETATTR(tmp_getattr_target_1, tmp_getattr_attr_1, tmp_getattr_default_1);
        if (tmp_tuple_element_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        tmp_right_value_1 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_5;
            PyObject *tmp_type_arg_2;
            PyTuple_SET_ITEM(tmp_right_value_1, 0, tmp_tuple_element_2);
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_type_arg_2 = tmp_class_creation_1__prepared;
            tmp_expression_value_5 = BUILTIN_TYPE1(tmp_type_arg_2);
            assert(!(tmp_expression_value_5 == NULL));
            tmp_tuple_element_2 = LOOKUP_ATTRIBUTE(tmp_expression_value_5, mod_consts[210]);
            Py_DECREF(tmp_expression_value_5);
            if (tmp_tuple_element_2 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6;

                goto tuple_build_exception_1;
            }
            PyTuple_SET_ITEM(tmp_right_value_1, 1, tmp_tuple_element_2);
        }
        goto tuple_build_noexception_1;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_1:;
        Py_DECREF(tmp_right_value_1);
        goto try_except_handler_3;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_1:;
        tmp_raise_value_1 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_1, tmp_right_value_1);
        Py_DECREF(tmp_right_value_1);
        if (tmp_raise_value_1 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_3;
        }
        exception_type = tmp_raise_type_1;
        Py_INCREF(tmp_raise_type_1);
        exception_value = tmp_raise_value_1;
        exception_lineno = 6;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_3;
    }
    branch_no_3:;
    goto branch_end_2;
    branch_no_2:;
    {
        PyObject *tmp_assign_source_19;
        tmp_assign_source_19 = PyDict_New();
        assert(tmp_class_creation_1__prepared == NULL);
        tmp_class_creation_1__prepared = tmp_assign_source_19;
    }
    branch_end_2:;
    {
        PyObject *tmp_assign_source_20;
        {
            PyObject *tmp_set_locals_1;
            CHECK_OBJECT(tmp_class_creation_1__prepared);
            tmp_set_locals_1 = tmp_class_creation_1__prepared;
            locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6 = tmp_set_locals_1;
            Py_INCREF(tmp_set_locals_1);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_5;
        }
        tmp_dictset_value = mod_consts[207];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_5;
        }
        if (isFrameUnusable(cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2)) {
            Py_XDECREF(cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2 = MAKE_FUNCTION_FRAME(codeobj_c593638a5b9a9f2f12e59b970e88f7d3, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2->m_type_description == NULL);
        frame_c593638a5b9a9f2f12e59b970e88f7d3_2 = cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c593638a5b9a9f2f12e59b970e88f7d3_2);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c593638a5b9a9f2f12e59b970e88f7d3_2) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[215];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[32], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 7;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }
        tmp_dictset_value = mod_consts[63];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[48], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 8;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__1___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 10;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__2_add_str();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[218], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 23;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__3_add_rt();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[220], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 36;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__4_del_str();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[222], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 53;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__5_str_index();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[224], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 60;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__6_rt_index();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[226], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 63;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__7_get_biff_record();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[228], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 66;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__8__add_to_sst();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[28], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 91;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__9__add_rt_to_sst();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[29], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 107;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__10__new_piece();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[30], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 125;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__11__save_atom();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[41], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 133;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__12__save_splitted();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[42], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 140;
            type_description_2 = "o";
            goto frame_exception_exit_2;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c593638a5b9a9f2f12e59b970e88f7d3_2);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_1;

        frame_exception_exit_2:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c593638a5b9a9f2f12e59b970e88f7d3_2);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c593638a5b9a9f2f12e59b970e88f7d3_2, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c593638a5b9a9f2f12e59b970e88f7d3_2->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c593638a5b9a9f2f12e59b970e88f7d3_2, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c593638a5b9a9f2f12e59b970e88f7d3_2,
            type_description_2,
            outline_0_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c593638a5b9a9f2f12e59b970e88f7d3_2 == cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2);
            cache_frame_c593638a5b9a9f2f12e59b970e88f7d3_2 = NULL;
        }

        assertFrameObject(frame_c593638a5b9a9f2f12e59b970e88f7d3_2);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_1;

        frame_no_exception_1:;
        goto skip_nested_handling_1;
        nested_frame_exit_1:;

        goto try_except_handler_5;
        skip_nested_handling_1:;
        {
            nuitka_bool tmp_condition_result_6;
            PyObject *tmp_cmp_expr_left_1;
            PyObject *tmp_cmp_expr_right_1;
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_cmp_expr_left_1 = tmp_class_creation_1__bases;
            tmp_cmp_expr_right_1 = mod_consts[204];
            tmp_condition_result_6 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_1, tmp_cmp_expr_right_1);
            if (tmp_condition_result_6 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6;

                goto try_except_handler_5;
            }
            if (tmp_condition_result_6 == NUITKA_BOOL_TRUE) {
                goto branch_yes_4;
            } else {
                goto branch_no_4;
            }
            assert(tmp_condition_result_6 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_4:;
        tmp_dictset_value = mod_consts[204];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 6;

            goto try_except_handler_5;
        }
        branch_no_4:;
        {
            PyObject *tmp_assign_source_21;
            PyObject *tmp_called_value_2;
            PyObject *tmp_args_value_2;
            PyObject *tmp_tuple_element_3;
            PyObject *tmp_kwargs_value_2;
            CHECK_OBJECT(tmp_class_creation_1__metaclass);
            tmp_called_value_2 = tmp_class_creation_1__metaclass;
            tmp_tuple_element_3 = mod_consts[207];
            tmp_args_value_2 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_2, 0, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__bases);
            tmp_tuple_element_3 = tmp_class_creation_1__bases;
            PyTuple_SET_ITEM0(tmp_args_value_2, 1, tmp_tuple_element_3);
            tmp_tuple_element_3 = locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6;
            PyTuple_SET_ITEM0(tmp_args_value_2, 2, tmp_tuple_element_3);
            CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
            tmp_kwargs_value_2 = tmp_class_creation_1__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 6;
            tmp_assign_source_21 = CALL_FUNCTION(tmp_called_value_2, tmp_args_value_2, tmp_kwargs_value_2);
            Py_DECREF(tmp_args_value_2);
            if (tmp_assign_source_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 6;

                goto try_except_handler_5;
            }
            assert(outline_0_var___class__ == NULL);
            outline_0_var___class__ = tmp_assign_source_21;
        }
        CHECK_OBJECT(outline_0_var___class__);
        tmp_assign_source_20 = outline_0_var___class__;
        Py_INCREF(tmp_assign_source_20);
        goto try_return_handler_5;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_5:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6);
        locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6 = NULL;
        goto try_return_handler_4;
        // Exception handler code:
        try_except_handler_5:;
        exception_keeper_type_3 = exception_type;
        exception_keeper_value_3 = exception_value;
        exception_keeper_tb_3 = exception_tb;
        exception_keeper_lineno_3 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6);
        locals_xlwt$BIFFRecords$$$class__1_SharedStringTable_6 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_3;
        exception_value = exception_keeper_value_3;
        exception_tb = exception_keeper_tb_3;
        exception_lineno = exception_keeper_lineno_3;

        goto try_except_handler_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_4:;
        CHECK_OBJECT(outline_0_var___class__);
        Py_DECREF(outline_0_var___class__);
        outline_0_var___class__ = NULL;
        goto outline_result_1;
        // Exception handler code:
        try_except_handler_4:;
        exception_keeper_type_4 = exception_type;
        exception_keeper_value_4 = exception_value;
        exception_keeper_tb_4 = exception_tb;
        exception_keeper_lineno_4 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_4;
        exception_value = exception_keeper_value_4;
        exception_tb = exception_keeper_tb_4;
        exception_lineno = exception_keeper_lineno_4;

        goto outline_exception_1;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_1:;
        exception_lineno = 6;
        goto try_except_handler_3;
        outline_result_1:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[207], tmp_assign_source_20);
    }
    goto try_end_3;
    // Exception handler code:
    try_except_handler_3:;
    exception_keeper_type_5 = exception_type;
    exception_keeper_value_5 = exception_value;
    exception_keeper_tb_5 = exception_tb;
    exception_keeper_lineno_5 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    Py_XDECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_5;
    exception_value = exception_keeper_value_5;
    exception_tb = exception_keeper_tb_5;
    exception_lineno = exception_keeper_lineno_5;

    goto frame_exception_exit_1;
    // End of try:
    try_end_3:;
    CHECK_OBJECT(tmp_class_creation_1__bases);
    Py_DECREF(tmp_class_creation_1__bases);
    tmp_class_creation_1__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_1__class_decl_dict);
    Py_DECREF(tmp_class_creation_1__class_decl_dict);
    tmp_class_creation_1__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_1__metaclass);
    Py_DECREF(tmp_class_creation_1__metaclass);
    tmp_class_creation_1__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_1__prepared);
    Py_DECREF(tmp_class_creation_1__prepared);
    tmp_class_creation_1__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_22;
        PyObject *tmp_dircall_arg1_2;
        tmp_dircall_arg1_2 = mod_consts[204];
        Py_INCREF(tmp_dircall_arg1_2);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_2};
            tmp_assign_source_22 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        assert(tmp_class_creation_2__bases == NULL);
        tmp_class_creation_2__bases = tmp_assign_source_22;
    }
    {
        PyObject *tmp_assign_source_23;
        tmp_assign_source_23 = PyDict_New();
        assert(tmp_class_creation_2__class_decl_dict == NULL);
        tmp_class_creation_2__class_decl_dict = tmp_assign_source_23;
    }
    {
        PyObject *tmp_assign_source_24;
        PyObject *tmp_metaclass_value_2;
        bool tmp_condition_result_7;
        PyObject *tmp_key_value_4;
        PyObject *tmp_dict_arg_value_4;
        PyObject *tmp_dict_arg_value_5;
        PyObject *tmp_key_value_5;
        nuitka_bool tmp_condition_result_8;
        int tmp_truth_name_2;
        PyObject *tmp_type_arg_3;
        PyObject *tmp_expression_value_6;
        PyObject *tmp_subscript_value_2;
        PyObject *tmp_bases_value_2;
        tmp_key_value_4 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_4 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_4, tmp_key_value_4);
        assert(!(tmp_res == -1));
        tmp_condition_result_7 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_7 != false) {
            goto condexpr_true_3;
        } else {
            goto condexpr_false_3;
        }
        condexpr_true_3:;
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_5 = tmp_class_creation_2__class_decl_dict;
        tmp_key_value_5 = mod_consts[205];
        tmp_metaclass_value_2 = DICT_GET_ITEM0(tmp_dict_arg_value_5, tmp_key_value_5);
        if (tmp_metaclass_value_2 == NULL) {
            tmp_metaclass_value_2 = Py_None;
        }
        assert(!(tmp_metaclass_value_2 == NULL));
        Py_INCREF(tmp_metaclass_value_2);
        goto condexpr_end_3;
        condexpr_false_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_truth_name_2 = CHECK_IF_TRUE(tmp_class_creation_2__bases);
        if (tmp_truth_name_2 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        tmp_condition_result_8 = tmp_truth_name_2 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_8 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_4;
        } else {
            goto condexpr_false_4;
        }
        condexpr_true_4:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_expression_value_6 = tmp_class_creation_2__bases;
        tmp_subscript_value_2 = mod_consts[4];
        tmp_type_arg_3 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_6, tmp_subscript_value_2, 0);
        if (tmp_type_arg_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        tmp_metaclass_value_2 = BUILTIN_TYPE1(tmp_type_arg_3);
        Py_DECREF(tmp_type_arg_3);
        if (tmp_metaclass_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        goto condexpr_end_4;
        condexpr_false_4:;
        tmp_metaclass_value_2 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_2);
        condexpr_end_4:;
        condexpr_end_3:;
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_bases_value_2 = tmp_class_creation_2__bases;
        tmp_assign_source_24 = SELECT_METACLASS(tmp_metaclass_value_2, tmp_bases_value_2);
        Py_DECREF(tmp_metaclass_value_2);
        if (tmp_assign_source_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        assert(tmp_class_creation_2__metaclass == NULL);
        tmp_class_creation_2__metaclass = tmp_assign_source_24;
    }
    {
        bool tmp_condition_result_9;
        PyObject *tmp_key_value_6;
        PyObject *tmp_dict_arg_value_6;
        tmp_key_value_6 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_dict_arg_value_6 = tmp_class_creation_2__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_6, tmp_key_value_6);
        assert(!(tmp_res == -1));
        tmp_condition_result_9 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_9 != false) {
            goto branch_yes_5;
        } else {
            goto branch_no_5;
        }
    }
    branch_yes_5:;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_2__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 169;

        goto try_except_handler_6;
    }
    branch_no_5:;
    {
        nuitka_bool tmp_condition_result_10;
        PyObject *tmp_expression_value_7;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_7 = tmp_class_creation_2__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_7, mod_consts[206]);
        tmp_condition_result_10 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_10 == NUITKA_BOOL_TRUE) {
            goto branch_yes_6;
        } else {
            goto branch_no_6;
        }
    }
    branch_yes_6:;
    {
        PyObject *tmp_assign_source_25;
        PyObject *tmp_called_value_3;
        PyObject *tmp_expression_value_8;
        PyObject *tmp_args_value_3;
        PyObject *tmp_tuple_element_4;
        PyObject *tmp_kwargs_value_3;
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_expression_value_8 = tmp_class_creation_2__metaclass;
        tmp_called_value_3 = LOOKUP_ATTRIBUTE(tmp_expression_value_8, mod_consts[206]);
        if (tmp_called_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        tmp_tuple_element_4 = mod_consts[236];
        tmp_args_value_3 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_3, 0, tmp_tuple_element_4);
        CHECK_OBJECT(tmp_class_creation_2__bases);
        tmp_tuple_element_4 = tmp_class_creation_2__bases;
        PyTuple_SET_ITEM0(tmp_args_value_3, 1, tmp_tuple_element_4);
        CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
        tmp_kwargs_value_3 = tmp_class_creation_2__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 169;
        tmp_assign_source_25 = CALL_FUNCTION(tmp_called_value_3, tmp_args_value_3, tmp_kwargs_value_3);
        Py_DECREF(tmp_called_value_3);
        Py_DECREF(tmp_args_value_3);
        if (tmp_assign_source_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_25;
    }
    {
        bool tmp_condition_result_11;
        PyObject *tmp_operand_value_2;
        PyObject *tmp_expression_value_9;
        CHECK_OBJECT(tmp_class_creation_2__prepared);
        tmp_expression_value_9 = tmp_class_creation_2__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_9, mod_consts[208]);
        tmp_operand_value_2 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_2);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        tmp_condition_result_11 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_11 != false) {
            goto branch_yes_7;
        } else {
            goto branch_no_7;
        }
    }
    branch_yes_7:;
    {
        PyObject *tmp_raise_type_2;
        PyObject *tmp_raise_value_2;
        PyObject *tmp_left_value_2;
        PyObject *tmp_right_value_2;
        PyObject *tmp_tuple_element_5;
        PyObject *tmp_getattr_target_2;
        PyObject *tmp_getattr_attr_2;
        PyObject *tmp_getattr_default_2;
        tmp_raise_type_2 = PyExc_TypeError;
        tmp_left_value_2 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_2__metaclass);
        tmp_getattr_target_2 = tmp_class_creation_2__metaclass;
        tmp_getattr_attr_2 = mod_consts[210];
        tmp_getattr_default_2 = mod_consts[211];
        tmp_tuple_element_5 = BUILTIN_GETATTR(tmp_getattr_target_2, tmp_getattr_attr_2, tmp_getattr_default_2);
        if (tmp_tuple_element_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        tmp_right_value_2 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_10;
            PyObject *tmp_type_arg_4;
            PyTuple_SET_ITEM(tmp_right_value_2, 0, tmp_tuple_element_5);
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_type_arg_4 = tmp_class_creation_2__prepared;
            tmp_expression_value_10 = BUILTIN_TYPE1(tmp_type_arg_4);
            assert(!(tmp_expression_value_10 == NULL));
            tmp_tuple_element_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_10, mod_consts[210]);
            Py_DECREF(tmp_expression_value_10);
            if (tmp_tuple_element_5 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;

                goto tuple_build_exception_2;
            }
            PyTuple_SET_ITEM(tmp_right_value_2, 1, tmp_tuple_element_5);
        }
        goto tuple_build_noexception_2;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_2:;
        Py_DECREF(tmp_right_value_2);
        goto try_except_handler_6;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_2:;
        tmp_raise_value_2 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_2, tmp_right_value_2);
        Py_DECREF(tmp_right_value_2);
        if (tmp_raise_value_2 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_6;
        }
        exception_type = tmp_raise_type_2;
        Py_INCREF(tmp_raise_type_2);
        exception_value = tmp_raise_value_2;
        exception_lineno = 169;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_6;
    }
    branch_no_7:;
    goto branch_end_6;
    branch_no_6:;
    {
        PyObject *tmp_assign_source_26;
        tmp_assign_source_26 = PyDict_New();
        assert(tmp_class_creation_2__prepared == NULL);
        tmp_class_creation_2__prepared = tmp_assign_source_26;
    }
    branch_end_6:;
    {
        PyObject *tmp_assign_source_27;
        {
            PyObject *tmp_set_locals_2;
            CHECK_OBJECT(tmp_class_creation_2__prepared);
            tmp_set_locals_2 = tmp_class_creation_2__prepared;
            locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169 = tmp_set_locals_2;
            Py_INCREF(tmp_set_locals_2);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_8;
        }
        tmp_dictset_value = mod_consts[236];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_8;
        }
        if (isFrameUnusable(cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3)) {
            Py_XDECREF(cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3 = MAKE_FUNCTION_FRAME(codeobj_3d2f6ab662e249d5c8eafe858b1a1dcf, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3->m_type_description == NULL);
        frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3 = cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[19];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169, mod_consts[58], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 171;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__13_get_rec_header();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169, mod_consts[64], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 173;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__14_get();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169, mod_consts[157], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 180;
            type_description_2 = "o";
            goto frame_exception_exit_3;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_2;

        frame_exception_exit_3:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3,
            type_description_2,
            outline_1_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3 == cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3);
            cache_frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3 = NULL;
        }

        assertFrameObject(frame_3d2f6ab662e249d5c8eafe858b1a1dcf_3);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_2;

        frame_no_exception_2:;
        goto skip_nested_handling_2;
        nested_frame_exit_2:;

        goto try_except_handler_8;
        skip_nested_handling_2:;
        {
            nuitka_bool tmp_condition_result_12;
            PyObject *tmp_cmp_expr_left_2;
            PyObject *tmp_cmp_expr_right_2;
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_cmp_expr_left_2 = tmp_class_creation_2__bases;
            tmp_cmp_expr_right_2 = mod_consts[204];
            tmp_condition_result_12 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_2, tmp_cmp_expr_right_2);
            if (tmp_condition_result_12 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;

                goto try_except_handler_8;
            }
            if (tmp_condition_result_12 == NUITKA_BOOL_TRUE) {
                goto branch_yes_8;
            } else {
                goto branch_no_8;
            }
            assert(tmp_condition_result_12 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_8:;
        tmp_dictset_value = mod_consts[204];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 169;

            goto try_except_handler_8;
        }
        branch_no_8:;
        {
            PyObject *tmp_assign_source_28;
            PyObject *tmp_called_value_4;
            PyObject *tmp_args_value_4;
            PyObject *tmp_tuple_element_6;
            PyObject *tmp_kwargs_value_4;
            CHECK_OBJECT(tmp_class_creation_2__metaclass);
            tmp_called_value_4 = tmp_class_creation_2__metaclass;
            tmp_tuple_element_6 = mod_consts[236];
            tmp_args_value_4 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_4, 0, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__bases);
            tmp_tuple_element_6 = tmp_class_creation_2__bases;
            PyTuple_SET_ITEM0(tmp_args_value_4, 1, tmp_tuple_element_6);
            tmp_tuple_element_6 = locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169;
            PyTuple_SET_ITEM0(tmp_args_value_4, 2, tmp_tuple_element_6);
            CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
            tmp_kwargs_value_4 = tmp_class_creation_2__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 169;
            tmp_assign_source_28 = CALL_FUNCTION(tmp_called_value_4, tmp_args_value_4, tmp_kwargs_value_4);
            Py_DECREF(tmp_args_value_4);
            if (tmp_assign_source_28 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 169;

                goto try_except_handler_8;
            }
            assert(outline_1_var___class__ == NULL);
            outline_1_var___class__ = tmp_assign_source_28;
        }
        CHECK_OBJECT(outline_1_var___class__);
        tmp_assign_source_27 = outline_1_var___class__;
        Py_INCREF(tmp_assign_source_27);
        goto try_return_handler_8;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_8:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169);
        locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169 = NULL;
        goto try_return_handler_7;
        // Exception handler code:
        try_except_handler_8:;
        exception_keeper_type_6 = exception_type;
        exception_keeper_value_6 = exception_value;
        exception_keeper_tb_6 = exception_tb;
        exception_keeper_lineno_6 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169);
        locals_xlwt$BIFFRecords$$$class__2_BiffRecord_169 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_6;
        exception_value = exception_keeper_value_6;
        exception_tb = exception_keeper_tb_6;
        exception_lineno = exception_keeper_lineno_6;

        goto try_except_handler_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_7:;
        CHECK_OBJECT(outline_1_var___class__);
        Py_DECREF(outline_1_var___class__);
        outline_1_var___class__ = NULL;
        goto outline_result_2;
        // Exception handler code:
        try_except_handler_7:;
        exception_keeper_type_7 = exception_type;
        exception_keeper_value_7 = exception_value;
        exception_keeper_tb_7 = exception_tb;
        exception_keeper_lineno_7 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_7;
        exception_value = exception_keeper_value_7;
        exception_tb = exception_keeper_tb_7;
        exception_lineno = exception_keeper_lineno_7;

        goto outline_exception_2;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_2:;
        exception_lineno = 169;
        goto try_except_handler_6;
        outline_result_2:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236], tmp_assign_source_27);
    }
    goto try_end_4;
    // Exception handler code:
    try_except_handler_6:;
    exception_keeper_type_8 = exception_type;
    exception_keeper_value_8 = exception_value;
    exception_keeper_tb_8 = exception_tb;
    exception_keeper_lineno_8 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    Py_XDECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_8;
    exception_value = exception_keeper_value_8;
    exception_tb = exception_keeper_tb_8;
    exception_lineno = exception_keeper_lineno_8;

    goto frame_exception_exit_1;
    // End of try:
    try_end_4:;
    CHECK_OBJECT(tmp_class_creation_2__bases);
    Py_DECREF(tmp_class_creation_2__bases);
    tmp_class_creation_2__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_2__class_decl_dict);
    Py_DECREF(tmp_class_creation_2__class_decl_dict);
    tmp_class_creation_2__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_2__metaclass);
    Py_DECREF(tmp_class_creation_2__metaclass);
    tmp_class_creation_2__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_2__prepared);
    Py_DECREF(tmp_class_creation_2__prepared);
    tmp_class_creation_2__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_29;
        PyObject *tmp_tuple_element_7;
        tmp_tuple_element_7 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_7 == NULL)) {
            tmp_tuple_element_7 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        tmp_assign_source_29 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_29, 0, tmp_tuple_element_7);
        assert(tmp_class_creation_3__bases_orig == NULL);
        tmp_class_creation_3__bases_orig = tmp_assign_source_29;
    }
    {
        PyObject *tmp_assign_source_30;
        PyObject *tmp_dircall_arg1_3;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dircall_arg1_3 = tmp_class_creation_3__bases_orig;
        Py_INCREF(tmp_dircall_arg1_3);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_3};
            tmp_assign_source_30 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        assert(tmp_class_creation_3__bases == NULL);
        tmp_class_creation_3__bases = tmp_assign_source_30;
    }
    {
        PyObject *tmp_assign_source_31;
        tmp_assign_source_31 = PyDict_New();
        assert(tmp_class_creation_3__class_decl_dict == NULL);
        tmp_class_creation_3__class_decl_dict = tmp_assign_source_31;
    }
    {
        PyObject *tmp_assign_source_32;
        PyObject *tmp_metaclass_value_3;
        bool tmp_condition_result_13;
        PyObject *tmp_key_value_7;
        PyObject *tmp_dict_arg_value_7;
        PyObject *tmp_dict_arg_value_8;
        PyObject *tmp_key_value_8;
        nuitka_bool tmp_condition_result_14;
        int tmp_truth_name_3;
        PyObject *tmp_type_arg_5;
        PyObject *tmp_expression_value_11;
        PyObject *tmp_subscript_value_3;
        PyObject *tmp_bases_value_3;
        tmp_key_value_7 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_7 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_7, tmp_key_value_7);
        assert(!(tmp_res == -1));
        tmp_condition_result_13 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_13 != false) {
            goto condexpr_true_5;
        } else {
            goto condexpr_false_5;
        }
        condexpr_true_5:;
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_8 = tmp_class_creation_3__class_decl_dict;
        tmp_key_value_8 = mod_consts[205];
        tmp_metaclass_value_3 = DICT_GET_ITEM0(tmp_dict_arg_value_8, tmp_key_value_8);
        if (tmp_metaclass_value_3 == NULL) {
            tmp_metaclass_value_3 = Py_None;
        }
        assert(!(tmp_metaclass_value_3 == NULL));
        Py_INCREF(tmp_metaclass_value_3);
        goto condexpr_end_5;
        condexpr_false_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_truth_name_3 = CHECK_IF_TRUE(tmp_class_creation_3__bases);
        if (tmp_truth_name_3 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        tmp_condition_result_14 = tmp_truth_name_3 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_14 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_6;
        } else {
            goto condexpr_false_6;
        }
        condexpr_true_6:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_expression_value_11 = tmp_class_creation_3__bases;
        tmp_subscript_value_3 = mod_consts[4];
        tmp_type_arg_5 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_11, tmp_subscript_value_3, 0);
        if (tmp_type_arg_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        tmp_metaclass_value_3 = BUILTIN_TYPE1(tmp_type_arg_5);
        Py_DECREF(tmp_type_arg_5);
        if (tmp_metaclass_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        goto condexpr_end_6;
        condexpr_false_6:;
        tmp_metaclass_value_3 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_3);
        condexpr_end_6:;
        condexpr_end_5:;
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_bases_value_3 = tmp_class_creation_3__bases;
        tmp_assign_source_32 = SELECT_METACLASS(tmp_metaclass_value_3, tmp_bases_value_3);
        Py_DECREF(tmp_metaclass_value_3);
        if (tmp_assign_source_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        assert(tmp_class_creation_3__metaclass == NULL);
        tmp_class_creation_3__metaclass = tmp_assign_source_32;
    }
    {
        bool tmp_condition_result_15;
        PyObject *tmp_key_value_9;
        PyObject *tmp_dict_arg_value_9;
        tmp_key_value_9 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_dict_arg_value_9 = tmp_class_creation_3__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_9, tmp_key_value_9);
        assert(!(tmp_res == -1));
        tmp_condition_result_15 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_15 != false) {
            goto branch_yes_9;
        } else {
            goto branch_no_9;
        }
    }
    branch_yes_9:;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_3__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 200;

        goto try_except_handler_9;
    }
    branch_no_9:;
    {
        nuitka_bool tmp_condition_result_16;
        PyObject *tmp_expression_value_12;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_12 = tmp_class_creation_3__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_12, mod_consts[206]);
        tmp_condition_result_16 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_16 == NUITKA_BOOL_TRUE) {
            goto branch_yes_10;
        } else {
            goto branch_no_10;
        }
    }
    branch_yes_10:;
    {
        PyObject *tmp_assign_source_33;
        PyObject *tmp_called_value_5;
        PyObject *tmp_expression_value_13;
        PyObject *tmp_args_value_5;
        PyObject *tmp_tuple_element_8;
        PyObject *tmp_kwargs_value_5;
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_expression_value_13 = tmp_class_creation_3__metaclass;
        tmp_called_value_5 = LOOKUP_ATTRIBUTE(tmp_expression_value_13, mod_consts[206]);
        if (tmp_called_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        tmp_tuple_element_8 = mod_consts[239];
        tmp_args_value_5 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_5, 0, tmp_tuple_element_8);
        CHECK_OBJECT(tmp_class_creation_3__bases);
        tmp_tuple_element_8 = tmp_class_creation_3__bases;
        PyTuple_SET_ITEM0(tmp_args_value_5, 1, tmp_tuple_element_8);
        CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
        tmp_kwargs_value_5 = tmp_class_creation_3__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 200;
        tmp_assign_source_33 = CALL_FUNCTION(tmp_called_value_5, tmp_args_value_5, tmp_kwargs_value_5);
        Py_DECREF(tmp_called_value_5);
        Py_DECREF(tmp_args_value_5);
        if (tmp_assign_source_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_33;
    }
    {
        bool tmp_condition_result_17;
        PyObject *tmp_operand_value_3;
        PyObject *tmp_expression_value_14;
        CHECK_OBJECT(tmp_class_creation_3__prepared);
        tmp_expression_value_14 = tmp_class_creation_3__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_14, mod_consts[208]);
        tmp_operand_value_3 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_3);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        tmp_condition_result_17 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_17 != false) {
            goto branch_yes_11;
        } else {
            goto branch_no_11;
        }
    }
    branch_yes_11:;
    {
        PyObject *tmp_raise_type_3;
        PyObject *tmp_raise_value_3;
        PyObject *tmp_left_value_3;
        PyObject *tmp_right_value_3;
        PyObject *tmp_tuple_element_9;
        PyObject *tmp_getattr_target_3;
        PyObject *tmp_getattr_attr_3;
        PyObject *tmp_getattr_default_3;
        tmp_raise_type_3 = PyExc_TypeError;
        tmp_left_value_3 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_3__metaclass);
        tmp_getattr_target_3 = tmp_class_creation_3__metaclass;
        tmp_getattr_attr_3 = mod_consts[210];
        tmp_getattr_default_3 = mod_consts[211];
        tmp_tuple_element_9 = BUILTIN_GETATTR(tmp_getattr_target_3, tmp_getattr_attr_3, tmp_getattr_default_3);
        if (tmp_tuple_element_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        tmp_right_value_3 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_15;
            PyObject *tmp_type_arg_6;
            PyTuple_SET_ITEM(tmp_right_value_3, 0, tmp_tuple_element_9);
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_type_arg_6 = tmp_class_creation_3__prepared;
            tmp_expression_value_15 = BUILTIN_TYPE1(tmp_type_arg_6);
            assert(!(tmp_expression_value_15 == NULL));
            tmp_tuple_element_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_15, mod_consts[210]);
            Py_DECREF(tmp_expression_value_15);
            if (tmp_tuple_element_9 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 200;

                goto tuple_build_exception_3;
            }
            PyTuple_SET_ITEM(tmp_right_value_3, 1, tmp_tuple_element_9);
        }
        goto tuple_build_noexception_3;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_3:;
        Py_DECREF(tmp_right_value_3);
        goto try_except_handler_9;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_3:;
        tmp_raise_value_3 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_3, tmp_right_value_3);
        Py_DECREF(tmp_right_value_3);
        if (tmp_raise_value_3 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_9;
        }
        exception_type = tmp_raise_type_3;
        Py_INCREF(tmp_raise_type_3);
        exception_value = tmp_raise_value_3;
        exception_lineno = 200;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_9;
    }
    branch_no_11:;
    goto branch_end_10;
    branch_no_10:;
    {
        PyObject *tmp_assign_source_34;
        tmp_assign_source_34 = PyDict_New();
        assert(tmp_class_creation_3__prepared == NULL);
        tmp_class_creation_3__prepared = tmp_assign_source_34;
    }
    branch_end_10:;
    {
        PyObject *tmp_assign_source_35;
        {
            PyObject *tmp_set_locals_3;
            CHECK_OBJECT(tmp_class_creation_3__prepared);
            tmp_set_locals_3 = tmp_class_creation_3__prepared;
            locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200 = tmp_set_locals_3;
            Py_INCREF(tmp_set_locals_3);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_11;
        }
        tmp_dictset_value = mod_consts[240];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_11;
        }
        tmp_dictset_value = mod_consts[239];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_11;
        }
        if (isFrameUnusable(cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4)) {
            Py_XDECREF(cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4 = MAKE_FUNCTION_FRAME(codeobj_4e6547dd46356bdab15f7d7e7a94d5f3, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4->m_type_description == NULL);
        frame_4e6547dd46356bdab15f7d7e7a94d5f3_4 = cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4e6547dd46356bdab15f7d7e7a94d5f3_4);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4e6547dd46356bdab15f7d7e7a94d5f3_4) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[241];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 216;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = mod_consts[39];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[242], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 218;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = mod_consts[46];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[243], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 219;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = mod_consts[124];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[244], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 220;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = mod_consts[245];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[246], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 221;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = mod_consts[247];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[248], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 222;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }
        tmp_dictset_value = mod_consts[249];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[250], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 223;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__15___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 225;
            type_description_2 = "o";
            goto frame_exception_exit_4;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4e6547dd46356bdab15f7d7e7a94d5f3_4);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_3;

        frame_exception_exit_4:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4e6547dd46356bdab15f7d7e7a94d5f3_4);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4e6547dd46356bdab15f7d7e7a94d5f3_4, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4e6547dd46356bdab15f7d7e7a94d5f3_4->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4e6547dd46356bdab15f7d7e7a94d5f3_4, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4e6547dd46356bdab15f7d7e7a94d5f3_4,
            type_description_2,
            outline_2_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4e6547dd46356bdab15f7d7e7a94d5f3_4 == cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4);
            cache_frame_4e6547dd46356bdab15f7d7e7a94d5f3_4 = NULL;
        }

        assertFrameObject(frame_4e6547dd46356bdab15f7d7e7a94d5f3_4);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_3;

        frame_no_exception_3:;
        goto skip_nested_handling_3;
        nested_frame_exit_3:;

        goto try_except_handler_11;
        skip_nested_handling_3:;
        {
            nuitka_bool tmp_condition_result_18;
            PyObject *tmp_cmp_expr_left_3;
            PyObject *tmp_cmp_expr_right_3;
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_cmp_expr_left_3 = tmp_class_creation_3__bases;
            CHECK_OBJECT(tmp_class_creation_3__bases_orig);
            tmp_cmp_expr_right_3 = tmp_class_creation_3__bases_orig;
            tmp_condition_result_18 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_3, tmp_cmp_expr_right_3);
            if (tmp_condition_result_18 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 200;

                goto try_except_handler_11;
            }
            if (tmp_condition_result_18 == NUITKA_BOOL_TRUE) {
                goto branch_yes_12;
            } else {
                goto branch_no_12;
            }
            assert(tmp_condition_result_18 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_12:;
        CHECK_OBJECT(tmp_class_creation_3__bases_orig);
        tmp_dictset_value = tmp_class_creation_3__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 200;

            goto try_except_handler_11;
        }
        branch_no_12:;
        {
            PyObject *tmp_assign_source_36;
            PyObject *tmp_called_value_6;
            PyObject *tmp_args_value_6;
            PyObject *tmp_tuple_element_10;
            PyObject *tmp_kwargs_value_6;
            CHECK_OBJECT(tmp_class_creation_3__metaclass);
            tmp_called_value_6 = tmp_class_creation_3__metaclass;
            tmp_tuple_element_10 = mod_consts[239];
            tmp_args_value_6 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_6, 0, tmp_tuple_element_10);
            CHECK_OBJECT(tmp_class_creation_3__bases);
            tmp_tuple_element_10 = tmp_class_creation_3__bases;
            PyTuple_SET_ITEM0(tmp_args_value_6, 1, tmp_tuple_element_10);
            tmp_tuple_element_10 = locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200;
            PyTuple_SET_ITEM0(tmp_args_value_6, 2, tmp_tuple_element_10);
            CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
            tmp_kwargs_value_6 = tmp_class_creation_3__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 200;
            tmp_assign_source_36 = CALL_FUNCTION(tmp_called_value_6, tmp_args_value_6, tmp_kwargs_value_6);
            Py_DECREF(tmp_args_value_6);
            if (tmp_assign_source_36 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 200;

                goto try_except_handler_11;
            }
            assert(outline_2_var___class__ == NULL);
            outline_2_var___class__ = tmp_assign_source_36;
        }
        CHECK_OBJECT(outline_2_var___class__);
        tmp_assign_source_35 = outline_2_var___class__;
        Py_INCREF(tmp_assign_source_35);
        goto try_return_handler_11;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_11:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200);
        locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200 = NULL;
        goto try_return_handler_10;
        // Exception handler code:
        try_except_handler_11:;
        exception_keeper_type_9 = exception_type;
        exception_keeper_value_9 = exception_value;
        exception_keeper_tb_9 = exception_tb;
        exception_keeper_lineno_9 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200);
        locals_xlwt$BIFFRecords$$$class__3_Biff8BOFRecord_200 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_9;
        exception_value = exception_keeper_value_9;
        exception_tb = exception_keeper_tb_9;
        exception_lineno = exception_keeper_lineno_9;

        goto try_except_handler_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_10:;
        CHECK_OBJECT(outline_2_var___class__);
        Py_DECREF(outline_2_var___class__);
        outline_2_var___class__ = NULL;
        goto outline_result_3;
        // Exception handler code:
        try_except_handler_10:;
        exception_keeper_type_10 = exception_type;
        exception_keeper_value_10 = exception_value;
        exception_keeper_tb_10 = exception_tb;
        exception_keeper_lineno_10 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_10;
        exception_value = exception_keeper_value_10;
        exception_tb = exception_keeper_tb_10;
        exception_lineno = exception_keeper_lineno_10;

        goto outline_exception_3;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_3:;
        exception_lineno = 200;
        goto try_except_handler_9;
        outline_result_3:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[239], tmp_assign_source_35);
    }
    goto try_end_5;
    // Exception handler code:
    try_except_handler_9:;
    exception_keeper_type_11 = exception_type;
    exception_keeper_value_11 = exception_value;
    exception_keeper_tb_11 = exception_tb;
    exception_keeper_lineno_11 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    Py_XDECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_11;
    exception_value = exception_keeper_value_11;
    exception_tb = exception_keeper_tb_11;
    exception_lineno = exception_keeper_lineno_11;

    goto frame_exception_exit_1;
    // End of try:
    try_end_5:;
    CHECK_OBJECT(tmp_class_creation_3__bases_orig);
    Py_DECREF(tmp_class_creation_3__bases_orig);
    tmp_class_creation_3__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_3__bases);
    Py_DECREF(tmp_class_creation_3__bases);
    tmp_class_creation_3__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_3__class_decl_dict);
    Py_DECREF(tmp_class_creation_3__class_decl_dict);
    tmp_class_creation_3__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_3__metaclass);
    Py_DECREF(tmp_class_creation_3__metaclass);
    tmp_class_creation_3__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_3__prepared);
    Py_DECREF(tmp_class_creation_3__prepared);
    tmp_class_creation_3__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_37;
        PyObject *tmp_tuple_element_11;
        tmp_tuple_element_11 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_11 == NULL)) {
            tmp_tuple_element_11 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        tmp_assign_source_37 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_37, 0, tmp_tuple_element_11);
        assert(tmp_class_creation_4__bases_orig == NULL);
        tmp_class_creation_4__bases_orig = tmp_assign_source_37;
    }
    {
        PyObject *tmp_assign_source_38;
        PyObject *tmp_dircall_arg1_4;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dircall_arg1_4 = tmp_class_creation_4__bases_orig;
        Py_INCREF(tmp_dircall_arg1_4);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_4};
            tmp_assign_source_38 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        assert(tmp_class_creation_4__bases == NULL);
        tmp_class_creation_4__bases = tmp_assign_source_38;
    }
    {
        PyObject *tmp_assign_source_39;
        tmp_assign_source_39 = PyDict_New();
        assert(tmp_class_creation_4__class_decl_dict == NULL);
        tmp_class_creation_4__class_decl_dict = tmp_assign_source_39;
    }
    {
        PyObject *tmp_assign_source_40;
        PyObject *tmp_metaclass_value_4;
        bool tmp_condition_result_19;
        PyObject *tmp_key_value_10;
        PyObject *tmp_dict_arg_value_10;
        PyObject *tmp_dict_arg_value_11;
        PyObject *tmp_key_value_11;
        nuitka_bool tmp_condition_result_20;
        int tmp_truth_name_4;
        PyObject *tmp_type_arg_7;
        PyObject *tmp_expression_value_16;
        PyObject *tmp_subscript_value_4;
        PyObject *tmp_bases_value_4;
        tmp_key_value_10 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_10 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_10, tmp_key_value_10);
        assert(!(tmp_res == -1));
        tmp_condition_result_19 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_19 != false) {
            goto condexpr_true_7;
        } else {
            goto condexpr_false_7;
        }
        condexpr_true_7:;
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_11 = tmp_class_creation_4__class_decl_dict;
        tmp_key_value_11 = mod_consts[205];
        tmp_metaclass_value_4 = DICT_GET_ITEM0(tmp_dict_arg_value_11, tmp_key_value_11);
        if (tmp_metaclass_value_4 == NULL) {
            tmp_metaclass_value_4 = Py_None;
        }
        assert(!(tmp_metaclass_value_4 == NULL));
        Py_INCREF(tmp_metaclass_value_4);
        goto condexpr_end_7;
        condexpr_false_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_truth_name_4 = CHECK_IF_TRUE(tmp_class_creation_4__bases);
        if (tmp_truth_name_4 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        tmp_condition_result_20 = tmp_truth_name_4 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_20 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_8;
        } else {
            goto condexpr_false_8;
        }
        condexpr_true_8:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_expression_value_16 = tmp_class_creation_4__bases;
        tmp_subscript_value_4 = mod_consts[4];
        tmp_type_arg_7 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_16, tmp_subscript_value_4, 0);
        if (tmp_type_arg_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        tmp_metaclass_value_4 = BUILTIN_TYPE1(tmp_type_arg_7);
        Py_DECREF(tmp_type_arg_7);
        if (tmp_metaclass_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        goto condexpr_end_8;
        condexpr_false_8:;
        tmp_metaclass_value_4 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_4);
        condexpr_end_8:;
        condexpr_end_7:;
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_bases_value_4 = tmp_class_creation_4__bases;
        tmp_assign_source_40 = SELECT_METACLASS(tmp_metaclass_value_4, tmp_bases_value_4);
        Py_DECREF(tmp_metaclass_value_4);
        if (tmp_assign_source_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        assert(tmp_class_creation_4__metaclass == NULL);
        tmp_class_creation_4__metaclass = tmp_assign_source_40;
    }
    {
        bool tmp_condition_result_21;
        PyObject *tmp_key_value_12;
        PyObject *tmp_dict_arg_value_12;
        tmp_key_value_12 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_dict_arg_value_12 = tmp_class_creation_4__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_12, tmp_key_value_12);
        assert(!(tmp_res == -1));
        tmp_condition_result_21 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_21 != false) {
            goto branch_yes_13;
        } else {
            goto branch_no_13;
        }
    }
    branch_yes_13:;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_4__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 235;

        goto try_except_handler_12;
    }
    branch_no_13:;
    {
        nuitka_bool tmp_condition_result_22;
        PyObject *tmp_expression_value_17;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_17 = tmp_class_creation_4__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_17, mod_consts[206]);
        tmp_condition_result_22 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_22 == NUITKA_BOOL_TRUE) {
            goto branch_yes_14;
        } else {
            goto branch_no_14;
        }
    }
    branch_yes_14:;
    {
        PyObject *tmp_assign_source_41;
        PyObject *tmp_called_value_7;
        PyObject *tmp_expression_value_18;
        PyObject *tmp_args_value_7;
        PyObject *tmp_tuple_element_12;
        PyObject *tmp_kwargs_value_7;
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_expression_value_18 = tmp_class_creation_4__metaclass;
        tmp_called_value_7 = LOOKUP_ATTRIBUTE(tmp_expression_value_18, mod_consts[206]);
        if (tmp_called_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        tmp_tuple_element_12 = mod_consts[252];
        tmp_args_value_7 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_7, 0, tmp_tuple_element_12);
        CHECK_OBJECT(tmp_class_creation_4__bases);
        tmp_tuple_element_12 = tmp_class_creation_4__bases;
        PyTuple_SET_ITEM0(tmp_args_value_7, 1, tmp_tuple_element_12);
        CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
        tmp_kwargs_value_7 = tmp_class_creation_4__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 235;
        tmp_assign_source_41 = CALL_FUNCTION(tmp_called_value_7, tmp_args_value_7, tmp_kwargs_value_7);
        Py_DECREF(tmp_called_value_7);
        Py_DECREF(tmp_args_value_7);
        if (tmp_assign_source_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_41;
    }
    {
        bool tmp_condition_result_23;
        PyObject *tmp_operand_value_4;
        PyObject *tmp_expression_value_19;
        CHECK_OBJECT(tmp_class_creation_4__prepared);
        tmp_expression_value_19 = tmp_class_creation_4__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_19, mod_consts[208]);
        tmp_operand_value_4 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_4);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        tmp_condition_result_23 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_23 != false) {
            goto branch_yes_15;
        } else {
            goto branch_no_15;
        }
    }
    branch_yes_15:;
    {
        PyObject *tmp_raise_type_4;
        PyObject *tmp_raise_value_4;
        PyObject *tmp_left_value_4;
        PyObject *tmp_right_value_4;
        PyObject *tmp_tuple_element_13;
        PyObject *tmp_getattr_target_4;
        PyObject *tmp_getattr_attr_4;
        PyObject *tmp_getattr_default_4;
        tmp_raise_type_4 = PyExc_TypeError;
        tmp_left_value_4 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_4__metaclass);
        tmp_getattr_target_4 = tmp_class_creation_4__metaclass;
        tmp_getattr_attr_4 = mod_consts[210];
        tmp_getattr_default_4 = mod_consts[211];
        tmp_tuple_element_13 = BUILTIN_GETATTR(tmp_getattr_target_4, tmp_getattr_attr_4, tmp_getattr_default_4);
        if (tmp_tuple_element_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        tmp_right_value_4 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_20;
            PyObject *tmp_type_arg_8;
            PyTuple_SET_ITEM(tmp_right_value_4, 0, tmp_tuple_element_13);
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_type_arg_8 = tmp_class_creation_4__prepared;
            tmp_expression_value_20 = BUILTIN_TYPE1(tmp_type_arg_8);
            assert(!(tmp_expression_value_20 == NULL));
            tmp_tuple_element_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_20, mod_consts[210]);
            Py_DECREF(tmp_expression_value_20);
            if (tmp_tuple_element_13 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 235;

                goto tuple_build_exception_4;
            }
            PyTuple_SET_ITEM(tmp_right_value_4, 1, tmp_tuple_element_13);
        }
        goto tuple_build_noexception_4;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_4:;
        Py_DECREF(tmp_right_value_4);
        goto try_except_handler_12;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_4:;
        tmp_raise_value_4 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_4, tmp_right_value_4);
        Py_DECREF(tmp_right_value_4);
        if (tmp_raise_value_4 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_12;
        }
        exception_type = tmp_raise_type_4;
        Py_INCREF(tmp_raise_type_4);
        exception_value = tmp_raise_value_4;
        exception_lineno = 235;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_12;
    }
    branch_no_15:;
    goto branch_end_14;
    branch_no_14:;
    {
        PyObject *tmp_assign_source_42;
        tmp_assign_source_42 = PyDict_New();
        assert(tmp_class_creation_4__prepared == NULL);
        tmp_class_creation_4__prepared = tmp_assign_source_42;
    }
    branch_end_14:;
    {
        PyObject *tmp_assign_source_43;
        {
            PyObject *tmp_set_locals_4;
            CHECK_OBJECT(tmp_class_creation_4__prepared);
            tmp_set_locals_4 = tmp_class_creation_4__prepared;
            locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235 = tmp_set_locals_4;
            Py_INCREF(tmp_set_locals_4);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_14;
        }
        tmp_dictset_value = mod_consts[252];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_14;
        }
        if (isFrameUnusable(cache_frame_dac98c301a043976501e17d0d18f84cc_5)) {
            Py_XDECREF(cache_frame_dac98c301a043976501e17d0d18f84cc_5);

#if _DEBUG_REFCOUNTS
            if (cache_frame_dac98c301a043976501e17d0d18f84cc_5 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_dac98c301a043976501e17d0d18f84cc_5 = MAKE_FUNCTION_FRAME(codeobj_dac98c301a043976501e17d0d18f84cc, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_dac98c301a043976501e17d0d18f84cc_5->m_type_description == NULL);
        frame_dac98c301a043976501e17d0d18f84cc_5 = cache_frame_dac98c301a043976501e17d0d18f84cc_5;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_dac98c301a043976501e17d0d18f84cc_5);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_dac98c301a043976501e17d0d18f84cc_5) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[253];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 236;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__16___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 238;
            type_description_2 = "o";
            goto frame_exception_exit_5;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_dac98c301a043976501e17d0d18f84cc_5);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_4;

        frame_exception_exit_5:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_dac98c301a043976501e17d0d18f84cc_5);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_dac98c301a043976501e17d0d18f84cc_5, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_dac98c301a043976501e17d0d18f84cc_5->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_dac98c301a043976501e17d0d18f84cc_5, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_dac98c301a043976501e17d0d18f84cc_5,
            type_description_2,
            outline_3_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_dac98c301a043976501e17d0d18f84cc_5 == cache_frame_dac98c301a043976501e17d0d18f84cc_5) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_dac98c301a043976501e17d0d18f84cc_5);
            cache_frame_dac98c301a043976501e17d0d18f84cc_5 = NULL;
        }

        assertFrameObject(frame_dac98c301a043976501e17d0d18f84cc_5);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_4;

        frame_no_exception_4:;
        goto skip_nested_handling_4;
        nested_frame_exit_4:;

        goto try_except_handler_14;
        skip_nested_handling_4:;
        {
            nuitka_bool tmp_condition_result_24;
            PyObject *tmp_cmp_expr_left_4;
            PyObject *tmp_cmp_expr_right_4;
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_cmp_expr_left_4 = tmp_class_creation_4__bases;
            CHECK_OBJECT(tmp_class_creation_4__bases_orig);
            tmp_cmp_expr_right_4 = tmp_class_creation_4__bases_orig;
            tmp_condition_result_24 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_4, tmp_cmp_expr_right_4);
            if (tmp_condition_result_24 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 235;

                goto try_except_handler_14;
            }
            if (tmp_condition_result_24 == NUITKA_BOOL_TRUE) {
                goto branch_yes_16;
            } else {
                goto branch_no_16;
            }
            assert(tmp_condition_result_24 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_16:;
        CHECK_OBJECT(tmp_class_creation_4__bases_orig);
        tmp_dictset_value = tmp_class_creation_4__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 235;

            goto try_except_handler_14;
        }
        branch_no_16:;
        {
            PyObject *tmp_assign_source_44;
            PyObject *tmp_called_value_8;
            PyObject *tmp_args_value_8;
            PyObject *tmp_tuple_element_14;
            PyObject *tmp_kwargs_value_8;
            CHECK_OBJECT(tmp_class_creation_4__metaclass);
            tmp_called_value_8 = tmp_class_creation_4__metaclass;
            tmp_tuple_element_14 = mod_consts[252];
            tmp_args_value_8 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_8, 0, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_4__bases);
            tmp_tuple_element_14 = tmp_class_creation_4__bases;
            PyTuple_SET_ITEM0(tmp_args_value_8, 1, tmp_tuple_element_14);
            tmp_tuple_element_14 = locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235;
            PyTuple_SET_ITEM0(tmp_args_value_8, 2, tmp_tuple_element_14);
            CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
            tmp_kwargs_value_8 = tmp_class_creation_4__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 235;
            tmp_assign_source_44 = CALL_FUNCTION(tmp_called_value_8, tmp_args_value_8, tmp_kwargs_value_8);
            Py_DECREF(tmp_args_value_8);
            if (tmp_assign_source_44 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 235;

                goto try_except_handler_14;
            }
            assert(outline_3_var___class__ == NULL);
            outline_3_var___class__ = tmp_assign_source_44;
        }
        CHECK_OBJECT(outline_3_var___class__);
        tmp_assign_source_43 = outline_3_var___class__;
        Py_INCREF(tmp_assign_source_43);
        goto try_return_handler_14;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_14:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235);
        locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235 = NULL;
        goto try_return_handler_13;
        // Exception handler code:
        try_except_handler_14:;
        exception_keeper_type_12 = exception_type;
        exception_keeper_value_12 = exception_value;
        exception_keeper_tb_12 = exception_tb;
        exception_keeper_lineno_12 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235);
        locals_xlwt$BIFFRecords$$$class__4_InteraceHdrRecord_235 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_12;
        exception_value = exception_keeper_value_12;
        exception_tb = exception_keeper_tb_12;
        exception_lineno = exception_keeper_lineno_12;

        goto try_except_handler_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_13:;
        CHECK_OBJECT(outline_3_var___class__);
        Py_DECREF(outline_3_var___class__);
        outline_3_var___class__ = NULL;
        goto outline_result_4;
        // Exception handler code:
        try_except_handler_13:;
        exception_keeper_type_13 = exception_type;
        exception_keeper_value_13 = exception_value;
        exception_keeper_tb_13 = exception_tb;
        exception_keeper_lineno_13 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_13;
        exception_value = exception_keeper_value_13;
        exception_tb = exception_keeper_tb_13;
        exception_lineno = exception_keeper_lineno_13;

        goto outline_exception_4;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_4:;
        exception_lineno = 235;
        goto try_except_handler_12;
        outline_result_4:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[252], tmp_assign_source_43);
    }
    goto try_end_6;
    // Exception handler code:
    try_except_handler_12:;
    exception_keeper_type_14 = exception_type;
    exception_keeper_value_14 = exception_value;
    exception_keeper_tb_14 = exception_tb;
    exception_keeper_lineno_14 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    Py_XDECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_14;
    exception_value = exception_keeper_value_14;
    exception_tb = exception_keeper_tb_14;
    exception_lineno = exception_keeper_lineno_14;

    goto frame_exception_exit_1;
    // End of try:
    try_end_6:;
    CHECK_OBJECT(tmp_class_creation_4__bases_orig);
    Py_DECREF(tmp_class_creation_4__bases_orig);
    tmp_class_creation_4__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_4__bases);
    Py_DECREF(tmp_class_creation_4__bases);
    tmp_class_creation_4__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_4__class_decl_dict);
    Py_DECREF(tmp_class_creation_4__class_decl_dict);
    tmp_class_creation_4__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_4__metaclass);
    Py_DECREF(tmp_class_creation_4__metaclass);
    tmp_class_creation_4__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_4__prepared);
    Py_DECREF(tmp_class_creation_4__prepared);
    tmp_class_creation_4__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_45;
        PyObject *tmp_tuple_element_15;
        tmp_tuple_element_15 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_15 == NULL)) {
            tmp_tuple_element_15 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        tmp_assign_source_45 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_45, 0, tmp_tuple_element_15);
        assert(tmp_class_creation_5__bases_orig == NULL);
        tmp_class_creation_5__bases_orig = tmp_assign_source_45;
    }
    {
        PyObject *tmp_assign_source_46;
        PyObject *tmp_dircall_arg1_5;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dircall_arg1_5 = tmp_class_creation_5__bases_orig;
        Py_INCREF(tmp_dircall_arg1_5);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_5};
            tmp_assign_source_46 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        assert(tmp_class_creation_5__bases == NULL);
        tmp_class_creation_5__bases = tmp_assign_source_46;
    }
    {
        PyObject *tmp_assign_source_47;
        tmp_assign_source_47 = PyDict_New();
        assert(tmp_class_creation_5__class_decl_dict == NULL);
        tmp_class_creation_5__class_decl_dict = tmp_assign_source_47;
    }
    {
        PyObject *tmp_assign_source_48;
        PyObject *tmp_metaclass_value_5;
        bool tmp_condition_result_25;
        PyObject *tmp_key_value_13;
        PyObject *tmp_dict_arg_value_13;
        PyObject *tmp_dict_arg_value_14;
        PyObject *tmp_key_value_14;
        nuitka_bool tmp_condition_result_26;
        int tmp_truth_name_5;
        PyObject *tmp_type_arg_9;
        PyObject *tmp_expression_value_21;
        PyObject *tmp_subscript_value_5;
        PyObject *tmp_bases_value_5;
        tmp_key_value_13 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_13 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_13, tmp_key_value_13);
        assert(!(tmp_res == -1));
        tmp_condition_result_25 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_25 != false) {
            goto condexpr_true_9;
        } else {
            goto condexpr_false_9;
        }
        condexpr_true_9:;
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_14 = tmp_class_creation_5__class_decl_dict;
        tmp_key_value_14 = mod_consts[205];
        tmp_metaclass_value_5 = DICT_GET_ITEM0(tmp_dict_arg_value_14, tmp_key_value_14);
        if (tmp_metaclass_value_5 == NULL) {
            tmp_metaclass_value_5 = Py_None;
        }
        assert(!(tmp_metaclass_value_5 == NULL));
        Py_INCREF(tmp_metaclass_value_5);
        goto condexpr_end_9;
        condexpr_false_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_truth_name_5 = CHECK_IF_TRUE(tmp_class_creation_5__bases);
        if (tmp_truth_name_5 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        tmp_condition_result_26 = tmp_truth_name_5 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_26 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_10;
        } else {
            goto condexpr_false_10;
        }
        condexpr_true_10:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_expression_value_21 = tmp_class_creation_5__bases;
        tmp_subscript_value_5 = mod_consts[4];
        tmp_type_arg_9 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_21, tmp_subscript_value_5, 0);
        if (tmp_type_arg_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        tmp_metaclass_value_5 = BUILTIN_TYPE1(tmp_type_arg_9);
        Py_DECREF(tmp_type_arg_9);
        if (tmp_metaclass_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        goto condexpr_end_10;
        condexpr_false_10:;
        tmp_metaclass_value_5 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_5);
        condexpr_end_10:;
        condexpr_end_9:;
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_bases_value_5 = tmp_class_creation_5__bases;
        tmp_assign_source_48 = SELECT_METACLASS(tmp_metaclass_value_5, tmp_bases_value_5);
        Py_DECREF(tmp_metaclass_value_5);
        if (tmp_assign_source_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        assert(tmp_class_creation_5__metaclass == NULL);
        tmp_class_creation_5__metaclass = tmp_assign_source_48;
    }
    {
        bool tmp_condition_result_27;
        PyObject *tmp_key_value_15;
        PyObject *tmp_dict_arg_value_15;
        tmp_key_value_15 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_dict_arg_value_15 = tmp_class_creation_5__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_15, tmp_key_value_15);
        assert(!(tmp_res == -1));
        tmp_condition_result_27 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_27 != false) {
            goto branch_yes_17;
        } else {
            goto branch_no_17;
        }
    }
    branch_yes_17:;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_5__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 242;

        goto try_except_handler_15;
    }
    branch_no_17:;
    {
        nuitka_bool tmp_condition_result_28;
        PyObject *tmp_expression_value_22;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_22 = tmp_class_creation_5__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_22, mod_consts[206]);
        tmp_condition_result_28 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_28 == NUITKA_BOOL_TRUE) {
            goto branch_yes_18;
        } else {
            goto branch_no_18;
        }
    }
    branch_yes_18:;
    {
        PyObject *tmp_assign_source_49;
        PyObject *tmp_called_value_9;
        PyObject *tmp_expression_value_23;
        PyObject *tmp_args_value_9;
        PyObject *tmp_tuple_element_16;
        PyObject *tmp_kwargs_value_9;
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_expression_value_23 = tmp_class_creation_5__metaclass;
        tmp_called_value_9 = LOOKUP_ATTRIBUTE(tmp_expression_value_23, mod_consts[206]);
        if (tmp_called_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        tmp_tuple_element_16 = mod_consts[255];
        tmp_args_value_9 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_9, 0, tmp_tuple_element_16);
        CHECK_OBJECT(tmp_class_creation_5__bases);
        tmp_tuple_element_16 = tmp_class_creation_5__bases;
        PyTuple_SET_ITEM0(tmp_args_value_9, 1, tmp_tuple_element_16);
        CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
        tmp_kwargs_value_9 = tmp_class_creation_5__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 242;
        tmp_assign_source_49 = CALL_FUNCTION(tmp_called_value_9, tmp_args_value_9, tmp_kwargs_value_9);
        Py_DECREF(tmp_called_value_9);
        Py_DECREF(tmp_args_value_9);
        if (tmp_assign_source_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_49;
    }
    {
        bool tmp_condition_result_29;
        PyObject *tmp_operand_value_5;
        PyObject *tmp_expression_value_24;
        CHECK_OBJECT(tmp_class_creation_5__prepared);
        tmp_expression_value_24 = tmp_class_creation_5__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_24, mod_consts[208]);
        tmp_operand_value_5 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_5);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        tmp_condition_result_29 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_29 != false) {
            goto branch_yes_19;
        } else {
            goto branch_no_19;
        }
    }
    branch_yes_19:;
    {
        PyObject *tmp_raise_type_5;
        PyObject *tmp_raise_value_5;
        PyObject *tmp_left_value_5;
        PyObject *tmp_right_value_5;
        PyObject *tmp_tuple_element_17;
        PyObject *tmp_getattr_target_5;
        PyObject *tmp_getattr_attr_5;
        PyObject *tmp_getattr_default_5;
        tmp_raise_type_5 = PyExc_TypeError;
        tmp_left_value_5 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_5__metaclass);
        tmp_getattr_target_5 = tmp_class_creation_5__metaclass;
        tmp_getattr_attr_5 = mod_consts[210];
        tmp_getattr_default_5 = mod_consts[211];
        tmp_tuple_element_17 = BUILTIN_GETATTR(tmp_getattr_target_5, tmp_getattr_attr_5, tmp_getattr_default_5);
        if (tmp_tuple_element_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        tmp_right_value_5 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_25;
            PyObject *tmp_type_arg_10;
            PyTuple_SET_ITEM(tmp_right_value_5, 0, tmp_tuple_element_17);
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_type_arg_10 = tmp_class_creation_5__prepared;
            tmp_expression_value_25 = BUILTIN_TYPE1(tmp_type_arg_10);
            assert(!(tmp_expression_value_25 == NULL));
            tmp_tuple_element_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_25, mod_consts[210]);
            Py_DECREF(tmp_expression_value_25);
            if (tmp_tuple_element_17 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 242;

                goto tuple_build_exception_5;
            }
            PyTuple_SET_ITEM(tmp_right_value_5, 1, tmp_tuple_element_17);
        }
        goto tuple_build_noexception_5;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_5:;
        Py_DECREF(tmp_right_value_5);
        goto try_except_handler_15;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_5:;
        tmp_raise_value_5 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_5, tmp_right_value_5);
        Py_DECREF(tmp_right_value_5);
        if (tmp_raise_value_5 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_15;
        }
        exception_type = tmp_raise_type_5;
        Py_INCREF(tmp_raise_type_5);
        exception_value = tmp_raise_value_5;
        exception_lineno = 242;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_15;
    }
    branch_no_19:;
    goto branch_end_18;
    branch_no_18:;
    {
        PyObject *tmp_assign_source_50;
        tmp_assign_source_50 = PyDict_New();
        assert(tmp_class_creation_5__prepared == NULL);
        tmp_class_creation_5__prepared = tmp_assign_source_50;
    }
    branch_end_18:;
    {
        PyObject *tmp_assign_source_51;
        {
            PyObject *tmp_set_locals_5;
            CHECK_OBJECT(tmp_class_creation_5__prepared);
            tmp_set_locals_5 = tmp_class_creation_5__prepared;
            locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242 = tmp_set_locals_5;
            Py_INCREF(tmp_set_locals_5);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_17;
        }
        tmp_dictset_value = mod_consts[255];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_17;
        }
        if (isFrameUnusable(cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6)) {
            Py_XDECREF(cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6);

#if _DEBUG_REFCOUNTS
            if (cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6 = MAKE_FUNCTION_FRAME(codeobj_825fcb6aae5c99280c991a32ed2f61fb, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6->m_type_description == NULL);
        frame_825fcb6aae5c99280c991a32ed2f61fb_6 = cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_825fcb6aae5c99280c991a32ed2f61fb_6);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_825fcb6aae5c99280c991a32ed2f61fb_6) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[256];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 243;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__17___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 245;
            type_description_2 = "o";
            goto frame_exception_exit_6;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_825fcb6aae5c99280c991a32ed2f61fb_6);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_5;

        frame_exception_exit_6:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_825fcb6aae5c99280c991a32ed2f61fb_6);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_825fcb6aae5c99280c991a32ed2f61fb_6, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_825fcb6aae5c99280c991a32ed2f61fb_6->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_825fcb6aae5c99280c991a32ed2f61fb_6, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_825fcb6aae5c99280c991a32ed2f61fb_6,
            type_description_2,
            outline_4_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_825fcb6aae5c99280c991a32ed2f61fb_6 == cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6);
            cache_frame_825fcb6aae5c99280c991a32ed2f61fb_6 = NULL;
        }

        assertFrameObject(frame_825fcb6aae5c99280c991a32ed2f61fb_6);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_5;

        frame_no_exception_5:;
        goto skip_nested_handling_5;
        nested_frame_exit_5:;

        goto try_except_handler_17;
        skip_nested_handling_5:;
        {
            nuitka_bool tmp_condition_result_30;
            PyObject *tmp_cmp_expr_left_5;
            PyObject *tmp_cmp_expr_right_5;
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_cmp_expr_left_5 = tmp_class_creation_5__bases;
            CHECK_OBJECT(tmp_class_creation_5__bases_orig);
            tmp_cmp_expr_right_5 = tmp_class_creation_5__bases_orig;
            tmp_condition_result_30 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_5, tmp_cmp_expr_right_5);
            if (tmp_condition_result_30 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 242;

                goto try_except_handler_17;
            }
            if (tmp_condition_result_30 == NUITKA_BOOL_TRUE) {
                goto branch_yes_20;
            } else {
                goto branch_no_20;
            }
            assert(tmp_condition_result_30 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_20:;
        CHECK_OBJECT(tmp_class_creation_5__bases_orig);
        tmp_dictset_value = tmp_class_creation_5__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 242;

            goto try_except_handler_17;
        }
        branch_no_20:;
        {
            PyObject *tmp_assign_source_52;
            PyObject *tmp_called_value_10;
            PyObject *tmp_args_value_10;
            PyObject *tmp_tuple_element_18;
            PyObject *tmp_kwargs_value_10;
            CHECK_OBJECT(tmp_class_creation_5__metaclass);
            tmp_called_value_10 = tmp_class_creation_5__metaclass;
            tmp_tuple_element_18 = mod_consts[255];
            tmp_args_value_10 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_10, 0, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_5__bases);
            tmp_tuple_element_18 = tmp_class_creation_5__bases;
            PyTuple_SET_ITEM0(tmp_args_value_10, 1, tmp_tuple_element_18);
            tmp_tuple_element_18 = locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242;
            PyTuple_SET_ITEM0(tmp_args_value_10, 2, tmp_tuple_element_18);
            CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
            tmp_kwargs_value_10 = tmp_class_creation_5__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 242;
            tmp_assign_source_52 = CALL_FUNCTION(tmp_called_value_10, tmp_args_value_10, tmp_kwargs_value_10);
            Py_DECREF(tmp_args_value_10);
            if (tmp_assign_source_52 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 242;

                goto try_except_handler_17;
            }
            assert(outline_4_var___class__ == NULL);
            outline_4_var___class__ = tmp_assign_source_52;
        }
        CHECK_OBJECT(outline_4_var___class__);
        tmp_assign_source_51 = outline_4_var___class__;
        Py_INCREF(tmp_assign_source_51);
        goto try_return_handler_17;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_17:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242);
        locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242 = NULL;
        goto try_return_handler_16;
        // Exception handler code:
        try_except_handler_17:;
        exception_keeper_type_15 = exception_type;
        exception_keeper_value_15 = exception_value;
        exception_keeper_tb_15 = exception_tb;
        exception_keeper_lineno_15 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242);
        locals_xlwt$BIFFRecords$$$class__5_InteraceEndRecord_242 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_15;
        exception_value = exception_keeper_value_15;
        exception_tb = exception_keeper_tb_15;
        exception_lineno = exception_keeper_lineno_15;

        goto try_except_handler_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_16:;
        CHECK_OBJECT(outline_4_var___class__);
        Py_DECREF(outline_4_var___class__);
        outline_4_var___class__ = NULL;
        goto outline_result_5;
        // Exception handler code:
        try_except_handler_16:;
        exception_keeper_type_16 = exception_type;
        exception_keeper_value_16 = exception_value;
        exception_keeper_tb_16 = exception_tb;
        exception_keeper_lineno_16 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_16;
        exception_value = exception_keeper_value_16;
        exception_tb = exception_keeper_tb_16;
        exception_lineno = exception_keeper_lineno_16;

        goto outline_exception_5;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_5:;
        exception_lineno = 242;
        goto try_except_handler_15;
        outline_result_5:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[255], tmp_assign_source_51);
    }
    goto try_end_7;
    // Exception handler code:
    try_except_handler_15:;
    exception_keeper_type_17 = exception_type;
    exception_keeper_value_17 = exception_value;
    exception_keeper_tb_17 = exception_tb;
    exception_keeper_lineno_17 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    Py_XDECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_17;
    exception_value = exception_keeper_value_17;
    exception_tb = exception_keeper_tb_17;
    exception_lineno = exception_keeper_lineno_17;

    goto frame_exception_exit_1;
    // End of try:
    try_end_7:;
    CHECK_OBJECT(tmp_class_creation_5__bases_orig);
    Py_DECREF(tmp_class_creation_5__bases_orig);
    tmp_class_creation_5__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_5__bases);
    Py_DECREF(tmp_class_creation_5__bases);
    tmp_class_creation_5__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_5__class_decl_dict);
    Py_DECREF(tmp_class_creation_5__class_decl_dict);
    tmp_class_creation_5__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_5__metaclass);
    Py_DECREF(tmp_class_creation_5__metaclass);
    tmp_class_creation_5__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_5__prepared);
    Py_DECREF(tmp_class_creation_5__prepared);
    tmp_class_creation_5__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_53;
        PyObject *tmp_tuple_element_19;
        tmp_tuple_element_19 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_19 == NULL)) {
            tmp_tuple_element_19 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        tmp_assign_source_53 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_53, 0, tmp_tuple_element_19);
        assert(tmp_class_creation_6__bases_orig == NULL);
        tmp_class_creation_6__bases_orig = tmp_assign_source_53;
    }
    {
        PyObject *tmp_assign_source_54;
        PyObject *tmp_dircall_arg1_6;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dircall_arg1_6 = tmp_class_creation_6__bases_orig;
        Py_INCREF(tmp_dircall_arg1_6);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_6};
            tmp_assign_source_54 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        assert(tmp_class_creation_6__bases == NULL);
        tmp_class_creation_6__bases = tmp_assign_source_54;
    }
    {
        PyObject *tmp_assign_source_55;
        tmp_assign_source_55 = PyDict_New();
        assert(tmp_class_creation_6__class_decl_dict == NULL);
        tmp_class_creation_6__class_decl_dict = tmp_assign_source_55;
    }
    {
        PyObject *tmp_assign_source_56;
        PyObject *tmp_metaclass_value_6;
        bool tmp_condition_result_31;
        PyObject *tmp_key_value_16;
        PyObject *tmp_dict_arg_value_16;
        PyObject *tmp_dict_arg_value_17;
        PyObject *tmp_key_value_17;
        nuitka_bool tmp_condition_result_32;
        int tmp_truth_name_6;
        PyObject *tmp_type_arg_11;
        PyObject *tmp_expression_value_26;
        PyObject *tmp_subscript_value_6;
        PyObject *tmp_bases_value_6;
        tmp_key_value_16 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_16 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_16, tmp_key_value_16);
        assert(!(tmp_res == -1));
        tmp_condition_result_31 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_31 != false) {
            goto condexpr_true_11;
        } else {
            goto condexpr_false_11;
        }
        condexpr_true_11:;
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_17 = tmp_class_creation_6__class_decl_dict;
        tmp_key_value_17 = mod_consts[205];
        tmp_metaclass_value_6 = DICT_GET_ITEM0(tmp_dict_arg_value_17, tmp_key_value_17);
        if (tmp_metaclass_value_6 == NULL) {
            tmp_metaclass_value_6 = Py_None;
        }
        assert(!(tmp_metaclass_value_6 == NULL));
        Py_INCREF(tmp_metaclass_value_6);
        goto condexpr_end_11;
        condexpr_false_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_truth_name_6 = CHECK_IF_TRUE(tmp_class_creation_6__bases);
        if (tmp_truth_name_6 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        tmp_condition_result_32 = tmp_truth_name_6 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_32 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_12;
        } else {
            goto condexpr_false_12;
        }
        condexpr_true_12:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_expression_value_26 = tmp_class_creation_6__bases;
        tmp_subscript_value_6 = mod_consts[4];
        tmp_type_arg_11 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_26, tmp_subscript_value_6, 0);
        if (tmp_type_arg_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        tmp_metaclass_value_6 = BUILTIN_TYPE1(tmp_type_arg_11);
        Py_DECREF(tmp_type_arg_11);
        if (tmp_metaclass_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        goto condexpr_end_12;
        condexpr_false_12:;
        tmp_metaclass_value_6 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_6);
        condexpr_end_12:;
        condexpr_end_11:;
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_bases_value_6 = tmp_class_creation_6__bases;
        tmp_assign_source_56 = SELECT_METACLASS(tmp_metaclass_value_6, tmp_bases_value_6);
        Py_DECREF(tmp_metaclass_value_6);
        if (tmp_assign_source_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        assert(tmp_class_creation_6__metaclass == NULL);
        tmp_class_creation_6__metaclass = tmp_assign_source_56;
    }
    {
        bool tmp_condition_result_33;
        PyObject *tmp_key_value_18;
        PyObject *tmp_dict_arg_value_18;
        tmp_key_value_18 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_dict_arg_value_18 = tmp_class_creation_6__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_18, tmp_key_value_18);
        assert(!(tmp_res == -1));
        tmp_condition_result_33 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_33 != false) {
            goto branch_yes_21;
        } else {
            goto branch_no_21;
        }
    }
    branch_yes_21:;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_6__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 249;

        goto try_except_handler_18;
    }
    branch_no_21:;
    {
        nuitka_bool tmp_condition_result_34;
        PyObject *tmp_expression_value_27;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_27 = tmp_class_creation_6__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_27, mod_consts[206]);
        tmp_condition_result_34 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_34 == NUITKA_BOOL_TRUE) {
            goto branch_yes_22;
        } else {
            goto branch_no_22;
        }
    }
    branch_yes_22:;
    {
        PyObject *tmp_assign_source_57;
        PyObject *tmp_called_value_11;
        PyObject *tmp_expression_value_28;
        PyObject *tmp_args_value_11;
        PyObject *tmp_tuple_element_20;
        PyObject *tmp_kwargs_value_11;
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_expression_value_28 = tmp_class_creation_6__metaclass;
        tmp_called_value_11 = LOOKUP_ATTRIBUTE(tmp_expression_value_28, mod_consts[206]);
        if (tmp_called_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        tmp_tuple_element_20 = mod_consts[258];
        tmp_args_value_11 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_11, 0, tmp_tuple_element_20);
        CHECK_OBJECT(tmp_class_creation_6__bases);
        tmp_tuple_element_20 = tmp_class_creation_6__bases;
        PyTuple_SET_ITEM0(tmp_args_value_11, 1, tmp_tuple_element_20);
        CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
        tmp_kwargs_value_11 = tmp_class_creation_6__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 249;
        tmp_assign_source_57 = CALL_FUNCTION(tmp_called_value_11, tmp_args_value_11, tmp_kwargs_value_11);
        Py_DECREF(tmp_called_value_11);
        Py_DECREF(tmp_args_value_11);
        if (tmp_assign_source_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_57;
    }
    {
        bool tmp_condition_result_35;
        PyObject *tmp_operand_value_6;
        PyObject *tmp_expression_value_29;
        CHECK_OBJECT(tmp_class_creation_6__prepared);
        tmp_expression_value_29 = tmp_class_creation_6__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_29, mod_consts[208]);
        tmp_operand_value_6 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_6);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        tmp_condition_result_35 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_35 != false) {
            goto branch_yes_23;
        } else {
            goto branch_no_23;
        }
    }
    branch_yes_23:;
    {
        PyObject *tmp_raise_type_6;
        PyObject *tmp_raise_value_6;
        PyObject *tmp_left_value_6;
        PyObject *tmp_right_value_6;
        PyObject *tmp_tuple_element_21;
        PyObject *tmp_getattr_target_6;
        PyObject *tmp_getattr_attr_6;
        PyObject *tmp_getattr_default_6;
        tmp_raise_type_6 = PyExc_TypeError;
        tmp_left_value_6 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_6__metaclass);
        tmp_getattr_target_6 = tmp_class_creation_6__metaclass;
        tmp_getattr_attr_6 = mod_consts[210];
        tmp_getattr_default_6 = mod_consts[211];
        tmp_tuple_element_21 = BUILTIN_GETATTR(tmp_getattr_target_6, tmp_getattr_attr_6, tmp_getattr_default_6);
        if (tmp_tuple_element_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        tmp_right_value_6 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_30;
            PyObject *tmp_type_arg_12;
            PyTuple_SET_ITEM(tmp_right_value_6, 0, tmp_tuple_element_21);
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_type_arg_12 = tmp_class_creation_6__prepared;
            tmp_expression_value_30 = BUILTIN_TYPE1(tmp_type_arg_12);
            assert(!(tmp_expression_value_30 == NULL));
            tmp_tuple_element_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_30, mod_consts[210]);
            Py_DECREF(tmp_expression_value_30);
            if (tmp_tuple_element_21 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 249;

                goto tuple_build_exception_6;
            }
            PyTuple_SET_ITEM(tmp_right_value_6, 1, tmp_tuple_element_21);
        }
        goto tuple_build_noexception_6;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_6:;
        Py_DECREF(tmp_right_value_6);
        goto try_except_handler_18;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_6:;
        tmp_raise_value_6 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_6, tmp_right_value_6);
        Py_DECREF(tmp_right_value_6);
        if (tmp_raise_value_6 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_18;
        }
        exception_type = tmp_raise_type_6;
        Py_INCREF(tmp_raise_type_6);
        exception_value = tmp_raise_value_6;
        exception_lineno = 249;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_18;
    }
    branch_no_23:;
    goto branch_end_22;
    branch_no_22:;
    {
        PyObject *tmp_assign_source_58;
        tmp_assign_source_58 = PyDict_New();
        assert(tmp_class_creation_6__prepared == NULL);
        tmp_class_creation_6__prepared = tmp_assign_source_58;
    }
    branch_end_22:;
    {
        PyObject *tmp_assign_source_59;
        {
            PyObject *tmp_set_locals_6;
            CHECK_OBJECT(tmp_class_creation_6__prepared);
            tmp_set_locals_6 = tmp_class_creation_6__prepared;
            locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249 = tmp_set_locals_6;
            Py_INCREF(tmp_set_locals_6);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_20;
        }
        tmp_dictset_value = mod_consts[258];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_20;
        }
        if (isFrameUnusable(cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7)) {
            Py_XDECREF(cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7);

#if _DEBUG_REFCOUNTS
            if (cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7 = MAKE_FUNCTION_FRAME(codeobj_264fedeff712f5ba78d0c8dd95cdeb3b, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7->m_type_description == NULL);
        frame_264fedeff712f5ba78d0c8dd95cdeb3b_7 = cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_264fedeff712f5ba78d0c8dd95cdeb3b_7);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_264fedeff712f5ba78d0c8dd95cdeb3b_7) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[259];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 250;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__18___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 252;
            type_description_2 = "o";
            goto frame_exception_exit_7;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_264fedeff712f5ba78d0c8dd95cdeb3b_7);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_6;

        frame_exception_exit_7:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_264fedeff712f5ba78d0c8dd95cdeb3b_7);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_264fedeff712f5ba78d0c8dd95cdeb3b_7, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_264fedeff712f5ba78d0c8dd95cdeb3b_7->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_264fedeff712f5ba78d0c8dd95cdeb3b_7, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_264fedeff712f5ba78d0c8dd95cdeb3b_7,
            type_description_2,
            outline_5_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_264fedeff712f5ba78d0c8dd95cdeb3b_7 == cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7);
            cache_frame_264fedeff712f5ba78d0c8dd95cdeb3b_7 = NULL;
        }

        assertFrameObject(frame_264fedeff712f5ba78d0c8dd95cdeb3b_7);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_6;

        frame_no_exception_6:;
        goto skip_nested_handling_6;
        nested_frame_exit_6:;

        goto try_except_handler_20;
        skip_nested_handling_6:;
        {
            nuitka_bool tmp_condition_result_36;
            PyObject *tmp_cmp_expr_left_6;
            PyObject *tmp_cmp_expr_right_6;
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_cmp_expr_left_6 = tmp_class_creation_6__bases;
            CHECK_OBJECT(tmp_class_creation_6__bases_orig);
            tmp_cmp_expr_right_6 = tmp_class_creation_6__bases_orig;
            tmp_condition_result_36 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_6, tmp_cmp_expr_right_6);
            if (tmp_condition_result_36 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 249;

                goto try_except_handler_20;
            }
            if (tmp_condition_result_36 == NUITKA_BOOL_TRUE) {
                goto branch_yes_24;
            } else {
                goto branch_no_24;
            }
            assert(tmp_condition_result_36 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_24:;
        CHECK_OBJECT(tmp_class_creation_6__bases_orig);
        tmp_dictset_value = tmp_class_creation_6__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 249;

            goto try_except_handler_20;
        }
        branch_no_24:;
        {
            PyObject *tmp_assign_source_60;
            PyObject *tmp_called_value_12;
            PyObject *tmp_args_value_12;
            PyObject *tmp_tuple_element_22;
            PyObject *tmp_kwargs_value_12;
            CHECK_OBJECT(tmp_class_creation_6__metaclass);
            tmp_called_value_12 = tmp_class_creation_6__metaclass;
            tmp_tuple_element_22 = mod_consts[258];
            tmp_args_value_12 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_12, 0, tmp_tuple_element_22);
            CHECK_OBJECT(tmp_class_creation_6__bases);
            tmp_tuple_element_22 = tmp_class_creation_6__bases;
            PyTuple_SET_ITEM0(tmp_args_value_12, 1, tmp_tuple_element_22);
            tmp_tuple_element_22 = locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249;
            PyTuple_SET_ITEM0(tmp_args_value_12, 2, tmp_tuple_element_22);
            CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
            tmp_kwargs_value_12 = tmp_class_creation_6__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 249;
            tmp_assign_source_60 = CALL_FUNCTION(tmp_called_value_12, tmp_args_value_12, tmp_kwargs_value_12);
            Py_DECREF(tmp_args_value_12);
            if (tmp_assign_source_60 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 249;

                goto try_except_handler_20;
            }
            assert(outline_5_var___class__ == NULL);
            outline_5_var___class__ = tmp_assign_source_60;
        }
        CHECK_OBJECT(outline_5_var___class__);
        tmp_assign_source_59 = outline_5_var___class__;
        Py_INCREF(tmp_assign_source_59);
        goto try_return_handler_20;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_20:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249);
        locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249 = NULL;
        goto try_return_handler_19;
        // Exception handler code:
        try_except_handler_20:;
        exception_keeper_type_18 = exception_type;
        exception_keeper_value_18 = exception_value;
        exception_keeper_tb_18 = exception_tb;
        exception_keeper_lineno_18 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249);
        locals_xlwt$BIFFRecords$$$class__6_MMSRecord_249 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_18;
        exception_value = exception_keeper_value_18;
        exception_tb = exception_keeper_tb_18;
        exception_lineno = exception_keeper_lineno_18;

        goto try_except_handler_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_19:;
        CHECK_OBJECT(outline_5_var___class__);
        Py_DECREF(outline_5_var___class__);
        outline_5_var___class__ = NULL;
        goto outline_result_6;
        // Exception handler code:
        try_except_handler_19:;
        exception_keeper_type_19 = exception_type;
        exception_keeper_value_19 = exception_value;
        exception_keeper_tb_19 = exception_tb;
        exception_keeper_lineno_19 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_19;
        exception_value = exception_keeper_value_19;
        exception_tb = exception_keeper_tb_19;
        exception_lineno = exception_keeper_lineno_19;

        goto outline_exception_6;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_6:;
        exception_lineno = 249;
        goto try_except_handler_18;
        outline_result_6:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[258], tmp_assign_source_59);
    }
    goto try_end_8;
    // Exception handler code:
    try_except_handler_18:;
    exception_keeper_type_20 = exception_type;
    exception_keeper_value_20 = exception_value;
    exception_keeper_tb_20 = exception_tb;
    exception_keeper_lineno_20 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    Py_XDECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_20;
    exception_value = exception_keeper_value_20;
    exception_tb = exception_keeper_tb_20;
    exception_lineno = exception_keeper_lineno_20;

    goto frame_exception_exit_1;
    // End of try:
    try_end_8:;
    CHECK_OBJECT(tmp_class_creation_6__bases_orig);
    Py_DECREF(tmp_class_creation_6__bases_orig);
    tmp_class_creation_6__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_6__bases);
    Py_DECREF(tmp_class_creation_6__bases);
    tmp_class_creation_6__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_6__class_decl_dict);
    Py_DECREF(tmp_class_creation_6__class_decl_dict);
    tmp_class_creation_6__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_6__metaclass);
    Py_DECREF(tmp_class_creation_6__metaclass);
    tmp_class_creation_6__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_6__prepared);
    Py_DECREF(tmp_class_creation_6__prepared);
    tmp_class_creation_6__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_61;
        PyObject *tmp_tuple_element_23;
        tmp_tuple_element_23 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_23 == NULL)) {
            tmp_tuple_element_23 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        tmp_assign_source_61 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_61, 0, tmp_tuple_element_23);
        assert(tmp_class_creation_7__bases_orig == NULL);
        tmp_class_creation_7__bases_orig = tmp_assign_source_61;
    }
    {
        PyObject *tmp_assign_source_62;
        PyObject *tmp_dircall_arg1_7;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dircall_arg1_7 = tmp_class_creation_7__bases_orig;
        Py_INCREF(tmp_dircall_arg1_7);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_7};
            tmp_assign_source_62 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        assert(tmp_class_creation_7__bases == NULL);
        tmp_class_creation_7__bases = tmp_assign_source_62;
    }
    {
        PyObject *tmp_assign_source_63;
        tmp_assign_source_63 = PyDict_New();
        assert(tmp_class_creation_7__class_decl_dict == NULL);
        tmp_class_creation_7__class_decl_dict = tmp_assign_source_63;
    }
    {
        PyObject *tmp_assign_source_64;
        PyObject *tmp_metaclass_value_7;
        bool tmp_condition_result_37;
        PyObject *tmp_key_value_19;
        PyObject *tmp_dict_arg_value_19;
        PyObject *tmp_dict_arg_value_20;
        PyObject *tmp_key_value_20;
        nuitka_bool tmp_condition_result_38;
        int tmp_truth_name_7;
        PyObject *tmp_type_arg_13;
        PyObject *tmp_expression_value_31;
        PyObject *tmp_subscript_value_7;
        PyObject *tmp_bases_value_7;
        tmp_key_value_19 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_19 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_19, tmp_key_value_19);
        assert(!(tmp_res == -1));
        tmp_condition_result_37 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_37 != false) {
            goto condexpr_true_13;
        } else {
            goto condexpr_false_13;
        }
        condexpr_true_13:;
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_20 = tmp_class_creation_7__class_decl_dict;
        tmp_key_value_20 = mod_consts[205];
        tmp_metaclass_value_7 = DICT_GET_ITEM0(tmp_dict_arg_value_20, tmp_key_value_20);
        if (tmp_metaclass_value_7 == NULL) {
            tmp_metaclass_value_7 = Py_None;
        }
        assert(!(tmp_metaclass_value_7 == NULL));
        Py_INCREF(tmp_metaclass_value_7);
        goto condexpr_end_13;
        condexpr_false_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_truth_name_7 = CHECK_IF_TRUE(tmp_class_creation_7__bases);
        if (tmp_truth_name_7 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        tmp_condition_result_38 = tmp_truth_name_7 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_38 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_14;
        } else {
            goto condexpr_false_14;
        }
        condexpr_true_14:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_expression_value_31 = tmp_class_creation_7__bases;
        tmp_subscript_value_7 = mod_consts[4];
        tmp_type_arg_13 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_31, tmp_subscript_value_7, 0);
        if (tmp_type_arg_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        tmp_metaclass_value_7 = BUILTIN_TYPE1(tmp_type_arg_13);
        Py_DECREF(tmp_type_arg_13);
        if (tmp_metaclass_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        goto condexpr_end_14;
        condexpr_false_14:;
        tmp_metaclass_value_7 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_7);
        condexpr_end_14:;
        condexpr_end_13:;
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_bases_value_7 = tmp_class_creation_7__bases;
        tmp_assign_source_64 = SELECT_METACLASS(tmp_metaclass_value_7, tmp_bases_value_7);
        Py_DECREF(tmp_metaclass_value_7);
        if (tmp_assign_source_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        assert(tmp_class_creation_7__metaclass == NULL);
        tmp_class_creation_7__metaclass = tmp_assign_source_64;
    }
    {
        bool tmp_condition_result_39;
        PyObject *tmp_key_value_21;
        PyObject *tmp_dict_arg_value_21;
        tmp_key_value_21 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_dict_arg_value_21 = tmp_class_creation_7__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_21, tmp_key_value_21);
        assert(!(tmp_res == -1));
        tmp_condition_result_39 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_39 != false) {
            goto branch_yes_25;
        } else {
            goto branch_no_25;
        }
    }
    branch_yes_25:;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_7__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 256;

        goto try_except_handler_21;
    }
    branch_no_25:;
    {
        nuitka_bool tmp_condition_result_40;
        PyObject *tmp_expression_value_32;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_32 = tmp_class_creation_7__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_32, mod_consts[206]);
        tmp_condition_result_40 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_40 == NUITKA_BOOL_TRUE) {
            goto branch_yes_26;
        } else {
            goto branch_no_26;
        }
    }
    branch_yes_26:;
    {
        PyObject *tmp_assign_source_65;
        PyObject *tmp_called_value_13;
        PyObject *tmp_expression_value_33;
        PyObject *tmp_args_value_13;
        PyObject *tmp_tuple_element_24;
        PyObject *tmp_kwargs_value_13;
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_expression_value_33 = tmp_class_creation_7__metaclass;
        tmp_called_value_13 = LOOKUP_ATTRIBUTE(tmp_expression_value_33, mod_consts[206]);
        if (tmp_called_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        tmp_tuple_element_24 = mod_consts[261];
        tmp_args_value_13 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_13, 0, tmp_tuple_element_24);
        CHECK_OBJECT(tmp_class_creation_7__bases);
        tmp_tuple_element_24 = tmp_class_creation_7__bases;
        PyTuple_SET_ITEM0(tmp_args_value_13, 1, tmp_tuple_element_24);
        CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
        tmp_kwargs_value_13 = tmp_class_creation_7__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 256;
        tmp_assign_source_65 = CALL_FUNCTION(tmp_called_value_13, tmp_args_value_13, tmp_kwargs_value_13);
        Py_DECREF(tmp_called_value_13);
        Py_DECREF(tmp_args_value_13);
        if (tmp_assign_source_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_65;
    }
    {
        bool tmp_condition_result_41;
        PyObject *tmp_operand_value_7;
        PyObject *tmp_expression_value_34;
        CHECK_OBJECT(tmp_class_creation_7__prepared);
        tmp_expression_value_34 = tmp_class_creation_7__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_34, mod_consts[208]);
        tmp_operand_value_7 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_7);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        tmp_condition_result_41 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_41 != false) {
            goto branch_yes_27;
        } else {
            goto branch_no_27;
        }
    }
    branch_yes_27:;
    {
        PyObject *tmp_raise_type_7;
        PyObject *tmp_raise_value_7;
        PyObject *tmp_left_value_7;
        PyObject *tmp_right_value_7;
        PyObject *tmp_tuple_element_25;
        PyObject *tmp_getattr_target_7;
        PyObject *tmp_getattr_attr_7;
        PyObject *tmp_getattr_default_7;
        tmp_raise_type_7 = PyExc_TypeError;
        tmp_left_value_7 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_7__metaclass);
        tmp_getattr_target_7 = tmp_class_creation_7__metaclass;
        tmp_getattr_attr_7 = mod_consts[210];
        tmp_getattr_default_7 = mod_consts[211];
        tmp_tuple_element_25 = BUILTIN_GETATTR(tmp_getattr_target_7, tmp_getattr_attr_7, tmp_getattr_default_7);
        if (tmp_tuple_element_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        tmp_right_value_7 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_35;
            PyObject *tmp_type_arg_14;
            PyTuple_SET_ITEM(tmp_right_value_7, 0, tmp_tuple_element_25);
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_type_arg_14 = tmp_class_creation_7__prepared;
            tmp_expression_value_35 = BUILTIN_TYPE1(tmp_type_arg_14);
            assert(!(tmp_expression_value_35 == NULL));
            tmp_tuple_element_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_35, mod_consts[210]);
            Py_DECREF(tmp_expression_value_35);
            if (tmp_tuple_element_25 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 256;

                goto tuple_build_exception_7;
            }
            PyTuple_SET_ITEM(tmp_right_value_7, 1, tmp_tuple_element_25);
        }
        goto tuple_build_noexception_7;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_7:;
        Py_DECREF(tmp_right_value_7);
        goto try_except_handler_21;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_7:;
        tmp_raise_value_7 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_7, tmp_right_value_7);
        Py_DECREF(tmp_right_value_7);
        if (tmp_raise_value_7 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_21;
        }
        exception_type = tmp_raise_type_7;
        Py_INCREF(tmp_raise_type_7);
        exception_value = tmp_raise_value_7;
        exception_lineno = 256;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_21;
    }
    branch_no_27:;
    goto branch_end_26;
    branch_no_26:;
    {
        PyObject *tmp_assign_source_66;
        tmp_assign_source_66 = PyDict_New();
        assert(tmp_class_creation_7__prepared == NULL);
        tmp_class_creation_7__prepared = tmp_assign_source_66;
    }
    branch_end_26:;
    {
        PyObject *tmp_assign_source_67;
        {
            PyObject *tmp_set_locals_7;
            CHECK_OBJECT(tmp_class_creation_7__prepared);
            tmp_set_locals_7 = tmp_class_creation_7__prepared;
            locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256 = tmp_set_locals_7;
            Py_INCREF(tmp_set_locals_7);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_23;
        }
        tmp_dictset_value = mod_consts[262];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_23;
        }
        tmp_dictset_value = mod_consts[261];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_23;
        }
        if (isFrameUnusable(cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8)) {
            Py_XDECREF(cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8 = MAKE_FUNCTION_FRAME(codeobj_5b4eac466b0c6de52a9d9f1115a88b6d, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8->m_type_description == NULL);
        frame_5b4eac466b0c6de52a9d9f1115a88b6d_8 = cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5b4eac466b0c6de52a9d9f1115a88b6d_8);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5b4eac466b0c6de52a9d9f1115a88b6d_8) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[263];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 264;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__19___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 266;
            type_description_2 = "o";
            goto frame_exception_exit_8;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5b4eac466b0c6de52a9d9f1115a88b6d_8);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_7;

        frame_exception_exit_8:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5b4eac466b0c6de52a9d9f1115a88b6d_8);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5b4eac466b0c6de52a9d9f1115a88b6d_8, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5b4eac466b0c6de52a9d9f1115a88b6d_8->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5b4eac466b0c6de52a9d9f1115a88b6d_8, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5b4eac466b0c6de52a9d9f1115a88b6d_8,
            type_description_2,
            outline_6_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5b4eac466b0c6de52a9d9f1115a88b6d_8 == cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8);
            cache_frame_5b4eac466b0c6de52a9d9f1115a88b6d_8 = NULL;
        }

        assertFrameObject(frame_5b4eac466b0c6de52a9d9f1115a88b6d_8);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_7;

        frame_no_exception_7:;
        goto skip_nested_handling_7;
        nested_frame_exit_7:;

        goto try_except_handler_23;
        skip_nested_handling_7:;
        {
            nuitka_bool tmp_condition_result_42;
            PyObject *tmp_cmp_expr_left_7;
            PyObject *tmp_cmp_expr_right_7;
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_cmp_expr_left_7 = tmp_class_creation_7__bases;
            CHECK_OBJECT(tmp_class_creation_7__bases_orig);
            tmp_cmp_expr_right_7 = tmp_class_creation_7__bases_orig;
            tmp_condition_result_42 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_7, tmp_cmp_expr_right_7);
            if (tmp_condition_result_42 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 256;

                goto try_except_handler_23;
            }
            if (tmp_condition_result_42 == NUITKA_BOOL_TRUE) {
                goto branch_yes_28;
            } else {
                goto branch_no_28;
            }
            assert(tmp_condition_result_42 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_28:;
        CHECK_OBJECT(tmp_class_creation_7__bases_orig);
        tmp_dictset_value = tmp_class_creation_7__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 256;

            goto try_except_handler_23;
        }
        branch_no_28:;
        {
            PyObject *tmp_assign_source_68;
            PyObject *tmp_called_value_14;
            PyObject *tmp_args_value_14;
            PyObject *tmp_tuple_element_26;
            PyObject *tmp_kwargs_value_14;
            CHECK_OBJECT(tmp_class_creation_7__metaclass);
            tmp_called_value_14 = tmp_class_creation_7__metaclass;
            tmp_tuple_element_26 = mod_consts[261];
            tmp_args_value_14 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_14, 0, tmp_tuple_element_26);
            CHECK_OBJECT(tmp_class_creation_7__bases);
            tmp_tuple_element_26 = tmp_class_creation_7__bases;
            PyTuple_SET_ITEM0(tmp_args_value_14, 1, tmp_tuple_element_26);
            tmp_tuple_element_26 = locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256;
            PyTuple_SET_ITEM0(tmp_args_value_14, 2, tmp_tuple_element_26);
            CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
            tmp_kwargs_value_14 = tmp_class_creation_7__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 256;
            tmp_assign_source_68 = CALL_FUNCTION(tmp_called_value_14, tmp_args_value_14, tmp_kwargs_value_14);
            Py_DECREF(tmp_args_value_14);
            if (tmp_assign_source_68 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 256;

                goto try_except_handler_23;
            }
            assert(outline_6_var___class__ == NULL);
            outline_6_var___class__ = tmp_assign_source_68;
        }
        CHECK_OBJECT(outline_6_var___class__);
        tmp_assign_source_67 = outline_6_var___class__;
        Py_INCREF(tmp_assign_source_67);
        goto try_return_handler_23;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_23:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256);
        locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256 = NULL;
        goto try_return_handler_22;
        // Exception handler code:
        try_except_handler_23:;
        exception_keeper_type_21 = exception_type;
        exception_keeper_value_21 = exception_value;
        exception_keeper_tb_21 = exception_tb;
        exception_keeper_lineno_21 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256);
        locals_xlwt$BIFFRecords$$$class__7_WriteAccessRecord_256 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_21;
        exception_value = exception_keeper_value_21;
        exception_tb = exception_keeper_tb_21;
        exception_lineno = exception_keeper_lineno_21;

        goto try_except_handler_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_22:;
        CHECK_OBJECT(outline_6_var___class__);
        Py_DECREF(outline_6_var___class__);
        outline_6_var___class__ = NULL;
        goto outline_result_7;
        // Exception handler code:
        try_except_handler_22:;
        exception_keeper_type_22 = exception_type;
        exception_keeper_value_22 = exception_value;
        exception_keeper_tb_22 = exception_tb;
        exception_keeper_lineno_22 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_22;
        exception_value = exception_keeper_value_22;
        exception_tb = exception_keeper_tb_22;
        exception_lineno = exception_keeper_lineno_22;

        goto outline_exception_7;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_7:;
        exception_lineno = 256;
        goto try_except_handler_21;
        outline_result_7:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[261], tmp_assign_source_67);
    }
    goto try_end_9;
    // Exception handler code:
    try_except_handler_21:;
    exception_keeper_type_23 = exception_type;
    exception_keeper_value_23 = exception_value;
    exception_keeper_tb_23 = exception_tb;
    exception_keeper_lineno_23 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    Py_XDECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_23;
    exception_value = exception_keeper_value_23;
    exception_tb = exception_keeper_tb_23;
    exception_lineno = exception_keeper_lineno_23;

    goto frame_exception_exit_1;
    // End of try:
    try_end_9:;
    CHECK_OBJECT(tmp_class_creation_7__bases_orig);
    Py_DECREF(tmp_class_creation_7__bases_orig);
    tmp_class_creation_7__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_7__bases);
    Py_DECREF(tmp_class_creation_7__bases);
    tmp_class_creation_7__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_7__class_decl_dict);
    Py_DECREF(tmp_class_creation_7__class_decl_dict);
    tmp_class_creation_7__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_7__metaclass);
    Py_DECREF(tmp_class_creation_7__metaclass);
    tmp_class_creation_7__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_7__prepared);
    Py_DECREF(tmp_class_creation_7__prepared);
    tmp_class_creation_7__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_69;
        PyObject *tmp_tuple_element_27;
        tmp_tuple_element_27 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_27 == NULL)) {
            tmp_tuple_element_27 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        tmp_assign_source_69 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_69, 0, tmp_tuple_element_27);
        assert(tmp_class_creation_8__bases_orig == NULL);
        tmp_class_creation_8__bases_orig = tmp_assign_source_69;
    }
    {
        PyObject *tmp_assign_source_70;
        PyObject *tmp_dircall_arg1_8;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dircall_arg1_8 = tmp_class_creation_8__bases_orig;
        Py_INCREF(tmp_dircall_arg1_8);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_8};
            tmp_assign_source_70 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        assert(tmp_class_creation_8__bases == NULL);
        tmp_class_creation_8__bases = tmp_assign_source_70;
    }
    {
        PyObject *tmp_assign_source_71;
        tmp_assign_source_71 = PyDict_New();
        assert(tmp_class_creation_8__class_decl_dict == NULL);
        tmp_class_creation_8__class_decl_dict = tmp_assign_source_71;
    }
    {
        PyObject *tmp_assign_source_72;
        PyObject *tmp_metaclass_value_8;
        bool tmp_condition_result_43;
        PyObject *tmp_key_value_22;
        PyObject *tmp_dict_arg_value_22;
        PyObject *tmp_dict_arg_value_23;
        PyObject *tmp_key_value_23;
        nuitka_bool tmp_condition_result_44;
        int tmp_truth_name_8;
        PyObject *tmp_type_arg_15;
        PyObject *tmp_expression_value_36;
        PyObject *tmp_subscript_value_8;
        PyObject *tmp_bases_value_8;
        tmp_key_value_22 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_22 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_22, tmp_key_value_22);
        assert(!(tmp_res == -1));
        tmp_condition_result_43 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_43 != false) {
            goto condexpr_true_15;
        } else {
            goto condexpr_false_15;
        }
        condexpr_true_15:;
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_23 = tmp_class_creation_8__class_decl_dict;
        tmp_key_value_23 = mod_consts[205];
        tmp_metaclass_value_8 = DICT_GET_ITEM0(tmp_dict_arg_value_23, tmp_key_value_23);
        if (tmp_metaclass_value_8 == NULL) {
            tmp_metaclass_value_8 = Py_None;
        }
        assert(!(tmp_metaclass_value_8 == NULL));
        Py_INCREF(tmp_metaclass_value_8);
        goto condexpr_end_15;
        condexpr_false_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_truth_name_8 = CHECK_IF_TRUE(tmp_class_creation_8__bases);
        if (tmp_truth_name_8 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        tmp_condition_result_44 = tmp_truth_name_8 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_44 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_16;
        } else {
            goto condexpr_false_16;
        }
        condexpr_true_16:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_expression_value_36 = tmp_class_creation_8__bases;
        tmp_subscript_value_8 = mod_consts[4];
        tmp_type_arg_15 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_36, tmp_subscript_value_8, 0);
        if (tmp_type_arg_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        tmp_metaclass_value_8 = BUILTIN_TYPE1(tmp_type_arg_15);
        Py_DECREF(tmp_type_arg_15);
        if (tmp_metaclass_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        goto condexpr_end_16;
        condexpr_false_16:;
        tmp_metaclass_value_8 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_8);
        condexpr_end_16:;
        condexpr_end_15:;
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_bases_value_8 = tmp_class_creation_8__bases;
        tmp_assign_source_72 = SELECT_METACLASS(tmp_metaclass_value_8, tmp_bases_value_8);
        Py_DECREF(tmp_metaclass_value_8);
        if (tmp_assign_source_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        assert(tmp_class_creation_8__metaclass == NULL);
        tmp_class_creation_8__metaclass = tmp_assign_source_72;
    }
    {
        bool tmp_condition_result_45;
        PyObject *tmp_key_value_24;
        PyObject *tmp_dict_arg_value_24;
        tmp_key_value_24 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_dict_arg_value_24 = tmp_class_creation_8__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_24, tmp_key_value_24);
        assert(!(tmp_res == -1));
        tmp_condition_result_45 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_45 != false) {
            goto branch_yes_29;
        } else {
            goto branch_no_29;
        }
    }
    branch_yes_29:;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_8__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 274;

        goto try_except_handler_24;
    }
    branch_no_29:;
    {
        nuitka_bool tmp_condition_result_46;
        PyObject *tmp_expression_value_37;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_37 = tmp_class_creation_8__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_37, mod_consts[206]);
        tmp_condition_result_46 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_46 == NUITKA_BOOL_TRUE) {
            goto branch_yes_30;
        } else {
            goto branch_no_30;
        }
    }
    branch_yes_30:;
    {
        PyObject *tmp_assign_source_73;
        PyObject *tmp_called_value_15;
        PyObject *tmp_expression_value_38;
        PyObject *tmp_args_value_15;
        PyObject *tmp_tuple_element_28;
        PyObject *tmp_kwargs_value_15;
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_expression_value_38 = tmp_class_creation_8__metaclass;
        tmp_called_value_15 = LOOKUP_ATTRIBUTE(tmp_expression_value_38, mod_consts[206]);
        if (tmp_called_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        tmp_tuple_element_28 = mod_consts[265];
        tmp_args_value_15 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_15, 0, tmp_tuple_element_28);
        CHECK_OBJECT(tmp_class_creation_8__bases);
        tmp_tuple_element_28 = tmp_class_creation_8__bases;
        PyTuple_SET_ITEM0(tmp_args_value_15, 1, tmp_tuple_element_28);
        CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
        tmp_kwargs_value_15 = tmp_class_creation_8__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 274;
        tmp_assign_source_73 = CALL_FUNCTION(tmp_called_value_15, tmp_args_value_15, tmp_kwargs_value_15);
        Py_DECREF(tmp_called_value_15);
        Py_DECREF(tmp_args_value_15);
        if (tmp_assign_source_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_73;
    }
    {
        bool tmp_condition_result_47;
        PyObject *tmp_operand_value_8;
        PyObject *tmp_expression_value_39;
        CHECK_OBJECT(tmp_class_creation_8__prepared);
        tmp_expression_value_39 = tmp_class_creation_8__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_39, mod_consts[208]);
        tmp_operand_value_8 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_8);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        tmp_condition_result_47 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_47 != false) {
            goto branch_yes_31;
        } else {
            goto branch_no_31;
        }
    }
    branch_yes_31:;
    {
        PyObject *tmp_raise_type_8;
        PyObject *tmp_raise_value_8;
        PyObject *tmp_left_value_8;
        PyObject *tmp_right_value_8;
        PyObject *tmp_tuple_element_29;
        PyObject *tmp_getattr_target_8;
        PyObject *tmp_getattr_attr_8;
        PyObject *tmp_getattr_default_8;
        tmp_raise_type_8 = PyExc_TypeError;
        tmp_left_value_8 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_8__metaclass);
        tmp_getattr_target_8 = tmp_class_creation_8__metaclass;
        tmp_getattr_attr_8 = mod_consts[210];
        tmp_getattr_default_8 = mod_consts[211];
        tmp_tuple_element_29 = BUILTIN_GETATTR(tmp_getattr_target_8, tmp_getattr_attr_8, tmp_getattr_default_8);
        if (tmp_tuple_element_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        tmp_right_value_8 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_40;
            PyObject *tmp_type_arg_16;
            PyTuple_SET_ITEM(tmp_right_value_8, 0, tmp_tuple_element_29);
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_type_arg_16 = tmp_class_creation_8__prepared;
            tmp_expression_value_40 = BUILTIN_TYPE1(tmp_type_arg_16);
            assert(!(tmp_expression_value_40 == NULL));
            tmp_tuple_element_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_40, mod_consts[210]);
            Py_DECREF(tmp_expression_value_40);
            if (tmp_tuple_element_29 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 274;

                goto tuple_build_exception_8;
            }
            PyTuple_SET_ITEM(tmp_right_value_8, 1, tmp_tuple_element_29);
        }
        goto tuple_build_noexception_8;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_8:;
        Py_DECREF(tmp_right_value_8);
        goto try_except_handler_24;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_8:;
        tmp_raise_value_8 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_8, tmp_right_value_8);
        Py_DECREF(tmp_right_value_8);
        if (tmp_raise_value_8 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_24;
        }
        exception_type = tmp_raise_type_8;
        Py_INCREF(tmp_raise_type_8);
        exception_value = tmp_raise_value_8;
        exception_lineno = 274;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_24;
    }
    branch_no_31:;
    goto branch_end_30;
    branch_no_30:;
    {
        PyObject *tmp_assign_source_74;
        tmp_assign_source_74 = PyDict_New();
        assert(tmp_class_creation_8__prepared == NULL);
        tmp_class_creation_8__prepared = tmp_assign_source_74;
    }
    branch_end_30:;
    {
        PyObject *tmp_assign_source_75;
        {
            PyObject *tmp_set_locals_8;
            CHECK_OBJECT(tmp_class_creation_8__prepared);
            tmp_set_locals_8 = tmp_class_creation_8__prepared;
            locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274 = tmp_set_locals_8;
            Py_INCREF(tmp_set_locals_8);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_26;
        }
        tmp_dictset_value = mod_consts[266];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_26;
        }
        tmp_dictset_value = mod_consts[265];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_26;
        }
        if (isFrameUnusable(cache_frame_71973e9e3b112676dcae3b9d9d82953b_9)) {
            Py_XDECREF(cache_frame_71973e9e3b112676dcae3b9d9d82953b_9);

#if _DEBUG_REFCOUNTS
            if (cache_frame_71973e9e3b112676dcae3b9d9d82953b_9 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_71973e9e3b112676dcae3b9d9d82953b_9 = MAKE_FUNCTION_FRAME(codeobj_71973e9e3b112676dcae3b9d9d82953b, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_71973e9e3b112676dcae3b9d9d82953b_9->m_type_description == NULL);
        frame_71973e9e3b112676dcae3b9d9d82953b_9 = cache_frame_71973e9e3b112676dcae3b9d9d82953b_9;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_71973e9e3b112676dcae3b9d9d82953b_9);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_71973e9e3b112676dcae3b9d9d82953b_9) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[267];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 286;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__20___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 288;
            type_description_2 = "o";
            goto frame_exception_exit_9;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_71973e9e3b112676dcae3b9d9d82953b_9);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_8;

        frame_exception_exit_9:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_71973e9e3b112676dcae3b9d9d82953b_9);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_71973e9e3b112676dcae3b9d9d82953b_9, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_71973e9e3b112676dcae3b9d9d82953b_9->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_71973e9e3b112676dcae3b9d9d82953b_9, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_71973e9e3b112676dcae3b9d9d82953b_9,
            type_description_2,
            outline_7_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_71973e9e3b112676dcae3b9d9d82953b_9 == cache_frame_71973e9e3b112676dcae3b9d9d82953b_9) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_71973e9e3b112676dcae3b9d9d82953b_9);
            cache_frame_71973e9e3b112676dcae3b9d9d82953b_9 = NULL;
        }

        assertFrameObject(frame_71973e9e3b112676dcae3b9d9d82953b_9);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_8;

        frame_no_exception_8:;
        goto skip_nested_handling_8;
        nested_frame_exit_8:;

        goto try_except_handler_26;
        skip_nested_handling_8:;
        {
            nuitka_bool tmp_condition_result_48;
            PyObject *tmp_cmp_expr_left_8;
            PyObject *tmp_cmp_expr_right_8;
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_cmp_expr_left_8 = tmp_class_creation_8__bases;
            CHECK_OBJECT(tmp_class_creation_8__bases_orig);
            tmp_cmp_expr_right_8 = tmp_class_creation_8__bases_orig;
            tmp_condition_result_48 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_8, tmp_cmp_expr_right_8);
            if (tmp_condition_result_48 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 274;

                goto try_except_handler_26;
            }
            if (tmp_condition_result_48 == NUITKA_BOOL_TRUE) {
                goto branch_yes_32;
            } else {
                goto branch_no_32;
            }
            assert(tmp_condition_result_48 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_32:;
        CHECK_OBJECT(tmp_class_creation_8__bases_orig);
        tmp_dictset_value = tmp_class_creation_8__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 274;

            goto try_except_handler_26;
        }
        branch_no_32:;
        {
            PyObject *tmp_assign_source_76;
            PyObject *tmp_called_value_16;
            PyObject *tmp_args_value_16;
            PyObject *tmp_tuple_element_30;
            PyObject *tmp_kwargs_value_16;
            CHECK_OBJECT(tmp_class_creation_8__metaclass);
            tmp_called_value_16 = tmp_class_creation_8__metaclass;
            tmp_tuple_element_30 = mod_consts[265];
            tmp_args_value_16 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_16, 0, tmp_tuple_element_30);
            CHECK_OBJECT(tmp_class_creation_8__bases);
            tmp_tuple_element_30 = tmp_class_creation_8__bases;
            PyTuple_SET_ITEM0(tmp_args_value_16, 1, tmp_tuple_element_30);
            tmp_tuple_element_30 = locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274;
            PyTuple_SET_ITEM0(tmp_args_value_16, 2, tmp_tuple_element_30);
            CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
            tmp_kwargs_value_16 = tmp_class_creation_8__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 274;
            tmp_assign_source_76 = CALL_FUNCTION(tmp_called_value_16, tmp_args_value_16, tmp_kwargs_value_16);
            Py_DECREF(tmp_args_value_16);
            if (tmp_assign_source_76 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 274;

                goto try_except_handler_26;
            }
            assert(outline_7_var___class__ == NULL);
            outline_7_var___class__ = tmp_assign_source_76;
        }
        CHECK_OBJECT(outline_7_var___class__);
        tmp_assign_source_75 = outline_7_var___class__;
        Py_INCREF(tmp_assign_source_75);
        goto try_return_handler_26;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_26:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274);
        locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274 = NULL;
        goto try_return_handler_25;
        // Exception handler code:
        try_except_handler_26:;
        exception_keeper_type_24 = exception_type;
        exception_keeper_value_24 = exception_value;
        exception_keeper_tb_24 = exception_tb;
        exception_keeper_lineno_24 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274);
        locals_xlwt$BIFFRecords$$$class__8_DSFRecord_274 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_24;
        exception_value = exception_keeper_value_24;
        exception_tb = exception_keeper_tb_24;
        exception_lineno = exception_keeper_lineno_24;

        goto try_except_handler_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_25:;
        CHECK_OBJECT(outline_7_var___class__);
        Py_DECREF(outline_7_var___class__);
        outline_7_var___class__ = NULL;
        goto outline_result_8;
        // Exception handler code:
        try_except_handler_25:;
        exception_keeper_type_25 = exception_type;
        exception_keeper_value_25 = exception_value;
        exception_keeper_tb_25 = exception_tb;
        exception_keeper_lineno_25 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_25;
        exception_value = exception_keeper_value_25;
        exception_tb = exception_keeper_tb_25;
        exception_lineno = exception_keeper_lineno_25;

        goto outline_exception_8;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_8:;
        exception_lineno = 274;
        goto try_except_handler_24;
        outline_result_8:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[265], tmp_assign_source_75);
    }
    goto try_end_10;
    // Exception handler code:
    try_except_handler_24:;
    exception_keeper_type_26 = exception_type;
    exception_keeper_value_26 = exception_value;
    exception_keeper_tb_26 = exception_tb;
    exception_keeper_lineno_26 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    Py_XDECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_26;
    exception_value = exception_keeper_value_26;
    exception_tb = exception_keeper_tb_26;
    exception_lineno = exception_keeper_lineno_26;

    goto frame_exception_exit_1;
    // End of try:
    try_end_10:;
    CHECK_OBJECT(tmp_class_creation_8__bases_orig);
    Py_DECREF(tmp_class_creation_8__bases_orig);
    tmp_class_creation_8__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_8__bases);
    Py_DECREF(tmp_class_creation_8__bases);
    tmp_class_creation_8__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_8__class_decl_dict);
    Py_DECREF(tmp_class_creation_8__class_decl_dict);
    tmp_class_creation_8__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_8__metaclass);
    Py_DECREF(tmp_class_creation_8__metaclass);
    tmp_class_creation_8__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_8__prepared);
    Py_DECREF(tmp_class_creation_8__prepared);
    tmp_class_creation_8__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_77;
        PyObject *tmp_tuple_element_31;
        tmp_tuple_element_31 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_31 == NULL)) {
            tmp_tuple_element_31 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        tmp_assign_source_77 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_77, 0, tmp_tuple_element_31);
        assert(tmp_class_creation_9__bases_orig == NULL);
        tmp_class_creation_9__bases_orig = tmp_assign_source_77;
    }
    {
        PyObject *tmp_assign_source_78;
        PyObject *tmp_dircall_arg1_9;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dircall_arg1_9 = tmp_class_creation_9__bases_orig;
        Py_INCREF(tmp_dircall_arg1_9);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_9};
            tmp_assign_source_78 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_9__bases == NULL);
        tmp_class_creation_9__bases = tmp_assign_source_78;
    }
    {
        PyObject *tmp_assign_source_79;
        tmp_assign_source_79 = PyDict_New();
        assert(tmp_class_creation_9__class_decl_dict == NULL);
        tmp_class_creation_9__class_decl_dict = tmp_assign_source_79;
    }
    {
        PyObject *tmp_assign_source_80;
        PyObject *tmp_metaclass_value_9;
        bool tmp_condition_result_49;
        PyObject *tmp_key_value_25;
        PyObject *tmp_dict_arg_value_25;
        PyObject *tmp_dict_arg_value_26;
        PyObject *tmp_key_value_26;
        nuitka_bool tmp_condition_result_50;
        int tmp_truth_name_9;
        PyObject *tmp_type_arg_17;
        PyObject *tmp_expression_value_41;
        PyObject *tmp_subscript_value_9;
        PyObject *tmp_bases_value_9;
        tmp_key_value_25 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_25 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_25, tmp_key_value_25);
        assert(!(tmp_res == -1));
        tmp_condition_result_49 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_49 != false) {
            goto condexpr_true_17;
        } else {
            goto condexpr_false_17;
        }
        condexpr_true_17:;
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_26 = tmp_class_creation_9__class_decl_dict;
        tmp_key_value_26 = mod_consts[205];
        tmp_metaclass_value_9 = DICT_GET_ITEM0(tmp_dict_arg_value_26, tmp_key_value_26);
        if (tmp_metaclass_value_9 == NULL) {
            tmp_metaclass_value_9 = Py_None;
        }
        assert(!(tmp_metaclass_value_9 == NULL));
        Py_INCREF(tmp_metaclass_value_9);
        goto condexpr_end_17;
        condexpr_false_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_truth_name_9 = CHECK_IF_TRUE(tmp_class_creation_9__bases);
        if (tmp_truth_name_9 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        tmp_condition_result_50 = tmp_truth_name_9 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_50 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_18;
        } else {
            goto condexpr_false_18;
        }
        condexpr_true_18:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_expression_value_41 = tmp_class_creation_9__bases;
        tmp_subscript_value_9 = mod_consts[4];
        tmp_type_arg_17 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_41, tmp_subscript_value_9, 0);
        if (tmp_type_arg_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        tmp_metaclass_value_9 = BUILTIN_TYPE1(tmp_type_arg_17);
        Py_DECREF(tmp_type_arg_17);
        if (tmp_metaclass_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        goto condexpr_end_18;
        condexpr_false_18:;
        tmp_metaclass_value_9 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_9);
        condexpr_end_18:;
        condexpr_end_17:;
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_bases_value_9 = tmp_class_creation_9__bases;
        tmp_assign_source_80 = SELECT_METACLASS(tmp_metaclass_value_9, tmp_bases_value_9);
        Py_DECREF(tmp_metaclass_value_9);
        if (tmp_assign_source_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_9__metaclass == NULL);
        tmp_class_creation_9__metaclass = tmp_assign_source_80;
    }
    {
        bool tmp_condition_result_51;
        PyObject *tmp_key_value_27;
        PyObject *tmp_dict_arg_value_27;
        tmp_key_value_27 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_dict_arg_value_27 = tmp_class_creation_9__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_27, tmp_key_value_27);
        assert(!(tmp_res == -1));
        tmp_condition_result_51 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_51 != false) {
            goto branch_yes_33;
        } else {
            goto branch_no_33;
        }
    }
    branch_yes_33:;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_9__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 292;

        goto try_except_handler_27;
    }
    branch_no_33:;
    {
        nuitka_bool tmp_condition_result_52;
        PyObject *tmp_expression_value_42;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_42 = tmp_class_creation_9__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_42, mod_consts[206]);
        tmp_condition_result_52 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_52 == NUITKA_BOOL_TRUE) {
            goto branch_yes_34;
        } else {
            goto branch_no_34;
        }
    }
    branch_yes_34:;
    {
        PyObject *tmp_assign_source_81;
        PyObject *tmp_called_value_17;
        PyObject *tmp_expression_value_43;
        PyObject *tmp_args_value_17;
        PyObject *tmp_tuple_element_32;
        PyObject *tmp_kwargs_value_17;
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_expression_value_43 = tmp_class_creation_9__metaclass;
        tmp_called_value_17 = LOOKUP_ATTRIBUTE(tmp_expression_value_43, mod_consts[206]);
        if (tmp_called_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        tmp_tuple_element_32 = mod_consts[269];
        tmp_args_value_17 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_17, 0, tmp_tuple_element_32);
        CHECK_OBJECT(tmp_class_creation_9__bases);
        tmp_tuple_element_32 = tmp_class_creation_9__bases;
        PyTuple_SET_ITEM0(tmp_args_value_17, 1, tmp_tuple_element_32);
        CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
        tmp_kwargs_value_17 = tmp_class_creation_9__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 292;
        tmp_assign_source_81 = CALL_FUNCTION(tmp_called_value_17, tmp_args_value_17, tmp_kwargs_value_17);
        Py_DECREF(tmp_called_value_17);
        Py_DECREF(tmp_args_value_17);
        if (tmp_assign_source_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_81;
    }
    {
        bool tmp_condition_result_53;
        PyObject *tmp_operand_value_9;
        PyObject *tmp_expression_value_44;
        CHECK_OBJECT(tmp_class_creation_9__prepared);
        tmp_expression_value_44 = tmp_class_creation_9__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_44, mod_consts[208]);
        tmp_operand_value_9 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_9);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        tmp_condition_result_53 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_53 != false) {
            goto branch_yes_35;
        } else {
            goto branch_no_35;
        }
    }
    branch_yes_35:;
    {
        PyObject *tmp_raise_type_9;
        PyObject *tmp_raise_value_9;
        PyObject *tmp_left_value_9;
        PyObject *tmp_right_value_9;
        PyObject *tmp_tuple_element_33;
        PyObject *tmp_getattr_target_9;
        PyObject *tmp_getattr_attr_9;
        PyObject *tmp_getattr_default_9;
        tmp_raise_type_9 = PyExc_TypeError;
        tmp_left_value_9 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_9__metaclass);
        tmp_getattr_target_9 = tmp_class_creation_9__metaclass;
        tmp_getattr_attr_9 = mod_consts[210];
        tmp_getattr_default_9 = mod_consts[211];
        tmp_tuple_element_33 = BUILTIN_GETATTR(tmp_getattr_target_9, tmp_getattr_attr_9, tmp_getattr_default_9);
        if (tmp_tuple_element_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        tmp_right_value_9 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_45;
            PyObject *tmp_type_arg_18;
            PyTuple_SET_ITEM(tmp_right_value_9, 0, tmp_tuple_element_33);
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_type_arg_18 = tmp_class_creation_9__prepared;
            tmp_expression_value_45 = BUILTIN_TYPE1(tmp_type_arg_18);
            assert(!(tmp_expression_value_45 == NULL));
            tmp_tuple_element_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_45, mod_consts[210]);
            Py_DECREF(tmp_expression_value_45);
            if (tmp_tuple_element_33 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 292;

                goto tuple_build_exception_9;
            }
            PyTuple_SET_ITEM(tmp_right_value_9, 1, tmp_tuple_element_33);
        }
        goto tuple_build_noexception_9;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_9:;
        Py_DECREF(tmp_right_value_9);
        goto try_except_handler_27;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_9:;
        tmp_raise_value_9 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_9, tmp_right_value_9);
        Py_DECREF(tmp_right_value_9);
        if (tmp_raise_value_9 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_27;
        }
        exception_type = tmp_raise_type_9;
        Py_INCREF(tmp_raise_type_9);
        exception_value = tmp_raise_value_9;
        exception_lineno = 292;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_27;
    }
    branch_no_35:;
    goto branch_end_34;
    branch_no_34:;
    {
        PyObject *tmp_assign_source_82;
        tmp_assign_source_82 = PyDict_New();
        assert(tmp_class_creation_9__prepared == NULL);
        tmp_class_creation_9__prepared = tmp_assign_source_82;
    }
    branch_end_34:;
    {
        PyObject *tmp_assign_source_83;
        {
            PyObject *tmp_set_locals_9;
            CHECK_OBJECT(tmp_class_creation_9__prepared);
            tmp_set_locals_9 = tmp_class_creation_9__prepared;
            locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292 = tmp_set_locals_9;
            Py_INCREF(tmp_set_locals_9);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_29;
        }
        tmp_dictset_value = mod_consts[269];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_29;
        }
        if (isFrameUnusable(cache_frame_6fd42d253644a3b3a202917650af8f53_10)) {
            Py_XDECREF(cache_frame_6fd42d253644a3b3a202917650af8f53_10);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6fd42d253644a3b3a202917650af8f53_10 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6fd42d253644a3b3a202917650af8f53_10 = MAKE_FUNCTION_FRAME(codeobj_6fd42d253644a3b3a202917650af8f53, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6fd42d253644a3b3a202917650af8f53_10->m_type_description == NULL);
        frame_6fd42d253644a3b3a202917650af8f53_10 = cache_frame_6fd42d253644a3b3a202917650af8f53_10;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6fd42d253644a3b3a202917650af8f53_10);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6fd42d253644a3b3a202917650af8f53_10) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[270];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 293;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__21___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 295;
            type_description_2 = "o";
            goto frame_exception_exit_10;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6fd42d253644a3b3a202917650af8f53_10);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_9;

        frame_exception_exit_10:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6fd42d253644a3b3a202917650af8f53_10);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6fd42d253644a3b3a202917650af8f53_10, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6fd42d253644a3b3a202917650af8f53_10->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6fd42d253644a3b3a202917650af8f53_10, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6fd42d253644a3b3a202917650af8f53_10,
            type_description_2,
            outline_8_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6fd42d253644a3b3a202917650af8f53_10 == cache_frame_6fd42d253644a3b3a202917650af8f53_10) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6fd42d253644a3b3a202917650af8f53_10);
            cache_frame_6fd42d253644a3b3a202917650af8f53_10 = NULL;
        }

        assertFrameObject(frame_6fd42d253644a3b3a202917650af8f53_10);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_9;

        frame_no_exception_9:;
        goto skip_nested_handling_9;
        nested_frame_exit_9:;

        goto try_except_handler_29;
        skip_nested_handling_9:;
        {
            nuitka_bool tmp_condition_result_54;
            PyObject *tmp_cmp_expr_left_9;
            PyObject *tmp_cmp_expr_right_9;
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_cmp_expr_left_9 = tmp_class_creation_9__bases;
            CHECK_OBJECT(tmp_class_creation_9__bases_orig);
            tmp_cmp_expr_right_9 = tmp_class_creation_9__bases_orig;
            tmp_condition_result_54 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_9, tmp_cmp_expr_right_9);
            if (tmp_condition_result_54 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 292;

                goto try_except_handler_29;
            }
            if (tmp_condition_result_54 == NUITKA_BOOL_TRUE) {
                goto branch_yes_36;
            } else {
                goto branch_no_36;
            }
            assert(tmp_condition_result_54 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_36:;
        CHECK_OBJECT(tmp_class_creation_9__bases_orig);
        tmp_dictset_value = tmp_class_creation_9__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 292;

            goto try_except_handler_29;
        }
        branch_no_36:;
        {
            PyObject *tmp_assign_source_84;
            PyObject *tmp_called_value_18;
            PyObject *tmp_args_value_18;
            PyObject *tmp_tuple_element_34;
            PyObject *tmp_kwargs_value_18;
            CHECK_OBJECT(tmp_class_creation_9__metaclass);
            tmp_called_value_18 = tmp_class_creation_9__metaclass;
            tmp_tuple_element_34 = mod_consts[269];
            tmp_args_value_18 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_18, 0, tmp_tuple_element_34);
            CHECK_OBJECT(tmp_class_creation_9__bases);
            tmp_tuple_element_34 = tmp_class_creation_9__bases;
            PyTuple_SET_ITEM0(tmp_args_value_18, 1, tmp_tuple_element_34);
            tmp_tuple_element_34 = locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292;
            PyTuple_SET_ITEM0(tmp_args_value_18, 2, tmp_tuple_element_34);
            CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
            tmp_kwargs_value_18 = tmp_class_creation_9__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 292;
            tmp_assign_source_84 = CALL_FUNCTION(tmp_called_value_18, tmp_args_value_18, tmp_kwargs_value_18);
            Py_DECREF(tmp_args_value_18);
            if (tmp_assign_source_84 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 292;

                goto try_except_handler_29;
            }
            assert(outline_8_var___class__ == NULL);
            outline_8_var___class__ = tmp_assign_source_84;
        }
        CHECK_OBJECT(outline_8_var___class__);
        tmp_assign_source_83 = outline_8_var___class__;
        Py_INCREF(tmp_assign_source_83);
        goto try_return_handler_29;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_29:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292);
        locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292 = NULL;
        goto try_return_handler_28;
        // Exception handler code:
        try_except_handler_29:;
        exception_keeper_type_27 = exception_type;
        exception_keeper_value_27 = exception_value;
        exception_keeper_tb_27 = exception_tb;
        exception_keeper_lineno_27 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292);
        locals_xlwt$BIFFRecords$$$class__9_TabIDRecord_292 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_27;
        exception_value = exception_keeper_value_27;
        exception_tb = exception_keeper_tb_27;
        exception_lineno = exception_keeper_lineno_27;

        goto try_except_handler_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_28:;
        CHECK_OBJECT(outline_8_var___class__);
        Py_DECREF(outline_8_var___class__);
        outline_8_var___class__ = NULL;
        goto outline_result_9;
        // Exception handler code:
        try_except_handler_28:;
        exception_keeper_type_28 = exception_type;
        exception_keeper_value_28 = exception_value;
        exception_keeper_tb_28 = exception_tb;
        exception_keeper_lineno_28 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_28;
        exception_value = exception_keeper_value_28;
        exception_tb = exception_keeper_tb_28;
        exception_lineno = exception_keeper_lineno_28;

        goto outline_exception_9;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_9:;
        exception_lineno = 292;
        goto try_except_handler_27;
        outline_result_9:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[269], tmp_assign_source_83);
    }
    goto try_end_11;
    // Exception handler code:
    try_except_handler_27:;
    exception_keeper_type_29 = exception_type;
    exception_keeper_value_29 = exception_value;
    exception_keeper_tb_29 = exception_tb;
    exception_keeper_lineno_29 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    Py_XDECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_29;
    exception_value = exception_keeper_value_29;
    exception_tb = exception_keeper_tb_29;
    exception_lineno = exception_keeper_lineno_29;

    goto frame_exception_exit_1;
    // End of try:
    try_end_11:;
    CHECK_OBJECT(tmp_class_creation_9__bases_orig);
    Py_DECREF(tmp_class_creation_9__bases_orig);
    tmp_class_creation_9__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_9__bases);
    Py_DECREF(tmp_class_creation_9__bases);
    tmp_class_creation_9__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_9__class_decl_dict);
    Py_DECREF(tmp_class_creation_9__class_decl_dict);
    tmp_class_creation_9__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_9__metaclass);
    Py_DECREF(tmp_class_creation_9__metaclass);
    tmp_class_creation_9__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_9__prepared);
    Py_DECREF(tmp_class_creation_9__prepared);
    tmp_class_creation_9__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_85;
        PyObject *tmp_tuple_element_35;
        tmp_tuple_element_35 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_35 == NULL)) {
            tmp_tuple_element_35 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        tmp_assign_source_85 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_85, 0, tmp_tuple_element_35);
        assert(tmp_class_creation_10__bases_orig == NULL);
        tmp_class_creation_10__bases_orig = tmp_assign_source_85;
    }
    {
        PyObject *tmp_assign_source_86;
        PyObject *tmp_dircall_arg1_10;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dircall_arg1_10 = tmp_class_creation_10__bases_orig;
        Py_INCREF(tmp_dircall_arg1_10);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_10};
            tmp_assign_source_86 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_86 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        assert(tmp_class_creation_10__bases == NULL);
        tmp_class_creation_10__bases = tmp_assign_source_86;
    }
    {
        PyObject *tmp_assign_source_87;
        tmp_assign_source_87 = PyDict_New();
        assert(tmp_class_creation_10__class_decl_dict == NULL);
        tmp_class_creation_10__class_decl_dict = tmp_assign_source_87;
    }
    {
        PyObject *tmp_assign_source_88;
        PyObject *tmp_metaclass_value_10;
        bool tmp_condition_result_55;
        PyObject *tmp_key_value_28;
        PyObject *tmp_dict_arg_value_28;
        PyObject *tmp_dict_arg_value_29;
        PyObject *tmp_key_value_29;
        nuitka_bool tmp_condition_result_56;
        int tmp_truth_name_10;
        PyObject *tmp_type_arg_19;
        PyObject *tmp_expression_value_46;
        PyObject *tmp_subscript_value_10;
        PyObject *tmp_bases_value_10;
        tmp_key_value_28 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_28 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_28, tmp_key_value_28);
        assert(!(tmp_res == -1));
        tmp_condition_result_55 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_55 != false) {
            goto condexpr_true_19;
        } else {
            goto condexpr_false_19;
        }
        condexpr_true_19:;
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_29 = tmp_class_creation_10__class_decl_dict;
        tmp_key_value_29 = mod_consts[205];
        tmp_metaclass_value_10 = DICT_GET_ITEM0(tmp_dict_arg_value_29, tmp_key_value_29);
        if (tmp_metaclass_value_10 == NULL) {
            tmp_metaclass_value_10 = Py_None;
        }
        assert(!(tmp_metaclass_value_10 == NULL));
        Py_INCREF(tmp_metaclass_value_10);
        goto condexpr_end_19;
        condexpr_false_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_truth_name_10 = CHECK_IF_TRUE(tmp_class_creation_10__bases);
        if (tmp_truth_name_10 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        tmp_condition_result_56 = tmp_truth_name_10 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_56 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_20;
        } else {
            goto condexpr_false_20;
        }
        condexpr_true_20:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_expression_value_46 = tmp_class_creation_10__bases;
        tmp_subscript_value_10 = mod_consts[4];
        tmp_type_arg_19 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_46, tmp_subscript_value_10, 0);
        if (tmp_type_arg_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        tmp_metaclass_value_10 = BUILTIN_TYPE1(tmp_type_arg_19);
        Py_DECREF(tmp_type_arg_19);
        if (tmp_metaclass_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        goto condexpr_end_20;
        condexpr_false_20:;
        tmp_metaclass_value_10 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_10);
        condexpr_end_20:;
        condexpr_end_19:;
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_bases_value_10 = tmp_class_creation_10__bases;
        tmp_assign_source_88 = SELECT_METACLASS(tmp_metaclass_value_10, tmp_bases_value_10);
        Py_DECREF(tmp_metaclass_value_10);
        if (tmp_assign_source_88 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        assert(tmp_class_creation_10__metaclass == NULL);
        tmp_class_creation_10__metaclass = tmp_assign_source_88;
    }
    {
        bool tmp_condition_result_57;
        PyObject *tmp_key_value_30;
        PyObject *tmp_dict_arg_value_30;
        tmp_key_value_30 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_dict_arg_value_30 = tmp_class_creation_10__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_30, tmp_key_value_30);
        assert(!(tmp_res == -1));
        tmp_condition_result_57 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_57 != false) {
            goto branch_yes_37;
        } else {
            goto branch_no_37;
        }
    }
    branch_yes_37:;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_10__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 300;

        goto try_except_handler_30;
    }
    branch_no_37:;
    {
        nuitka_bool tmp_condition_result_58;
        PyObject *tmp_expression_value_47;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_47 = tmp_class_creation_10__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_47, mod_consts[206]);
        tmp_condition_result_58 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_58 == NUITKA_BOOL_TRUE) {
            goto branch_yes_38;
        } else {
            goto branch_no_38;
        }
    }
    branch_yes_38:;
    {
        PyObject *tmp_assign_source_89;
        PyObject *tmp_called_value_19;
        PyObject *tmp_expression_value_48;
        PyObject *tmp_args_value_19;
        PyObject *tmp_tuple_element_36;
        PyObject *tmp_kwargs_value_19;
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_expression_value_48 = tmp_class_creation_10__metaclass;
        tmp_called_value_19 = LOOKUP_ATTRIBUTE(tmp_expression_value_48, mod_consts[206]);
        if (tmp_called_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        tmp_tuple_element_36 = mod_consts[272];
        tmp_args_value_19 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_19, 0, tmp_tuple_element_36);
        CHECK_OBJECT(tmp_class_creation_10__bases);
        tmp_tuple_element_36 = tmp_class_creation_10__bases;
        PyTuple_SET_ITEM0(tmp_args_value_19, 1, tmp_tuple_element_36);
        CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
        tmp_kwargs_value_19 = tmp_class_creation_10__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 300;
        tmp_assign_source_89 = CALL_FUNCTION(tmp_called_value_19, tmp_args_value_19, tmp_kwargs_value_19);
        Py_DECREF(tmp_called_value_19);
        Py_DECREF(tmp_args_value_19);
        if (tmp_assign_source_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_89;
    }
    {
        bool tmp_condition_result_59;
        PyObject *tmp_operand_value_10;
        PyObject *tmp_expression_value_49;
        CHECK_OBJECT(tmp_class_creation_10__prepared);
        tmp_expression_value_49 = tmp_class_creation_10__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_49, mod_consts[208]);
        tmp_operand_value_10 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_10);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        tmp_condition_result_59 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_59 != false) {
            goto branch_yes_39;
        } else {
            goto branch_no_39;
        }
    }
    branch_yes_39:;
    {
        PyObject *tmp_raise_type_10;
        PyObject *tmp_raise_value_10;
        PyObject *tmp_left_value_10;
        PyObject *tmp_right_value_10;
        PyObject *tmp_tuple_element_37;
        PyObject *tmp_getattr_target_10;
        PyObject *tmp_getattr_attr_10;
        PyObject *tmp_getattr_default_10;
        tmp_raise_type_10 = PyExc_TypeError;
        tmp_left_value_10 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_10__metaclass);
        tmp_getattr_target_10 = tmp_class_creation_10__metaclass;
        tmp_getattr_attr_10 = mod_consts[210];
        tmp_getattr_default_10 = mod_consts[211];
        tmp_tuple_element_37 = BUILTIN_GETATTR(tmp_getattr_target_10, tmp_getattr_attr_10, tmp_getattr_default_10);
        if (tmp_tuple_element_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        tmp_right_value_10 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_50;
            PyObject *tmp_type_arg_20;
            PyTuple_SET_ITEM(tmp_right_value_10, 0, tmp_tuple_element_37);
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_type_arg_20 = tmp_class_creation_10__prepared;
            tmp_expression_value_50 = BUILTIN_TYPE1(tmp_type_arg_20);
            assert(!(tmp_expression_value_50 == NULL));
            tmp_tuple_element_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_50, mod_consts[210]);
            Py_DECREF(tmp_expression_value_50);
            if (tmp_tuple_element_37 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto tuple_build_exception_10;
            }
            PyTuple_SET_ITEM(tmp_right_value_10, 1, tmp_tuple_element_37);
        }
        goto tuple_build_noexception_10;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_10:;
        Py_DECREF(tmp_right_value_10);
        goto try_except_handler_30;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_10:;
        tmp_raise_value_10 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_10, tmp_right_value_10);
        Py_DECREF(tmp_right_value_10);
        if (tmp_raise_value_10 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_30;
        }
        exception_type = tmp_raise_type_10;
        Py_INCREF(tmp_raise_type_10);
        exception_value = tmp_raise_value_10;
        exception_lineno = 300;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_30;
    }
    branch_no_39:;
    goto branch_end_38;
    branch_no_38:;
    {
        PyObject *tmp_assign_source_90;
        tmp_assign_source_90 = PyDict_New();
        assert(tmp_class_creation_10__prepared == NULL);
        tmp_class_creation_10__prepared = tmp_assign_source_90;
    }
    branch_end_38:;
    {
        PyObject *tmp_assign_source_91;
        {
            PyObject *tmp_set_locals_10;
            CHECK_OBJECT(tmp_class_creation_10__prepared);
            tmp_set_locals_10 = tmp_class_creation_10__prepared;
            locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300 = tmp_set_locals_10;
            Py_INCREF(tmp_set_locals_10);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_32;
        }
        tmp_dictset_value = mod_consts[272];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_32;
        }
        if (isFrameUnusable(cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11)) {
            Py_XDECREF(cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11);

#if _DEBUG_REFCOUNTS
            if (cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11 = MAKE_FUNCTION_FRAME(codeobj_03ad9fcd760f5d7d2850a8bb05d13cb7, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11->m_type_description == NULL);
        frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11 = cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[273];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 301;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__22___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 303;
            type_description_2 = "o";
            goto frame_exception_exit_11;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_10;

        frame_exception_exit_11:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11,
            type_description_2,
            outline_9_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11 == cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11);
            cache_frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11 = NULL;
        }

        assertFrameObject(frame_03ad9fcd760f5d7d2850a8bb05d13cb7_11);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_10;

        frame_no_exception_10:;
        goto skip_nested_handling_10;
        nested_frame_exit_10:;

        goto try_except_handler_32;
        skip_nested_handling_10:;
        {
            nuitka_bool tmp_condition_result_60;
            PyObject *tmp_cmp_expr_left_10;
            PyObject *tmp_cmp_expr_right_10;
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_cmp_expr_left_10 = tmp_class_creation_10__bases;
            CHECK_OBJECT(tmp_class_creation_10__bases_orig);
            tmp_cmp_expr_right_10 = tmp_class_creation_10__bases_orig;
            tmp_condition_result_60 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_10, tmp_cmp_expr_right_10);
            if (tmp_condition_result_60 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto try_except_handler_32;
            }
            if (tmp_condition_result_60 == NUITKA_BOOL_TRUE) {
                goto branch_yes_40;
            } else {
                goto branch_no_40;
            }
            assert(tmp_condition_result_60 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_40:;
        CHECK_OBJECT(tmp_class_creation_10__bases_orig);
        tmp_dictset_value = tmp_class_creation_10__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 300;

            goto try_except_handler_32;
        }
        branch_no_40:;
        {
            PyObject *tmp_assign_source_92;
            PyObject *tmp_called_value_20;
            PyObject *tmp_args_value_20;
            PyObject *tmp_tuple_element_38;
            PyObject *tmp_kwargs_value_20;
            CHECK_OBJECT(tmp_class_creation_10__metaclass);
            tmp_called_value_20 = tmp_class_creation_10__metaclass;
            tmp_tuple_element_38 = mod_consts[272];
            tmp_args_value_20 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_20, 0, tmp_tuple_element_38);
            CHECK_OBJECT(tmp_class_creation_10__bases);
            tmp_tuple_element_38 = tmp_class_creation_10__bases;
            PyTuple_SET_ITEM0(tmp_args_value_20, 1, tmp_tuple_element_38);
            tmp_tuple_element_38 = locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300;
            PyTuple_SET_ITEM0(tmp_args_value_20, 2, tmp_tuple_element_38);
            CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
            tmp_kwargs_value_20 = tmp_class_creation_10__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 300;
            tmp_assign_source_92 = CALL_FUNCTION(tmp_called_value_20, tmp_args_value_20, tmp_kwargs_value_20);
            Py_DECREF(tmp_args_value_20);
            if (tmp_assign_source_92 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 300;

                goto try_except_handler_32;
            }
            assert(outline_9_var___class__ == NULL);
            outline_9_var___class__ = tmp_assign_source_92;
        }
        CHECK_OBJECT(outline_9_var___class__);
        tmp_assign_source_91 = outline_9_var___class__;
        Py_INCREF(tmp_assign_source_91);
        goto try_return_handler_32;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_32:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300);
        locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300 = NULL;
        goto try_return_handler_31;
        // Exception handler code:
        try_except_handler_32:;
        exception_keeper_type_30 = exception_type;
        exception_keeper_value_30 = exception_value;
        exception_keeper_tb_30 = exception_tb;
        exception_keeper_lineno_30 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300);
        locals_xlwt$BIFFRecords$$$class__10_FnGroupCountRecord_300 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_30;
        exception_value = exception_keeper_value_30;
        exception_tb = exception_keeper_tb_30;
        exception_lineno = exception_keeper_lineno_30;

        goto try_except_handler_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_31:;
        CHECK_OBJECT(outline_9_var___class__);
        Py_DECREF(outline_9_var___class__);
        outline_9_var___class__ = NULL;
        goto outline_result_10;
        // Exception handler code:
        try_except_handler_31:;
        exception_keeper_type_31 = exception_type;
        exception_keeper_value_31 = exception_value;
        exception_keeper_tb_31 = exception_tb;
        exception_keeper_lineno_31 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_31;
        exception_value = exception_keeper_value_31;
        exception_tb = exception_keeper_tb_31;
        exception_lineno = exception_keeper_lineno_31;

        goto outline_exception_10;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_10:;
        exception_lineno = 300;
        goto try_except_handler_30;
        outline_result_10:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[272], tmp_assign_source_91);
    }
    goto try_end_12;
    // Exception handler code:
    try_except_handler_30:;
    exception_keeper_type_32 = exception_type;
    exception_keeper_value_32 = exception_value;
    exception_keeper_tb_32 = exception_tb;
    exception_keeper_lineno_32 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    Py_XDECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_32;
    exception_value = exception_keeper_value_32;
    exception_tb = exception_keeper_tb_32;
    exception_lineno = exception_keeper_lineno_32;

    goto frame_exception_exit_1;
    // End of try:
    try_end_12:;
    CHECK_OBJECT(tmp_class_creation_10__bases_orig);
    Py_DECREF(tmp_class_creation_10__bases_orig);
    tmp_class_creation_10__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_10__bases);
    Py_DECREF(tmp_class_creation_10__bases);
    tmp_class_creation_10__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_10__class_decl_dict);
    Py_DECREF(tmp_class_creation_10__class_decl_dict);
    tmp_class_creation_10__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_10__metaclass);
    Py_DECREF(tmp_class_creation_10__metaclass);
    tmp_class_creation_10__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_10__prepared);
    Py_DECREF(tmp_class_creation_10__prepared);
    tmp_class_creation_10__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_93;
        PyObject *tmp_tuple_element_39;
        tmp_tuple_element_39 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_39 == NULL)) {
            tmp_tuple_element_39 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        tmp_assign_source_93 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_93, 0, tmp_tuple_element_39);
        assert(tmp_class_creation_11__bases_orig == NULL);
        tmp_class_creation_11__bases_orig = tmp_assign_source_93;
    }
    {
        PyObject *tmp_assign_source_94;
        PyObject *tmp_dircall_arg1_11;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dircall_arg1_11 = tmp_class_creation_11__bases_orig;
        Py_INCREF(tmp_dircall_arg1_11);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_11};
            tmp_assign_source_94 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_94 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        assert(tmp_class_creation_11__bases == NULL);
        tmp_class_creation_11__bases = tmp_assign_source_94;
    }
    {
        PyObject *tmp_assign_source_95;
        tmp_assign_source_95 = PyDict_New();
        assert(tmp_class_creation_11__class_decl_dict == NULL);
        tmp_class_creation_11__class_decl_dict = tmp_assign_source_95;
    }
    {
        PyObject *tmp_assign_source_96;
        PyObject *tmp_metaclass_value_11;
        bool tmp_condition_result_61;
        PyObject *tmp_key_value_31;
        PyObject *tmp_dict_arg_value_31;
        PyObject *tmp_dict_arg_value_32;
        PyObject *tmp_key_value_32;
        nuitka_bool tmp_condition_result_62;
        int tmp_truth_name_11;
        PyObject *tmp_type_arg_21;
        PyObject *tmp_expression_value_51;
        PyObject *tmp_subscript_value_11;
        PyObject *tmp_bases_value_11;
        tmp_key_value_31 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_31 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_31, tmp_key_value_31);
        assert(!(tmp_res == -1));
        tmp_condition_result_61 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_61 != false) {
            goto condexpr_true_21;
        } else {
            goto condexpr_false_21;
        }
        condexpr_true_21:;
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_32 = tmp_class_creation_11__class_decl_dict;
        tmp_key_value_32 = mod_consts[205];
        tmp_metaclass_value_11 = DICT_GET_ITEM0(tmp_dict_arg_value_32, tmp_key_value_32);
        if (tmp_metaclass_value_11 == NULL) {
            tmp_metaclass_value_11 = Py_None;
        }
        assert(!(tmp_metaclass_value_11 == NULL));
        Py_INCREF(tmp_metaclass_value_11);
        goto condexpr_end_21;
        condexpr_false_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_truth_name_11 = CHECK_IF_TRUE(tmp_class_creation_11__bases);
        if (tmp_truth_name_11 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        tmp_condition_result_62 = tmp_truth_name_11 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_62 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_22;
        } else {
            goto condexpr_false_22;
        }
        condexpr_true_22:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_expression_value_51 = tmp_class_creation_11__bases;
        tmp_subscript_value_11 = mod_consts[4];
        tmp_type_arg_21 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_51, tmp_subscript_value_11, 0);
        if (tmp_type_arg_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        tmp_metaclass_value_11 = BUILTIN_TYPE1(tmp_type_arg_21);
        Py_DECREF(tmp_type_arg_21);
        if (tmp_metaclass_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        goto condexpr_end_22;
        condexpr_false_22:;
        tmp_metaclass_value_11 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_11);
        condexpr_end_22:;
        condexpr_end_21:;
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_bases_value_11 = tmp_class_creation_11__bases;
        tmp_assign_source_96 = SELECT_METACLASS(tmp_metaclass_value_11, tmp_bases_value_11);
        Py_DECREF(tmp_metaclass_value_11);
        if (tmp_assign_source_96 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        assert(tmp_class_creation_11__metaclass == NULL);
        tmp_class_creation_11__metaclass = tmp_assign_source_96;
    }
    {
        bool tmp_condition_result_63;
        PyObject *tmp_key_value_33;
        PyObject *tmp_dict_arg_value_33;
        tmp_key_value_33 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_dict_arg_value_33 = tmp_class_creation_11__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_33, tmp_key_value_33);
        assert(!(tmp_res == -1));
        tmp_condition_result_63 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_63 != false) {
            goto branch_yes_41;
        } else {
            goto branch_no_41;
        }
    }
    branch_yes_41:;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_11__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 307;

        goto try_except_handler_33;
    }
    branch_no_41:;
    {
        nuitka_bool tmp_condition_result_64;
        PyObject *tmp_expression_value_52;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_52 = tmp_class_creation_11__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_52, mod_consts[206]);
        tmp_condition_result_64 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_64 == NUITKA_BOOL_TRUE) {
            goto branch_yes_42;
        } else {
            goto branch_no_42;
        }
    }
    branch_yes_42:;
    {
        PyObject *tmp_assign_source_97;
        PyObject *tmp_called_value_21;
        PyObject *tmp_expression_value_53;
        PyObject *tmp_args_value_21;
        PyObject *tmp_tuple_element_40;
        PyObject *tmp_kwargs_value_21;
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_expression_value_53 = tmp_class_creation_11__metaclass;
        tmp_called_value_21 = LOOKUP_ATTRIBUTE(tmp_expression_value_53, mod_consts[206]);
        if (tmp_called_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        tmp_tuple_element_40 = mod_consts[275];
        tmp_args_value_21 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_21, 0, tmp_tuple_element_40);
        CHECK_OBJECT(tmp_class_creation_11__bases);
        tmp_tuple_element_40 = tmp_class_creation_11__bases;
        PyTuple_SET_ITEM0(tmp_args_value_21, 1, tmp_tuple_element_40);
        CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
        tmp_kwargs_value_21 = tmp_class_creation_11__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 307;
        tmp_assign_source_97 = CALL_FUNCTION(tmp_called_value_21, tmp_args_value_21, tmp_kwargs_value_21);
        Py_DECREF(tmp_called_value_21);
        Py_DECREF(tmp_args_value_21);
        if (tmp_assign_source_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_97;
    }
    {
        bool tmp_condition_result_65;
        PyObject *tmp_operand_value_11;
        PyObject *tmp_expression_value_54;
        CHECK_OBJECT(tmp_class_creation_11__prepared);
        tmp_expression_value_54 = tmp_class_creation_11__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_54, mod_consts[208]);
        tmp_operand_value_11 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_11);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        tmp_condition_result_65 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_65 != false) {
            goto branch_yes_43;
        } else {
            goto branch_no_43;
        }
    }
    branch_yes_43:;
    {
        PyObject *tmp_raise_type_11;
        PyObject *tmp_raise_value_11;
        PyObject *tmp_left_value_11;
        PyObject *tmp_right_value_11;
        PyObject *tmp_tuple_element_41;
        PyObject *tmp_getattr_target_11;
        PyObject *tmp_getattr_attr_11;
        PyObject *tmp_getattr_default_11;
        tmp_raise_type_11 = PyExc_TypeError;
        tmp_left_value_11 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_11__metaclass);
        tmp_getattr_target_11 = tmp_class_creation_11__metaclass;
        tmp_getattr_attr_11 = mod_consts[210];
        tmp_getattr_default_11 = mod_consts[211];
        tmp_tuple_element_41 = BUILTIN_GETATTR(tmp_getattr_target_11, tmp_getattr_attr_11, tmp_getattr_default_11);
        if (tmp_tuple_element_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        tmp_right_value_11 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_55;
            PyObject *tmp_type_arg_22;
            PyTuple_SET_ITEM(tmp_right_value_11, 0, tmp_tuple_element_41);
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_type_arg_22 = tmp_class_creation_11__prepared;
            tmp_expression_value_55 = BUILTIN_TYPE1(tmp_type_arg_22);
            assert(!(tmp_expression_value_55 == NULL));
            tmp_tuple_element_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_55, mod_consts[210]);
            Py_DECREF(tmp_expression_value_55);
            if (tmp_tuple_element_41 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 307;

                goto tuple_build_exception_11;
            }
            PyTuple_SET_ITEM(tmp_right_value_11, 1, tmp_tuple_element_41);
        }
        goto tuple_build_noexception_11;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_11:;
        Py_DECREF(tmp_right_value_11);
        goto try_except_handler_33;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_11:;
        tmp_raise_value_11 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_11, tmp_right_value_11);
        Py_DECREF(tmp_right_value_11);
        if (tmp_raise_value_11 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_33;
        }
        exception_type = tmp_raise_type_11;
        Py_INCREF(tmp_raise_type_11);
        exception_value = tmp_raise_value_11;
        exception_lineno = 307;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_33;
    }
    branch_no_43:;
    goto branch_end_42;
    branch_no_42:;
    {
        PyObject *tmp_assign_source_98;
        tmp_assign_source_98 = PyDict_New();
        assert(tmp_class_creation_11__prepared == NULL);
        tmp_class_creation_11__prepared = tmp_assign_source_98;
    }
    branch_end_42:;
    {
        PyObject *tmp_assign_source_99;
        {
            PyObject *tmp_set_locals_11;
            CHECK_OBJECT(tmp_class_creation_11__prepared);
            tmp_set_locals_11 = tmp_class_creation_11__prepared;
            locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307 = tmp_set_locals_11;
            Py_INCREF(tmp_set_locals_11);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_35;
        }
        tmp_dictset_value = mod_consts[276];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_35;
        }
        tmp_dictset_value = mod_consts[275];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_35;
        }
        if (isFrameUnusable(cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12)) {
            Py_XDECREF(cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12);

#if _DEBUG_REFCOUNTS
            if (cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12 = MAKE_FUNCTION_FRAME(codeobj_f1c2ab19a0e30602078d2b66e5a8544c, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12->m_type_description == NULL);
        frame_f1c2ab19a0e30602078d2b66e5a8544c_12 = cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_f1c2ab19a0e30602078d2b66e5a8544c_12);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_f1c2ab19a0e30602078d2b66e5a8544c_12) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[277];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 313;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__23___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 315;
            type_description_2 = "o";
            goto frame_exception_exit_12;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f1c2ab19a0e30602078d2b66e5a8544c_12);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_11;

        frame_exception_exit_12:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f1c2ab19a0e30602078d2b66e5a8544c_12);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f1c2ab19a0e30602078d2b66e5a8544c_12, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f1c2ab19a0e30602078d2b66e5a8544c_12->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f1c2ab19a0e30602078d2b66e5a8544c_12, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f1c2ab19a0e30602078d2b66e5a8544c_12,
            type_description_2,
            outline_10_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_f1c2ab19a0e30602078d2b66e5a8544c_12 == cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12);
            cache_frame_f1c2ab19a0e30602078d2b66e5a8544c_12 = NULL;
        }

        assertFrameObject(frame_f1c2ab19a0e30602078d2b66e5a8544c_12);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_11;

        frame_no_exception_11:;
        goto skip_nested_handling_11;
        nested_frame_exit_11:;

        goto try_except_handler_35;
        skip_nested_handling_11:;
        {
            nuitka_bool tmp_condition_result_66;
            PyObject *tmp_cmp_expr_left_11;
            PyObject *tmp_cmp_expr_right_11;
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_cmp_expr_left_11 = tmp_class_creation_11__bases;
            CHECK_OBJECT(tmp_class_creation_11__bases_orig);
            tmp_cmp_expr_right_11 = tmp_class_creation_11__bases_orig;
            tmp_condition_result_66 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_11, tmp_cmp_expr_right_11);
            if (tmp_condition_result_66 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 307;

                goto try_except_handler_35;
            }
            if (tmp_condition_result_66 == NUITKA_BOOL_TRUE) {
                goto branch_yes_44;
            } else {
                goto branch_no_44;
            }
            assert(tmp_condition_result_66 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_44:;
        CHECK_OBJECT(tmp_class_creation_11__bases_orig);
        tmp_dictset_value = tmp_class_creation_11__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 307;

            goto try_except_handler_35;
        }
        branch_no_44:;
        {
            PyObject *tmp_assign_source_100;
            PyObject *tmp_called_value_22;
            PyObject *tmp_args_value_22;
            PyObject *tmp_tuple_element_42;
            PyObject *tmp_kwargs_value_22;
            CHECK_OBJECT(tmp_class_creation_11__metaclass);
            tmp_called_value_22 = tmp_class_creation_11__metaclass;
            tmp_tuple_element_42 = mod_consts[275];
            tmp_args_value_22 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_22, 0, tmp_tuple_element_42);
            CHECK_OBJECT(tmp_class_creation_11__bases);
            tmp_tuple_element_42 = tmp_class_creation_11__bases;
            PyTuple_SET_ITEM0(tmp_args_value_22, 1, tmp_tuple_element_42);
            tmp_tuple_element_42 = locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307;
            PyTuple_SET_ITEM0(tmp_args_value_22, 2, tmp_tuple_element_42);
            CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
            tmp_kwargs_value_22 = tmp_class_creation_11__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 307;
            tmp_assign_source_100 = CALL_FUNCTION(tmp_called_value_22, tmp_args_value_22, tmp_kwargs_value_22);
            Py_DECREF(tmp_args_value_22);
            if (tmp_assign_source_100 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 307;

                goto try_except_handler_35;
            }
            assert(outline_10_var___class__ == NULL);
            outline_10_var___class__ = tmp_assign_source_100;
        }
        CHECK_OBJECT(outline_10_var___class__);
        tmp_assign_source_99 = outline_10_var___class__;
        Py_INCREF(tmp_assign_source_99);
        goto try_return_handler_35;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_35:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307);
        locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307 = NULL;
        goto try_return_handler_34;
        // Exception handler code:
        try_except_handler_35:;
        exception_keeper_type_33 = exception_type;
        exception_keeper_value_33 = exception_value;
        exception_keeper_tb_33 = exception_tb;
        exception_keeper_lineno_33 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307);
        locals_xlwt$BIFFRecords$$$class__11_WindowProtectRecord_307 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_33;
        exception_value = exception_keeper_value_33;
        exception_tb = exception_keeper_tb_33;
        exception_lineno = exception_keeper_lineno_33;

        goto try_except_handler_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_34:;
        CHECK_OBJECT(outline_10_var___class__);
        Py_DECREF(outline_10_var___class__);
        outline_10_var___class__ = NULL;
        goto outline_result_11;
        // Exception handler code:
        try_except_handler_34:;
        exception_keeper_type_34 = exception_type;
        exception_keeper_value_34 = exception_value;
        exception_keeper_tb_34 = exception_tb;
        exception_keeper_lineno_34 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_34;
        exception_value = exception_keeper_value_34;
        exception_tb = exception_keeper_tb_34;
        exception_lineno = exception_keeper_lineno_34;

        goto outline_exception_11;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_11:;
        exception_lineno = 307;
        goto try_except_handler_33;
        outline_result_11:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[275], tmp_assign_source_99);
    }
    goto try_end_13;
    // Exception handler code:
    try_except_handler_33:;
    exception_keeper_type_35 = exception_type;
    exception_keeper_value_35 = exception_value;
    exception_keeper_tb_35 = exception_tb;
    exception_keeper_lineno_35 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    Py_XDECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_35;
    exception_value = exception_keeper_value_35;
    exception_tb = exception_keeper_tb_35;
    exception_lineno = exception_keeper_lineno_35;

    goto frame_exception_exit_1;
    // End of try:
    try_end_13:;
    CHECK_OBJECT(tmp_class_creation_11__bases_orig);
    Py_DECREF(tmp_class_creation_11__bases_orig);
    tmp_class_creation_11__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_11__bases);
    Py_DECREF(tmp_class_creation_11__bases);
    tmp_class_creation_11__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_11__class_decl_dict);
    Py_DECREF(tmp_class_creation_11__class_decl_dict);
    tmp_class_creation_11__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_11__metaclass);
    Py_DECREF(tmp_class_creation_11__metaclass);
    tmp_class_creation_11__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_11__prepared);
    Py_DECREF(tmp_class_creation_11__prepared);
    tmp_class_creation_11__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_101;
        PyObject *tmp_tuple_element_43;
        tmp_tuple_element_43 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_43 == NULL)) {
            tmp_tuple_element_43 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        tmp_assign_source_101 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_101, 0, tmp_tuple_element_43);
        assert(tmp_class_creation_12__bases_orig == NULL);
        tmp_class_creation_12__bases_orig = tmp_assign_source_101;
    }
    {
        PyObject *tmp_assign_source_102;
        PyObject *tmp_dircall_arg1_12;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dircall_arg1_12 = tmp_class_creation_12__bases_orig;
        Py_INCREF(tmp_dircall_arg1_12);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_12};
            tmp_assign_source_102 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_102 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        assert(tmp_class_creation_12__bases == NULL);
        tmp_class_creation_12__bases = tmp_assign_source_102;
    }
    {
        PyObject *tmp_assign_source_103;
        tmp_assign_source_103 = PyDict_New();
        assert(tmp_class_creation_12__class_decl_dict == NULL);
        tmp_class_creation_12__class_decl_dict = tmp_assign_source_103;
    }
    {
        PyObject *tmp_assign_source_104;
        PyObject *tmp_metaclass_value_12;
        bool tmp_condition_result_67;
        PyObject *tmp_key_value_34;
        PyObject *tmp_dict_arg_value_34;
        PyObject *tmp_dict_arg_value_35;
        PyObject *tmp_key_value_35;
        nuitka_bool tmp_condition_result_68;
        int tmp_truth_name_12;
        PyObject *tmp_type_arg_23;
        PyObject *tmp_expression_value_56;
        PyObject *tmp_subscript_value_12;
        PyObject *tmp_bases_value_12;
        tmp_key_value_34 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_34 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_34, tmp_key_value_34);
        assert(!(tmp_res == -1));
        tmp_condition_result_67 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_67 != false) {
            goto condexpr_true_23;
        } else {
            goto condexpr_false_23;
        }
        condexpr_true_23:;
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_35 = tmp_class_creation_12__class_decl_dict;
        tmp_key_value_35 = mod_consts[205];
        tmp_metaclass_value_12 = DICT_GET_ITEM0(tmp_dict_arg_value_35, tmp_key_value_35);
        if (tmp_metaclass_value_12 == NULL) {
            tmp_metaclass_value_12 = Py_None;
        }
        assert(!(tmp_metaclass_value_12 == NULL));
        Py_INCREF(tmp_metaclass_value_12);
        goto condexpr_end_23;
        condexpr_false_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_truth_name_12 = CHECK_IF_TRUE(tmp_class_creation_12__bases);
        if (tmp_truth_name_12 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        tmp_condition_result_68 = tmp_truth_name_12 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_68 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_24;
        } else {
            goto condexpr_false_24;
        }
        condexpr_true_24:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_expression_value_56 = tmp_class_creation_12__bases;
        tmp_subscript_value_12 = mod_consts[4];
        tmp_type_arg_23 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_56, tmp_subscript_value_12, 0);
        if (tmp_type_arg_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        tmp_metaclass_value_12 = BUILTIN_TYPE1(tmp_type_arg_23);
        Py_DECREF(tmp_type_arg_23);
        if (tmp_metaclass_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        goto condexpr_end_24;
        condexpr_false_24:;
        tmp_metaclass_value_12 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_12);
        condexpr_end_24:;
        condexpr_end_23:;
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_bases_value_12 = tmp_class_creation_12__bases;
        tmp_assign_source_104 = SELECT_METACLASS(tmp_metaclass_value_12, tmp_bases_value_12);
        Py_DECREF(tmp_metaclass_value_12);
        if (tmp_assign_source_104 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        assert(tmp_class_creation_12__metaclass == NULL);
        tmp_class_creation_12__metaclass = tmp_assign_source_104;
    }
    {
        bool tmp_condition_result_69;
        PyObject *tmp_key_value_36;
        PyObject *tmp_dict_arg_value_36;
        tmp_key_value_36 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_dict_arg_value_36 = tmp_class_creation_12__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_36, tmp_key_value_36);
        assert(!(tmp_res == -1));
        tmp_condition_result_69 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_69 != false) {
            goto branch_yes_45;
        } else {
            goto branch_no_45;
        }
    }
    branch_yes_45:;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_12__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 319;

        goto try_except_handler_36;
    }
    branch_no_45:;
    {
        nuitka_bool tmp_condition_result_70;
        PyObject *tmp_expression_value_57;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_57 = tmp_class_creation_12__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_57, mod_consts[206]);
        tmp_condition_result_70 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_70 == NUITKA_BOOL_TRUE) {
            goto branch_yes_46;
        } else {
            goto branch_no_46;
        }
    }
    branch_yes_46:;
    {
        PyObject *tmp_assign_source_105;
        PyObject *tmp_called_value_23;
        PyObject *tmp_expression_value_58;
        PyObject *tmp_args_value_23;
        PyObject *tmp_tuple_element_44;
        PyObject *tmp_kwargs_value_23;
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_expression_value_58 = tmp_class_creation_12__metaclass;
        tmp_called_value_23 = LOOKUP_ATTRIBUTE(tmp_expression_value_58, mod_consts[206]);
        if (tmp_called_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        tmp_tuple_element_44 = mod_consts[279];
        tmp_args_value_23 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_23, 0, tmp_tuple_element_44);
        CHECK_OBJECT(tmp_class_creation_12__bases);
        tmp_tuple_element_44 = tmp_class_creation_12__bases;
        PyTuple_SET_ITEM0(tmp_args_value_23, 1, tmp_tuple_element_44);
        CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
        tmp_kwargs_value_23 = tmp_class_creation_12__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 319;
        tmp_assign_source_105 = CALL_FUNCTION(tmp_called_value_23, tmp_args_value_23, tmp_kwargs_value_23);
        Py_DECREF(tmp_called_value_23);
        Py_DECREF(tmp_args_value_23);
        if (tmp_assign_source_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_105;
    }
    {
        bool tmp_condition_result_71;
        PyObject *tmp_operand_value_12;
        PyObject *tmp_expression_value_59;
        CHECK_OBJECT(tmp_class_creation_12__prepared);
        tmp_expression_value_59 = tmp_class_creation_12__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_59, mod_consts[208]);
        tmp_operand_value_12 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_12);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        tmp_condition_result_71 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_71 != false) {
            goto branch_yes_47;
        } else {
            goto branch_no_47;
        }
    }
    branch_yes_47:;
    {
        PyObject *tmp_raise_type_12;
        PyObject *tmp_raise_value_12;
        PyObject *tmp_left_value_12;
        PyObject *tmp_right_value_12;
        PyObject *tmp_tuple_element_45;
        PyObject *tmp_getattr_target_12;
        PyObject *tmp_getattr_attr_12;
        PyObject *tmp_getattr_default_12;
        tmp_raise_type_12 = PyExc_TypeError;
        tmp_left_value_12 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_12__metaclass);
        tmp_getattr_target_12 = tmp_class_creation_12__metaclass;
        tmp_getattr_attr_12 = mod_consts[210];
        tmp_getattr_default_12 = mod_consts[211];
        tmp_tuple_element_45 = BUILTIN_GETATTR(tmp_getattr_target_12, tmp_getattr_attr_12, tmp_getattr_default_12);
        if (tmp_tuple_element_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        tmp_right_value_12 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_60;
            PyObject *tmp_type_arg_24;
            PyTuple_SET_ITEM(tmp_right_value_12, 0, tmp_tuple_element_45);
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_type_arg_24 = tmp_class_creation_12__prepared;
            tmp_expression_value_60 = BUILTIN_TYPE1(tmp_type_arg_24);
            assert(!(tmp_expression_value_60 == NULL));
            tmp_tuple_element_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_60, mod_consts[210]);
            Py_DECREF(tmp_expression_value_60);
            if (tmp_tuple_element_45 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 319;

                goto tuple_build_exception_12;
            }
            PyTuple_SET_ITEM(tmp_right_value_12, 1, tmp_tuple_element_45);
        }
        goto tuple_build_noexception_12;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_12:;
        Py_DECREF(tmp_right_value_12);
        goto try_except_handler_36;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_12:;
        tmp_raise_value_12 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_12, tmp_right_value_12);
        Py_DECREF(tmp_right_value_12);
        if (tmp_raise_value_12 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_36;
        }
        exception_type = tmp_raise_type_12;
        Py_INCREF(tmp_raise_type_12);
        exception_value = tmp_raise_value_12;
        exception_lineno = 319;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_36;
    }
    branch_no_47:;
    goto branch_end_46;
    branch_no_46:;
    {
        PyObject *tmp_assign_source_106;
        tmp_assign_source_106 = PyDict_New();
        assert(tmp_class_creation_12__prepared == NULL);
        tmp_class_creation_12__prepared = tmp_assign_source_106;
    }
    branch_end_46:;
    {
        PyObject *tmp_assign_source_107;
        {
            PyObject *tmp_set_locals_12;
            CHECK_OBJECT(tmp_class_creation_12__prepared);
            tmp_set_locals_12 = tmp_class_creation_12__prepared;
            locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319 = tmp_set_locals_12;
            Py_INCREF(tmp_set_locals_12);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_38;
        }
        tmp_dictset_value = mod_consts[280];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_38;
        }
        tmp_dictset_value = mod_consts[279];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_38;
        }
        if (isFrameUnusable(cache_frame_b2d9f266ef29efb234678d853cbf49f0_13)) {
            Py_XDECREF(cache_frame_b2d9f266ef29efb234678d853cbf49f0_13);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b2d9f266ef29efb234678d853cbf49f0_13 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b2d9f266ef29efb234678d853cbf49f0_13 = MAKE_FUNCTION_FRAME(codeobj_b2d9f266ef29efb234678d853cbf49f0, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b2d9f266ef29efb234678d853cbf49f0_13->m_type_description == NULL);
        frame_b2d9f266ef29efb234678d853cbf49f0_13 = cache_frame_b2d9f266ef29efb234678d853cbf49f0_13;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b2d9f266ef29efb234678d853cbf49f0_13);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b2d9f266ef29efb234678d853cbf49f0_13) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[281];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 325;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__24___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 328;
            type_description_2 = "o";
            goto frame_exception_exit_13;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b2d9f266ef29efb234678d853cbf49f0_13);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_12;

        frame_exception_exit_13:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b2d9f266ef29efb234678d853cbf49f0_13);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b2d9f266ef29efb234678d853cbf49f0_13, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b2d9f266ef29efb234678d853cbf49f0_13->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b2d9f266ef29efb234678d853cbf49f0_13, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b2d9f266ef29efb234678d853cbf49f0_13,
            type_description_2,
            outline_11_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b2d9f266ef29efb234678d853cbf49f0_13 == cache_frame_b2d9f266ef29efb234678d853cbf49f0_13) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b2d9f266ef29efb234678d853cbf49f0_13);
            cache_frame_b2d9f266ef29efb234678d853cbf49f0_13 = NULL;
        }

        assertFrameObject(frame_b2d9f266ef29efb234678d853cbf49f0_13);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_12;

        frame_no_exception_12:;
        goto skip_nested_handling_12;
        nested_frame_exit_12:;

        goto try_except_handler_38;
        skip_nested_handling_12:;
        {
            nuitka_bool tmp_condition_result_72;
            PyObject *tmp_cmp_expr_left_12;
            PyObject *tmp_cmp_expr_right_12;
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_cmp_expr_left_12 = tmp_class_creation_12__bases;
            CHECK_OBJECT(tmp_class_creation_12__bases_orig);
            tmp_cmp_expr_right_12 = tmp_class_creation_12__bases_orig;
            tmp_condition_result_72 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_12, tmp_cmp_expr_right_12);
            if (tmp_condition_result_72 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 319;

                goto try_except_handler_38;
            }
            if (tmp_condition_result_72 == NUITKA_BOOL_TRUE) {
                goto branch_yes_48;
            } else {
                goto branch_no_48;
            }
            assert(tmp_condition_result_72 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_48:;
        CHECK_OBJECT(tmp_class_creation_12__bases_orig);
        tmp_dictset_value = tmp_class_creation_12__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 319;

            goto try_except_handler_38;
        }
        branch_no_48:;
        {
            PyObject *tmp_assign_source_108;
            PyObject *tmp_called_value_24;
            PyObject *tmp_args_value_24;
            PyObject *tmp_tuple_element_46;
            PyObject *tmp_kwargs_value_24;
            CHECK_OBJECT(tmp_class_creation_12__metaclass);
            tmp_called_value_24 = tmp_class_creation_12__metaclass;
            tmp_tuple_element_46 = mod_consts[279];
            tmp_args_value_24 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_24, 0, tmp_tuple_element_46);
            CHECK_OBJECT(tmp_class_creation_12__bases);
            tmp_tuple_element_46 = tmp_class_creation_12__bases;
            PyTuple_SET_ITEM0(tmp_args_value_24, 1, tmp_tuple_element_46);
            tmp_tuple_element_46 = locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319;
            PyTuple_SET_ITEM0(tmp_args_value_24, 2, tmp_tuple_element_46);
            CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
            tmp_kwargs_value_24 = tmp_class_creation_12__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 319;
            tmp_assign_source_108 = CALL_FUNCTION(tmp_called_value_24, tmp_args_value_24, tmp_kwargs_value_24);
            Py_DECREF(tmp_args_value_24);
            if (tmp_assign_source_108 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 319;

                goto try_except_handler_38;
            }
            assert(outline_11_var___class__ == NULL);
            outline_11_var___class__ = tmp_assign_source_108;
        }
        CHECK_OBJECT(outline_11_var___class__);
        tmp_assign_source_107 = outline_11_var___class__;
        Py_INCREF(tmp_assign_source_107);
        goto try_return_handler_38;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_38:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319);
        locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319 = NULL;
        goto try_return_handler_37;
        // Exception handler code:
        try_except_handler_38:;
        exception_keeper_type_36 = exception_type;
        exception_keeper_value_36 = exception_value;
        exception_keeper_tb_36 = exception_tb;
        exception_keeper_lineno_36 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319);
        locals_xlwt$BIFFRecords$$$class__12_ObjectProtectRecord_319 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_36;
        exception_value = exception_keeper_value_36;
        exception_tb = exception_keeper_tb_36;
        exception_lineno = exception_keeper_lineno_36;

        goto try_except_handler_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_37:;
        CHECK_OBJECT(outline_11_var___class__);
        Py_DECREF(outline_11_var___class__);
        outline_11_var___class__ = NULL;
        goto outline_result_12;
        // Exception handler code:
        try_except_handler_37:;
        exception_keeper_type_37 = exception_type;
        exception_keeper_value_37 = exception_value;
        exception_keeper_tb_37 = exception_tb;
        exception_keeper_lineno_37 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_37;
        exception_value = exception_keeper_value_37;
        exception_tb = exception_keeper_tb_37;
        exception_lineno = exception_keeper_lineno_37;

        goto outline_exception_12;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_12:;
        exception_lineno = 319;
        goto try_except_handler_36;
        outline_result_12:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[279], tmp_assign_source_107);
    }
    goto try_end_14;
    // Exception handler code:
    try_except_handler_36:;
    exception_keeper_type_38 = exception_type;
    exception_keeper_value_38 = exception_value;
    exception_keeper_tb_38 = exception_tb;
    exception_keeper_lineno_38 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    Py_XDECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_38;
    exception_value = exception_keeper_value_38;
    exception_tb = exception_keeper_tb_38;
    exception_lineno = exception_keeper_lineno_38;

    goto frame_exception_exit_1;
    // End of try:
    try_end_14:;
    CHECK_OBJECT(tmp_class_creation_12__bases_orig);
    Py_DECREF(tmp_class_creation_12__bases_orig);
    tmp_class_creation_12__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_12__bases);
    Py_DECREF(tmp_class_creation_12__bases);
    tmp_class_creation_12__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_12__class_decl_dict);
    Py_DECREF(tmp_class_creation_12__class_decl_dict);
    tmp_class_creation_12__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_12__metaclass);
    Py_DECREF(tmp_class_creation_12__metaclass);
    tmp_class_creation_12__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_12__prepared);
    Py_DECREF(tmp_class_creation_12__prepared);
    tmp_class_creation_12__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_109;
        PyObject *tmp_tuple_element_47;
        tmp_tuple_element_47 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_47 == NULL)) {
            tmp_tuple_element_47 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        tmp_assign_source_109 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_109, 0, tmp_tuple_element_47);
        assert(tmp_class_creation_13__bases_orig == NULL);
        tmp_class_creation_13__bases_orig = tmp_assign_source_109;
    }
    {
        PyObject *tmp_assign_source_110;
        PyObject *tmp_dircall_arg1_13;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dircall_arg1_13 = tmp_class_creation_13__bases_orig;
        Py_INCREF(tmp_dircall_arg1_13);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_13};
            tmp_assign_source_110 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_110 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        assert(tmp_class_creation_13__bases == NULL);
        tmp_class_creation_13__bases = tmp_assign_source_110;
    }
    {
        PyObject *tmp_assign_source_111;
        tmp_assign_source_111 = PyDict_New();
        assert(tmp_class_creation_13__class_decl_dict == NULL);
        tmp_class_creation_13__class_decl_dict = tmp_assign_source_111;
    }
    {
        PyObject *tmp_assign_source_112;
        PyObject *tmp_metaclass_value_13;
        bool tmp_condition_result_73;
        PyObject *tmp_key_value_37;
        PyObject *tmp_dict_arg_value_37;
        PyObject *tmp_dict_arg_value_38;
        PyObject *tmp_key_value_38;
        nuitka_bool tmp_condition_result_74;
        int tmp_truth_name_13;
        PyObject *tmp_type_arg_25;
        PyObject *tmp_expression_value_61;
        PyObject *tmp_subscript_value_13;
        PyObject *tmp_bases_value_13;
        tmp_key_value_37 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_37 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_37, tmp_key_value_37);
        assert(!(tmp_res == -1));
        tmp_condition_result_73 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_73 != false) {
            goto condexpr_true_25;
        } else {
            goto condexpr_false_25;
        }
        condexpr_true_25:;
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_38 = tmp_class_creation_13__class_decl_dict;
        tmp_key_value_38 = mod_consts[205];
        tmp_metaclass_value_13 = DICT_GET_ITEM0(tmp_dict_arg_value_38, tmp_key_value_38);
        if (tmp_metaclass_value_13 == NULL) {
            tmp_metaclass_value_13 = Py_None;
        }
        assert(!(tmp_metaclass_value_13 == NULL));
        Py_INCREF(tmp_metaclass_value_13);
        goto condexpr_end_25;
        condexpr_false_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_truth_name_13 = CHECK_IF_TRUE(tmp_class_creation_13__bases);
        if (tmp_truth_name_13 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        tmp_condition_result_74 = tmp_truth_name_13 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_74 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_26;
        } else {
            goto condexpr_false_26;
        }
        condexpr_true_26:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_expression_value_61 = tmp_class_creation_13__bases;
        tmp_subscript_value_13 = mod_consts[4];
        tmp_type_arg_25 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_61, tmp_subscript_value_13, 0);
        if (tmp_type_arg_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        tmp_metaclass_value_13 = BUILTIN_TYPE1(tmp_type_arg_25);
        Py_DECREF(tmp_type_arg_25);
        if (tmp_metaclass_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        goto condexpr_end_26;
        condexpr_false_26:;
        tmp_metaclass_value_13 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_13);
        condexpr_end_26:;
        condexpr_end_25:;
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_bases_value_13 = tmp_class_creation_13__bases;
        tmp_assign_source_112 = SELECT_METACLASS(tmp_metaclass_value_13, tmp_bases_value_13);
        Py_DECREF(tmp_metaclass_value_13);
        if (tmp_assign_source_112 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        assert(tmp_class_creation_13__metaclass == NULL);
        tmp_class_creation_13__metaclass = tmp_assign_source_112;
    }
    {
        bool tmp_condition_result_75;
        PyObject *tmp_key_value_39;
        PyObject *tmp_dict_arg_value_39;
        tmp_key_value_39 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_dict_arg_value_39 = tmp_class_creation_13__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_39, tmp_key_value_39);
        assert(!(tmp_res == -1));
        tmp_condition_result_75 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_75 != false) {
            goto branch_yes_49;
        } else {
            goto branch_no_49;
        }
    }
    branch_yes_49:;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_13__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 332;

        goto try_except_handler_39;
    }
    branch_no_49:;
    {
        nuitka_bool tmp_condition_result_76;
        PyObject *tmp_expression_value_62;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_62 = tmp_class_creation_13__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_62, mod_consts[206]);
        tmp_condition_result_76 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_76 == NUITKA_BOOL_TRUE) {
            goto branch_yes_50;
        } else {
            goto branch_no_50;
        }
    }
    branch_yes_50:;
    {
        PyObject *tmp_assign_source_113;
        PyObject *tmp_called_value_25;
        PyObject *tmp_expression_value_63;
        PyObject *tmp_args_value_25;
        PyObject *tmp_tuple_element_48;
        PyObject *tmp_kwargs_value_25;
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_expression_value_63 = tmp_class_creation_13__metaclass;
        tmp_called_value_25 = LOOKUP_ATTRIBUTE(tmp_expression_value_63, mod_consts[206]);
        if (tmp_called_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        tmp_tuple_element_48 = mod_consts[283];
        tmp_args_value_25 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_25, 0, tmp_tuple_element_48);
        CHECK_OBJECT(tmp_class_creation_13__bases);
        tmp_tuple_element_48 = tmp_class_creation_13__bases;
        PyTuple_SET_ITEM0(tmp_args_value_25, 1, tmp_tuple_element_48);
        CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
        tmp_kwargs_value_25 = tmp_class_creation_13__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 332;
        tmp_assign_source_113 = CALL_FUNCTION(tmp_called_value_25, tmp_args_value_25, tmp_kwargs_value_25);
        Py_DECREF(tmp_called_value_25);
        Py_DECREF(tmp_args_value_25);
        if (tmp_assign_source_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_113;
    }
    {
        bool tmp_condition_result_77;
        PyObject *tmp_operand_value_13;
        PyObject *tmp_expression_value_64;
        CHECK_OBJECT(tmp_class_creation_13__prepared);
        tmp_expression_value_64 = tmp_class_creation_13__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_64, mod_consts[208]);
        tmp_operand_value_13 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_13);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        tmp_condition_result_77 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_77 != false) {
            goto branch_yes_51;
        } else {
            goto branch_no_51;
        }
    }
    branch_yes_51:;
    {
        PyObject *tmp_raise_type_13;
        PyObject *tmp_raise_value_13;
        PyObject *tmp_left_value_13;
        PyObject *tmp_right_value_13;
        PyObject *tmp_tuple_element_49;
        PyObject *tmp_getattr_target_13;
        PyObject *tmp_getattr_attr_13;
        PyObject *tmp_getattr_default_13;
        tmp_raise_type_13 = PyExc_TypeError;
        tmp_left_value_13 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_13__metaclass);
        tmp_getattr_target_13 = tmp_class_creation_13__metaclass;
        tmp_getattr_attr_13 = mod_consts[210];
        tmp_getattr_default_13 = mod_consts[211];
        tmp_tuple_element_49 = BUILTIN_GETATTR(tmp_getattr_target_13, tmp_getattr_attr_13, tmp_getattr_default_13);
        if (tmp_tuple_element_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        tmp_right_value_13 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_65;
            PyObject *tmp_type_arg_26;
            PyTuple_SET_ITEM(tmp_right_value_13, 0, tmp_tuple_element_49);
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_type_arg_26 = tmp_class_creation_13__prepared;
            tmp_expression_value_65 = BUILTIN_TYPE1(tmp_type_arg_26);
            assert(!(tmp_expression_value_65 == NULL));
            tmp_tuple_element_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_65, mod_consts[210]);
            Py_DECREF(tmp_expression_value_65);
            if (tmp_tuple_element_49 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto tuple_build_exception_13;
            }
            PyTuple_SET_ITEM(tmp_right_value_13, 1, tmp_tuple_element_49);
        }
        goto tuple_build_noexception_13;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_13:;
        Py_DECREF(tmp_right_value_13);
        goto try_except_handler_39;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_13:;
        tmp_raise_value_13 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_13, tmp_right_value_13);
        Py_DECREF(tmp_right_value_13);
        if (tmp_raise_value_13 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_39;
        }
        exception_type = tmp_raise_type_13;
        Py_INCREF(tmp_raise_type_13);
        exception_value = tmp_raise_value_13;
        exception_lineno = 332;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_39;
    }
    branch_no_51:;
    goto branch_end_50;
    branch_no_50:;
    {
        PyObject *tmp_assign_source_114;
        tmp_assign_source_114 = PyDict_New();
        assert(tmp_class_creation_13__prepared == NULL);
        tmp_class_creation_13__prepared = tmp_assign_source_114;
    }
    branch_end_50:;
    {
        PyObject *tmp_assign_source_115;
        {
            PyObject *tmp_set_locals_13;
            CHECK_OBJECT(tmp_class_creation_13__prepared);
            tmp_set_locals_13 = tmp_class_creation_13__prepared;
            locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332 = tmp_set_locals_13;
            Py_INCREF(tmp_set_locals_13);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_41;
        }
        tmp_dictset_value = mod_consts[284];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_41;
        }
        tmp_dictset_value = mod_consts[283];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_41;
        }
        if (isFrameUnusable(cache_frame_92837687c0bee20483d0c5c47759bb8c_14)) {
            Py_XDECREF(cache_frame_92837687c0bee20483d0c5c47759bb8c_14);

#if _DEBUG_REFCOUNTS
            if (cache_frame_92837687c0bee20483d0c5c47759bb8c_14 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_92837687c0bee20483d0c5c47759bb8c_14 = MAKE_FUNCTION_FRAME(codeobj_92837687c0bee20483d0c5c47759bb8c, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_92837687c0bee20483d0c5c47759bb8c_14->m_type_description == NULL);
        frame_92837687c0bee20483d0c5c47759bb8c_14 = cache_frame_92837687c0bee20483d0c5c47759bb8c_14;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_92837687c0bee20483d0c5c47759bb8c_14);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_92837687c0bee20483d0c5c47759bb8c_14) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[285];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 338;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__25___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 341;
            type_description_2 = "o";
            goto frame_exception_exit_14;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_92837687c0bee20483d0c5c47759bb8c_14);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_13;

        frame_exception_exit_14:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_92837687c0bee20483d0c5c47759bb8c_14);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_92837687c0bee20483d0c5c47759bb8c_14, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_92837687c0bee20483d0c5c47759bb8c_14->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_92837687c0bee20483d0c5c47759bb8c_14, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_92837687c0bee20483d0c5c47759bb8c_14,
            type_description_2,
            outline_12_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_92837687c0bee20483d0c5c47759bb8c_14 == cache_frame_92837687c0bee20483d0c5c47759bb8c_14) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_92837687c0bee20483d0c5c47759bb8c_14);
            cache_frame_92837687c0bee20483d0c5c47759bb8c_14 = NULL;
        }

        assertFrameObject(frame_92837687c0bee20483d0c5c47759bb8c_14);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_13;

        frame_no_exception_13:;
        goto skip_nested_handling_13;
        nested_frame_exit_13:;

        goto try_except_handler_41;
        skip_nested_handling_13:;
        {
            nuitka_bool tmp_condition_result_78;
            PyObject *tmp_cmp_expr_left_13;
            PyObject *tmp_cmp_expr_right_13;
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_cmp_expr_left_13 = tmp_class_creation_13__bases;
            CHECK_OBJECT(tmp_class_creation_13__bases_orig);
            tmp_cmp_expr_right_13 = tmp_class_creation_13__bases_orig;
            tmp_condition_result_78 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_13, tmp_cmp_expr_right_13);
            if (tmp_condition_result_78 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto try_except_handler_41;
            }
            if (tmp_condition_result_78 == NUITKA_BOOL_TRUE) {
                goto branch_yes_52;
            } else {
                goto branch_no_52;
            }
            assert(tmp_condition_result_78 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_52:;
        CHECK_OBJECT(tmp_class_creation_13__bases_orig);
        tmp_dictset_value = tmp_class_creation_13__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 332;

            goto try_except_handler_41;
        }
        branch_no_52:;
        {
            PyObject *tmp_assign_source_116;
            PyObject *tmp_called_value_26;
            PyObject *tmp_args_value_26;
            PyObject *tmp_tuple_element_50;
            PyObject *tmp_kwargs_value_26;
            CHECK_OBJECT(tmp_class_creation_13__metaclass);
            tmp_called_value_26 = tmp_class_creation_13__metaclass;
            tmp_tuple_element_50 = mod_consts[283];
            tmp_args_value_26 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_26, 0, tmp_tuple_element_50);
            CHECK_OBJECT(tmp_class_creation_13__bases);
            tmp_tuple_element_50 = tmp_class_creation_13__bases;
            PyTuple_SET_ITEM0(tmp_args_value_26, 1, tmp_tuple_element_50);
            tmp_tuple_element_50 = locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332;
            PyTuple_SET_ITEM0(tmp_args_value_26, 2, tmp_tuple_element_50);
            CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
            tmp_kwargs_value_26 = tmp_class_creation_13__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 332;
            tmp_assign_source_116 = CALL_FUNCTION(tmp_called_value_26, tmp_args_value_26, tmp_kwargs_value_26);
            Py_DECREF(tmp_args_value_26);
            if (tmp_assign_source_116 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 332;

                goto try_except_handler_41;
            }
            assert(outline_12_var___class__ == NULL);
            outline_12_var___class__ = tmp_assign_source_116;
        }
        CHECK_OBJECT(outline_12_var___class__);
        tmp_assign_source_115 = outline_12_var___class__;
        Py_INCREF(tmp_assign_source_115);
        goto try_return_handler_41;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_41:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332);
        locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332 = NULL;
        goto try_return_handler_40;
        // Exception handler code:
        try_except_handler_41:;
        exception_keeper_type_39 = exception_type;
        exception_keeper_value_39 = exception_value;
        exception_keeper_tb_39 = exception_tb;
        exception_keeper_lineno_39 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332);
        locals_xlwt$BIFFRecords$$$class__13_ScenProtectRecord_332 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_39;
        exception_value = exception_keeper_value_39;
        exception_tb = exception_keeper_tb_39;
        exception_lineno = exception_keeper_lineno_39;

        goto try_except_handler_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_40:;
        CHECK_OBJECT(outline_12_var___class__);
        Py_DECREF(outline_12_var___class__);
        outline_12_var___class__ = NULL;
        goto outline_result_13;
        // Exception handler code:
        try_except_handler_40:;
        exception_keeper_type_40 = exception_type;
        exception_keeper_value_40 = exception_value;
        exception_keeper_tb_40 = exception_tb;
        exception_keeper_lineno_40 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_40;
        exception_value = exception_keeper_value_40;
        exception_tb = exception_keeper_tb_40;
        exception_lineno = exception_keeper_lineno_40;

        goto outline_exception_13;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_13:;
        exception_lineno = 332;
        goto try_except_handler_39;
        outline_result_13:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[283], tmp_assign_source_115);
    }
    goto try_end_15;
    // Exception handler code:
    try_except_handler_39:;
    exception_keeper_type_41 = exception_type;
    exception_keeper_value_41 = exception_value;
    exception_keeper_tb_41 = exception_tb;
    exception_keeper_lineno_41 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    Py_XDECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_41;
    exception_value = exception_keeper_value_41;
    exception_tb = exception_keeper_tb_41;
    exception_lineno = exception_keeper_lineno_41;

    goto frame_exception_exit_1;
    // End of try:
    try_end_15:;
    CHECK_OBJECT(tmp_class_creation_13__bases_orig);
    Py_DECREF(tmp_class_creation_13__bases_orig);
    tmp_class_creation_13__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_13__bases);
    Py_DECREF(tmp_class_creation_13__bases);
    tmp_class_creation_13__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_13__class_decl_dict);
    Py_DECREF(tmp_class_creation_13__class_decl_dict);
    tmp_class_creation_13__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_13__metaclass);
    Py_DECREF(tmp_class_creation_13__metaclass);
    tmp_class_creation_13__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_13__prepared);
    Py_DECREF(tmp_class_creation_13__prepared);
    tmp_class_creation_13__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_117;
        PyObject *tmp_tuple_element_51;
        tmp_tuple_element_51 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_51 == NULL)) {
            tmp_tuple_element_51 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        tmp_assign_source_117 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_117, 0, tmp_tuple_element_51);
        assert(tmp_class_creation_14__bases_orig == NULL);
        tmp_class_creation_14__bases_orig = tmp_assign_source_117;
    }
    {
        PyObject *tmp_assign_source_118;
        PyObject *tmp_dircall_arg1_14;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dircall_arg1_14 = tmp_class_creation_14__bases_orig;
        Py_INCREF(tmp_dircall_arg1_14);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_14};
            tmp_assign_source_118 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_118 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        assert(tmp_class_creation_14__bases == NULL);
        tmp_class_creation_14__bases = tmp_assign_source_118;
    }
    {
        PyObject *tmp_assign_source_119;
        tmp_assign_source_119 = PyDict_New();
        assert(tmp_class_creation_14__class_decl_dict == NULL);
        tmp_class_creation_14__class_decl_dict = tmp_assign_source_119;
    }
    {
        PyObject *tmp_assign_source_120;
        PyObject *tmp_metaclass_value_14;
        bool tmp_condition_result_79;
        PyObject *tmp_key_value_40;
        PyObject *tmp_dict_arg_value_40;
        PyObject *tmp_dict_arg_value_41;
        PyObject *tmp_key_value_41;
        nuitka_bool tmp_condition_result_80;
        int tmp_truth_name_14;
        PyObject *tmp_type_arg_27;
        PyObject *tmp_expression_value_66;
        PyObject *tmp_subscript_value_14;
        PyObject *tmp_bases_value_14;
        tmp_key_value_40 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_40 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_40, tmp_key_value_40);
        assert(!(tmp_res == -1));
        tmp_condition_result_79 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_79 != false) {
            goto condexpr_true_27;
        } else {
            goto condexpr_false_27;
        }
        condexpr_true_27:;
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_41 = tmp_class_creation_14__class_decl_dict;
        tmp_key_value_41 = mod_consts[205];
        tmp_metaclass_value_14 = DICT_GET_ITEM0(tmp_dict_arg_value_41, tmp_key_value_41);
        if (tmp_metaclass_value_14 == NULL) {
            tmp_metaclass_value_14 = Py_None;
        }
        assert(!(tmp_metaclass_value_14 == NULL));
        Py_INCREF(tmp_metaclass_value_14);
        goto condexpr_end_27;
        condexpr_false_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_truth_name_14 = CHECK_IF_TRUE(tmp_class_creation_14__bases);
        if (tmp_truth_name_14 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        tmp_condition_result_80 = tmp_truth_name_14 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_80 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_28;
        } else {
            goto condexpr_false_28;
        }
        condexpr_true_28:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_expression_value_66 = tmp_class_creation_14__bases;
        tmp_subscript_value_14 = mod_consts[4];
        tmp_type_arg_27 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_66, tmp_subscript_value_14, 0);
        if (tmp_type_arg_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        tmp_metaclass_value_14 = BUILTIN_TYPE1(tmp_type_arg_27);
        Py_DECREF(tmp_type_arg_27);
        if (tmp_metaclass_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        goto condexpr_end_28;
        condexpr_false_28:;
        tmp_metaclass_value_14 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_14);
        condexpr_end_28:;
        condexpr_end_27:;
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_bases_value_14 = tmp_class_creation_14__bases;
        tmp_assign_source_120 = SELECT_METACLASS(tmp_metaclass_value_14, tmp_bases_value_14);
        Py_DECREF(tmp_metaclass_value_14);
        if (tmp_assign_source_120 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        assert(tmp_class_creation_14__metaclass == NULL);
        tmp_class_creation_14__metaclass = tmp_assign_source_120;
    }
    {
        bool tmp_condition_result_81;
        PyObject *tmp_key_value_42;
        PyObject *tmp_dict_arg_value_42;
        tmp_key_value_42 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_dict_arg_value_42 = tmp_class_creation_14__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_42, tmp_key_value_42);
        assert(!(tmp_res == -1));
        tmp_condition_result_81 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_81 != false) {
            goto branch_yes_53;
        } else {
            goto branch_no_53;
        }
    }
    branch_yes_53:;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_14__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 345;

        goto try_except_handler_42;
    }
    branch_no_53:;
    {
        nuitka_bool tmp_condition_result_82;
        PyObject *tmp_expression_value_67;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_67 = tmp_class_creation_14__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_67, mod_consts[206]);
        tmp_condition_result_82 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_82 == NUITKA_BOOL_TRUE) {
            goto branch_yes_54;
        } else {
            goto branch_no_54;
        }
    }
    branch_yes_54:;
    {
        PyObject *tmp_assign_source_121;
        PyObject *tmp_called_value_27;
        PyObject *tmp_expression_value_68;
        PyObject *tmp_args_value_27;
        PyObject *tmp_tuple_element_52;
        PyObject *tmp_kwargs_value_27;
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_expression_value_68 = tmp_class_creation_14__metaclass;
        tmp_called_value_27 = LOOKUP_ATTRIBUTE(tmp_expression_value_68, mod_consts[206]);
        if (tmp_called_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        tmp_tuple_element_52 = mod_consts[287];
        tmp_args_value_27 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_27, 0, tmp_tuple_element_52);
        CHECK_OBJECT(tmp_class_creation_14__bases);
        tmp_tuple_element_52 = tmp_class_creation_14__bases;
        PyTuple_SET_ITEM0(tmp_args_value_27, 1, tmp_tuple_element_52);
        CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
        tmp_kwargs_value_27 = tmp_class_creation_14__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 345;
        tmp_assign_source_121 = CALL_FUNCTION(tmp_called_value_27, tmp_args_value_27, tmp_kwargs_value_27);
        Py_DECREF(tmp_called_value_27);
        Py_DECREF(tmp_args_value_27);
        if (tmp_assign_source_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_121;
    }
    {
        bool tmp_condition_result_83;
        PyObject *tmp_operand_value_14;
        PyObject *tmp_expression_value_69;
        CHECK_OBJECT(tmp_class_creation_14__prepared);
        tmp_expression_value_69 = tmp_class_creation_14__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_69, mod_consts[208]);
        tmp_operand_value_14 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_14);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        tmp_condition_result_83 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_83 != false) {
            goto branch_yes_55;
        } else {
            goto branch_no_55;
        }
    }
    branch_yes_55:;
    {
        PyObject *tmp_raise_type_14;
        PyObject *tmp_raise_value_14;
        PyObject *tmp_left_value_14;
        PyObject *tmp_right_value_14;
        PyObject *tmp_tuple_element_53;
        PyObject *tmp_getattr_target_14;
        PyObject *tmp_getattr_attr_14;
        PyObject *tmp_getattr_default_14;
        tmp_raise_type_14 = PyExc_TypeError;
        tmp_left_value_14 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_14__metaclass);
        tmp_getattr_target_14 = tmp_class_creation_14__metaclass;
        tmp_getattr_attr_14 = mod_consts[210];
        tmp_getattr_default_14 = mod_consts[211];
        tmp_tuple_element_53 = BUILTIN_GETATTR(tmp_getattr_target_14, tmp_getattr_attr_14, tmp_getattr_default_14);
        if (tmp_tuple_element_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        tmp_right_value_14 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_70;
            PyObject *tmp_type_arg_28;
            PyTuple_SET_ITEM(tmp_right_value_14, 0, tmp_tuple_element_53);
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_type_arg_28 = tmp_class_creation_14__prepared;
            tmp_expression_value_70 = BUILTIN_TYPE1(tmp_type_arg_28);
            assert(!(tmp_expression_value_70 == NULL));
            tmp_tuple_element_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_70, mod_consts[210]);
            Py_DECREF(tmp_expression_value_70);
            if (tmp_tuple_element_53 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 345;

                goto tuple_build_exception_14;
            }
            PyTuple_SET_ITEM(tmp_right_value_14, 1, tmp_tuple_element_53);
        }
        goto tuple_build_noexception_14;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_14:;
        Py_DECREF(tmp_right_value_14);
        goto try_except_handler_42;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_14:;
        tmp_raise_value_14 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_14, tmp_right_value_14);
        Py_DECREF(tmp_right_value_14);
        if (tmp_raise_value_14 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_42;
        }
        exception_type = tmp_raise_type_14;
        Py_INCREF(tmp_raise_type_14);
        exception_value = tmp_raise_value_14;
        exception_lineno = 345;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_42;
    }
    branch_no_55:;
    goto branch_end_54;
    branch_no_54:;
    {
        PyObject *tmp_assign_source_122;
        tmp_assign_source_122 = PyDict_New();
        assert(tmp_class_creation_14__prepared == NULL);
        tmp_class_creation_14__prepared = tmp_assign_source_122;
    }
    branch_end_54:;
    {
        PyObject *tmp_assign_source_123;
        {
            PyObject *tmp_set_locals_14;
            CHECK_OBJECT(tmp_class_creation_14__prepared);
            tmp_set_locals_14 = tmp_class_creation_14__prepared;
            locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345 = tmp_set_locals_14;
            Py_INCREF(tmp_set_locals_14);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_44;
        }
        tmp_dictset_value = mod_consts[288];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_44;
        }
        tmp_dictset_value = mod_consts[287];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_44;
        }
        if (isFrameUnusable(cache_frame_e2edf237c71f4392ee23f56d4c98decf_15)) {
            Py_XDECREF(cache_frame_e2edf237c71f4392ee23f56d4c98decf_15);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e2edf237c71f4392ee23f56d4c98decf_15 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e2edf237c71f4392ee23f56d4c98decf_15 = MAKE_FUNCTION_FRAME(codeobj_e2edf237c71f4392ee23f56d4c98decf, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e2edf237c71f4392ee23f56d4c98decf_15->m_type_description == NULL);
        frame_e2edf237c71f4392ee23f56d4c98decf_15 = cache_frame_e2edf237c71f4392ee23f56d4c98decf_15;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e2edf237c71f4392ee23f56d4c98decf_15);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e2edf237c71f4392ee23f56d4c98decf_15) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[289];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 352;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__26___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 354;
            type_description_2 = "o";
            goto frame_exception_exit_15;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e2edf237c71f4392ee23f56d4c98decf_15);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_14;

        frame_exception_exit_15:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e2edf237c71f4392ee23f56d4c98decf_15);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e2edf237c71f4392ee23f56d4c98decf_15, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e2edf237c71f4392ee23f56d4c98decf_15->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e2edf237c71f4392ee23f56d4c98decf_15, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e2edf237c71f4392ee23f56d4c98decf_15,
            type_description_2,
            outline_13_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e2edf237c71f4392ee23f56d4c98decf_15 == cache_frame_e2edf237c71f4392ee23f56d4c98decf_15) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e2edf237c71f4392ee23f56d4c98decf_15);
            cache_frame_e2edf237c71f4392ee23f56d4c98decf_15 = NULL;
        }

        assertFrameObject(frame_e2edf237c71f4392ee23f56d4c98decf_15);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_14;

        frame_no_exception_14:;
        goto skip_nested_handling_14;
        nested_frame_exit_14:;

        goto try_except_handler_44;
        skip_nested_handling_14:;
        {
            nuitka_bool tmp_condition_result_84;
            PyObject *tmp_cmp_expr_left_14;
            PyObject *tmp_cmp_expr_right_14;
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_cmp_expr_left_14 = tmp_class_creation_14__bases;
            CHECK_OBJECT(tmp_class_creation_14__bases_orig);
            tmp_cmp_expr_right_14 = tmp_class_creation_14__bases_orig;
            tmp_condition_result_84 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_14, tmp_cmp_expr_right_14);
            if (tmp_condition_result_84 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 345;

                goto try_except_handler_44;
            }
            if (tmp_condition_result_84 == NUITKA_BOOL_TRUE) {
                goto branch_yes_56;
            } else {
                goto branch_no_56;
            }
            assert(tmp_condition_result_84 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_56:;
        CHECK_OBJECT(tmp_class_creation_14__bases_orig);
        tmp_dictset_value = tmp_class_creation_14__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 345;

            goto try_except_handler_44;
        }
        branch_no_56:;
        {
            PyObject *tmp_assign_source_124;
            PyObject *tmp_called_value_28;
            PyObject *tmp_args_value_28;
            PyObject *tmp_tuple_element_54;
            PyObject *tmp_kwargs_value_28;
            CHECK_OBJECT(tmp_class_creation_14__metaclass);
            tmp_called_value_28 = tmp_class_creation_14__metaclass;
            tmp_tuple_element_54 = mod_consts[287];
            tmp_args_value_28 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_28, 0, tmp_tuple_element_54);
            CHECK_OBJECT(tmp_class_creation_14__bases);
            tmp_tuple_element_54 = tmp_class_creation_14__bases;
            PyTuple_SET_ITEM0(tmp_args_value_28, 1, tmp_tuple_element_54);
            tmp_tuple_element_54 = locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345;
            PyTuple_SET_ITEM0(tmp_args_value_28, 2, tmp_tuple_element_54);
            CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
            tmp_kwargs_value_28 = tmp_class_creation_14__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 345;
            tmp_assign_source_124 = CALL_FUNCTION(tmp_called_value_28, tmp_args_value_28, tmp_kwargs_value_28);
            Py_DECREF(tmp_args_value_28);
            if (tmp_assign_source_124 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 345;

                goto try_except_handler_44;
            }
            assert(outline_13_var___class__ == NULL);
            outline_13_var___class__ = tmp_assign_source_124;
        }
        CHECK_OBJECT(outline_13_var___class__);
        tmp_assign_source_123 = outline_13_var___class__;
        Py_INCREF(tmp_assign_source_123);
        goto try_return_handler_44;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_44:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345);
        locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345 = NULL;
        goto try_return_handler_43;
        // Exception handler code:
        try_except_handler_44:;
        exception_keeper_type_42 = exception_type;
        exception_keeper_value_42 = exception_value;
        exception_keeper_tb_42 = exception_tb;
        exception_keeper_lineno_42 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345);
        locals_xlwt$BIFFRecords$$$class__14_ProtectRecord_345 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_42;
        exception_value = exception_keeper_value_42;
        exception_tb = exception_keeper_tb_42;
        exception_lineno = exception_keeper_lineno_42;

        goto try_except_handler_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_43:;
        CHECK_OBJECT(outline_13_var___class__);
        Py_DECREF(outline_13_var___class__);
        outline_13_var___class__ = NULL;
        goto outline_result_14;
        // Exception handler code:
        try_except_handler_43:;
        exception_keeper_type_43 = exception_type;
        exception_keeper_value_43 = exception_value;
        exception_keeper_tb_43 = exception_tb;
        exception_keeper_lineno_43 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_43;
        exception_value = exception_keeper_value_43;
        exception_tb = exception_keeper_tb_43;
        exception_lineno = exception_keeper_lineno_43;

        goto outline_exception_14;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_14:;
        exception_lineno = 345;
        goto try_except_handler_42;
        outline_result_14:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[287], tmp_assign_source_123);
    }
    goto try_end_16;
    // Exception handler code:
    try_except_handler_42:;
    exception_keeper_type_44 = exception_type;
    exception_keeper_value_44 = exception_value;
    exception_keeper_tb_44 = exception_tb;
    exception_keeper_lineno_44 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    Py_XDECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_44;
    exception_value = exception_keeper_value_44;
    exception_tb = exception_keeper_tb_44;
    exception_lineno = exception_keeper_lineno_44;

    goto frame_exception_exit_1;
    // End of try:
    try_end_16:;
    CHECK_OBJECT(tmp_class_creation_14__bases_orig);
    Py_DECREF(tmp_class_creation_14__bases_orig);
    tmp_class_creation_14__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_14__bases);
    Py_DECREF(tmp_class_creation_14__bases);
    tmp_class_creation_14__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_14__class_decl_dict);
    Py_DECREF(tmp_class_creation_14__class_decl_dict);
    tmp_class_creation_14__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_14__metaclass);
    Py_DECREF(tmp_class_creation_14__metaclass);
    tmp_class_creation_14__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_14__prepared);
    Py_DECREF(tmp_class_creation_14__prepared);
    tmp_class_creation_14__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_125;
        PyObject *tmp_tuple_element_55;
        tmp_tuple_element_55 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_55 == NULL)) {
            tmp_tuple_element_55 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        tmp_assign_source_125 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_125, 0, tmp_tuple_element_55);
        assert(tmp_class_creation_15__bases_orig == NULL);
        tmp_class_creation_15__bases_orig = tmp_assign_source_125;
    }
    {
        PyObject *tmp_assign_source_126;
        PyObject *tmp_dircall_arg1_15;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dircall_arg1_15 = tmp_class_creation_15__bases_orig;
        Py_INCREF(tmp_dircall_arg1_15);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_15};
            tmp_assign_source_126 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_126 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        assert(tmp_class_creation_15__bases == NULL);
        tmp_class_creation_15__bases = tmp_assign_source_126;
    }
    {
        PyObject *tmp_assign_source_127;
        tmp_assign_source_127 = PyDict_New();
        assert(tmp_class_creation_15__class_decl_dict == NULL);
        tmp_class_creation_15__class_decl_dict = tmp_assign_source_127;
    }
    {
        PyObject *tmp_assign_source_128;
        PyObject *tmp_metaclass_value_15;
        bool tmp_condition_result_85;
        PyObject *tmp_key_value_43;
        PyObject *tmp_dict_arg_value_43;
        PyObject *tmp_dict_arg_value_44;
        PyObject *tmp_key_value_44;
        nuitka_bool tmp_condition_result_86;
        int tmp_truth_name_15;
        PyObject *tmp_type_arg_29;
        PyObject *tmp_expression_value_71;
        PyObject *tmp_subscript_value_15;
        PyObject *tmp_bases_value_15;
        tmp_key_value_43 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_43 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_43, tmp_key_value_43);
        assert(!(tmp_res == -1));
        tmp_condition_result_85 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_85 != false) {
            goto condexpr_true_29;
        } else {
            goto condexpr_false_29;
        }
        condexpr_true_29:;
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_44 = tmp_class_creation_15__class_decl_dict;
        tmp_key_value_44 = mod_consts[205];
        tmp_metaclass_value_15 = DICT_GET_ITEM0(tmp_dict_arg_value_44, tmp_key_value_44);
        if (tmp_metaclass_value_15 == NULL) {
            tmp_metaclass_value_15 = Py_None;
        }
        assert(!(tmp_metaclass_value_15 == NULL));
        Py_INCREF(tmp_metaclass_value_15);
        goto condexpr_end_29;
        condexpr_false_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_truth_name_15 = CHECK_IF_TRUE(tmp_class_creation_15__bases);
        if (tmp_truth_name_15 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        tmp_condition_result_86 = tmp_truth_name_15 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_86 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_30;
        } else {
            goto condexpr_false_30;
        }
        condexpr_true_30:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_expression_value_71 = tmp_class_creation_15__bases;
        tmp_subscript_value_15 = mod_consts[4];
        tmp_type_arg_29 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_71, tmp_subscript_value_15, 0);
        if (tmp_type_arg_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        tmp_metaclass_value_15 = BUILTIN_TYPE1(tmp_type_arg_29);
        Py_DECREF(tmp_type_arg_29);
        if (tmp_metaclass_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        goto condexpr_end_30;
        condexpr_false_30:;
        tmp_metaclass_value_15 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_15);
        condexpr_end_30:;
        condexpr_end_29:;
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_bases_value_15 = tmp_class_creation_15__bases;
        tmp_assign_source_128 = SELECT_METACLASS(tmp_metaclass_value_15, tmp_bases_value_15);
        Py_DECREF(tmp_metaclass_value_15);
        if (tmp_assign_source_128 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        assert(tmp_class_creation_15__metaclass == NULL);
        tmp_class_creation_15__metaclass = tmp_assign_source_128;
    }
    {
        bool tmp_condition_result_87;
        PyObject *tmp_key_value_45;
        PyObject *tmp_dict_arg_value_45;
        tmp_key_value_45 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_dict_arg_value_45 = tmp_class_creation_15__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_45, tmp_key_value_45);
        assert(!(tmp_res == -1));
        tmp_condition_result_87 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_87 != false) {
            goto branch_yes_57;
        } else {
            goto branch_no_57;
        }
    }
    branch_yes_57:;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_15__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 358;

        goto try_except_handler_45;
    }
    branch_no_57:;
    {
        nuitka_bool tmp_condition_result_88;
        PyObject *tmp_expression_value_72;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_72 = tmp_class_creation_15__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_72, mod_consts[206]);
        tmp_condition_result_88 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_88 == NUITKA_BOOL_TRUE) {
            goto branch_yes_58;
        } else {
            goto branch_no_58;
        }
    }
    branch_yes_58:;
    {
        PyObject *tmp_assign_source_129;
        PyObject *tmp_called_value_29;
        PyObject *tmp_expression_value_73;
        PyObject *tmp_args_value_29;
        PyObject *tmp_tuple_element_56;
        PyObject *tmp_kwargs_value_29;
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_expression_value_73 = tmp_class_creation_15__metaclass;
        tmp_called_value_29 = LOOKUP_ATTRIBUTE(tmp_expression_value_73, mod_consts[206]);
        if (tmp_called_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        tmp_tuple_element_56 = mod_consts[291];
        tmp_args_value_29 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_29, 0, tmp_tuple_element_56);
        CHECK_OBJECT(tmp_class_creation_15__bases);
        tmp_tuple_element_56 = tmp_class_creation_15__bases;
        PyTuple_SET_ITEM0(tmp_args_value_29, 1, tmp_tuple_element_56);
        CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
        tmp_kwargs_value_29 = tmp_class_creation_15__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 358;
        tmp_assign_source_129 = CALL_FUNCTION(tmp_called_value_29, tmp_args_value_29, tmp_kwargs_value_29);
        Py_DECREF(tmp_called_value_29);
        Py_DECREF(tmp_args_value_29);
        if (tmp_assign_source_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_129;
    }
    {
        bool tmp_condition_result_89;
        PyObject *tmp_operand_value_15;
        PyObject *tmp_expression_value_74;
        CHECK_OBJECT(tmp_class_creation_15__prepared);
        tmp_expression_value_74 = tmp_class_creation_15__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_74, mod_consts[208]);
        tmp_operand_value_15 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_15);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        tmp_condition_result_89 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_89 != false) {
            goto branch_yes_59;
        } else {
            goto branch_no_59;
        }
    }
    branch_yes_59:;
    {
        PyObject *tmp_raise_type_15;
        PyObject *tmp_raise_value_15;
        PyObject *tmp_left_value_15;
        PyObject *tmp_right_value_15;
        PyObject *tmp_tuple_element_57;
        PyObject *tmp_getattr_target_15;
        PyObject *tmp_getattr_attr_15;
        PyObject *tmp_getattr_default_15;
        tmp_raise_type_15 = PyExc_TypeError;
        tmp_left_value_15 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_15__metaclass);
        tmp_getattr_target_15 = tmp_class_creation_15__metaclass;
        tmp_getattr_attr_15 = mod_consts[210];
        tmp_getattr_default_15 = mod_consts[211];
        tmp_tuple_element_57 = BUILTIN_GETATTR(tmp_getattr_target_15, tmp_getattr_attr_15, tmp_getattr_default_15);
        if (tmp_tuple_element_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        tmp_right_value_15 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_75;
            PyObject *tmp_type_arg_30;
            PyTuple_SET_ITEM(tmp_right_value_15, 0, tmp_tuple_element_57);
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_type_arg_30 = tmp_class_creation_15__prepared;
            tmp_expression_value_75 = BUILTIN_TYPE1(tmp_type_arg_30);
            assert(!(tmp_expression_value_75 == NULL));
            tmp_tuple_element_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_75, mod_consts[210]);
            Py_DECREF(tmp_expression_value_75);
            if (tmp_tuple_element_57 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 358;

                goto tuple_build_exception_15;
            }
            PyTuple_SET_ITEM(tmp_right_value_15, 1, tmp_tuple_element_57);
        }
        goto tuple_build_noexception_15;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_15:;
        Py_DECREF(tmp_right_value_15);
        goto try_except_handler_45;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_15:;
        tmp_raise_value_15 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_15, tmp_right_value_15);
        Py_DECREF(tmp_right_value_15);
        if (tmp_raise_value_15 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_45;
        }
        exception_type = tmp_raise_type_15;
        Py_INCREF(tmp_raise_type_15);
        exception_value = tmp_raise_value_15;
        exception_lineno = 358;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_45;
    }
    branch_no_59:;
    goto branch_end_58;
    branch_no_58:;
    {
        PyObject *tmp_assign_source_130;
        tmp_assign_source_130 = PyDict_New();
        assert(tmp_class_creation_15__prepared == NULL);
        tmp_class_creation_15__prepared = tmp_assign_source_130;
    }
    branch_end_58:;
    {
        PyObject *tmp_assign_source_131;
        {
            PyObject *tmp_set_locals_15;
            CHECK_OBJECT(tmp_class_creation_15__prepared);
            tmp_set_locals_15 = tmp_class_creation_15__prepared;
            locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358 = tmp_set_locals_15;
            Py_INCREF(tmp_set_locals_15);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_47;
        }
        tmp_dictset_value = mod_consts[292];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_47;
        }
        tmp_dictset_value = mod_consts[291];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_47;
        }
        if (isFrameUnusable(cache_frame_5c802a66aef8c15382108a98b969f15b_16)) {
            Py_XDECREF(cache_frame_5c802a66aef8c15382108a98b969f15b_16);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5c802a66aef8c15382108a98b969f15b_16 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5c802a66aef8c15382108a98b969f15b_16 = MAKE_FUNCTION_FRAME(codeobj_5c802a66aef8c15382108a98b969f15b, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5c802a66aef8c15382108a98b969f15b_16->m_type_description == NULL);
        frame_5c802a66aef8c15382108a98b969f15b_16 = cache_frame_5c802a66aef8c15382108a98b969f15b_16;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5c802a66aef8c15382108a98b969f15b_16);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5c802a66aef8c15382108a98b969f15b_16) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[293];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 364;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__27_passwd_hash();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358, mod_consts[83], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 365;
            type_description_2 = "o";
            goto frame_exception_exit_16;
        }
        {
            PyObject *tmp_defaults_1;
            tmp_defaults_1 = mod_consts[295];
            Py_INCREF(tmp_defaults_1);


            tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__28___init__(tmp_defaults_1);

            tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358, mod_consts[216], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 384;
                type_description_2 = "o";
                goto frame_exception_exit_16;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5c802a66aef8c15382108a98b969f15b_16);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_15;

        frame_exception_exit_16:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5c802a66aef8c15382108a98b969f15b_16);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5c802a66aef8c15382108a98b969f15b_16, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5c802a66aef8c15382108a98b969f15b_16->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5c802a66aef8c15382108a98b969f15b_16, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5c802a66aef8c15382108a98b969f15b_16,
            type_description_2,
            outline_14_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5c802a66aef8c15382108a98b969f15b_16 == cache_frame_5c802a66aef8c15382108a98b969f15b_16) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5c802a66aef8c15382108a98b969f15b_16);
            cache_frame_5c802a66aef8c15382108a98b969f15b_16 = NULL;
        }

        assertFrameObject(frame_5c802a66aef8c15382108a98b969f15b_16);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_15;

        frame_no_exception_15:;
        goto skip_nested_handling_15;
        nested_frame_exit_15:;

        goto try_except_handler_47;
        skip_nested_handling_15:;
        {
            nuitka_bool tmp_condition_result_90;
            PyObject *tmp_cmp_expr_left_15;
            PyObject *tmp_cmp_expr_right_15;
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_cmp_expr_left_15 = tmp_class_creation_15__bases;
            CHECK_OBJECT(tmp_class_creation_15__bases_orig);
            tmp_cmp_expr_right_15 = tmp_class_creation_15__bases_orig;
            tmp_condition_result_90 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_15, tmp_cmp_expr_right_15);
            if (tmp_condition_result_90 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 358;

                goto try_except_handler_47;
            }
            if (tmp_condition_result_90 == NUITKA_BOOL_TRUE) {
                goto branch_yes_60;
            } else {
                goto branch_no_60;
            }
            assert(tmp_condition_result_90 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_60:;
        CHECK_OBJECT(tmp_class_creation_15__bases_orig);
        tmp_dictset_value = tmp_class_creation_15__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 358;

            goto try_except_handler_47;
        }
        branch_no_60:;
        {
            PyObject *tmp_assign_source_132;
            PyObject *tmp_called_value_30;
            PyObject *tmp_args_value_30;
            PyObject *tmp_tuple_element_58;
            PyObject *tmp_kwargs_value_30;
            CHECK_OBJECT(tmp_class_creation_15__metaclass);
            tmp_called_value_30 = tmp_class_creation_15__metaclass;
            tmp_tuple_element_58 = mod_consts[291];
            tmp_args_value_30 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_30, 0, tmp_tuple_element_58);
            CHECK_OBJECT(tmp_class_creation_15__bases);
            tmp_tuple_element_58 = tmp_class_creation_15__bases;
            PyTuple_SET_ITEM0(tmp_args_value_30, 1, tmp_tuple_element_58);
            tmp_tuple_element_58 = locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358;
            PyTuple_SET_ITEM0(tmp_args_value_30, 2, tmp_tuple_element_58);
            CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
            tmp_kwargs_value_30 = tmp_class_creation_15__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 358;
            tmp_assign_source_132 = CALL_FUNCTION(tmp_called_value_30, tmp_args_value_30, tmp_kwargs_value_30);
            Py_DECREF(tmp_args_value_30);
            if (tmp_assign_source_132 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 358;

                goto try_except_handler_47;
            }
            assert(outline_14_var___class__ == NULL);
            outline_14_var___class__ = tmp_assign_source_132;
        }
        CHECK_OBJECT(outline_14_var___class__);
        tmp_assign_source_131 = outline_14_var___class__;
        Py_INCREF(tmp_assign_source_131);
        goto try_return_handler_47;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_47:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358);
        locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358 = NULL;
        goto try_return_handler_46;
        // Exception handler code:
        try_except_handler_47:;
        exception_keeper_type_45 = exception_type;
        exception_keeper_value_45 = exception_value;
        exception_keeper_tb_45 = exception_tb;
        exception_keeper_lineno_45 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358);
        locals_xlwt$BIFFRecords$$$class__15_PasswordRecord_358 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_45;
        exception_value = exception_keeper_value_45;
        exception_tb = exception_keeper_tb_45;
        exception_lineno = exception_keeper_lineno_45;

        goto try_except_handler_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_46:;
        CHECK_OBJECT(outline_14_var___class__);
        Py_DECREF(outline_14_var___class__);
        outline_14_var___class__ = NULL;
        goto outline_result_15;
        // Exception handler code:
        try_except_handler_46:;
        exception_keeper_type_46 = exception_type;
        exception_keeper_value_46 = exception_value;
        exception_keeper_tb_46 = exception_tb;
        exception_keeper_lineno_46 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_46;
        exception_value = exception_keeper_value_46;
        exception_tb = exception_keeper_tb_46;
        exception_lineno = exception_keeper_lineno_46;

        goto outline_exception_15;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_15:;
        exception_lineno = 358;
        goto try_except_handler_45;
        outline_result_15:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[291], tmp_assign_source_131);
    }
    goto try_end_17;
    // Exception handler code:
    try_except_handler_45:;
    exception_keeper_type_47 = exception_type;
    exception_keeper_value_47 = exception_value;
    exception_keeper_tb_47 = exception_tb;
    exception_keeper_lineno_47 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    Py_XDECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_47;
    exception_value = exception_keeper_value_47;
    exception_tb = exception_keeper_tb_47;
    exception_lineno = exception_keeper_lineno_47;

    goto frame_exception_exit_1;
    // End of try:
    try_end_17:;
    CHECK_OBJECT(tmp_class_creation_15__bases_orig);
    Py_DECREF(tmp_class_creation_15__bases_orig);
    tmp_class_creation_15__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_15__bases);
    Py_DECREF(tmp_class_creation_15__bases);
    tmp_class_creation_15__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_15__class_decl_dict);
    Py_DECREF(tmp_class_creation_15__class_decl_dict);
    tmp_class_creation_15__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_15__metaclass);
    Py_DECREF(tmp_class_creation_15__metaclass);
    tmp_class_creation_15__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_15__prepared);
    Py_DECREF(tmp_class_creation_15__prepared);
    tmp_class_creation_15__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_133;
        PyObject *tmp_tuple_element_59;
        tmp_tuple_element_59 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_59 == NULL)) {
            tmp_tuple_element_59 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        tmp_assign_source_133 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_133, 0, tmp_tuple_element_59);
        assert(tmp_class_creation_16__bases_orig == NULL);
        tmp_class_creation_16__bases_orig = tmp_assign_source_133;
    }
    {
        PyObject *tmp_assign_source_134;
        PyObject *tmp_dircall_arg1_16;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dircall_arg1_16 = tmp_class_creation_16__bases_orig;
        Py_INCREF(tmp_dircall_arg1_16);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_16};
            tmp_assign_source_134 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_134 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        assert(tmp_class_creation_16__bases == NULL);
        tmp_class_creation_16__bases = tmp_assign_source_134;
    }
    {
        PyObject *tmp_assign_source_135;
        tmp_assign_source_135 = PyDict_New();
        assert(tmp_class_creation_16__class_decl_dict == NULL);
        tmp_class_creation_16__class_decl_dict = tmp_assign_source_135;
    }
    {
        PyObject *tmp_assign_source_136;
        PyObject *tmp_metaclass_value_16;
        bool tmp_condition_result_91;
        PyObject *tmp_key_value_46;
        PyObject *tmp_dict_arg_value_46;
        PyObject *tmp_dict_arg_value_47;
        PyObject *tmp_key_value_47;
        nuitka_bool tmp_condition_result_92;
        int tmp_truth_name_16;
        PyObject *tmp_type_arg_31;
        PyObject *tmp_expression_value_76;
        PyObject *tmp_subscript_value_16;
        PyObject *tmp_bases_value_16;
        tmp_key_value_46 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_46 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_46, tmp_key_value_46);
        assert(!(tmp_res == -1));
        tmp_condition_result_91 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_91 != false) {
            goto condexpr_true_31;
        } else {
            goto condexpr_false_31;
        }
        condexpr_true_31:;
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_47 = tmp_class_creation_16__class_decl_dict;
        tmp_key_value_47 = mod_consts[205];
        tmp_metaclass_value_16 = DICT_GET_ITEM0(tmp_dict_arg_value_47, tmp_key_value_47);
        if (tmp_metaclass_value_16 == NULL) {
            tmp_metaclass_value_16 = Py_None;
        }
        assert(!(tmp_metaclass_value_16 == NULL));
        Py_INCREF(tmp_metaclass_value_16);
        goto condexpr_end_31;
        condexpr_false_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_truth_name_16 = CHECK_IF_TRUE(tmp_class_creation_16__bases);
        if (tmp_truth_name_16 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        tmp_condition_result_92 = tmp_truth_name_16 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_92 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_32;
        } else {
            goto condexpr_false_32;
        }
        condexpr_true_32:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_expression_value_76 = tmp_class_creation_16__bases;
        tmp_subscript_value_16 = mod_consts[4];
        tmp_type_arg_31 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_76, tmp_subscript_value_16, 0);
        if (tmp_type_arg_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        tmp_metaclass_value_16 = BUILTIN_TYPE1(tmp_type_arg_31);
        Py_DECREF(tmp_type_arg_31);
        if (tmp_metaclass_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        goto condexpr_end_32;
        condexpr_false_32:;
        tmp_metaclass_value_16 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_16);
        condexpr_end_32:;
        condexpr_end_31:;
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_bases_value_16 = tmp_class_creation_16__bases;
        tmp_assign_source_136 = SELECT_METACLASS(tmp_metaclass_value_16, tmp_bases_value_16);
        Py_DECREF(tmp_metaclass_value_16);
        if (tmp_assign_source_136 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        assert(tmp_class_creation_16__metaclass == NULL);
        tmp_class_creation_16__metaclass = tmp_assign_source_136;
    }
    {
        bool tmp_condition_result_93;
        PyObject *tmp_key_value_48;
        PyObject *tmp_dict_arg_value_48;
        tmp_key_value_48 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_dict_arg_value_48 = tmp_class_creation_16__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_48, tmp_key_value_48);
        assert(!(tmp_res == -1));
        tmp_condition_result_93 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_93 != false) {
            goto branch_yes_61;
        } else {
            goto branch_no_61;
        }
    }
    branch_yes_61:;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_16__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 388;

        goto try_except_handler_48;
    }
    branch_no_61:;
    {
        nuitka_bool tmp_condition_result_94;
        PyObject *tmp_expression_value_77;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_77 = tmp_class_creation_16__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_77, mod_consts[206]);
        tmp_condition_result_94 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_94 == NUITKA_BOOL_TRUE) {
            goto branch_yes_62;
        } else {
            goto branch_no_62;
        }
    }
    branch_yes_62:;
    {
        PyObject *tmp_assign_source_137;
        PyObject *tmp_called_value_31;
        PyObject *tmp_expression_value_78;
        PyObject *tmp_args_value_31;
        PyObject *tmp_tuple_element_60;
        PyObject *tmp_kwargs_value_31;
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_expression_value_78 = tmp_class_creation_16__metaclass;
        tmp_called_value_31 = LOOKUP_ATTRIBUTE(tmp_expression_value_78, mod_consts[206]);
        if (tmp_called_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        tmp_tuple_element_60 = mod_consts[297];
        tmp_args_value_31 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_31, 0, tmp_tuple_element_60);
        CHECK_OBJECT(tmp_class_creation_16__bases);
        tmp_tuple_element_60 = tmp_class_creation_16__bases;
        PyTuple_SET_ITEM0(tmp_args_value_31, 1, tmp_tuple_element_60);
        CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
        tmp_kwargs_value_31 = tmp_class_creation_16__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 388;
        tmp_assign_source_137 = CALL_FUNCTION(tmp_called_value_31, tmp_args_value_31, tmp_kwargs_value_31);
        Py_DECREF(tmp_called_value_31);
        Py_DECREF(tmp_args_value_31);
        if (tmp_assign_source_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_137;
    }
    {
        bool tmp_condition_result_95;
        PyObject *tmp_operand_value_16;
        PyObject *tmp_expression_value_79;
        CHECK_OBJECT(tmp_class_creation_16__prepared);
        tmp_expression_value_79 = tmp_class_creation_16__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_79, mod_consts[208]);
        tmp_operand_value_16 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_16);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        tmp_condition_result_95 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_95 != false) {
            goto branch_yes_63;
        } else {
            goto branch_no_63;
        }
    }
    branch_yes_63:;
    {
        PyObject *tmp_raise_type_16;
        PyObject *tmp_raise_value_16;
        PyObject *tmp_left_value_16;
        PyObject *tmp_right_value_16;
        PyObject *tmp_tuple_element_61;
        PyObject *tmp_getattr_target_16;
        PyObject *tmp_getattr_attr_16;
        PyObject *tmp_getattr_default_16;
        tmp_raise_type_16 = PyExc_TypeError;
        tmp_left_value_16 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_16__metaclass);
        tmp_getattr_target_16 = tmp_class_creation_16__metaclass;
        tmp_getattr_attr_16 = mod_consts[210];
        tmp_getattr_default_16 = mod_consts[211];
        tmp_tuple_element_61 = BUILTIN_GETATTR(tmp_getattr_target_16, tmp_getattr_attr_16, tmp_getattr_default_16);
        if (tmp_tuple_element_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        tmp_right_value_16 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_80;
            PyObject *tmp_type_arg_32;
            PyTuple_SET_ITEM(tmp_right_value_16, 0, tmp_tuple_element_61);
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_type_arg_32 = tmp_class_creation_16__prepared;
            tmp_expression_value_80 = BUILTIN_TYPE1(tmp_type_arg_32);
            assert(!(tmp_expression_value_80 == NULL));
            tmp_tuple_element_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_80, mod_consts[210]);
            Py_DECREF(tmp_expression_value_80);
            if (tmp_tuple_element_61 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 388;

                goto tuple_build_exception_16;
            }
            PyTuple_SET_ITEM(tmp_right_value_16, 1, tmp_tuple_element_61);
        }
        goto tuple_build_noexception_16;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_16:;
        Py_DECREF(tmp_right_value_16);
        goto try_except_handler_48;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_16:;
        tmp_raise_value_16 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_16, tmp_right_value_16);
        Py_DECREF(tmp_right_value_16);
        if (tmp_raise_value_16 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_48;
        }
        exception_type = tmp_raise_type_16;
        Py_INCREF(tmp_raise_type_16);
        exception_value = tmp_raise_value_16;
        exception_lineno = 388;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_48;
    }
    branch_no_63:;
    goto branch_end_62;
    branch_no_62:;
    {
        PyObject *tmp_assign_source_138;
        tmp_assign_source_138 = PyDict_New();
        assert(tmp_class_creation_16__prepared == NULL);
        tmp_class_creation_16__prepared = tmp_assign_source_138;
    }
    branch_end_62:;
    {
        PyObject *tmp_assign_source_139;
        {
            PyObject *tmp_set_locals_16;
            CHECK_OBJECT(tmp_class_creation_16__prepared);
            tmp_set_locals_16 = tmp_class_creation_16__prepared;
            locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388 = tmp_set_locals_16;
            Py_INCREF(tmp_set_locals_16);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_50;
        }
        tmp_dictset_value = mod_consts[297];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_50;
        }
        if (isFrameUnusable(cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17)) {
            Py_XDECREF(cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17 = MAKE_FUNCTION_FRAME(codeobj_4232dd8f2e9491305b1e88a0fa397d57, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17->m_type_description == NULL);
        frame_4232dd8f2e9491305b1e88a0fa397d57_17 = cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4232dd8f2e9491305b1e88a0fa397d57_17);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4232dd8f2e9491305b1e88a0fa397d57_17) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[298];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 389;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__29___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 391;
            type_description_2 = "o";
            goto frame_exception_exit_17;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4232dd8f2e9491305b1e88a0fa397d57_17);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_16;

        frame_exception_exit_17:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4232dd8f2e9491305b1e88a0fa397d57_17);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4232dd8f2e9491305b1e88a0fa397d57_17, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4232dd8f2e9491305b1e88a0fa397d57_17->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4232dd8f2e9491305b1e88a0fa397d57_17, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4232dd8f2e9491305b1e88a0fa397d57_17,
            type_description_2,
            outline_15_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4232dd8f2e9491305b1e88a0fa397d57_17 == cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17);
            cache_frame_4232dd8f2e9491305b1e88a0fa397d57_17 = NULL;
        }

        assertFrameObject(frame_4232dd8f2e9491305b1e88a0fa397d57_17);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_16;

        frame_no_exception_16:;
        goto skip_nested_handling_16;
        nested_frame_exit_16:;

        goto try_except_handler_50;
        skip_nested_handling_16:;
        {
            nuitka_bool tmp_condition_result_96;
            PyObject *tmp_cmp_expr_left_16;
            PyObject *tmp_cmp_expr_right_16;
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_cmp_expr_left_16 = tmp_class_creation_16__bases;
            CHECK_OBJECT(tmp_class_creation_16__bases_orig);
            tmp_cmp_expr_right_16 = tmp_class_creation_16__bases_orig;
            tmp_condition_result_96 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_16, tmp_cmp_expr_right_16);
            if (tmp_condition_result_96 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 388;

                goto try_except_handler_50;
            }
            if (tmp_condition_result_96 == NUITKA_BOOL_TRUE) {
                goto branch_yes_64;
            } else {
                goto branch_no_64;
            }
            assert(tmp_condition_result_96 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_64:;
        CHECK_OBJECT(tmp_class_creation_16__bases_orig);
        tmp_dictset_value = tmp_class_creation_16__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 388;

            goto try_except_handler_50;
        }
        branch_no_64:;
        {
            PyObject *tmp_assign_source_140;
            PyObject *tmp_called_value_32;
            PyObject *tmp_args_value_32;
            PyObject *tmp_tuple_element_62;
            PyObject *tmp_kwargs_value_32;
            CHECK_OBJECT(tmp_class_creation_16__metaclass);
            tmp_called_value_32 = tmp_class_creation_16__metaclass;
            tmp_tuple_element_62 = mod_consts[297];
            tmp_args_value_32 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_32, 0, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_16__bases);
            tmp_tuple_element_62 = tmp_class_creation_16__bases;
            PyTuple_SET_ITEM0(tmp_args_value_32, 1, tmp_tuple_element_62);
            tmp_tuple_element_62 = locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388;
            PyTuple_SET_ITEM0(tmp_args_value_32, 2, tmp_tuple_element_62);
            CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
            tmp_kwargs_value_32 = tmp_class_creation_16__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 388;
            tmp_assign_source_140 = CALL_FUNCTION(tmp_called_value_32, tmp_args_value_32, tmp_kwargs_value_32);
            Py_DECREF(tmp_args_value_32);
            if (tmp_assign_source_140 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 388;

                goto try_except_handler_50;
            }
            assert(outline_15_var___class__ == NULL);
            outline_15_var___class__ = tmp_assign_source_140;
        }
        CHECK_OBJECT(outline_15_var___class__);
        tmp_assign_source_139 = outline_15_var___class__;
        Py_INCREF(tmp_assign_source_139);
        goto try_return_handler_50;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_50:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388);
        locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388 = NULL;
        goto try_return_handler_49;
        // Exception handler code:
        try_except_handler_50:;
        exception_keeper_type_48 = exception_type;
        exception_keeper_value_48 = exception_value;
        exception_keeper_tb_48 = exception_tb;
        exception_keeper_lineno_48 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388);
        locals_xlwt$BIFFRecords$$$class__16_Prot4RevRecord_388 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_48;
        exception_value = exception_keeper_value_48;
        exception_tb = exception_keeper_tb_48;
        exception_lineno = exception_keeper_lineno_48;

        goto try_except_handler_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_49:;
        CHECK_OBJECT(outline_15_var___class__);
        Py_DECREF(outline_15_var___class__);
        outline_15_var___class__ = NULL;
        goto outline_result_16;
        // Exception handler code:
        try_except_handler_49:;
        exception_keeper_type_49 = exception_type;
        exception_keeper_value_49 = exception_value;
        exception_keeper_tb_49 = exception_tb;
        exception_keeper_lineno_49 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_49;
        exception_value = exception_keeper_value_49;
        exception_tb = exception_keeper_tb_49;
        exception_lineno = exception_keeper_lineno_49;

        goto outline_exception_16;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_16:;
        exception_lineno = 388;
        goto try_except_handler_48;
        outline_result_16:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[297], tmp_assign_source_139);
    }
    goto try_end_18;
    // Exception handler code:
    try_except_handler_48:;
    exception_keeper_type_50 = exception_type;
    exception_keeper_value_50 = exception_value;
    exception_keeper_tb_50 = exception_tb;
    exception_keeper_lineno_50 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    Py_XDECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_50;
    exception_value = exception_keeper_value_50;
    exception_tb = exception_keeper_tb_50;
    exception_lineno = exception_keeper_lineno_50;

    goto frame_exception_exit_1;
    // End of try:
    try_end_18:;
    CHECK_OBJECT(tmp_class_creation_16__bases_orig);
    Py_DECREF(tmp_class_creation_16__bases_orig);
    tmp_class_creation_16__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_16__bases);
    Py_DECREF(tmp_class_creation_16__bases);
    tmp_class_creation_16__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_16__class_decl_dict);
    Py_DECREF(tmp_class_creation_16__class_decl_dict);
    tmp_class_creation_16__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_16__metaclass);
    Py_DECREF(tmp_class_creation_16__metaclass);
    tmp_class_creation_16__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_16__prepared);
    Py_DECREF(tmp_class_creation_16__prepared);
    tmp_class_creation_16__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_141;
        PyObject *tmp_tuple_element_63;
        tmp_tuple_element_63 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_63 == NULL)) {
            tmp_tuple_element_63 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        tmp_assign_source_141 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_141, 0, tmp_tuple_element_63);
        assert(tmp_class_creation_17__bases_orig == NULL);
        tmp_class_creation_17__bases_orig = tmp_assign_source_141;
    }
    {
        PyObject *tmp_assign_source_142;
        PyObject *tmp_dircall_arg1_17;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dircall_arg1_17 = tmp_class_creation_17__bases_orig;
        Py_INCREF(tmp_dircall_arg1_17);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_17};
            tmp_assign_source_142 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_142 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_17__bases == NULL);
        tmp_class_creation_17__bases = tmp_assign_source_142;
    }
    {
        PyObject *tmp_assign_source_143;
        tmp_assign_source_143 = PyDict_New();
        assert(tmp_class_creation_17__class_decl_dict == NULL);
        tmp_class_creation_17__class_decl_dict = tmp_assign_source_143;
    }
    {
        PyObject *tmp_assign_source_144;
        PyObject *tmp_metaclass_value_17;
        bool tmp_condition_result_97;
        PyObject *tmp_key_value_49;
        PyObject *tmp_dict_arg_value_49;
        PyObject *tmp_dict_arg_value_50;
        PyObject *tmp_key_value_50;
        nuitka_bool tmp_condition_result_98;
        int tmp_truth_name_17;
        PyObject *tmp_type_arg_33;
        PyObject *tmp_expression_value_81;
        PyObject *tmp_subscript_value_17;
        PyObject *tmp_bases_value_17;
        tmp_key_value_49 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_49 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_49, tmp_key_value_49);
        assert(!(tmp_res == -1));
        tmp_condition_result_97 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_97 != false) {
            goto condexpr_true_33;
        } else {
            goto condexpr_false_33;
        }
        condexpr_true_33:;
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_50 = tmp_class_creation_17__class_decl_dict;
        tmp_key_value_50 = mod_consts[205];
        tmp_metaclass_value_17 = DICT_GET_ITEM0(tmp_dict_arg_value_50, tmp_key_value_50);
        if (tmp_metaclass_value_17 == NULL) {
            tmp_metaclass_value_17 = Py_None;
        }
        assert(!(tmp_metaclass_value_17 == NULL));
        Py_INCREF(tmp_metaclass_value_17);
        goto condexpr_end_33;
        condexpr_false_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_truth_name_17 = CHECK_IF_TRUE(tmp_class_creation_17__bases);
        if (tmp_truth_name_17 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        tmp_condition_result_98 = tmp_truth_name_17 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_98 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_34;
        } else {
            goto condexpr_false_34;
        }
        condexpr_true_34:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_expression_value_81 = tmp_class_creation_17__bases;
        tmp_subscript_value_17 = mod_consts[4];
        tmp_type_arg_33 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_81, tmp_subscript_value_17, 0);
        if (tmp_type_arg_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        tmp_metaclass_value_17 = BUILTIN_TYPE1(tmp_type_arg_33);
        Py_DECREF(tmp_type_arg_33);
        if (tmp_metaclass_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        goto condexpr_end_34;
        condexpr_false_34:;
        tmp_metaclass_value_17 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_17);
        condexpr_end_34:;
        condexpr_end_33:;
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_bases_value_17 = tmp_class_creation_17__bases;
        tmp_assign_source_144 = SELECT_METACLASS(tmp_metaclass_value_17, tmp_bases_value_17);
        Py_DECREF(tmp_metaclass_value_17);
        if (tmp_assign_source_144 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_17__metaclass == NULL);
        tmp_class_creation_17__metaclass = tmp_assign_source_144;
    }
    {
        bool tmp_condition_result_99;
        PyObject *tmp_key_value_51;
        PyObject *tmp_dict_arg_value_51;
        tmp_key_value_51 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_dict_arg_value_51 = tmp_class_creation_17__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_51, tmp_key_value_51);
        assert(!(tmp_res == -1));
        tmp_condition_result_99 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_99 != false) {
            goto branch_yes_65;
        } else {
            goto branch_no_65;
        }
    }
    branch_yes_65:;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_17__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 395;

        goto try_except_handler_51;
    }
    branch_no_65:;
    {
        nuitka_bool tmp_condition_result_100;
        PyObject *tmp_expression_value_82;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_82 = tmp_class_creation_17__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_82, mod_consts[206]);
        tmp_condition_result_100 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_100 == NUITKA_BOOL_TRUE) {
            goto branch_yes_66;
        } else {
            goto branch_no_66;
        }
    }
    branch_yes_66:;
    {
        PyObject *tmp_assign_source_145;
        PyObject *tmp_called_value_33;
        PyObject *tmp_expression_value_83;
        PyObject *tmp_args_value_33;
        PyObject *tmp_tuple_element_64;
        PyObject *tmp_kwargs_value_33;
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_expression_value_83 = tmp_class_creation_17__metaclass;
        tmp_called_value_33 = LOOKUP_ATTRIBUTE(tmp_expression_value_83, mod_consts[206]);
        if (tmp_called_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        tmp_tuple_element_64 = mod_consts[300];
        tmp_args_value_33 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_33, 0, tmp_tuple_element_64);
        CHECK_OBJECT(tmp_class_creation_17__bases);
        tmp_tuple_element_64 = tmp_class_creation_17__bases;
        PyTuple_SET_ITEM0(tmp_args_value_33, 1, tmp_tuple_element_64);
        CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
        tmp_kwargs_value_33 = tmp_class_creation_17__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 395;
        tmp_assign_source_145 = CALL_FUNCTION(tmp_called_value_33, tmp_args_value_33, tmp_kwargs_value_33);
        Py_DECREF(tmp_called_value_33);
        Py_DECREF(tmp_args_value_33);
        if (tmp_assign_source_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_145;
    }
    {
        bool tmp_condition_result_101;
        PyObject *tmp_operand_value_17;
        PyObject *tmp_expression_value_84;
        CHECK_OBJECT(tmp_class_creation_17__prepared);
        tmp_expression_value_84 = tmp_class_creation_17__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_84, mod_consts[208]);
        tmp_operand_value_17 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_17);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        tmp_condition_result_101 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_101 != false) {
            goto branch_yes_67;
        } else {
            goto branch_no_67;
        }
    }
    branch_yes_67:;
    {
        PyObject *tmp_raise_type_17;
        PyObject *tmp_raise_value_17;
        PyObject *tmp_left_value_17;
        PyObject *tmp_right_value_17;
        PyObject *tmp_tuple_element_65;
        PyObject *tmp_getattr_target_17;
        PyObject *tmp_getattr_attr_17;
        PyObject *tmp_getattr_default_17;
        tmp_raise_type_17 = PyExc_TypeError;
        tmp_left_value_17 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_17__metaclass);
        tmp_getattr_target_17 = tmp_class_creation_17__metaclass;
        tmp_getattr_attr_17 = mod_consts[210];
        tmp_getattr_default_17 = mod_consts[211];
        tmp_tuple_element_65 = BUILTIN_GETATTR(tmp_getattr_target_17, tmp_getattr_attr_17, tmp_getattr_default_17);
        if (tmp_tuple_element_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        tmp_right_value_17 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_85;
            PyObject *tmp_type_arg_34;
            PyTuple_SET_ITEM(tmp_right_value_17, 0, tmp_tuple_element_65);
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_type_arg_34 = tmp_class_creation_17__prepared;
            tmp_expression_value_85 = BUILTIN_TYPE1(tmp_type_arg_34);
            assert(!(tmp_expression_value_85 == NULL));
            tmp_tuple_element_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_85, mod_consts[210]);
            Py_DECREF(tmp_expression_value_85);
            if (tmp_tuple_element_65 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;

                goto tuple_build_exception_17;
            }
            PyTuple_SET_ITEM(tmp_right_value_17, 1, tmp_tuple_element_65);
        }
        goto tuple_build_noexception_17;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_17:;
        Py_DECREF(tmp_right_value_17);
        goto try_except_handler_51;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_17:;
        tmp_raise_value_17 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_17, tmp_right_value_17);
        Py_DECREF(tmp_right_value_17);
        if (tmp_raise_value_17 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_51;
        }
        exception_type = tmp_raise_type_17;
        Py_INCREF(tmp_raise_type_17);
        exception_value = tmp_raise_value_17;
        exception_lineno = 395;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_51;
    }
    branch_no_67:;
    goto branch_end_66;
    branch_no_66:;
    {
        PyObject *tmp_assign_source_146;
        tmp_assign_source_146 = PyDict_New();
        assert(tmp_class_creation_17__prepared == NULL);
        tmp_class_creation_17__prepared = tmp_assign_source_146;
    }
    branch_end_66:;
    {
        PyObject *tmp_assign_source_147;
        {
            PyObject *tmp_set_locals_17;
            CHECK_OBJECT(tmp_class_creation_17__prepared);
            tmp_set_locals_17 = tmp_class_creation_17__prepared;
            locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395 = tmp_set_locals_17;
            Py_INCREF(tmp_set_locals_17);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_53;
        }
        tmp_dictset_value = mod_consts[300];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_53;
        }
        if (isFrameUnusable(cache_frame_e3d71cf09d70965a7229fa6a418a7117_18)) {
            Py_XDECREF(cache_frame_e3d71cf09d70965a7229fa6a418a7117_18);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e3d71cf09d70965a7229fa6a418a7117_18 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e3d71cf09d70965a7229fa6a418a7117_18 = MAKE_FUNCTION_FRAME(codeobj_e3d71cf09d70965a7229fa6a418a7117, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e3d71cf09d70965a7229fa6a418a7117_18->m_type_description == NULL);
        frame_e3d71cf09d70965a7229fa6a418a7117_18 = cache_frame_e3d71cf09d70965a7229fa6a418a7117_18;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e3d71cf09d70965a7229fa6a418a7117_18);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e3d71cf09d70965a7229fa6a418a7117_18) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[301];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 396;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__30___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 398;
            type_description_2 = "o";
            goto frame_exception_exit_18;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e3d71cf09d70965a7229fa6a418a7117_18);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_17;

        frame_exception_exit_18:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e3d71cf09d70965a7229fa6a418a7117_18);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e3d71cf09d70965a7229fa6a418a7117_18, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e3d71cf09d70965a7229fa6a418a7117_18->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e3d71cf09d70965a7229fa6a418a7117_18, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e3d71cf09d70965a7229fa6a418a7117_18,
            type_description_2,
            outline_16_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e3d71cf09d70965a7229fa6a418a7117_18 == cache_frame_e3d71cf09d70965a7229fa6a418a7117_18) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e3d71cf09d70965a7229fa6a418a7117_18);
            cache_frame_e3d71cf09d70965a7229fa6a418a7117_18 = NULL;
        }

        assertFrameObject(frame_e3d71cf09d70965a7229fa6a418a7117_18);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_17;

        frame_no_exception_17:;
        goto skip_nested_handling_17;
        nested_frame_exit_17:;

        goto try_except_handler_53;
        skip_nested_handling_17:;
        {
            nuitka_bool tmp_condition_result_102;
            PyObject *tmp_cmp_expr_left_17;
            PyObject *tmp_cmp_expr_right_17;
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_cmp_expr_left_17 = tmp_class_creation_17__bases;
            CHECK_OBJECT(tmp_class_creation_17__bases_orig);
            tmp_cmp_expr_right_17 = tmp_class_creation_17__bases_orig;
            tmp_condition_result_102 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_17, tmp_cmp_expr_right_17);
            if (tmp_condition_result_102 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;

                goto try_except_handler_53;
            }
            if (tmp_condition_result_102 == NUITKA_BOOL_TRUE) {
                goto branch_yes_68;
            } else {
                goto branch_no_68;
            }
            assert(tmp_condition_result_102 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_68:;
        CHECK_OBJECT(tmp_class_creation_17__bases_orig);
        tmp_dictset_value = tmp_class_creation_17__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 395;

            goto try_except_handler_53;
        }
        branch_no_68:;
        {
            PyObject *tmp_assign_source_148;
            PyObject *tmp_called_value_34;
            PyObject *tmp_args_value_34;
            PyObject *tmp_tuple_element_66;
            PyObject *tmp_kwargs_value_34;
            CHECK_OBJECT(tmp_class_creation_17__metaclass);
            tmp_called_value_34 = tmp_class_creation_17__metaclass;
            tmp_tuple_element_66 = mod_consts[300];
            tmp_args_value_34 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_34, 0, tmp_tuple_element_66);
            CHECK_OBJECT(tmp_class_creation_17__bases);
            tmp_tuple_element_66 = tmp_class_creation_17__bases;
            PyTuple_SET_ITEM0(tmp_args_value_34, 1, tmp_tuple_element_66);
            tmp_tuple_element_66 = locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395;
            PyTuple_SET_ITEM0(tmp_args_value_34, 2, tmp_tuple_element_66);
            CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
            tmp_kwargs_value_34 = tmp_class_creation_17__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 395;
            tmp_assign_source_148 = CALL_FUNCTION(tmp_called_value_34, tmp_args_value_34, tmp_kwargs_value_34);
            Py_DECREF(tmp_args_value_34);
            if (tmp_assign_source_148 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 395;

                goto try_except_handler_53;
            }
            assert(outline_16_var___class__ == NULL);
            outline_16_var___class__ = tmp_assign_source_148;
        }
        CHECK_OBJECT(outline_16_var___class__);
        tmp_assign_source_147 = outline_16_var___class__;
        Py_INCREF(tmp_assign_source_147);
        goto try_return_handler_53;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_53:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395);
        locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395 = NULL;
        goto try_return_handler_52;
        // Exception handler code:
        try_except_handler_53:;
        exception_keeper_type_51 = exception_type;
        exception_keeper_value_51 = exception_value;
        exception_keeper_tb_51 = exception_tb;
        exception_keeper_lineno_51 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395);
        locals_xlwt$BIFFRecords$$$class__17_Prot4RevPassRecord_395 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_51;
        exception_value = exception_keeper_value_51;
        exception_tb = exception_keeper_tb_51;
        exception_lineno = exception_keeper_lineno_51;

        goto try_except_handler_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_52:;
        CHECK_OBJECT(outline_16_var___class__);
        Py_DECREF(outline_16_var___class__);
        outline_16_var___class__ = NULL;
        goto outline_result_17;
        // Exception handler code:
        try_except_handler_52:;
        exception_keeper_type_52 = exception_type;
        exception_keeper_value_52 = exception_value;
        exception_keeper_tb_52 = exception_tb;
        exception_keeper_lineno_52 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_52;
        exception_value = exception_keeper_value_52;
        exception_tb = exception_keeper_tb_52;
        exception_lineno = exception_keeper_lineno_52;

        goto outline_exception_17;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_17:;
        exception_lineno = 395;
        goto try_except_handler_51;
        outline_result_17:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[300], tmp_assign_source_147);
    }
    goto try_end_19;
    // Exception handler code:
    try_except_handler_51:;
    exception_keeper_type_53 = exception_type;
    exception_keeper_value_53 = exception_value;
    exception_keeper_tb_53 = exception_tb;
    exception_keeper_lineno_53 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    Py_XDECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_53;
    exception_value = exception_keeper_value_53;
    exception_tb = exception_keeper_tb_53;
    exception_lineno = exception_keeper_lineno_53;

    goto frame_exception_exit_1;
    // End of try:
    try_end_19:;
    CHECK_OBJECT(tmp_class_creation_17__bases_orig);
    Py_DECREF(tmp_class_creation_17__bases_orig);
    tmp_class_creation_17__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_17__bases);
    Py_DECREF(tmp_class_creation_17__bases);
    tmp_class_creation_17__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_17__class_decl_dict);
    Py_DECREF(tmp_class_creation_17__class_decl_dict);
    tmp_class_creation_17__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_17__metaclass);
    Py_DECREF(tmp_class_creation_17__metaclass);
    tmp_class_creation_17__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_17__prepared);
    Py_DECREF(tmp_class_creation_17__prepared);
    tmp_class_creation_17__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_149;
        PyObject *tmp_tuple_element_67;
        tmp_tuple_element_67 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_67 == NULL)) {
            tmp_tuple_element_67 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        tmp_assign_source_149 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_149, 0, tmp_tuple_element_67);
        assert(tmp_class_creation_18__bases_orig == NULL);
        tmp_class_creation_18__bases_orig = tmp_assign_source_149;
    }
    {
        PyObject *tmp_assign_source_150;
        PyObject *tmp_dircall_arg1_18;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dircall_arg1_18 = tmp_class_creation_18__bases_orig;
        Py_INCREF(tmp_dircall_arg1_18);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_18};
            tmp_assign_source_150 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_150 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        assert(tmp_class_creation_18__bases == NULL);
        tmp_class_creation_18__bases = tmp_assign_source_150;
    }
    {
        PyObject *tmp_assign_source_151;
        tmp_assign_source_151 = PyDict_New();
        assert(tmp_class_creation_18__class_decl_dict == NULL);
        tmp_class_creation_18__class_decl_dict = tmp_assign_source_151;
    }
    {
        PyObject *tmp_assign_source_152;
        PyObject *tmp_metaclass_value_18;
        bool tmp_condition_result_103;
        PyObject *tmp_key_value_52;
        PyObject *tmp_dict_arg_value_52;
        PyObject *tmp_dict_arg_value_53;
        PyObject *tmp_key_value_53;
        nuitka_bool tmp_condition_result_104;
        int tmp_truth_name_18;
        PyObject *tmp_type_arg_35;
        PyObject *tmp_expression_value_86;
        PyObject *tmp_subscript_value_18;
        PyObject *tmp_bases_value_18;
        tmp_key_value_52 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_52 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_52, tmp_key_value_52);
        assert(!(tmp_res == -1));
        tmp_condition_result_103 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_103 != false) {
            goto condexpr_true_35;
        } else {
            goto condexpr_false_35;
        }
        condexpr_true_35:;
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_53 = tmp_class_creation_18__class_decl_dict;
        tmp_key_value_53 = mod_consts[205];
        tmp_metaclass_value_18 = DICT_GET_ITEM0(tmp_dict_arg_value_53, tmp_key_value_53);
        if (tmp_metaclass_value_18 == NULL) {
            tmp_metaclass_value_18 = Py_None;
        }
        assert(!(tmp_metaclass_value_18 == NULL));
        Py_INCREF(tmp_metaclass_value_18);
        goto condexpr_end_35;
        condexpr_false_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_truth_name_18 = CHECK_IF_TRUE(tmp_class_creation_18__bases);
        if (tmp_truth_name_18 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        tmp_condition_result_104 = tmp_truth_name_18 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_104 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_36;
        } else {
            goto condexpr_false_36;
        }
        condexpr_true_36:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_expression_value_86 = tmp_class_creation_18__bases;
        tmp_subscript_value_18 = mod_consts[4];
        tmp_type_arg_35 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_86, tmp_subscript_value_18, 0);
        if (tmp_type_arg_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        tmp_metaclass_value_18 = BUILTIN_TYPE1(tmp_type_arg_35);
        Py_DECREF(tmp_type_arg_35);
        if (tmp_metaclass_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        goto condexpr_end_36;
        condexpr_false_36:;
        tmp_metaclass_value_18 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_18);
        condexpr_end_36:;
        condexpr_end_35:;
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_bases_value_18 = tmp_class_creation_18__bases;
        tmp_assign_source_152 = SELECT_METACLASS(tmp_metaclass_value_18, tmp_bases_value_18);
        Py_DECREF(tmp_metaclass_value_18);
        if (tmp_assign_source_152 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        assert(tmp_class_creation_18__metaclass == NULL);
        tmp_class_creation_18__metaclass = tmp_assign_source_152;
    }
    {
        bool tmp_condition_result_105;
        PyObject *tmp_key_value_54;
        PyObject *tmp_dict_arg_value_54;
        tmp_key_value_54 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_dict_arg_value_54 = tmp_class_creation_18__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_54, tmp_key_value_54);
        assert(!(tmp_res == -1));
        tmp_condition_result_105 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_105 != false) {
            goto branch_yes_69;
        } else {
            goto branch_no_69;
        }
    }
    branch_yes_69:;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_18__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 402;

        goto try_except_handler_54;
    }
    branch_no_69:;
    {
        nuitka_bool tmp_condition_result_106;
        PyObject *tmp_expression_value_87;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_87 = tmp_class_creation_18__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_87, mod_consts[206]);
        tmp_condition_result_106 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_106 == NUITKA_BOOL_TRUE) {
            goto branch_yes_70;
        } else {
            goto branch_no_70;
        }
    }
    branch_yes_70:;
    {
        PyObject *tmp_assign_source_153;
        PyObject *tmp_called_value_35;
        PyObject *tmp_expression_value_88;
        PyObject *tmp_args_value_35;
        PyObject *tmp_tuple_element_68;
        PyObject *tmp_kwargs_value_35;
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_expression_value_88 = tmp_class_creation_18__metaclass;
        tmp_called_value_35 = LOOKUP_ATTRIBUTE(tmp_expression_value_88, mod_consts[206]);
        if (tmp_called_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        tmp_tuple_element_68 = mod_consts[303];
        tmp_args_value_35 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_35, 0, tmp_tuple_element_68);
        CHECK_OBJECT(tmp_class_creation_18__bases);
        tmp_tuple_element_68 = tmp_class_creation_18__bases;
        PyTuple_SET_ITEM0(tmp_args_value_35, 1, tmp_tuple_element_68);
        CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
        tmp_kwargs_value_35 = tmp_class_creation_18__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 402;
        tmp_assign_source_153 = CALL_FUNCTION(tmp_called_value_35, tmp_args_value_35, tmp_kwargs_value_35);
        Py_DECREF(tmp_called_value_35);
        Py_DECREF(tmp_args_value_35);
        if (tmp_assign_source_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_153;
    }
    {
        bool tmp_condition_result_107;
        PyObject *tmp_operand_value_18;
        PyObject *tmp_expression_value_89;
        CHECK_OBJECT(tmp_class_creation_18__prepared);
        tmp_expression_value_89 = tmp_class_creation_18__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_89, mod_consts[208]);
        tmp_operand_value_18 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_18);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        tmp_condition_result_107 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_107 != false) {
            goto branch_yes_71;
        } else {
            goto branch_no_71;
        }
    }
    branch_yes_71:;
    {
        PyObject *tmp_raise_type_18;
        PyObject *tmp_raise_value_18;
        PyObject *tmp_left_value_18;
        PyObject *tmp_right_value_18;
        PyObject *tmp_tuple_element_69;
        PyObject *tmp_getattr_target_18;
        PyObject *tmp_getattr_attr_18;
        PyObject *tmp_getattr_default_18;
        tmp_raise_type_18 = PyExc_TypeError;
        tmp_left_value_18 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_18__metaclass);
        tmp_getattr_target_18 = tmp_class_creation_18__metaclass;
        tmp_getattr_attr_18 = mod_consts[210];
        tmp_getattr_default_18 = mod_consts[211];
        tmp_tuple_element_69 = BUILTIN_GETATTR(tmp_getattr_target_18, tmp_getattr_attr_18, tmp_getattr_default_18);
        if (tmp_tuple_element_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        tmp_right_value_18 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_90;
            PyObject *tmp_type_arg_36;
            PyTuple_SET_ITEM(tmp_right_value_18, 0, tmp_tuple_element_69);
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_type_arg_36 = tmp_class_creation_18__prepared;
            tmp_expression_value_90 = BUILTIN_TYPE1(tmp_type_arg_36);
            assert(!(tmp_expression_value_90 == NULL));
            tmp_tuple_element_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_90, mod_consts[210]);
            Py_DECREF(tmp_expression_value_90);
            if (tmp_tuple_element_69 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 402;

                goto tuple_build_exception_18;
            }
            PyTuple_SET_ITEM(tmp_right_value_18, 1, tmp_tuple_element_69);
        }
        goto tuple_build_noexception_18;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_18:;
        Py_DECREF(tmp_right_value_18);
        goto try_except_handler_54;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_18:;
        tmp_raise_value_18 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_18, tmp_right_value_18);
        Py_DECREF(tmp_right_value_18);
        if (tmp_raise_value_18 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_54;
        }
        exception_type = tmp_raise_type_18;
        Py_INCREF(tmp_raise_type_18);
        exception_value = tmp_raise_value_18;
        exception_lineno = 402;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_54;
    }
    branch_no_71:;
    goto branch_end_70;
    branch_no_70:;
    {
        PyObject *tmp_assign_source_154;
        tmp_assign_source_154 = PyDict_New();
        assert(tmp_class_creation_18__prepared == NULL);
        tmp_class_creation_18__prepared = tmp_assign_source_154;
    }
    branch_end_70:;
    {
        PyObject *tmp_assign_source_155;
        {
            PyObject *tmp_set_locals_18;
            CHECK_OBJECT(tmp_class_creation_18__prepared);
            tmp_set_locals_18 = tmp_class_creation_18__prepared;
            locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402 = tmp_set_locals_18;
            Py_INCREF(tmp_set_locals_18);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_56;
        }
        tmp_dictset_value = mod_consts[304];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_56;
        }
        tmp_dictset_value = mod_consts[303];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_56;
        }
        if (isFrameUnusable(cache_frame_c460d39964371e886c3e28f376c697dc_19)) {
            Py_XDECREF(cache_frame_c460d39964371e886c3e28f376c697dc_19);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c460d39964371e886c3e28f376c697dc_19 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c460d39964371e886c3e28f376c697dc_19 = MAKE_FUNCTION_FRAME(codeobj_c460d39964371e886c3e28f376c697dc, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c460d39964371e886c3e28f376c697dc_19->m_type_description == NULL);
        frame_c460d39964371e886c3e28f376c697dc_19 = cache_frame_c460d39964371e886c3e28f376c697dc_19;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c460d39964371e886c3e28f376c697dc_19);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c460d39964371e886c3e28f376c697dc_19) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[247];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 407;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__31___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 409;
            type_description_2 = "o";
            goto frame_exception_exit_19;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c460d39964371e886c3e28f376c697dc_19);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_18;

        frame_exception_exit_19:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c460d39964371e886c3e28f376c697dc_19);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c460d39964371e886c3e28f376c697dc_19, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c460d39964371e886c3e28f376c697dc_19->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c460d39964371e886c3e28f376c697dc_19, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c460d39964371e886c3e28f376c697dc_19,
            type_description_2,
            outline_17_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c460d39964371e886c3e28f376c697dc_19 == cache_frame_c460d39964371e886c3e28f376c697dc_19) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c460d39964371e886c3e28f376c697dc_19);
            cache_frame_c460d39964371e886c3e28f376c697dc_19 = NULL;
        }

        assertFrameObject(frame_c460d39964371e886c3e28f376c697dc_19);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_18;

        frame_no_exception_18:;
        goto skip_nested_handling_18;
        nested_frame_exit_18:;

        goto try_except_handler_56;
        skip_nested_handling_18:;
        {
            nuitka_bool tmp_condition_result_108;
            PyObject *tmp_cmp_expr_left_18;
            PyObject *tmp_cmp_expr_right_18;
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_cmp_expr_left_18 = tmp_class_creation_18__bases;
            CHECK_OBJECT(tmp_class_creation_18__bases_orig);
            tmp_cmp_expr_right_18 = tmp_class_creation_18__bases_orig;
            tmp_condition_result_108 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_18, tmp_cmp_expr_right_18);
            if (tmp_condition_result_108 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 402;

                goto try_except_handler_56;
            }
            if (tmp_condition_result_108 == NUITKA_BOOL_TRUE) {
                goto branch_yes_72;
            } else {
                goto branch_no_72;
            }
            assert(tmp_condition_result_108 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_72:;
        CHECK_OBJECT(tmp_class_creation_18__bases_orig);
        tmp_dictset_value = tmp_class_creation_18__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 402;

            goto try_except_handler_56;
        }
        branch_no_72:;
        {
            PyObject *tmp_assign_source_156;
            PyObject *tmp_called_value_36;
            PyObject *tmp_args_value_36;
            PyObject *tmp_tuple_element_70;
            PyObject *tmp_kwargs_value_36;
            CHECK_OBJECT(tmp_class_creation_18__metaclass);
            tmp_called_value_36 = tmp_class_creation_18__metaclass;
            tmp_tuple_element_70 = mod_consts[303];
            tmp_args_value_36 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_36, 0, tmp_tuple_element_70);
            CHECK_OBJECT(tmp_class_creation_18__bases);
            tmp_tuple_element_70 = tmp_class_creation_18__bases;
            PyTuple_SET_ITEM0(tmp_args_value_36, 1, tmp_tuple_element_70);
            tmp_tuple_element_70 = locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402;
            PyTuple_SET_ITEM0(tmp_args_value_36, 2, tmp_tuple_element_70);
            CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
            tmp_kwargs_value_36 = tmp_class_creation_18__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 402;
            tmp_assign_source_156 = CALL_FUNCTION(tmp_called_value_36, tmp_args_value_36, tmp_kwargs_value_36);
            Py_DECREF(tmp_args_value_36);
            if (tmp_assign_source_156 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 402;

                goto try_except_handler_56;
            }
            assert(outline_17_var___class__ == NULL);
            outline_17_var___class__ = tmp_assign_source_156;
        }
        CHECK_OBJECT(outline_17_var___class__);
        tmp_assign_source_155 = outline_17_var___class__;
        Py_INCREF(tmp_assign_source_155);
        goto try_return_handler_56;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_56:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402);
        locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402 = NULL;
        goto try_return_handler_55;
        // Exception handler code:
        try_except_handler_56:;
        exception_keeper_type_54 = exception_type;
        exception_keeper_value_54 = exception_value;
        exception_keeper_tb_54 = exception_tb;
        exception_keeper_lineno_54 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402);
        locals_xlwt$BIFFRecords$$$class__18_BackupRecord_402 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_54;
        exception_value = exception_keeper_value_54;
        exception_tb = exception_keeper_tb_54;
        exception_lineno = exception_keeper_lineno_54;

        goto try_except_handler_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_55:;
        CHECK_OBJECT(outline_17_var___class__);
        Py_DECREF(outline_17_var___class__);
        outline_17_var___class__ = NULL;
        goto outline_result_18;
        // Exception handler code:
        try_except_handler_55:;
        exception_keeper_type_55 = exception_type;
        exception_keeper_value_55 = exception_value;
        exception_keeper_tb_55 = exception_tb;
        exception_keeper_lineno_55 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_55;
        exception_value = exception_keeper_value_55;
        exception_tb = exception_keeper_tb_55;
        exception_lineno = exception_keeper_lineno_55;

        goto outline_exception_18;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_18:;
        exception_lineno = 402;
        goto try_except_handler_54;
        outline_result_18:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[303], tmp_assign_source_155);
    }
    goto try_end_20;
    // Exception handler code:
    try_except_handler_54:;
    exception_keeper_type_56 = exception_type;
    exception_keeper_value_56 = exception_value;
    exception_keeper_tb_56 = exception_tb;
    exception_keeper_lineno_56 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    Py_XDECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_56;
    exception_value = exception_keeper_value_56;
    exception_tb = exception_keeper_tb_56;
    exception_lineno = exception_keeper_lineno_56;

    goto frame_exception_exit_1;
    // End of try:
    try_end_20:;
    CHECK_OBJECT(tmp_class_creation_18__bases_orig);
    Py_DECREF(tmp_class_creation_18__bases_orig);
    tmp_class_creation_18__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_18__bases);
    Py_DECREF(tmp_class_creation_18__bases);
    tmp_class_creation_18__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_18__class_decl_dict);
    Py_DECREF(tmp_class_creation_18__class_decl_dict);
    tmp_class_creation_18__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_18__metaclass);
    Py_DECREF(tmp_class_creation_18__metaclass);
    tmp_class_creation_18__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_18__prepared);
    Py_DECREF(tmp_class_creation_18__prepared);
    tmp_class_creation_18__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_157;
        PyObject *tmp_tuple_element_71;
        tmp_tuple_element_71 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_71 == NULL)) {
            tmp_tuple_element_71 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        tmp_assign_source_157 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_157, 0, tmp_tuple_element_71);
        assert(tmp_class_creation_19__bases_orig == NULL);
        tmp_class_creation_19__bases_orig = tmp_assign_source_157;
    }
    {
        PyObject *tmp_assign_source_158;
        PyObject *tmp_dircall_arg1_19;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dircall_arg1_19 = tmp_class_creation_19__bases_orig;
        Py_INCREF(tmp_dircall_arg1_19);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_19};
            tmp_assign_source_158 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_158 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_19__bases == NULL);
        tmp_class_creation_19__bases = tmp_assign_source_158;
    }
    {
        PyObject *tmp_assign_source_159;
        tmp_assign_source_159 = PyDict_New();
        assert(tmp_class_creation_19__class_decl_dict == NULL);
        tmp_class_creation_19__class_decl_dict = tmp_assign_source_159;
    }
    {
        PyObject *tmp_assign_source_160;
        PyObject *tmp_metaclass_value_19;
        bool tmp_condition_result_109;
        PyObject *tmp_key_value_55;
        PyObject *tmp_dict_arg_value_55;
        PyObject *tmp_dict_arg_value_56;
        PyObject *tmp_key_value_56;
        nuitka_bool tmp_condition_result_110;
        int tmp_truth_name_19;
        PyObject *tmp_type_arg_37;
        PyObject *tmp_expression_value_91;
        PyObject *tmp_subscript_value_19;
        PyObject *tmp_bases_value_19;
        tmp_key_value_55 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_55 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_55, tmp_key_value_55);
        assert(!(tmp_res == -1));
        tmp_condition_result_109 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_109 != false) {
            goto condexpr_true_37;
        } else {
            goto condexpr_false_37;
        }
        condexpr_true_37:;
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_56 = tmp_class_creation_19__class_decl_dict;
        tmp_key_value_56 = mod_consts[205];
        tmp_metaclass_value_19 = DICT_GET_ITEM0(tmp_dict_arg_value_56, tmp_key_value_56);
        if (tmp_metaclass_value_19 == NULL) {
            tmp_metaclass_value_19 = Py_None;
        }
        assert(!(tmp_metaclass_value_19 == NULL));
        Py_INCREF(tmp_metaclass_value_19);
        goto condexpr_end_37;
        condexpr_false_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_truth_name_19 = CHECK_IF_TRUE(tmp_class_creation_19__bases);
        if (tmp_truth_name_19 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        tmp_condition_result_110 = tmp_truth_name_19 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_110 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_38;
        } else {
            goto condexpr_false_38;
        }
        condexpr_true_38:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_expression_value_91 = tmp_class_creation_19__bases;
        tmp_subscript_value_19 = mod_consts[4];
        tmp_type_arg_37 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_91, tmp_subscript_value_19, 0);
        if (tmp_type_arg_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        tmp_metaclass_value_19 = BUILTIN_TYPE1(tmp_type_arg_37);
        Py_DECREF(tmp_type_arg_37);
        if (tmp_metaclass_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        goto condexpr_end_38;
        condexpr_false_38:;
        tmp_metaclass_value_19 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_19);
        condexpr_end_38:;
        condexpr_end_37:;
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_bases_value_19 = tmp_class_creation_19__bases;
        tmp_assign_source_160 = SELECT_METACLASS(tmp_metaclass_value_19, tmp_bases_value_19);
        Py_DECREF(tmp_metaclass_value_19);
        if (tmp_assign_source_160 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_19__metaclass == NULL);
        tmp_class_creation_19__metaclass = tmp_assign_source_160;
    }
    {
        bool tmp_condition_result_111;
        PyObject *tmp_key_value_57;
        PyObject *tmp_dict_arg_value_57;
        tmp_key_value_57 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_dict_arg_value_57 = tmp_class_creation_19__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_57, tmp_key_value_57);
        assert(!(tmp_res == -1));
        tmp_condition_result_111 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_111 != false) {
            goto branch_yes_73;
        } else {
            goto branch_no_73;
        }
    }
    branch_yes_73:;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_19__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 412;

        goto try_except_handler_57;
    }
    branch_no_73:;
    {
        nuitka_bool tmp_condition_result_112;
        PyObject *tmp_expression_value_92;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_92 = tmp_class_creation_19__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_92, mod_consts[206]);
        tmp_condition_result_112 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_112 == NUITKA_BOOL_TRUE) {
            goto branch_yes_74;
        } else {
            goto branch_no_74;
        }
    }
    branch_yes_74:;
    {
        PyObject *tmp_assign_source_161;
        PyObject *tmp_called_value_37;
        PyObject *tmp_expression_value_93;
        PyObject *tmp_args_value_37;
        PyObject *tmp_tuple_element_72;
        PyObject *tmp_kwargs_value_37;
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_expression_value_93 = tmp_class_creation_19__metaclass;
        tmp_called_value_37 = LOOKUP_ATTRIBUTE(tmp_expression_value_93, mod_consts[206]);
        if (tmp_called_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        tmp_tuple_element_72 = mod_consts[306];
        tmp_args_value_37 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_37, 0, tmp_tuple_element_72);
        CHECK_OBJECT(tmp_class_creation_19__bases);
        tmp_tuple_element_72 = tmp_class_creation_19__bases;
        PyTuple_SET_ITEM0(tmp_args_value_37, 1, tmp_tuple_element_72);
        CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
        tmp_kwargs_value_37 = tmp_class_creation_19__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 412;
        tmp_assign_source_161 = CALL_FUNCTION(tmp_called_value_37, tmp_args_value_37, tmp_kwargs_value_37);
        Py_DECREF(tmp_called_value_37);
        Py_DECREF(tmp_args_value_37);
        if (tmp_assign_source_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_161;
    }
    {
        bool tmp_condition_result_113;
        PyObject *tmp_operand_value_19;
        PyObject *tmp_expression_value_94;
        CHECK_OBJECT(tmp_class_creation_19__prepared);
        tmp_expression_value_94 = tmp_class_creation_19__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_94, mod_consts[208]);
        tmp_operand_value_19 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_19);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        tmp_condition_result_113 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_113 != false) {
            goto branch_yes_75;
        } else {
            goto branch_no_75;
        }
    }
    branch_yes_75:;
    {
        PyObject *tmp_raise_type_19;
        PyObject *tmp_raise_value_19;
        PyObject *tmp_left_value_19;
        PyObject *tmp_right_value_19;
        PyObject *tmp_tuple_element_73;
        PyObject *tmp_getattr_target_19;
        PyObject *tmp_getattr_attr_19;
        PyObject *tmp_getattr_default_19;
        tmp_raise_type_19 = PyExc_TypeError;
        tmp_left_value_19 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_19__metaclass);
        tmp_getattr_target_19 = tmp_class_creation_19__metaclass;
        tmp_getattr_attr_19 = mod_consts[210];
        tmp_getattr_default_19 = mod_consts[211];
        tmp_tuple_element_73 = BUILTIN_GETATTR(tmp_getattr_target_19, tmp_getattr_attr_19, tmp_getattr_default_19);
        if (tmp_tuple_element_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        tmp_right_value_19 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_95;
            PyObject *tmp_type_arg_38;
            PyTuple_SET_ITEM(tmp_right_value_19, 0, tmp_tuple_element_73);
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_type_arg_38 = tmp_class_creation_19__prepared;
            tmp_expression_value_95 = BUILTIN_TYPE1(tmp_type_arg_38);
            assert(!(tmp_expression_value_95 == NULL));
            tmp_tuple_element_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_95, mod_consts[210]);
            Py_DECREF(tmp_expression_value_95);
            if (tmp_tuple_element_73 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 412;

                goto tuple_build_exception_19;
            }
            PyTuple_SET_ITEM(tmp_right_value_19, 1, tmp_tuple_element_73);
        }
        goto tuple_build_noexception_19;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_19:;
        Py_DECREF(tmp_right_value_19);
        goto try_except_handler_57;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_19:;
        tmp_raise_value_19 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_19, tmp_right_value_19);
        Py_DECREF(tmp_right_value_19);
        if (tmp_raise_value_19 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_57;
        }
        exception_type = tmp_raise_type_19;
        Py_INCREF(tmp_raise_type_19);
        exception_value = tmp_raise_value_19;
        exception_lineno = 412;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_57;
    }
    branch_no_75:;
    goto branch_end_74;
    branch_no_74:;
    {
        PyObject *tmp_assign_source_162;
        tmp_assign_source_162 = PyDict_New();
        assert(tmp_class_creation_19__prepared == NULL);
        tmp_class_creation_19__prepared = tmp_assign_source_162;
    }
    branch_end_74:;
    {
        PyObject *tmp_assign_source_163;
        {
            PyObject *tmp_set_locals_19;
            CHECK_OBJECT(tmp_class_creation_19__prepared);
            tmp_set_locals_19 = tmp_class_creation_19__prepared;
            locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412 = tmp_set_locals_19;
            Py_INCREF(tmp_set_locals_19);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_59;
        }
        tmp_dictset_value = mod_consts[307];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_59;
        }
        tmp_dictset_value = mod_consts[306];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_59;
        }
        if (isFrameUnusable(cache_frame_447dcf1d02dedc1362df90b3bd876041_20)) {
            Py_XDECREF(cache_frame_447dcf1d02dedc1362df90b3bd876041_20);

#if _DEBUG_REFCOUNTS
            if (cache_frame_447dcf1d02dedc1362df90b3bd876041_20 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_447dcf1d02dedc1362df90b3bd876041_20 = MAKE_FUNCTION_FRAME(codeobj_447dcf1d02dedc1362df90b3bd876041, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_447dcf1d02dedc1362df90b3bd876041_20->m_type_description == NULL);
        frame_447dcf1d02dedc1362df90b3bd876041_20 = cache_frame_447dcf1d02dedc1362df90b3bd876041_20;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_447dcf1d02dedc1362df90b3bd876041_20);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_447dcf1d02dedc1362df90b3bd876041_20) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[308];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 423;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__32___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 425;
            type_description_2 = "o";
            goto frame_exception_exit_20;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_447dcf1d02dedc1362df90b3bd876041_20);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_19;

        frame_exception_exit_20:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_447dcf1d02dedc1362df90b3bd876041_20);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_447dcf1d02dedc1362df90b3bd876041_20, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_447dcf1d02dedc1362df90b3bd876041_20->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_447dcf1d02dedc1362df90b3bd876041_20, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_447dcf1d02dedc1362df90b3bd876041_20,
            type_description_2,
            outline_18_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_447dcf1d02dedc1362df90b3bd876041_20 == cache_frame_447dcf1d02dedc1362df90b3bd876041_20) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_447dcf1d02dedc1362df90b3bd876041_20);
            cache_frame_447dcf1d02dedc1362df90b3bd876041_20 = NULL;
        }

        assertFrameObject(frame_447dcf1d02dedc1362df90b3bd876041_20);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_19;

        frame_no_exception_19:;
        goto skip_nested_handling_19;
        nested_frame_exit_19:;

        goto try_except_handler_59;
        skip_nested_handling_19:;
        {
            nuitka_bool tmp_condition_result_114;
            PyObject *tmp_cmp_expr_left_19;
            PyObject *tmp_cmp_expr_right_19;
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_cmp_expr_left_19 = tmp_class_creation_19__bases;
            CHECK_OBJECT(tmp_class_creation_19__bases_orig);
            tmp_cmp_expr_right_19 = tmp_class_creation_19__bases_orig;
            tmp_condition_result_114 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_19, tmp_cmp_expr_right_19);
            if (tmp_condition_result_114 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 412;

                goto try_except_handler_59;
            }
            if (tmp_condition_result_114 == NUITKA_BOOL_TRUE) {
                goto branch_yes_76;
            } else {
                goto branch_no_76;
            }
            assert(tmp_condition_result_114 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_76:;
        CHECK_OBJECT(tmp_class_creation_19__bases_orig);
        tmp_dictset_value = tmp_class_creation_19__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 412;

            goto try_except_handler_59;
        }
        branch_no_76:;
        {
            PyObject *tmp_assign_source_164;
            PyObject *tmp_called_value_38;
            PyObject *tmp_args_value_38;
            PyObject *tmp_tuple_element_74;
            PyObject *tmp_kwargs_value_38;
            CHECK_OBJECT(tmp_class_creation_19__metaclass);
            tmp_called_value_38 = tmp_class_creation_19__metaclass;
            tmp_tuple_element_74 = mod_consts[306];
            tmp_args_value_38 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_38, 0, tmp_tuple_element_74);
            CHECK_OBJECT(tmp_class_creation_19__bases);
            tmp_tuple_element_74 = tmp_class_creation_19__bases;
            PyTuple_SET_ITEM0(tmp_args_value_38, 1, tmp_tuple_element_74);
            tmp_tuple_element_74 = locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412;
            PyTuple_SET_ITEM0(tmp_args_value_38, 2, tmp_tuple_element_74);
            CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
            tmp_kwargs_value_38 = tmp_class_creation_19__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 412;
            tmp_assign_source_164 = CALL_FUNCTION(tmp_called_value_38, tmp_args_value_38, tmp_kwargs_value_38);
            Py_DECREF(tmp_args_value_38);
            if (tmp_assign_source_164 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 412;

                goto try_except_handler_59;
            }
            assert(outline_18_var___class__ == NULL);
            outline_18_var___class__ = tmp_assign_source_164;
        }
        CHECK_OBJECT(outline_18_var___class__);
        tmp_assign_source_163 = outline_18_var___class__;
        Py_INCREF(tmp_assign_source_163);
        goto try_return_handler_59;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_59:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412);
        locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412 = NULL;
        goto try_return_handler_58;
        // Exception handler code:
        try_except_handler_59:;
        exception_keeper_type_57 = exception_type;
        exception_keeper_value_57 = exception_value;
        exception_keeper_tb_57 = exception_tb;
        exception_keeper_lineno_57 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412);
        locals_xlwt$BIFFRecords$$$class__19_HideObjRecord_412 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_57;
        exception_value = exception_keeper_value_57;
        exception_tb = exception_keeper_tb_57;
        exception_lineno = exception_keeper_lineno_57;

        goto try_except_handler_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_58:;
        CHECK_OBJECT(outline_18_var___class__);
        Py_DECREF(outline_18_var___class__);
        outline_18_var___class__ = NULL;
        goto outline_result_19;
        // Exception handler code:
        try_except_handler_58:;
        exception_keeper_type_58 = exception_type;
        exception_keeper_value_58 = exception_value;
        exception_keeper_tb_58 = exception_tb;
        exception_keeper_lineno_58 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_58;
        exception_value = exception_keeper_value_58;
        exception_tb = exception_keeper_tb_58;
        exception_lineno = exception_keeper_lineno_58;

        goto outline_exception_19;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_19:;
        exception_lineno = 412;
        goto try_except_handler_57;
        outline_result_19:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[306], tmp_assign_source_163);
    }
    goto try_end_21;
    // Exception handler code:
    try_except_handler_57:;
    exception_keeper_type_59 = exception_type;
    exception_keeper_value_59 = exception_value;
    exception_keeper_tb_59 = exception_tb;
    exception_keeper_lineno_59 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    Py_XDECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_59;
    exception_value = exception_keeper_value_59;
    exception_tb = exception_keeper_tb_59;
    exception_lineno = exception_keeper_lineno_59;

    goto frame_exception_exit_1;
    // End of try:
    try_end_21:;
    CHECK_OBJECT(tmp_class_creation_19__bases_orig);
    Py_DECREF(tmp_class_creation_19__bases_orig);
    tmp_class_creation_19__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_19__bases);
    Py_DECREF(tmp_class_creation_19__bases);
    tmp_class_creation_19__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_19__class_decl_dict);
    Py_DECREF(tmp_class_creation_19__class_decl_dict);
    tmp_class_creation_19__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_19__metaclass);
    Py_DECREF(tmp_class_creation_19__metaclass);
    tmp_class_creation_19__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_19__prepared);
    Py_DECREF(tmp_class_creation_19__prepared);
    tmp_class_creation_19__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_165;
        PyObject *tmp_tuple_element_75;
        tmp_tuple_element_75 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_75 == NULL)) {
            tmp_tuple_element_75 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        tmp_assign_source_165 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_165, 0, tmp_tuple_element_75);
        assert(tmp_class_creation_20__bases_orig == NULL);
        tmp_class_creation_20__bases_orig = tmp_assign_source_165;
    }
    {
        PyObject *tmp_assign_source_166;
        PyObject *tmp_dircall_arg1_20;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dircall_arg1_20 = tmp_class_creation_20__bases_orig;
        Py_INCREF(tmp_dircall_arg1_20);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_20};
            tmp_assign_source_166 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_166 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        assert(tmp_class_creation_20__bases == NULL);
        tmp_class_creation_20__bases = tmp_assign_source_166;
    }
    {
        PyObject *tmp_assign_source_167;
        tmp_assign_source_167 = PyDict_New();
        assert(tmp_class_creation_20__class_decl_dict == NULL);
        tmp_class_creation_20__class_decl_dict = tmp_assign_source_167;
    }
    {
        PyObject *tmp_assign_source_168;
        PyObject *tmp_metaclass_value_20;
        bool tmp_condition_result_115;
        PyObject *tmp_key_value_58;
        PyObject *tmp_dict_arg_value_58;
        PyObject *tmp_dict_arg_value_59;
        PyObject *tmp_key_value_59;
        nuitka_bool tmp_condition_result_116;
        int tmp_truth_name_20;
        PyObject *tmp_type_arg_39;
        PyObject *tmp_expression_value_96;
        PyObject *tmp_subscript_value_20;
        PyObject *tmp_bases_value_20;
        tmp_key_value_58 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_58 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_58, tmp_key_value_58);
        assert(!(tmp_res == -1));
        tmp_condition_result_115 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_115 != false) {
            goto condexpr_true_39;
        } else {
            goto condexpr_false_39;
        }
        condexpr_true_39:;
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_59 = tmp_class_creation_20__class_decl_dict;
        tmp_key_value_59 = mod_consts[205];
        tmp_metaclass_value_20 = DICT_GET_ITEM0(tmp_dict_arg_value_59, tmp_key_value_59);
        if (tmp_metaclass_value_20 == NULL) {
            tmp_metaclass_value_20 = Py_None;
        }
        assert(!(tmp_metaclass_value_20 == NULL));
        Py_INCREF(tmp_metaclass_value_20);
        goto condexpr_end_39;
        condexpr_false_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_truth_name_20 = CHECK_IF_TRUE(tmp_class_creation_20__bases);
        if (tmp_truth_name_20 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        tmp_condition_result_116 = tmp_truth_name_20 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_116 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_40;
        } else {
            goto condexpr_false_40;
        }
        condexpr_true_40:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_expression_value_96 = tmp_class_creation_20__bases;
        tmp_subscript_value_20 = mod_consts[4];
        tmp_type_arg_39 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_96, tmp_subscript_value_20, 0);
        if (tmp_type_arg_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        tmp_metaclass_value_20 = BUILTIN_TYPE1(tmp_type_arg_39);
        Py_DECREF(tmp_type_arg_39);
        if (tmp_metaclass_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        goto condexpr_end_40;
        condexpr_false_40:;
        tmp_metaclass_value_20 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_20);
        condexpr_end_40:;
        condexpr_end_39:;
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_bases_value_20 = tmp_class_creation_20__bases;
        tmp_assign_source_168 = SELECT_METACLASS(tmp_metaclass_value_20, tmp_bases_value_20);
        Py_DECREF(tmp_metaclass_value_20);
        if (tmp_assign_source_168 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        assert(tmp_class_creation_20__metaclass == NULL);
        tmp_class_creation_20__metaclass = tmp_assign_source_168;
    }
    {
        bool tmp_condition_result_117;
        PyObject *tmp_key_value_60;
        PyObject *tmp_dict_arg_value_60;
        tmp_key_value_60 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_dict_arg_value_60 = tmp_class_creation_20__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_60, tmp_key_value_60);
        assert(!(tmp_res == -1));
        tmp_condition_result_117 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_117 != false) {
            goto branch_yes_77;
        } else {
            goto branch_no_77;
        }
    }
    branch_yes_77:;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_20__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 430;

        goto try_except_handler_60;
    }
    branch_no_77:;
    {
        nuitka_bool tmp_condition_result_118;
        PyObject *tmp_expression_value_97;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_97 = tmp_class_creation_20__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_97, mod_consts[206]);
        tmp_condition_result_118 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_118 == NUITKA_BOOL_TRUE) {
            goto branch_yes_78;
        } else {
            goto branch_no_78;
        }
    }
    branch_yes_78:;
    {
        PyObject *tmp_assign_source_169;
        PyObject *tmp_called_value_39;
        PyObject *tmp_expression_value_98;
        PyObject *tmp_args_value_39;
        PyObject *tmp_tuple_element_76;
        PyObject *tmp_kwargs_value_39;
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_expression_value_98 = tmp_class_creation_20__metaclass;
        tmp_called_value_39 = LOOKUP_ATTRIBUTE(tmp_expression_value_98, mod_consts[206]);
        if (tmp_called_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        tmp_tuple_element_76 = mod_consts[310];
        tmp_args_value_39 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_39, 0, tmp_tuple_element_76);
        CHECK_OBJECT(tmp_class_creation_20__bases);
        tmp_tuple_element_76 = tmp_class_creation_20__bases;
        PyTuple_SET_ITEM0(tmp_args_value_39, 1, tmp_tuple_element_76);
        CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
        tmp_kwargs_value_39 = tmp_class_creation_20__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 430;
        tmp_assign_source_169 = CALL_FUNCTION(tmp_called_value_39, tmp_args_value_39, tmp_kwargs_value_39);
        Py_DECREF(tmp_called_value_39);
        Py_DECREF(tmp_args_value_39);
        if (tmp_assign_source_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_169;
    }
    {
        bool tmp_condition_result_119;
        PyObject *tmp_operand_value_20;
        PyObject *tmp_expression_value_99;
        CHECK_OBJECT(tmp_class_creation_20__prepared);
        tmp_expression_value_99 = tmp_class_creation_20__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_99, mod_consts[208]);
        tmp_operand_value_20 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_20);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        tmp_condition_result_119 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_119 != false) {
            goto branch_yes_79;
        } else {
            goto branch_no_79;
        }
    }
    branch_yes_79:;
    {
        PyObject *tmp_raise_type_20;
        PyObject *tmp_raise_value_20;
        PyObject *tmp_left_value_20;
        PyObject *tmp_right_value_20;
        PyObject *tmp_tuple_element_77;
        PyObject *tmp_getattr_target_20;
        PyObject *tmp_getattr_attr_20;
        PyObject *tmp_getattr_default_20;
        tmp_raise_type_20 = PyExc_TypeError;
        tmp_left_value_20 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_20__metaclass);
        tmp_getattr_target_20 = tmp_class_creation_20__metaclass;
        tmp_getattr_attr_20 = mod_consts[210];
        tmp_getattr_default_20 = mod_consts[211];
        tmp_tuple_element_77 = BUILTIN_GETATTR(tmp_getattr_target_20, tmp_getattr_attr_20, tmp_getattr_default_20);
        if (tmp_tuple_element_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        tmp_right_value_20 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_100;
            PyObject *tmp_type_arg_40;
            PyTuple_SET_ITEM(tmp_right_value_20, 0, tmp_tuple_element_77);
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_type_arg_40 = tmp_class_creation_20__prepared;
            tmp_expression_value_100 = BUILTIN_TYPE1(tmp_type_arg_40);
            assert(!(tmp_expression_value_100 == NULL));
            tmp_tuple_element_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_100, mod_consts[210]);
            Py_DECREF(tmp_expression_value_100);
            if (tmp_tuple_element_77 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 430;

                goto tuple_build_exception_20;
            }
            PyTuple_SET_ITEM(tmp_right_value_20, 1, tmp_tuple_element_77);
        }
        goto tuple_build_noexception_20;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_20:;
        Py_DECREF(tmp_right_value_20);
        goto try_except_handler_60;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_20:;
        tmp_raise_value_20 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_20, tmp_right_value_20);
        Py_DECREF(tmp_right_value_20);
        if (tmp_raise_value_20 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_60;
        }
        exception_type = tmp_raise_type_20;
        Py_INCREF(tmp_raise_type_20);
        exception_value = tmp_raise_value_20;
        exception_lineno = 430;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_60;
    }
    branch_no_79:;
    goto branch_end_78;
    branch_no_78:;
    {
        PyObject *tmp_assign_source_170;
        tmp_assign_source_170 = PyDict_New();
        assert(tmp_class_creation_20__prepared == NULL);
        tmp_class_creation_20__prepared = tmp_assign_source_170;
    }
    branch_end_78:;
    {
        PyObject *tmp_assign_source_171;
        {
            PyObject *tmp_set_locals_20;
            CHECK_OBJECT(tmp_class_creation_20__prepared);
            tmp_set_locals_20 = tmp_class_creation_20__prepared;
            locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430 = tmp_set_locals_20;
            Py_INCREF(tmp_set_locals_20);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_62;
        }
        tmp_dictset_value = mod_consts[311];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_62;
        }
        tmp_dictset_value = mod_consts[310];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_62;
        }
        if (isFrameUnusable(cache_frame_395dfd1de6ea01095e6a35437746ac0b_21)) {
            Py_XDECREF(cache_frame_395dfd1de6ea01095e6a35437746ac0b_21);

#if _DEBUG_REFCOUNTS
            if (cache_frame_395dfd1de6ea01095e6a35437746ac0b_21 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_395dfd1de6ea01095e6a35437746ac0b_21 = MAKE_FUNCTION_FRAME(codeobj_395dfd1de6ea01095e6a35437746ac0b, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_395dfd1de6ea01095e6a35437746ac0b_21->m_type_description == NULL);
        frame_395dfd1de6ea01095e6a35437746ac0b_21 = cache_frame_395dfd1de6ea01095e6a35437746ac0b_21;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_395dfd1de6ea01095e6a35437746ac0b_21);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_395dfd1de6ea01095e6a35437746ac0b_21) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[312];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 434;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__33___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 436;
            type_description_2 = "o";
            goto frame_exception_exit_21;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_395dfd1de6ea01095e6a35437746ac0b_21);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_20;

        frame_exception_exit_21:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_395dfd1de6ea01095e6a35437746ac0b_21);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_395dfd1de6ea01095e6a35437746ac0b_21, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_395dfd1de6ea01095e6a35437746ac0b_21->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_395dfd1de6ea01095e6a35437746ac0b_21, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_395dfd1de6ea01095e6a35437746ac0b_21,
            type_description_2,
            outline_19_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_395dfd1de6ea01095e6a35437746ac0b_21 == cache_frame_395dfd1de6ea01095e6a35437746ac0b_21) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_395dfd1de6ea01095e6a35437746ac0b_21);
            cache_frame_395dfd1de6ea01095e6a35437746ac0b_21 = NULL;
        }

        assertFrameObject(frame_395dfd1de6ea01095e6a35437746ac0b_21);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_20;

        frame_no_exception_20:;
        goto skip_nested_handling_20;
        nested_frame_exit_20:;

        goto try_except_handler_62;
        skip_nested_handling_20:;
        {
            nuitka_bool tmp_condition_result_120;
            PyObject *tmp_cmp_expr_left_20;
            PyObject *tmp_cmp_expr_right_20;
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_cmp_expr_left_20 = tmp_class_creation_20__bases;
            CHECK_OBJECT(tmp_class_creation_20__bases_orig);
            tmp_cmp_expr_right_20 = tmp_class_creation_20__bases_orig;
            tmp_condition_result_120 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_20, tmp_cmp_expr_right_20);
            if (tmp_condition_result_120 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 430;

                goto try_except_handler_62;
            }
            if (tmp_condition_result_120 == NUITKA_BOOL_TRUE) {
                goto branch_yes_80;
            } else {
                goto branch_no_80;
            }
            assert(tmp_condition_result_120 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_80:;
        CHECK_OBJECT(tmp_class_creation_20__bases_orig);
        tmp_dictset_value = tmp_class_creation_20__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 430;

            goto try_except_handler_62;
        }
        branch_no_80:;
        {
            PyObject *tmp_assign_source_172;
            PyObject *tmp_called_value_40;
            PyObject *tmp_args_value_40;
            PyObject *tmp_tuple_element_78;
            PyObject *tmp_kwargs_value_40;
            CHECK_OBJECT(tmp_class_creation_20__metaclass);
            tmp_called_value_40 = tmp_class_creation_20__metaclass;
            tmp_tuple_element_78 = mod_consts[310];
            tmp_args_value_40 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_40, 0, tmp_tuple_element_78);
            CHECK_OBJECT(tmp_class_creation_20__bases);
            tmp_tuple_element_78 = tmp_class_creation_20__bases;
            PyTuple_SET_ITEM0(tmp_args_value_40, 1, tmp_tuple_element_78);
            tmp_tuple_element_78 = locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430;
            PyTuple_SET_ITEM0(tmp_args_value_40, 2, tmp_tuple_element_78);
            CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
            tmp_kwargs_value_40 = tmp_class_creation_20__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 430;
            tmp_assign_source_172 = CALL_FUNCTION(tmp_called_value_40, tmp_args_value_40, tmp_kwargs_value_40);
            Py_DECREF(tmp_args_value_40);
            if (tmp_assign_source_172 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 430;

                goto try_except_handler_62;
            }
            assert(outline_19_var___class__ == NULL);
            outline_19_var___class__ = tmp_assign_source_172;
        }
        CHECK_OBJECT(outline_19_var___class__);
        tmp_assign_source_171 = outline_19_var___class__;
        Py_INCREF(tmp_assign_source_171);
        goto try_return_handler_62;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_62:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430);
        locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430 = NULL;
        goto try_return_handler_61;
        // Exception handler code:
        try_except_handler_62:;
        exception_keeper_type_60 = exception_type;
        exception_keeper_value_60 = exception_value;
        exception_keeper_tb_60 = exception_tb;
        exception_keeper_lineno_60 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430);
        locals_xlwt$BIFFRecords$$$class__20_RefreshAllRecord_430 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_60;
        exception_value = exception_keeper_value_60;
        exception_tb = exception_keeper_tb_60;
        exception_lineno = exception_keeper_lineno_60;

        goto try_except_handler_61;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_61:;
        CHECK_OBJECT(outline_19_var___class__);
        Py_DECREF(outline_19_var___class__);
        outline_19_var___class__ = NULL;
        goto outline_result_20;
        // Exception handler code:
        try_except_handler_61:;
        exception_keeper_type_61 = exception_type;
        exception_keeper_value_61 = exception_value;
        exception_keeper_tb_61 = exception_tb;
        exception_keeper_lineno_61 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_61;
        exception_value = exception_keeper_value_61;
        exception_tb = exception_keeper_tb_61;
        exception_lineno = exception_keeper_lineno_61;

        goto outline_exception_20;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_20:;
        exception_lineno = 430;
        goto try_except_handler_60;
        outline_result_20:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[310], tmp_assign_source_171);
    }
    goto try_end_22;
    // Exception handler code:
    try_except_handler_60:;
    exception_keeper_type_62 = exception_type;
    exception_keeper_value_62 = exception_value;
    exception_keeper_tb_62 = exception_tb;
    exception_keeper_lineno_62 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    Py_XDECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_62;
    exception_value = exception_keeper_value_62;
    exception_tb = exception_keeper_tb_62;
    exception_lineno = exception_keeper_lineno_62;

    goto frame_exception_exit_1;
    // End of try:
    try_end_22:;
    CHECK_OBJECT(tmp_class_creation_20__bases_orig);
    Py_DECREF(tmp_class_creation_20__bases_orig);
    tmp_class_creation_20__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_20__bases);
    Py_DECREF(tmp_class_creation_20__bases);
    tmp_class_creation_20__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_20__class_decl_dict);
    Py_DECREF(tmp_class_creation_20__class_decl_dict);
    tmp_class_creation_20__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_20__metaclass);
    Py_DECREF(tmp_class_creation_20__metaclass);
    tmp_class_creation_20__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_20__prepared);
    Py_DECREF(tmp_class_creation_20__prepared);
    tmp_class_creation_20__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_173;
        PyObject *tmp_tuple_element_79;
        tmp_tuple_element_79 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_79 == NULL)) {
            tmp_tuple_element_79 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        tmp_assign_source_173 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_173, 0, tmp_tuple_element_79);
        assert(tmp_class_creation_21__bases_orig == NULL);
        tmp_class_creation_21__bases_orig = tmp_assign_source_173;
    }
    {
        PyObject *tmp_assign_source_174;
        PyObject *tmp_dircall_arg1_21;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dircall_arg1_21 = tmp_class_creation_21__bases_orig;
        Py_INCREF(tmp_dircall_arg1_21);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_21};
            tmp_assign_source_174 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_174 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        assert(tmp_class_creation_21__bases == NULL);
        tmp_class_creation_21__bases = tmp_assign_source_174;
    }
    {
        PyObject *tmp_assign_source_175;
        tmp_assign_source_175 = PyDict_New();
        assert(tmp_class_creation_21__class_decl_dict == NULL);
        tmp_class_creation_21__class_decl_dict = tmp_assign_source_175;
    }
    {
        PyObject *tmp_assign_source_176;
        PyObject *tmp_metaclass_value_21;
        bool tmp_condition_result_121;
        PyObject *tmp_key_value_61;
        PyObject *tmp_dict_arg_value_61;
        PyObject *tmp_dict_arg_value_62;
        PyObject *tmp_key_value_62;
        nuitka_bool tmp_condition_result_122;
        int tmp_truth_name_21;
        PyObject *tmp_type_arg_41;
        PyObject *tmp_expression_value_101;
        PyObject *tmp_subscript_value_21;
        PyObject *tmp_bases_value_21;
        tmp_key_value_61 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_61 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_61, tmp_key_value_61);
        assert(!(tmp_res == -1));
        tmp_condition_result_121 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_121 != false) {
            goto condexpr_true_41;
        } else {
            goto condexpr_false_41;
        }
        condexpr_true_41:;
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_62 = tmp_class_creation_21__class_decl_dict;
        tmp_key_value_62 = mod_consts[205];
        tmp_metaclass_value_21 = DICT_GET_ITEM0(tmp_dict_arg_value_62, tmp_key_value_62);
        if (tmp_metaclass_value_21 == NULL) {
            tmp_metaclass_value_21 = Py_None;
        }
        assert(!(tmp_metaclass_value_21 == NULL));
        Py_INCREF(tmp_metaclass_value_21);
        goto condexpr_end_41;
        condexpr_false_41:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_truth_name_21 = CHECK_IF_TRUE(tmp_class_creation_21__bases);
        if (tmp_truth_name_21 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        tmp_condition_result_122 = tmp_truth_name_21 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_122 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_42;
        } else {
            goto condexpr_false_42;
        }
        condexpr_true_42:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_expression_value_101 = tmp_class_creation_21__bases;
        tmp_subscript_value_21 = mod_consts[4];
        tmp_type_arg_41 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_101, tmp_subscript_value_21, 0);
        if (tmp_type_arg_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        tmp_metaclass_value_21 = BUILTIN_TYPE1(tmp_type_arg_41);
        Py_DECREF(tmp_type_arg_41);
        if (tmp_metaclass_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        goto condexpr_end_42;
        condexpr_false_42:;
        tmp_metaclass_value_21 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_21);
        condexpr_end_42:;
        condexpr_end_41:;
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_bases_value_21 = tmp_class_creation_21__bases;
        tmp_assign_source_176 = SELECT_METACLASS(tmp_metaclass_value_21, tmp_bases_value_21);
        Py_DECREF(tmp_metaclass_value_21);
        if (tmp_assign_source_176 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        assert(tmp_class_creation_21__metaclass == NULL);
        tmp_class_creation_21__metaclass = tmp_assign_source_176;
    }
    {
        bool tmp_condition_result_123;
        PyObject *tmp_key_value_63;
        PyObject *tmp_dict_arg_value_63;
        tmp_key_value_63 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_dict_arg_value_63 = tmp_class_creation_21__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_63, tmp_key_value_63);
        assert(!(tmp_res == -1));
        tmp_condition_result_123 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_123 != false) {
            goto branch_yes_81;
        } else {
            goto branch_no_81;
        }
    }
    branch_yes_81:;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_21__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 440;

        goto try_except_handler_63;
    }
    branch_no_81:;
    {
        nuitka_bool tmp_condition_result_124;
        PyObject *tmp_expression_value_102;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_102 = tmp_class_creation_21__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_102, mod_consts[206]);
        tmp_condition_result_124 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_124 == NUITKA_BOOL_TRUE) {
            goto branch_yes_82;
        } else {
            goto branch_no_82;
        }
    }
    branch_yes_82:;
    {
        PyObject *tmp_assign_source_177;
        PyObject *tmp_called_value_41;
        PyObject *tmp_expression_value_103;
        PyObject *tmp_args_value_41;
        PyObject *tmp_tuple_element_80;
        PyObject *tmp_kwargs_value_41;
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_expression_value_103 = tmp_class_creation_21__metaclass;
        tmp_called_value_41 = LOOKUP_ATTRIBUTE(tmp_expression_value_103, mod_consts[206]);
        if (tmp_called_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        tmp_tuple_element_80 = mod_consts[314];
        tmp_args_value_41 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_41, 0, tmp_tuple_element_80);
        CHECK_OBJECT(tmp_class_creation_21__bases);
        tmp_tuple_element_80 = tmp_class_creation_21__bases;
        PyTuple_SET_ITEM0(tmp_args_value_41, 1, tmp_tuple_element_80);
        CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
        tmp_kwargs_value_41 = tmp_class_creation_21__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 440;
        tmp_assign_source_177 = CALL_FUNCTION(tmp_called_value_41, tmp_args_value_41, tmp_kwargs_value_41);
        Py_DECREF(tmp_called_value_41);
        Py_DECREF(tmp_args_value_41);
        if (tmp_assign_source_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_177;
    }
    {
        bool tmp_condition_result_125;
        PyObject *tmp_operand_value_21;
        PyObject *tmp_expression_value_104;
        CHECK_OBJECT(tmp_class_creation_21__prepared);
        tmp_expression_value_104 = tmp_class_creation_21__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_104, mod_consts[208]);
        tmp_operand_value_21 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_21);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        tmp_condition_result_125 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_125 != false) {
            goto branch_yes_83;
        } else {
            goto branch_no_83;
        }
    }
    branch_yes_83:;
    {
        PyObject *tmp_raise_type_21;
        PyObject *tmp_raise_value_21;
        PyObject *tmp_left_value_21;
        PyObject *tmp_right_value_21;
        PyObject *tmp_tuple_element_81;
        PyObject *tmp_getattr_target_21;
        PyObject *tmp_getattr_attr_21;
        PyObject *tmp_getattr_default_21;
        tmp_raise_type_21 = PyExc_TypeError;
        tmp_left_value_21 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_21__metaclass);
        tmp_getattr_target_21 = tmp_class_creation_21__metaclass;
        tmp_getattr_attr_21 = mod_consts[210];
        tmp_getattr_default_21 = mod_consts[211];
        tmp_tuple_element_81 = BUILTIN_GETATTR(tmp_getattr_target_21, tmp_getattr_attr_21, tmp_getattr_default_21);
        if (tmp_tuple_element_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        tmp_right_value_21 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_105;
            PyObject *tmp_type_arg_42;
            PyTuple_SET_ITEM(tmp_right_value_21, 0, tmp_tuple_element_81);
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_type_arg_42 = tmp_class_creation_21__prepared;
            tmp_expression_value_105 = BUILTIN_TYPE1(tmp_type_arg_42);
            assert(!(tmp_expression_value_105 == NULL));
            tmp_tuple_element_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_105, mod_consts[210]);
            Py_DECREF(tmp_expression_value_105);
            if (tmp_tuple_element_81 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 440;

                goto tuple_build_exception_21;
            }
            PyTuple_SET_ITEM(tmp_right_value_21, 1, tmp_tuple_element_81);
        }
        goto tuple_build_noexception_21;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_21:;
        Py_DECREF(tmp_right_value_21);
        goto try_except_handler_63;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_21:;
        tmp_raise_value_21 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_21, tmp_right_value_21);
        Py_DECREF(tmp_right_value_21);
        if (tmp_raise_value_21 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_63;
        }
        exception_type = tmp_raise_type_21;
        Py_INCREF(tmp_raise_type_21);
        exception_value = tmp_raise_value_21;
        exception_lineno = 440;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_63;
    }
    branch_no_83:;
    goto branch_end_82;
    branch_no_82:;
    {
        PyObject *tmp_assign_source_178;
        tmp_assign_source_178 = PyDict_New();
        assert(tmp_class_creation_21__prepared == NULL);
        tmp_class_creation_21__prepared = tmp_assign_source_178;
    }
    branch_end_82:;
    {
        PyObject *tmp_assign_source_179;
        {
            PyObject *tmp_set_locals_21;
            CHECK_OBJECT(tmp_class_creation_21__prepared);
            tmp_set_locals_21 = tmp_class_creation_21__prepared;
            locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440 = tmp_set_locals_21;
            Py_INCREF(tmp_set_locals_21);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_65;
        }
        tmp_dictset_value = mod_consts[315];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_65;
        }
        tmp_dictset_value = mod_consts[314];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_65;
        }
        if (isFrameUnusable(cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22)) {
            Py_XDECREF(cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22);

#if _DEBUG_REFCOUNTS
            if (cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22 = MAKE_FUNCTION_FRAME(codeobj_601c63e1fdb04378a4c4921abe7ef6c0, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22->m_type_description == NULL);
        frame_601c63e1fdb04378a4c4921abe7ef6c0_22 = cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_601c63e1fdb04378a4c4921abe7ef6c0_22);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_601c63e1fdb04378a4c4921abe7ef6c0_22) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[316];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 453;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__34___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 455;
            type_description_2 = "o";
            goto frame_exception_exit_22;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_601c63e1fdb04378a4c4921abe7ef6c0_22);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_21;

        frame_exception_exit_22:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_601c63e1fdb04378a4c4921abe7ef6c0_22);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_601c63e1fdb04378a4c4921abe7ef6c0_22, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_601c63e1fdb04378a4c4921abe7ef6c0_22->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_601c63e1fdb04378a4c4921abe7ef6c0_22, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_601c63e1fdb04378a4c4921abe7ef6c0_22,
            type_description_2,
            outline_20_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_601c63e1fdb04378a4c4921abe7ef6c0_22 == cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22);
            cache_frame_601c63e1fdb04378a4c4921abe7ef6c0_22 = NULL;
        }

        assertFrameObject(frame_601c63e1fdb04378a4c4921abe7ef6c0_22);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_21;

        frame_no_exception_21:;
        goto skip_nested_handling_21;
        nested_frame_exit_21:;

        goto try_except_handler_65;
        skip_nested_handling_21:;
        {
            nuitka_bool tmp_condition_result_126;
            PyObject *tmp_cmp_expr_left_21;
            PyObject *tmp_cmp_expr_right_21;
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_cmp_expr_left_21 = tmp_class_creation_21__bases;
            CHECK_OBJECT(tmp_class_creation_21__bases_orig);
            tmp_cmp_expr_right_21 = tmp_class_creation_21__bases_orig;
            tmp_condition_result_126 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_21, tmp_cmp_expr_right_21);
            if (tmp_condition_result_126 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 440;

                goto try_except_handler_65;
            }
            if (tmp_condition_result_126 == NUITKA_BOOL_TRUE) {
                goto branch_yes_84;
            } else {
                goto branch_no_84;
            }
            assert(tmp_condition_result_126 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_84:;
        CHECK_OBJECT(tmp_class_creation_21__bases_orig);
        tmp_dictset_value = tmp_class_creation_21__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 440;

            goto try_except_handler_65;
        }
        branch_no_84:;
        {
            PyObject *tmp_assign_source_180;
            PyObject *tmp_called_value_42;
            PyObject *tmp_args_value_42;
            PyObject *tmp_tuple_element_82;
            PyObject *tmp_kwargs_value_42;
            CHECK_OBJECT(tmp_class_creation_21__metaclass);
            tmp_called_value_42 = tmp_class_creation_21__metaclass;
            tmp_tuple_element_82 = mod_consts[314];
            tmp_args_value_42 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_42, 0, tmp_tuple_element_82);
            CHECK_OBJECT(tmp_class_creation_21__bases);
            tmp_tuple_element_82 = tmp_class_creation_21__bases;
            PyTuple_SET_ITEM0(tmp_args_value_42, 1, tmp_tuple_element_82);
            tmp_tuple_element_82 = locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440;
            PyTuple_SET_ITEM0(tmp_args_value_42, 2, tmp_tuple_element_82);
            CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
            tmp_kwargs_value_42 = tmp_class_creation_21__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 440;
            tmp_assign_source_180 = CALL_FUNCTION(tmp_called_value_42, tmp_args_value_42, tmp_kwargs_value_42);
            Py_DECREF(tmp_args_value_42);
            if (tmp_assign_source_180 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 440;

                goto try_except_handler_65;
            }
            assert(outline_20_var___class__ == NULL);
            outline_20_var___class__ = tmp_assign_source_180;
        }
        CHECK_OBJECT(outline_20_var___class__);
        tmp_assign_source_179 = outline_20_var___class__;
        Py_INCREF(tmp_assign_source_179);
        goto try_return_handler_65;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_65:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440);
        locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440 = NULL;
        goto try_return_handler_64;
        // Exception handler code:
        try_except_handler_65:;
        exception_keeper_type_63 = exception_type;
        exception_keeper_value_63 = exception_value;
        exception_keeper_tb_63 = exception_tb;
        exception_keeper_lineno_63 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440);
        locals_xlwt$BIFFRecords$$$class__21_BookBoolRecord_440 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_63;
        exception_value = exception_keeper_value_63;
        exception_tb = exception_keeper_tb_63;
        exception_lineno = exception_keeper_lineno_63;

        goto try_except_handler_64;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_64:;
        CHECK_OBJECT(outline_20_var___class__);
        Py_DECREF(outline_20_var___class__);
        outline_20_var___class__ = NULL;
        goto outline_result_21;
        // Exception handler code:
        try_except_handler_64:;
        exception_keeper_type_64 = exception_type;
        exception_keeper_value_64 = exception_value;
        exception_keeper_tb_64 = exception_tb;
        exception_keeper_lineno_64 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_64;
        exception_value = exception_keeper_value_64;
        exception_tb = exception_keeper_tb_64;
        exception_lineno = exception_keeper_lineno_64;

        goto outline_exception_21;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_21:;
        exception_lineno = 440;
        goto try_except_handler_63;
        outline_result_21:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[314], tmp_assign_source_179);
    }
    goto try_end_23;
    // Exception handler code:
    try_except_handler_63:;
    exception_keeper_type_65 = exception_type;
    exception_keeper_value_65 = exception_value;
    exception_keeper_tb_65 = exception_tb;
    exception_keeper_lineno_65 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    Py_XDECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_65;
    exception_value = exception_keeper_value_65;
    exception_tb = exception_keeper_tb_65;
    exception_lineno = exception_keeper_lineno_65;

    goto frame_exception_exit_1;
    // End of try:
    try_end_23:;
    CHECK_OBJECT(tmp_class_creation_21__bases_orig);
    Py_DECREF(tmp_class_creation_21__bases_orig);
    tmp_class_creation_21__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_21__bases);
    Py_DECREF(tmp_class_creation_21__bases);
    tmp_class_creation_21__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_21__class_decl_dict);
    Py_DECREF(tmp_class_creation_21__class_decl_dict);
    tmp_class_creation_21__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_21__metaclass);
    Py_DECREF(tmp_class_creation_21__metaclass);
    tmp_class_creation_21__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_21__prepared);
    Py_DECREF(tmp_class_creation_21__prepared);
    tmp_class_creation_21__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_181;
        PyObject *tmp_tuple_element_83;
        tmp_tuple_element_83 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_83 == NULL)) {
            tmp_tuple_element_83 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        tmp_assign_source_181 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_181, 0, tmp_tuple_element_83);
        assert(tmp_class_creation_22__bases_orig == NULL);
        tmp_class_creation_22__bases_orig = tmp_assign_source_181;
    }
    {
        PyObject *tmp_assign_source_182;
        PyObject *tmp_dircall_arg1_22;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dircall_arg1_22 = tmp_class_creation_22__bases_orig;
        Py_INCREF(tmp_dircall_arg1_22);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_22};
            tmp_assign_source_182 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_182 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        assert(tmp_class_creation_22__bases == NULL);
        tmp_class_creation_22__bases = tmp_assign_source_182;
    }
    {
        PyObject *tmp_assign_source_183;
        tmp_assign_source_183 = PyDict_New();
        assert(tmp_class_creation_22__class_decl_dict == NULL);
        tmp_class_creation_22__class_decl_dict = tmp_assign_source_183;
    }
    {
        PyObject *tmp_assign_source_184;
        PyObject *tmp_metaclass_value_22;
        bool tmp_condition_result_127;
        PyObject *tmp_key_value_64;
        PyObject *tmp_dict_arg_value_64;
        PyObject *tmp_dict_arg_value_65;
        PyObject *tmp_key_value_65;
        nuitka_bool tmp_condition_result_128;
        int tmp_truth_name_22;
        PyObject *tmp_type_arg_43;
        PyObject *tmp_expression_value_106;
        PyObject *tmp_subscript_value_22;
        PyObject *tmp_bases_value_22;
        tmp_key_value_64 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_64 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_64, tmp_key_value_64);
        assert(!(tmp_res == -1));
        tmp_condition_result_127 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_127 != false) {
            goto condexpr_true_43;
        } else {
            goto condexpr_false_43;
        }
        condexpr_true_43:;
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_65 = tmp_class_creation_22__class_decl_dict;
        tmp_key_value_65 = mod_consts[205];
        tmp_metaclass_value_22 = DICT_GET_ITEM0(tmp_dict_arg_value_65, tmp_key_value_65);
        if (tmp_metaclass_value_22 == NULL) {
            tmp_metaclass_value_22 = Py_None;
        }
        assert(!(tmp_metaclass_value_22 == NULL));
        Py_INCREF(tmp_metaclass_value_22);
        goto condexpr_end_43;
        condexpr_false_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_truth_name_22 = CHECK_IF_TRUE(tmp_class_creation_22__bases);
        if (tmp_truth_name_22 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        tmp_condition_result_128 = tmp_truth_name_22 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_128 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_44;
        } else {
            goto condexpr_false_44;
        }
        condexpr_true_44:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_expression_value_106 = tmp_class_creation_22__bases;
        tmp_subscript_value_22 = mod_consts[4];
        tmp_type_arg_43 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_106, tmp_subscript_value_22, 0);
        if (tmp_type_arg_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        tmp_metaclass_value_22 = BUILTIN_TYPE1(tmp_type_arg_43);
        Py_DECREF(tmp_type_arg_43);
        if (tmp_metaclass_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        goto condexpr_end_44;
        condexpr_false_44:;
        tmp_metaclass_value_22 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_22);
        condexpr_end_44:;
        condexpr_end_43:;
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_bases_value_22 = tmp_class_creation_22__bases;
        tmp_assign_source_184 = SELECT_METACLASS(tmp_metaclass_value_22, tmp_bases_value_22);
        Py_DECREF(tmp_metaclass_value_22);
        if (tmp_assign_source_184 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        assert(tmp_class_creation_22__metaclass == NULL);
        tmp_class_creation_22__metaclass = tmp_assign_source_184;
    }
    {
        bool tmp_condition_result_129;
        PyObject *tmp_key_value_66;
        PyObject *tmp_dict_arg_value_66;
        tmp_key_value_66 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_dict_arg_value_66 = tmp_class_creation_22__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_66, tmp_key_value_66);
        assert(!(tmp_res == -1));
        tmp_condition_result_129 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_129 != false) {
            goto branch_yes_85;
        } else {
            goto branch_no_85;
        }
    }
    branch_yes_85:;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_22__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 459;

        goto try_except_handler_66;
    }
    branch_no_85:;
    {
        nuitka_bool tmp_condition_result_130;
        PyObject *tmp_expression_value_107;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_107 = tmp_class_creation_22__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_107, mod_consts[206]);
        tmp_condition_result_130 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_130 == NUITKA_BOOL_TRUE) {
            goto branch_yes_86;
        } else {
            goto branch_no_86;
        }
    }
    branch_yes_86:;
    {
        PyObject *tmp_assign_source_185;
        PyObject *tmp_called_value_43;
        PyObject *tmp_expression_value_108;
        PyObject *tmp_args_value_43;
        PyObject *tmp_tuple_element_84;
        PyObject *tmp_kwargs_value_43;
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_expression_value_108 = tmp_class_creation_22__metaclass;
        tmp_called_value_43 = LOOKUP_ATTRIBUTE(tmp_expression_value_108, mod_consts[206]);
        if (tmp_called_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        tmp_tuple_element_84 = mod_consts[318];
        tmp_args_value_43 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_43, 0, tmp_tuple_element_84);
        CHECK_OBJECT(tmp_class_creation_22__bases);
        tmp_tuple_element_84 = tmp_class_creation_22__bases;
        PyTuple_SET_ITEM0(tmp_args_value_43, 1, tmp_tuple_element_84);
        CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
        tmp_kwargs_value_43 = tmp_class_creation_22__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 459;
        tmp_assign_source_185 = CALL_FUNCTION(tmp_called_value_43, tmp_args_value_43, tmp_kwargs_value_43);
        Py_DECREF(tmp_called_value_43);
        Py_DECREF(tmp_args_value_43);
        if (tmp_assign_source_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_185;
    }
    {
        bool tmp_condition_result_131;
        PyObject *tmp_operand_value_22;
        PyObject *tmp_expression_value_109;
        CHECK_OBJECT(tmp_class_creation_22__prepared);
        tmp_expression_value_109 = tmp_class_creation_22__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_109, mod_consts[208]);
        tmp_operand_value_22 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_22);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        tmp_condition_result_131 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_131 != false) {
            goto branch_yes_87;
        } else {
            goto branch_no_87;
        }
    }
    branch_yes_87:;
    {
        PyObject *tmp_raise_type_22;
        PyObject *tmp_raise_value_22;
        PyObject *tmp_left_value_22;
        PyObject *tmp_right_value_22;
        PyObject *tmp_tuple_element_85;
        PyObject *tmp_getattr_target_22;
        PyObject *tmp_getattr_attr_22;
        PyObject *tmp_getattr_default_22;
        tmp_raise_type_22 = PyExc_TypeError;
        tmp_left_value_22 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_22__metaclass);
        tmp_getattr_target_22 = tmp_class_creation_22__metaclass;
        tmp_getattr_attr_22 = mod_consts[210];
        tmp_getattr_default_22 = mod_consts[211];
        tmp_tuple_element_85 = BUILTIN_GETATTR(tmp_getattr_target_22, tmp_getattr_attr_22, tmp_getattr_default_22);
        if (tmp_tuple_element_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        tmp_right_value_22 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_110;
            PyObject *tmp_type_arg_44;
            PyTuple_SET_ITEM(tmp_right_value_22, 0, tmp_tuple_element_85);
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_type_arg_44 = tmp_class_creation_22__prepared;
            tmp_expression_value_110 = BUILTIN_TYPE1(tmp_type_arg_44);
            assert(!(tmp_expression_value_110 == NULL));
            tmp_tuple_element_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_110, mod_consts[210]);
            Py_DECREF(tmp_expression_value_110);
            if (tmp_tuple_element_85 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 459;

                goto tuple_build_exception_22;
            }
            PyTuple_SET_ITEM(tmp_right_value_22, 1, tmp_tuple_element_85);
        }
        goto tuple_build_noexception_22;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_22:;
        Py_DECREF(tmp_right_value_22);
        goto try_except_handler_66;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_22:;
        tmp_raise_value_22 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_22, tmp_right_value_22);
        Py_DECREF(tmp_right_value_22);
        if (tmp_raise_value_22 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_66;
        }
        exception_type = tmp_raise_type_22;
        Py_INCREF(tmp_raise_type_22);
        exception_value = tmp_raise_value_22;
        exception_lineno = 459;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_66;
    }
    branch_no_87:;
    goto branch_end_86;
    branch_no_86:;
    {
        PyObject *tmp_assign_source_186;
        tmp_assign_source_186 = PyDict_New();
        assert(tmp_class_creation_22__prepared == NULL);
        tmp_class_creation_22__prepared = tmp_assign_source_186;
    }
    branch_end_86:;
    {
        PyObject *tmp_assign_source_187;
        {
            PyObject *tmp_set_locals_22;
            CHECK_OBJECT(tmp_class_creation_22__prepared);
            tmp_set_locals_22 = tmp_class_creation_22__prepared;
            locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459 = tmp_set_locals_22;
            Py_INCREF(tmp_set_locals_22);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_68;
        }
        tmp_dictset_value = mod_consts[319];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_68;
        }
        tmp_dictset_value = mod_consts[318];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_68;
        }
        if (isFrameUnusable(cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23)) {
            Py_XDECREF(cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23);

#if _DEBUG_REFCOUNTS
            if (cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23 = MAKE_FUNCTION_FRAME(codeobj_d16779ec4e9badd20ed67c7ecc33a4e0, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23->m_type_description == NULL);
        frame_d16779ec4e9badd20ed67c7ecc33a4e0_23 = cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_d16779ec4e9badd20ed67c7ecc33a4e0_23);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_d16779ec4e9badd20ed67c7ecc33a4e0_23) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[320];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 481;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__35___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 483;
            type_description_2 = "o";
            goto frame_exception_exit_23;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d16779ec4e9badd20ed67c7ecc33a4e0_23);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_22;

        frame_exception_exit_23:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_d16779ec4e9badd20ed67c7ecc33a4e0_23);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_d16779ec4e9badd20ed67c7ecc33a4e0_23, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_d16779ec4e9badd20ed67c7ecc33a4e0_23->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_d16779ec4e9badd20ed67c7ecc33a4e0_23, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_d16779ec4e9badd20ed67c7ecc33a4e0_23,
            type_description_2,
            outline_21_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_d16779ec4e9badd20ed67c7ecc33a4e0_23 == cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23);
            cache_frame_d16779ec4e9badd20ed67c7ecc33a4e0_23 = NULL;
        }

        assertFrameObject(frame_d16779ec4e9badd20ed67c7ecc33a4e0_23);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_22;

        frame_no_exception_22:;
        goto skip_nested_handling_22;
        nested_frame_exit_22:;

        goto try_except_handler_68;
        skip_nested_handling_22:;
        {
            nuitka_bool tmp_condition_result_132;
            PyObject *tmp_cmp_expr_left_22;
            PyObject *tmp_cmp_expr_right_22;
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_cmp_expr_left_22 = tmp_class_creation_22__bases;
            CHECK_OBJECT(tmp_class_creation_22__bases_orig);
            tmp_cmp_expr_right_22 = tmp_class_creation_22__bases_orig;
            tmp_condition_result_132 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_22, tmp_cmp_expr_right_22);
            if (tmp_condition_result_132 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 459;

                goto try_except_handler_68;
            }
            if (tmp_condition_result_132 == NUITKA_BOOL_TRUE) {
                goto branch_yes_88;
            } else {
                goto branch_no_88;
            }
            assert(tmp_condition_result_132 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_88:;
        CHECK_OBJECT(tmp_class_creation_22__bases_orig);
        tmp_dictset_value = tmp_class_creation_22__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 459;

            goto try_except_handler_68;
        }
        branch_no_88:;
        {
            PyObject *tmp_assign_source_188;
            PyObject *tmp_called_value_44;
            PyObject *tmp_args_value_44;
            PyObject *tmp_tuple_element_86;
            PyObject *tmp_kwargs_value_44;
            CHECK_OBJECT(tmp_class_creation_22__metaclass);
            tmp_called_value_44 = tmp_class_creation_22__metaclass;
            tmp_tuple_element_86 = mod_consts[318];
            tmp_args_value_44 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_44, 0, tmp_tuple_element_86);
            CHECK_OBJECT(tmp_class_creation_22__bases);
            tmp_tuple_element_86 = tmp_class_creation_22__bases;
            PyTuple_SET_ITEM0(tmp_args_value_44, 1, tmp_tuple_element_86);
            tmp_tuple_element_86 = locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459;
            PyTuple_SET_ITEM0(tmp_args_value_44, 2, tmp_tuple_element_86);
            CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
            tmp_kwargs_value_44 = tmp_class_creation_22__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 459;
            tmp_assign_source_188 = CALL_FUNCTION(tmp_called_value_44, tmp_args_value_44, tmp_kwargs_value_44);
            Py_DECREF(tmp_args_value_44);
            if (tmp_assign_source_188 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 459;

                goto try_except_handler_68;
            }
            assert(outline_21_var___class__ == NULL);
            outline_21_var___class__ = tmp_assign_source_188;
        }
        CHECK_OBJECT(outline_21_var___class__);
        tmp_assign_source_187 = outline_21_var___class__;
        Py_INCREF(tmp_assign_source_187);
        goto try_return_handler_68;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_68:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459);
        locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459 = NULL;
        goto try_return_handler_67;
        // Exception handler code:
        try_except_handler_68:;
        exception_keeper_type_66 = exception_type;
        exception_keeper_value_66 = exception_value;
        exception_keeper_tb_66 = exception_tb;
        exception_keeper_lineno_66 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459);
        locals_xlwt$BIFFRecords$$$class__22_CountryRecord_459 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_66;
        exception_value = exception_keeper_value_66;
        exception_tb = exception_keeper_tb_66;
        exception_lineno = exception_keeper_lineno_66;

        goto try_except_handler_67;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_67:;
        CHECK_OBJECT(outline_21_var___class__);
        Py_DECREF(outline_21_var___class__);
        outline_21_var___class__ = NULL;
        goto outline_result_22;
        // Exception handler code:
        try_except_handler_67:;
        exception_keeper_type_67 = exception_type;
        exception_keeper_value_67 = exception_value;
        exception_keeper_tb_67 = exception_tb;
        exception_keeper_lineno_67 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_67;
        exception_value = exception_keeper_value_67;
        exception_tb = exception_keeper_tb_67;
        exception_lineno = exception_keeper_lineno_67;

        goto outline_exception_22;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_22:;
        exception_lineno = 459;
        goto try_except_handler_66;
        outline_result_22:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[318], tmp_assign_source_187);
    }
    goto try_end_24;
    // Exception handler code:
    try_except_handler_66:;
    exception_keeper_type_68 = exception_type;
    exception_keeper_value_68 = exception_value;
    exception_keeper_tb_68 = exception_tb;
    exception_keeper_lineno_68 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    Py_XDECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_68;
    exception_value = exception_keeper_value_68;
    exception_tb = exception_keeper_tb_68;
    exception_lineno = exception_keeper_lineno_68;

    goto frame_exception_exit_1;
    // End of try:
    try_end_24:;
    CHECK_OBJECT(tmp_class_creation_22__bases_orig);
    Py_DECREF(tmp_class_creation_22__bases_orig);
    tmp_class_creation_22__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_22__bases);
    Py_DECREF(tmp_class_creation_22__bases);
    tmp_class_creation_22__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_22__class_decl_dict);
    Py_DECREF(tmp_class_creation_22__class_decl_dict);
    tmp_class_creation_22__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_22__metaclass);
    Py_DECREF(tmp_class_creation_22__metaclass);
    tmp_class_creation_22__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_22__prepared);
    Py_DECREF(tmp_class_creation_22__prepared);
    tmp_class_creation_22__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_189;
        PyObject *tmp_tuple_element_87;
        tmp_tuple_element_87 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_87 == NULL)) {
            tmp_tuple_element_87 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        tmp_assign_source_189 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_189, 0, tmp_tuple_element_87);
        assert(tmp_class_creation_23__bases_orig == NULL);
        tmp_class_creation_23__bases_orig = tmp_assign_source_189;
    }
    {
        PyObject *tmp_assign_source_190;
        PyObject *tmp_dircall_arg1_23;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dircall_arg1_23 = tmp_class_creation_23__bases_orig;
        Py_INCREF(tmp_dircall_arg1_23);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_23};
            tmp_assign_source_190 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_190 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        assert(tmp_class_creation_23__bases == NULL);
        tmp_class_creation_23__bases = tmp_assign_source_190;
    }
    {
        PyObject *tmp_assign_source_191;
        tmp_assign_source_191 = PyDict_New();
        assert(tmp_class_creation_23__class_decl_dict == NULL);
        tmp_class_creation_23__class_decl_dict = tmp_assign_source_191;
    }
    {
        PyObject *tmp_assign_source_192;
        PyObject *tmp_metaclass_value_23;
        bool tmp_condition_result_133;
        PyObject *tmp_key_value_67;
        PyObject *tmp_dict_arg_value_67;
        PyObject *tmp_dict_arg_value_68;
        PyObject *tmp_key_value_68;
        nuitka_bool tmp_condition_result_134;
        int tmp_truth_name_23;
        PyObject *tmp_type_arg_45;
        PyObject *tmp_expression_value_111;
        PyObject *tmp_subscript_value_23;
        PyObject *tmp_bases_value_23;
        tmp_key_value_67 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_67 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_67, tmp_key_value_67);
        assert(!(tmp_res == -1));
        tmp_condition_result_133 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_133 != false) {
            goto condexpr_true_45;
        } else {
            goto condexpr_false_45;
        }
        condexpr_true_45:;
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_68 = tmp_class_creation_23__class_decl_dict;
        tmp_key_value_68 = mod_consts[205];
        tmp_metaclass_value_23 = DICT_GET_ITEM0(tmp_dict_arg_value_68, tmp_key_value_68);
        if (tmp_metaclass_value_23 == NULL) {
            tmp_metaclass_value_23 = Py_None;
        }
        assert(!(tmp_metaclass_value_23 == NULL));
        Py_INCREF(tmp_metaclass_value_23);
        goto condexpr_end_45;
        condexpr_false_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_truth_name_23 = CHECK_IF_TRUE(tmp_class_creation_23__bases);
        if (tmp_truth_name_23 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        tmp_condition_result_134 = tmp_truth_name_23 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_134 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_46;
        } else {
            goto condexpr_false_46;
        }
        condexpr_true_46:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_expression_value_111 = tmp_class_creation_23__bases;
        tmp_subscript_value_23 = mod_consts[4];
        tmp_type_arg_45 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_111, tmp_subscript_value_23, 0);
        if (tmp_type_arg_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        tmp_metaclass_value_23 = BUILTIN_TYPE1(tmp_type_arg_45);
        Py_DECREF(tmp_type_arg_45);
        if (tmp_metaclass_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        goto condexpr_end_46;
        condexpr_false_46:;
        tmp_metaclass_value_23 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_23);
        condexpr_end_46:;
        condexpr_end_45:;
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_bases_value_23 = tmp_class_creation_23__bases;
        tmp_assign_source_192 = SELECT_METACLASS(tmp_metaclass_value_23, tmp_bases_value_23);
        Py_DECREF(tmp_metaclass_value_23);
        if (tmp_assign_source_192 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        assert(tmp_class_creation_23__metaclass == NULL);
        tmp_class_creation_23__metaclass = tmp_assign_source_192;
    }
    {
        bool tmp_condition_result_135;
        PyObject *tmp_key_value_69;
        PyObject *tmp_dict_arg_value_69;
        tmp_key_value_69 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_dict_arg_value_69 = tmp_class_creation_23__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_69, tmp_key_value_69);
        assert(!(tmp_res == -1));
        tmp_condition_result_135 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_135 != false) {
            goto branch_yes_89;
        } else {
            goto branch_no_89;
        }
    }
    branch_yes_89:;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_23__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 487;

        goto try_except_handler_69;
    }
    branch_no_89:;
    {
        nuitka_bool tmp_condition_result_136;
        PyObject *tmp_expression_value_112;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_112 = tmp_class_creation_23__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_112, mod_consts[206]);
        tmp_condition_result_136 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_136 == NUITKA_BOOL_TRUE) {
            goto branch_yes_90;
        } else {
            goto branch_no_90;
        }
    }
    branch_yes_90:;
    {
        PyObject *tmp_assign_source_193;
        PyObject *tmp_called_value_45;
        PyObject *tmp_expression_value_113;
        PyObject *tmp_args_value_45;
        PyObject *tmp_tuple_element_88;
        PyObject *tmp_kwargs_value_45;
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_expression_value_113 = tmp_class_creation_23__metaclass;
        tmp_called_value_45 = LOOKUP_ATTRIBUTE(tmp_expression_value_113, mod_consts[206]);
        if (tmp_called_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        tmp_tuple_element_88 = mod_consts[322];
        tmp_args_value_45 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_45, 0, tmp_tuple_element_88);
        CHECK_OBJECT(tmp_class_creation_23__bases);
        tmp_tuple_element_88 = tmp_class_creation_23__bases;
        PyTuple_SET_ITEM0(tmp_args_value_45, 1, tmp_tuple_element_88);
        CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
        tmp_kwargs_value_45 = tmp_class_creation_23__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 487;
        tmp_assign_source_193 = CALL_FUNCTION(tmp_called_value_45, tmp_args_value_45, tmp_kwargs_value_45);
        Py_DECREF(tmp_called_value_45);
        Py_DECREF(tmp_args_value_45);
        if (tmp_assign_source_193 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_193;
    }
    {
        bool tmp_condition_result_137;
        PyObject *tmp_operand_value_23;
        PyObject *tmp_expression_value_114;
        CHECK_OBJECT(tmp_class_creation_23__prepared);
        tmp_expression_value_114 = tmp_class_creation_23__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_114, mod_consts[208]);
        tmp_operand_value_23 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_23);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        tmp_condition_result_137 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_137 != false) {
            goto branch_yes_91;
        } else {
            goto branch_no_91;
        }
    }
    branch_yes_91:;
    {
        PyObject *tmp_raise_type_23;
        PyObject *tmp_raise_value_23;
        PyObject *tmp_left_value_23;
        PyObject *tmp_right_value_23;
        PyObject *tmp_tuple_element_89;
        PyObject *tmp_getattr_target_23;
        PyObject *tmp_getattr_attr_23;
        PyObject *tmp_getattr_default_23;
        tmp_raise_type_23 = PyExc_TypeError;
        tmp_left_value_23 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_23__metaclass);
        tmp_getattr_target_23 = tmp_class_creation_23__metaclass;
        tmp_getattr_attr_23 = mod_consts[210];
        tmp_getattr_default_23 = mod_consts[211];
        tmp_tuple_element_89 = BUILTIN_GETATTR(tmp_getattr_target_23, tmp_getattr_attr_23, tmp_getattr_default_23);
        if (tmp_tuple_element_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        tmp_right_value_23 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_115;
            PyObject *tmp_type_arg_46;
            PyTuple_SET_ITEM(tmp_right_value_23, 0, tmp_tuple_element_89);
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_type_arg_46 = tmp_class_creation_23__prepared;
            tmp_expression_value_115 = BUILTIN_TYPE1(tmp_type_arg_46);
            assert(!(tmp_expression_value_115 == NULL));
            tmp_tuple_element_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_115, mod_consts[210]);
            Py_DECREF(tmp_expression_value_115);
            if (tmp_tuple_element_89 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 487;

                goto tuple_build_exception_23;
            }
            PyTuple_SET_ITEM(tmp_right_value_23, 1, tmp_tuple_element_89);
        }
        goto tuple_build_noexception_23;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_23:;
        Py_DECREF(tmp_right_value_23);
        goto try_except_handler_69;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_23:;
        tmp_raise_value_23 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_23, tmp_right_value_23);
        Py_DECREF(tmp_right_value_23);
        if (tmp_raise_value_23 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_69;
        }
        exception_type = tmp_raise_type_23;
        Py_INCREF(tmp_raise_type_23);
        exception_value = tmp_raise_value_23;
        exception_lineno = 487;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_69;
    }
    branch_no_91:;
    goto branch_end_90;
    branch_no_90:;
    {
        PyObject *tmp_assign_source_194;
        tmp_assign_source_194 = PyDict_New();
        assert(tmp_class_creation_23__prepared == NULL);
        tmp_class_creation_23__prepared = tmp_assign_source_194;
    }
    branch_end_90:;
    {
        PyObject *tmp_assign_source_195;
        {
            PyObject *tmp_set_locals_23;
            CHECK_OBJECT(tmp_class_creation_23__prepared);
            tmp_set_locals_23 = tmp_class_creation_23__prepared;
            locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487 = tmp_set_locals_23;
            Py_INCREF(tmp_set_locals_23);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_71;
        }
        tmp_dictset_value = mod_consts[323];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_71;
        }
        tmp_dictset_value = mod_consts[322];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_71;
        }
        if (isFrameUnusable(cache_frame_07010f3711b0d04fdbc1b55715cf6869_24)) {
            Py_XDECREF(cache_frame_07010f3711b0d04fdbc1b55715cf6869_24);

#if _DEBUG_REFCOUNTS
            if (cache_frame_07010f3711b0d04fdbc1b55715cf6869_24 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_07010f3711b0d04fdbc1b55715cf6869_24 = MAKE_FUNCTION_FRAME(codeobj_07010f3711b0d04fdbc1b55715cf6869, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_07010f3711b0d04fdbc1b55715cf6869_24->m_type_description == NULL);
        frame_07010f3711b0d04fdbc1b55715cf6869_24 = cache_frame_07010f3711b0d04fdbc1b55715cf6869_24;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_07010f3711b0d04fdbc1b55715cf6869_24);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_07010f3711b0d04fdbc1b55715cf6869_24) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[324];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 501;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__36___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 503;
            type_description_2 = "o";
            goto frame_exception_exit_24;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_07010f3711b0d04fdbc1b55715cf6869_24);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_23;

        frame_exception_exit_24:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_07010f3711b0d04fdbc1b55715cf6869_24);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_07010f3711b0d04fdbc1b55715cf6869_24, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_07010f3711b0d04fdbc1b55715cf6869_24->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_07010f3711b0d04fdbc1b55715cf6869_24, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_07010f3711b0d04fdbc1b55715cf6869_24,
            type_description_2,
            outline_22_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_07010f3711b0d04fdbc1b55715cf6869_24 == cache_frame_07010f3711b0d04fdbc1b55715cf6869_24) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_07010f3711b0d04fdbc1b55715cf6869_24);
            cache_frame_07010f3711b0d04fdbc1b55715cf6869_24 = NULL;
        }

        assertFrameObject(frame_07010f3711b0d04fdbc1b55715cf6869_24);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_23;

        frame_no_exception_23:;
        goto skip_nested_handling_23;
        nested_frame_exit_23:;

        goto try_except_handler_71;
        skip_nested_handling_23:;
        {
            nuitka_bool tmp_condition_result_138;
            PyObject *tmp_cmp_expr_left_23;
            PyObject *tmp_cmp_expr_right_23;
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_cmp_expr_left_23 = tmp_class_creation_23__bases;
            CHECK_OBJECT(tmp_class_creation_23__bases_orig);
            tmp_cmp_expr_right_23 = tmp_class_creation_23__bases_orig;
            tmp_condition_result_138 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_23, tmp_cmp_expr_right_23);
            if (tmp_condition_result_138 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 487;

                goto try_except_handler_71;
            }
            if (tmp_condition_result_138 == NUITKA_BOOL_TRUE) {
                goto branch_yes_92;
            } else {
                goto branch_no_92;
            }
            assert(tmp_condition_result_138 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_92:;
        CHECK_OBJECT(tmp_class_creation_23__bases_orig);
        tmp_dictset_value = tmp_class_creation_23__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 487;

            goto try_except_handler_71;
        }
        branch_no_92:;
        {
            PyObject *tmp_assign_source_196;
            PyObject *tmp_called_value_46;
            PyObject *tmp_args_value_46;
            PyObject *tmp_tuple_element_90;
            PyObject *tmp_kwargs_value_46;
            CHECK_OBJECT(tmp_class_creation_23__metaclass);
            tmp_called_value_46 = tmp_class_creation_23__metaclass;
            tmp_tuple_element_90 = mod_consts[322];
            tmp_args_value_46 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_46, 0, tmp_tuple_element_90);
            CHECK_OBJECT(tmp_class_creation_23__bases);
            tmp_tuple_element_90 = tmp_class_creation_23__bases;
            PyTuple_SET_ITEM0(tmp_args_value_46, 1, tmp_tuple_element_90);
            tmp_tuple_element_90 = locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487;
            PyTuple_SET_ITEM0(tmp_args_value_46, 2, tmp_tuple_element_90);
            CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
            tmp_kwargs_value_46 = tmp_class_creation_23__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 487;
            tmp_assign_source_196 = CALL_FUNCTION(tmp_called_value_46, tmp_args_value_46, tmp_kwargs_value_46);
            Py_DECREF(tmp_args_value_46);
            if (tmp_assign_source_196 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 487;

                goto try_except_handler_71;
            }
            assert(outline_22_var___class__ == NULL);
            outline_22_var___class__ = tmp_assign_source_196;
        }
        CHECK_OBJECT(outline_22_var___class__);
        tmp_assign_source_195 = outline_22_var___class__;
        Py_INCREF(tmp_assign_source_195);
        goto try_return_handler_71;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_71:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487);
        locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487 = NULL;
        goto try_return_handler_70;
        // Exception handler code:
        try_except_handler_71:;
        exception_keeper_type_69 = exception_type;
        exception_keeper_value_69 = exception_value;
        exception_keeper_tb_69 = exception_tb;
        exception_keeper_lineno_69 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487);
        locals_xlwt$BIFFRecords$$$class__23_UseSelfsRecord_487 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_69;
        exception_value = exception_keeper_value_69;
        exception_tb = exception_keeper_tb_69;
        exception_lineno = exception_keeper_lineno_69;

        goto try_except_handler_70;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_70:;
        CHECK_OBJECT(outline_22_var___class__);
        Py_DECREF(outline_22_var___class__);
        outline_22_var___class__ = NULL;
        goto outline_result_23;
        // Exception handler code:
        try_except_handler_70:;
        exception_keeper_type_70 = exception_type;
        exception_keeper_value_70 = exception_value;
        exception_keeper_tb_70 = exception_tb;
        exception_keeper_lineno_70 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_70;
        exception_value = exception_keeper_value_70;
        exception_tb = exception_keeper_tb_70;
        exception_lineno = exception_keeper_lineno_70;

        goto outline_exception_23;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_23:;
        exception_lineno = 487;
        goto try_except_handler_69;
        outline_result_23:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[322], tmp_assign_source_195);
    }
    goto try_end_25;
    // Exception handler code:
    try_except_handler_69:;
    exception_keeper_type_71 = exception_type;
    exception_keeper_value_71 = exception_value;
    exception_keeper_tb_71 = exception_tb;
    exception_keeper_lineno_71 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    Py_XDECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_71;
    exception_value = exception_keeper_value_71;
    exception_tb = exception_keeper_tb_71;
    exception_lineno = exception_keeper_lineno_71;

    goto frame_exception_exit_1;
    // End of try:
    try_end_25:;
    CHECK_OBJECT(tmp_class_creation_23__bases_orig);
    Py_DECREF(tmp_class_creation_23__bases_orig);
    tmp_class_creation_23__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_23__bases);
    Py_DECREF(tmp_class_creation_23__bases);
    tmp_class_creation_23__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_23__class_decl_dict);
    Py_DECREF(tmp_class_creation_23__class_decl_dict);
    tmp_class_creation_23__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_23__metaclass);
    Py_DECREF(tmp_class_creation_23__metaclass);
    tmp_class_creation_23__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_23__prepared);
    Py_DECREF(tmp_class_creation_23__prepared);
    tmp_class_creation_23__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_197;
        PyObject *tmp_tuple_element_91;
        tmp_tuple_element_91 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_91 == NULL)) {
            tmp_tuple_element_91 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        tmp_assign_source_197 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_197, 0, tmp_tuple_element_91);
        assert(tmp_class_creation_24__bases_orig == NULL);
        tmp_class_creation_24__bases_orig = tmp_assign_source_197;
    }
    {
        PyObject *tmp_assign_source_198;
        PyObject *tmp_dircall_arg1_24;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dircall_arg1_24 = tmp_class_creation_24__bases_orig;
        Py_INCREF(tmp_dircall_arg1_24);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_24};
            tmp_assign_source_198 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_198 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        assert(tmp_class_creation_24__bases == NULL);
        tmp_class_creation_24__bases = tmp_assign_source_198;
    }
    {
        PyObject *tmp_assign_source_199;
        tmp_assign_source_199 = PyDict_New();
        assert(tmp_class_creation_24__class_decl_dict == NULL);
        tmp_class_creation_24__class_decl_dict = tmp_assign_source_199;
    }
    {
        PyObject *tmp_assign_source_200;
        PyObject *tmp_metaclass_value_24;
        bool tmp_condition_result_139;
        PyObject *tmp_key_value_70;
        PyObject *tmp_dict_arg_value_70;
        PyObject *tmp_dict_arg_value_71;
        PyObject *tmp_key_value_71;
        nuitka_bool tmp_condition_result_140;
        int tmp_truth_name_24;
        PyObject *tmp_type_arg_47;
        PyObject *tmp_expression_value_116;
        PyObject *tmp_subscript_value_24;
        PyObject *tmp_bases_value_24;
        tmp_key_value_70 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_70 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_70, tmp_key_value_70);
        assert(!(tmp_res == -1));
        tmp_condition_result_139 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_139 != false) {
            goto condexpr_true_47;
        } else {
            goto condexpr_false_47;
        }
        condexpr_true_47:;
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_71 = tmp_class_creation_24__class_decl_dict;
        tmp_key_value_71 = mod_consts[205];
        tmp_metaclass_value_24 = DICT_GET_ITEM0(tmp_dict_arg_value_71, tmp_key_value_71);
        if (tmp_metaclass_value_24 == NULL) {
            tmp_metaclass_value_24 = Py_None;
        }
        assert(!(tmp_metaclass_value_24 == NULL));
        Py_INCREF(tmp_metaclass_value_24);
        goto condexpr_end_47;
        condexpr_false_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_truth_name_24 = CHECK_IF_TRUE(tmp_class_creation_24__bases);
        if (tmp_truth_name_24 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        tmp_condition_result_140 = tmp_truth_name_24 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_140 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_48;
        } else {
            goto condexpr_false_48;
        }
        condexpr_true_48:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_expression_value_116 = tmp_class_creation_24__bases;
        tmp_subscript_value_24 = mod_consts[4];
        tmp_type_arg_47 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_116, tmp_subscript_value_24, 0);
        if (tmp_type_arg_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        tmp_metaclass_value_24 = BUILTIN_TYPE1(tmp_type_arg_47);
        Py_DECREF(tmp_type_arg_47);
        if (tmp_metaclass_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        goto condexpr_end_48;
        condexpr_false_48:;
        tmp_metaclass_value_24 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_24);
        condexpr_end_48:;
        condexpr_end_47:;
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_bases_value_24 = tmp_class_creation_24__bases;
        tmp_assign_source_200 = SELECT_METACLASS(tmp_metaclass_value_24, tmp_bases_value_24);
        Py_DECREF(tmp_metaclass_value_24);
        if (tmp_assign_source_200 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        assert(tmp_class_creation_24__metaclass == NULL);
        tmp_class_creation_24__metaclass = tmp_assign_source_200;
    }
    {
        bool tmp_condition_result_141;
        PyObject *tmp_key_value_72;
        PyObject *tmp_dict_arg_value_72;
        tmp_key_value_72 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_dict_arg_value_72 = tmp_class_creation_24__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_72, tmp_key_value_72);
        assert(!(tmp_res == -1));
        tmp_condition_result_141 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_141 != false) {
            goto branch_yes_93;
        } else {
            goto branch_no_93;
        }
    }
    branch_yes_93:;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_24__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 507;

        goto try_except_handler_72;
    }
    branch_no_93:;
    {
        nuitka_bool tmp_condition_result_142;
        PyObject *tmp_expression_value_117;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_117 = tmp_class_creation_24__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_117, mod_consts[206]);
        tmp_condition_result_142 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_142 == NUITKA_BOOL_TRUE) {
            goto branch_yes_94;
        } else {
            goto branch_no_94;
        }
    }
    branch_yes_94:;
    {
        PyObject *tmp_assign_source_201;
        PyObject *tmp_called_value_47;
        PyObject *tmp_expression_value_118;
        PyObject *tmp_args_value_47;
        PyObject *tmp_tuple_element_92;
        PyObject *tmp_kwargs_value_47;
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_expression_value_118 = tmp_class_creation_24__metaclass;
        tmp_called_value_47 = LOOKUP_ATTRIBUTE(tmp_expression_value_118, mod_consts[206]);
        if (tmp_called_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        tmp_tuple_element_92 = mod_consts[326];
        tmp_args_value_47 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_47, 0, tmp_tuple_element_92);
        CHECK_OBJECT(tmp_class_creation_24__bases);
        tmp_tuple_element_92 = tmp_class_creation_24__bases;
        PyTuple_SET_ITEM0(tmp_args_value_47, 1, tmp_tuple_element_92);
        CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
        tmp_kwargs_value_47 = tmp_class_creation_24__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 507;
        tmp_assign_source_201 = CALL_FUNCTION(tmp_called_value_47, tmp_args_value_47, tmp_kwargs_value_47);
        Py_DECREF(tmp_called_value_47);
        Py_DECREF(tmp_args_value_47);
        if (tmp_assign_source_201 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_201;
    }
    {
        bool tmp_condition_result_143;
        PyObject *tmp_operand_value_24;
        PyObject *tmp_expression_value_119;
        CHECK_OBJECT(tmp_class_creation_24__prepared);
        tmp_expression_value_119 = tmp_class_creation_24__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_119, mod_consts[208]);
        tmp_operand_value_24 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_24);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        tmp_condition_result_143 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_143 != false) {
            goto branch_yes_95;
        } else {
            goto branch_no_95;
        }
    }
    branch_yes_95:;
    {
        PyObject *tmp_raise_type_24;
        PyObject *tmp_raise_value_24;
        PyObject *tmp_left_value_24;
        PyObject *tmp_right_value_24;
        PyObject *tmp_tuple_element_93;
        PyObject *tmp_getattr_target_24;
        PyObject *tmp_getattr_attr_24;
        PyObject *tmp_getattr_default_24;
        tmp_raise_type_24 = PyExc_TypeError;
        tmp_left_value_24 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_24__metaclass);
        tmp_getattr_target_24 = tmp_class_creation_24__metaclass;
        tmp_getattr_attr_24 = mod_consts[210];
        tmp_getattr_default_24 = mod_consts[211];
        tmp_tuple_element_93 = BUILTIN_GETATTR(tmp_getattr_target_24, tmp_getattr_attr_24, tmp_getattr_default_24);
        if (tmp_tuple_element_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        tmp_right_value_24 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_120;
            PyObject *tmp_type_arg_48;
            PyTuple_SET_ITEM(tmp_right_value_24, 0, tmp_tuple_element_93);
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_type_arg_48 = tmp_class_creation_24__prepared;
            tmp_expression_value_120 = BUILTIN_TYPE1(tmp_type_arg_48);
            assert(!(tmp_expression_value_120 == NULL));
            tmp_tuple_element_93 = LOOKUP_ATTRIBUTE(tmp_expression_value_120, mod_consts[210]);
            Py_DECREF(tmp_expression_value_120);
            if (tmp_tuple_element_93 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 507;

                goto tuple_build_exception_24;
            }
            PyTuple_SET_ITEM(tmp_right_value_24, 1, tmp_tuple_element_93);
        }
        goto tuple_build_noexception_24;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_24:;
        Py_DECREF(tmp_right_value_24);
        goto try_except_handler_72;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_24:;
        tmp_raise_value_24 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_24, tmp_right_value_24);
        Py_DECREF(tmp_right_value_24);
        if (tmp_raise_value_24 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_72;
        }
        exception_type = tmp_raise_type_24;
        Py_INCREF(tmp_raise_type_24);
        exception_value = tmp_raise_value_24;
        exception_lineno = 507;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_72;
    }
    branch_no_95:;
    goto branch_end_94;
    branch_no_94:;
    {
        PyObject *tmp_assign_source_202;
        tmp_assign_source_202 = PyDict_New();
        assert(tmp_class_creation_24__prepared == NULL);
        tmp_class_creation_24__prepared = tmp_assign_source_202;
    }
    branch_end_94:;
    {
        PyObject *tmp_assign_source_203;
        {
            PyObject *tmp_set_locals_24;
            CHECK_OBJECT(tmp_class_creation_24__prepared);
            tmp_set_locals_24 = tmp_class_creation_24__prepared;
            locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507 = tmp_set_locals_24;
            Py_INCREF(tmp_set_locals_24);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_74;
        }
        tmp_dictset_value = mod_consts[326];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_74;
        }
        if (isFrameUnusable(cache_frame_30567aa98a8fa95095e670d33eac5b49_25)) {
            Py_XDECREF(cache_frame_30567aa98a8fa95095e670d33eac5b49_25);

#if _DEBUG_REFCOUNTS
            if (cache_frame_30567aa98a8fa95095e670d33eac5b49_25 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_30567aa98a8fa95095e670d33eac5b49_25 = MAKE_FUNCTION_FRAME(codeobj_30567aa98a8fa95095e670d33eac5b49, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_30567aa98a8fa95095e670d33eac5b49_25->m_type_description == NULL);
        frame_30567aa98a8fa95095e670d33eac5b49_25 = cache_frame_30567aa98a8fa95095e670d33eac5b49_25;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_30567aa98a8fa95095e670d33eac5b49_25);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_30567aa98a8fa95095e670d33eac5b49_25) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[327];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 508;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__37___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 510;
            type_description_2 = "o";
            goto frame_exception_exit_25;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_30567aa98a8fa95095e670d33eac5b49_25);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_24;

        frame_exception_exit_25:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_30567aa98a8fa95095e670d33eac5b49_25);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_30567aa98a8fa95095e670d33eac5b49_25, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_30567aa98a8fa95095e670d33eac5b49_25->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_30567aa98a8fa95095e670d33eac5b49_25, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_30567aa98a8fa95095e670d33eac5b49_25,
            type_description_2,
            outline_23_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_30567aa98a8fa95095e670d33eac5b49_25 == cache_frame_30567aa98a8fa95095e670d33eac5b49_25) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_30567aa98a8fa95095e670d33eac5b49_25);
            cache_frame_30567aa98a8fa95095e670d33eac5b49_25 = NULL;
        }

        assertFrameObject(frame_30567aa98a8fa95095e670d33eac5b49_25);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_24;

        frame_no_exception_24:;
        goto skip_nested_handling_24;
        nested_frame_exit_24:;

        goto try_except_handler_74;
        skip_nested_handling_24:;
        {
            nuitka_bool tmp_condition_result_144;
            PyObject *tmp_cmp_expr_left_24;
            PyObject *tmp_cmp_expr_right_24;
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_cmp_expr_left_24 = tmp_class_creation_24__bases;
            CHECK_OBJECT(tmp_class_creation_24__bases_orig);
            tmp_cmp_expr_right_24 = tmp_class_creation_24__bases_orig;
            tmp_condition_result_144 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_24, tmp_cmp_expr_right_24);
            if (tmp_condition_result_144 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 507;

                goto try_except_handler_74;
            }
            if (tmp_condition_result_144 == NUITKA_BOOL_TRUE) {
                goto branch_yes_96;
            } else {
                goto branch_no_96;
            }
            assert(tmp_condition_result_144 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_96:;
        CHECK_OBJECT(tmp_class_creation_24__bases_orig);
        tmp_dictset_value = tmp_class_creation_24__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 507;

            goto try_except_handler_74;
        }
        branch_no_96:;
        {
            PyObject *tmp_assign_source_204;
            PyObject *tmp_called_value_48;
            PyObject *tmp_args_value_48;
            PyObject *tmp_tuple_element_94;
            PyObject *tmp_kwargs_value_48;
            CHECK_OBJECT(tmp_class_creation_24__metaclass);
            tmp_called_value_48 = tmp_class_creation_24__metaclass;
            tmp_tuple_element_94 = mod_consts[326];
            tmp_args_value_48 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_48, 0, tmp_tuple_element_94);
            CHECK_OBJECT(tmp_class_creation_24__bases);
            tmp_tuple_element_94 = tmp_class_creation_24__bases;
            PyTuple_SET_ITEM0(tmp_args_value_48, 1, tmp_tuple_element_94);
            tmp_tuple_element_94 = locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507;
            PyTuple_SET_ITEM0(tmp_args_value_48, 2, tmp_tuple_element_94);
            CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
            tmp_kwargs_value_48 = tmp_class_creation_24__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 507;
            tmp_assign_source_204 = CALL_FUNCTION(tmp_called_value_48, tmp_args_value_48, tmp_kwargs_value_48);
            Py_DECREF(tmp_args_value_48);
            if (tmp_assign_source_204 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 507;

                goto try_except_handler_74;
            }
            assert(outline_23_var___class__ == NULL);
            outline_23_var___class__ = tmp_assign_source_204;
        }
        CHECK_OBJECT(outline_23_var___class__);
        tmp_assign_source_203 = outline_23_var___class__;
        Py_INCREF(tmp_assign_source_203);
        goto try_return_handler_74;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_74:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507);
        locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507 = NULL;
        goto try_return_handler_73;
        // Exception handler code:
        try_except_handler_74:;
        exception_keeper_type_72 = exception_type;
        exception_keeper_value_72 = exception_value;
        exception_keeper_tb_72 = exception_tb;
        exception_keeper_lineno_72 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507);
        locals_xlwt$BIFFRecords$$$class__24_EOFRecord_507 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_72;
        exception_value = exception_keeper_value_72;
        exception_tb = exception_keeper_tb_72;
        exception_lineno = exception_keeper_lineno_72;

        goto try_except_handler_73;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_73:;
        CHECK_OBJECT(outline_23_var___class__);
        Py_DECREF(outline_23_var___class__);
        outline_23_var___class__ = NULL;
        goto outline_result_24;
        // Exception handler code:
        try_except_handler_73:;
        exception_keeper_type_73 = exception_type;
        exception_keeper_value_73 = exception_value;
        exception_keeper_tb_73 = exception_tb;
        exception_keeper_lineno_73 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_73;
        exception_value = exception_keeper_value_73;
        exception_tb = exception_keeper_tb_73;
        exception_lineno = exception_keeper_lineno_73;

        goto outline_exception_24;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_24:;
        exception_lineno = 507;
        goto try_except_handler_72;
        outline_result_24:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[326], tmp_assign_source_203);
    }
    goto try_end_26;
    // Exception handler code:
    try_except_handler_72:;
    exception_keeper_type_74 = exception_type;
    exception_keeper_value_74 = exception_value;
    exception_keeper_tb_74 = exception_tb;
    exception_keeper_lineno_74 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    Py_XDECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_74;
    exception_value = exception_keeper_value_74;
    exception_tb = exception_keeper_tb_74;
    exception_lineno = exception_keeper_lineno_74;

    goto frame_exception_exit_1;
    // End of try:
    try_end_26:;
    CHECK_OBJECT(tmp_class_creation_24__bases_orig);
    Py_DECREF(tmp_class_creation_24__bases_orig);
    tmp_class_creation_24__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_24__bases);
    Py_DECREF(tmp_class_creation_24__bases);
    tmp_class_creation_24__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_24__class_decl_dict);
    Py_DECREF(tmp_class_creation_24__class_decl_dict);
    tmp_class_creation_24__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_24__metaclass);
    Py_DECREF(tmp_class_creation_24__metaclass);
    tmp_class_creation_24__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_24__prepared);
    Py_DECREF(tmp_class_creation_24__prepared);
    tmp_class_creation_24__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_205;
        PyObject *tmp_tuple_element_95;
        tmp_tuple_element_95 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_95 == NULL)) {
            tmp_tuple_element_95 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        tmp_assign_source_205 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_205, 0, tmp_tuple_element_95);
        assert(tmp_class_creation_25__bases_orig == NULL);
        tmp_class_creation_25__bases_orig = tmp_assign_source_205;
    }
    {
        PyObject *tmp_assign_source_206;
        PyObject *tmp_dircall_arg1_25;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dircall_arg1_25 = tmp_class_creation_25__bases_orig;
        Py_INCREF(tmp_dircall_arg1_25);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_25};
            tmp_assign_source_206 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_206 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        assert(tmp_class_creation_25__bases == NULL);
        tmp_class_creation_25__bases = tmp_assign_source_206;
    }
    {
        PyObject *tmp_assign_source_207;
        tmp_assign_source_207 = PyDict_New();
        assert(tmp_class_creation_25__class_decl_dict == NULL);
        tmp_class_creation_25__class_decl_dict = tmp_assign_source_207;
    }
    {
        PyObject *tmp_assign_source_208;
        PyObject *tmp_metaclass_value_25;
        bool tmp_condition_result_145;
        PyObject *tmp_key_value_73;
        PyObject *tmp_dict_arg_value_73;
        PyObject *tmp_dict_arg_value_74;
        PyObject *tmp_key_value_74;
        nuitka_bool tmp_condition_result_146;
        int tmp_truth_name_25;
        PyObject *tmp_type_arg_49;
        PyObject *tmp_expression_value_121;
        PyObject *tmp_subscript_value_25;
        PyObject *tmp_bases_value_25;
        tmp_key_value_73 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_73 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_73, tmp_key_value_73);
        assert(!(tmp_res == -1));
        tmp_condition_result_145 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_145 != false) {
            goto condexpr_true_49;
        } else {
            goto condexpr_false_49;
        }
        condexpr_true_49:;
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_74 = tmp_class_creation_25__class_decl_dict;
        tmp_key_value_74 = mod_consts[205];
        tmp_metaclass_value_25 = DICT_GET_ITEM0(tmp_dict_arg_value_74, tmp_key_value_74);
        if (tmp_metaclass_value_25 == NULL) {
            tmp_metaclass_value_25 = Py_None;
        }
        assert(!(tmp_metaclass_value_25 == NULL));
        Py_INCREF(tmp_metaclass_value_25);
        goto condexpr_end_49;
        condexpr_false_49:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_truth_name_25 = CHECK_IF_TRUE(tmp_class_creation_25__bases);
        if (tmp_truth_name_25 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        tmp_condition_result_146 = tmp_truth_name_25 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_146 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_50;
        } else {
            goto condexpr_false_50;
        }
        condexpr_true_50:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_expression_value_121 = tmp_class_creation_25__bases;
        tmp_subscript_value_25 = mod_consts[4];
        tmp_type_arg_49 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_121, tmp_subscript_value_25, 0);
        if (tmp_type_arg_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        tmp_metaclass_value_25 = BUILTIN_TYPE1(tmp_type_arg_49);
        Py_DECREF(tmp_type_arg_49);
        if (tmp_metaclass_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        goto condexpr_end_50;
        condexpr_false_50:;
        tmp_metaclass_value_25 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_25);
        condexpr_end_50:;
        condexpr_end_49:;
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_bases_value_25 = tmp_class_creation_25__bases;
        tmp_assign_source_208 = SELECT_METACLASS(tmp_metaclass_value_25, tmp_bases_value_25);
        Py_DECREF(tmp_metaclass_value_25);
        if (tmp_assign_source_208 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        assert(tmp_class_creation_25__metaclass == NULL);
        tmp_class_creation_25__metaclass = tmp_assign_source_208;
    }
    {
        bool tmp_condition_result_147;
        PyObject *tmp_key_value_75;
        PyObject *tmp_dict_arg_value_75;
        tmp_key_value_75 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_dict_arg_value_75 = tmp_class_creation_25__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_75, tmp_key_value_75);
        assert(!(tmp_res == -1));
        tmp_condition_result_147 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_147 != false) {
            goto branch_yes_97;
        } else {
            goto branch_no_97;
        }
    }
    branch_yes_97:;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_25__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 514;

        goto try_except_handler_75;
    }
    branch_no_97:;
    {
        nuitka_bool tmp_condition_result_148;
        PyObject *tmp_expression_value_122;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_122 = tmp_class_creation_25__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_122, mod_consts[206]);
        tmp_condition_result_148 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_148 == NUITKA_BOOL_TRUE) {
            goto branch_yes_98;
        } else {
            goto branch_no_98;
        }
    }
    branch_yes_98:;
    {
        PyObject *tmp_assign_source_209;
        PyObject *tmp_called_value_49;
        PyObject *tmp_expression_value_123;
        PyObject *tmp_args_value_49;
        PyObject *tmp_tuple_element_96;
        PyObject *tmp_kwargs_value_49;
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_expression_value_123 = tmp_class_creation_25__metaclass;
        tmp_called_value_49 = LOOKUP_ATTRIBUTE(tmp_expression_value_123, mod_consts[206]);
        if (tmp_called_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        tmp_tuple_element_96 = mod_consts[329];
        tmp_args_value_49 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_49, 0, tmp_tuple_element_96);
        CHECK_OBJECT(tmp_class_creation_25__bases);
        tmp_tuple_element_96 = tmp_class_creation_25__bases;
        PyTuple_SET_ITEM0(tmp_args_value_49, 1, tmp_tuple_element_96);
        CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
        tmp_kwargs_value_49 = tmp_class_creation_25__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 514;
        tmp_assign_source_209 = CALL_FUNCTION(tmp_called_value_49, tmp_args_value_49, tmp_kwargs_value_49);
        Py_DECREF(tmp_called_value_49);
        Py_DECREF(tmp_args_value_49);
        if (tmp_assign_source_209 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_209;
    }
    {
        bool tmp_condition_result_149;
        PyObject *tmp_operand_value_25;
        PyObject *tmp_expression_value_124;
        CHECK_OBJECT(tmp_class_creation_25__prepared);
        tmp_expression_value_124 = tmp_class_creation_25__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_124, mod_consts[208]);
        tmp_operand_value_25 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_25);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        tmp_condition_result_149 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_149 != false) {
            goto branch_yes_99;
        } else {
            goto branch_no_99;
        }
    }
    branch_yes_99:;
    {
        PyObject *tmp_raise_type_25;
        PyObject *tmp_raise_value_25;
        PyObject *tmp_left_value_25;
        PyObject *tmp_right_value_25;
        PyObject *tmp_tuple_element_97;
        PyObject *tmp_getattr_target_25;
        PyObject *tmp_getattr_attr_25;
        PyObject *tmp_getattr_default_25;
        tmp_raise_type_25 = PyExc_TypeError;
        tmp_left_value_25 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_25__metaclass);
        tmp_getattr_target_25 = tmp_class_creation_25__metaclass;
        tmp_getattr_attr_25 = mod_consts[210];
        tmp_getattr_default_25 = mod_consts[211];
        tmp_tuple_element_97 = BUILTIN_GETATTR(tmp_getattr_target_25, tmp_getattr_attr_25, tmp_getattr_default_25);
        if (tmp_tuple_element_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        tmp_right_value_25 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_125;
            PyObject *tmp_type_arg_50;
            PyTuple_SET_ITEM(tmp_right_value_25, 0, tmp_tuple_element_97);
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_type_arg_50 = tmp_class_creation_25__prepared;
            tmp_expression_value_125 = BUILTIN_TYPE1(tmp_type_arg_50);
            assert(!(tmp_expression_value_125 == NULL));
            tmp_tuple_element_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_125, mod_consts[210]);
            Py_DECREF(tmp_expression_value_125);
            if (tmp_tuple_element_97 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 514;

                goto tuple_build_exception_25;
            }
            PyTuple_SET_ITEM(tmp_right_value_25, 1, tmp_tuple_element_97);
        }
        goto tuple_build_noexception_25;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_25:;
        Py_DECREF(tmp_right_value_25);
        goto try_except_handler_75;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_25:;
        tmp_raise_value_25 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_25, tmp_right_value_25);
        Py_DECREF(tmp_right_value_25);
        if (tmp_raise_value_25 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_75;
        }
        exception_type = tmp_raise_type_25;
        Py_INCREF(tmp_raise_type_25);
        exception_value = tmp_raise_value_25;
        exception_lineno = 514;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_75;
    }
    branch_no_99:;
    goto branch_end_98;
    branch_no_98:;
    {
        PyObject *tmp_assign_source_210;
        tmp_assign_source_210 = PyDict_New();
        assert(tmp_class_creation_25__prepared == NULL);
        tmp_class_creation_25__prepared = tmp_assign_source_210;
    }
    branch_end_98:;
    {
        PyObject *tmp_assign_source_211;
        {
            PyObject *tmp_set_locals_25;
            CHECK_OBJECT(tmp_class_creation_25__prepared);
            tmp_set_locals_25 = tmp_class_creation_25__prepared;
            locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514 = tmp_set_locals_25;
            Py_INCREF(tmp_set_locals_25);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_77;
        }
        tmp_dictset_value = mod_consts[330];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_77;
        }
        tmp_dictset_value = mod_consts[329];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_77;
        }
        if (isFrameUnusable(cache_frame_a2c801938d65272271263b45b7e978ff_26)) {
            Py_XDECREF(cache_frame_a2c801938d65272271263b45b7e978ff_26);

#if _DEBUG_REFCOUNTS
            if (cache_frame_a2c801938d65272271263b45b7e978ff_26 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_a2c801938d65272271263b45b7e978ff_26 = MAKE_FUNCTION_FRAME(codeobj_a2c801938d65272271263b45b7e978ff, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_a2c801938d65272271263b45b7e978ff_26->m_type_description == NULL);
        frame_a2c801938d65272271263b45b7e978ff_26 = cache_frame_a2c801938d65272271263b45b7e978ff_26;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_a2c801938d65272271263b45b7e978ff_26);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_a2c801938d65272271263b45b7e978ff_26) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[331];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 527;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__38___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 529;
            type_description_2 = "o";
            goto frame_exception_exit_26;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a2c801938d65272271263b45b7e978ff_26);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_25;

        frame_exception_exit_26:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_a2c801938d65272271263b45b7e978ff_26);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_a2c801938d65272271263b45b7e978ff_26, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_a2c801938d65272271263b45b7e978ff_26->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_a2c801938d65272271263b45b7e978ff_26, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_a2c801938d65272271263b45b7e978ff_26,
            type_description_2,
            outline_24_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_a2c801938d65272271263b45b7e978ff_26 == cache_frame_a2c801938d65272271263b45b7e978ff_26) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_a2c801938d65272271263b45b7e978ff_26);
            cache_frame_a2c801938d65272271263b45b7e978ff_26 = NULL;
        }

        assertFrameObject(frame_a2c801938d65272271263b45b7e978ff_26);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_25;

        frame_no_exception_25:;
        goto skip_nested_handling_25;
        nested_frame_exit_25:;

        goto try_except_handler_77;
        skip_nested_handling_25:;
        {
            nuitka_bool tmp_condition_result_150;
            PyObject *tmp_cmp_expr_left_25;
            PyObject *tmp_cmp_expr_right_25;
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_cmp_expr_left_25 = tmp_class_creation_25__bases;
            CHECK_OBJECT(tmp_class_creation_25__bases_orig);
            tmp_cmp_expr_right_25 = tmp_class_creation_25__bases_orig;
            tmp_condition_result_150 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_25, tmp_cmp_expr_right_25);
            if (tmp_condition_result_150 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 514;

                goto try_except_handler_77;
            }
            if (tmp_condition_result_150 == NUITKA_BOOL_TRUE) {
                goto branch_yes_100;
            } else {
                goto branch_no_100;
            }
            assert(tmp_condition_result_150 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_100:;
        CHECK_OBJECT(tmp_class_creation_25__bases_orig);
        tmp_dictset_value = tmp_class_creation_25__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 514;

            goto try_except_handler_77;
        }
        branch_no_100:;
        {
            PyObject *tmp_assign_source_212;
            PyObject *tmp_called_value_50;
            PyObject *tmp_args_value_50;
            PyObject *tmp_tuple_element_98;
            PyObject *tmp_kwargs_value_50;
            CHECK_OBJECT(tmp_class_creation_25__metaclass);
            tmp_called_value_50 = tmp_class_creation_25__metaclass;
            tmp_tuple_element_98 = mod_consts[329];
            tmp_args_value_50 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_50, 0, tmp_tuple_element_98);
            CHECK_OBJECT(tmp_class_creation_25__bases);
            tmp_tuple_element_98 = tmp_class_creation_25__bases;
            PyTuple_SET_ITEM0(tmp_args_value_50, 1, tmp_tuple_element_98);
            tmp_tuple_element_98 = locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514;
            PyTuple_SET_ITEM0(tmp_args_value_50, 2, tmp_tuple_element_98);
            CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
            tmp_kwargs_value_50 = tmp_class_creation_25__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 514;
            tmp_assign_source_212 = CALL_FUNCTION(tmp_called_value_50, tmp_args_value_50, tmp_kwargs_value_50);
            Py_DECREF(tmp_args_value_50);
            if (tmp_assign_source_212 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 514;

                goto try_except_handler_77;
            }
            assert(outline_24_var___class__ == NULL);
            outline_24_var___class__ = tmp_assign_source_212;
        }
        CHECK_OBJECT(outline_24_var___class__);
        tmp_assign_source_211 = outline_24_var___class__;
        Py_INCREF(tmp_assign_source_211);
        goto try_return_handler_77;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_77:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514);
        locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514 = NULL;
        goto try_return_handler_76;
        // Exception handler code:
        try_except_handler_77:;
        exception_keeper_type_75 = exception_type;
        exception_keeper_value_75 = exception_value;
        exception_keeper_tb_75 = exception_tb;
        exception_keeper_lineno_75 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514);
        locals_xlwt$BIFFRecords$$$class__25_DateModeRecord_514 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_75;
        exception_value = exception_keeper_value_75;
        exception_tb = exception_keeper_tb_75;
        exception_lineno = exception_keeper_lineno_75;

        goto try_except_handler_76;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_76:;
        CHECK_OBJECT(outline_24_var___class__);
        Py_DECREF(outline_24_var___class__);
        outline_24_var___class__ = NULL;
        goto outline_result_25;
        // Exception handler code:
        try_except_handler_76:;
        exception_keeper_type_76 = exception_type;
        exception_keeper_value_76 = exception_value;
        exception_keeper_tb_76 = exception_tb;
        exception_keeper_lineno_76 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_76;
        exception_value = exception_keeper_value_76;
        exception_tb = exception_keeper_tb_76;
        exception_lineno = exception_keeper_lineno_76;

        goto outline_exception_25;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_25:;
        exception_lineno = 514;
        goto try_except_handler_75;
        outline_result_25:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[329], tmp_assign_source_211);
    }
    goto try_end_27;
    // Exception handler code:
    try_except_handler_75:;
    exception_keeper_type_77 = exception_type;
    exception_keeper_value_77 = exception_value;
    exception_keeper_tb_77 = exception_tb;
    exception_keeper_lineno_77 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    Py_XDECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_77;
    exception_value = exception_keeper_value_77;
    exception_tb = exception_keeper_tb_77;
    exception_lineno = exception_keeper_lineno_77;

    goto frame_exception_exit_1;
    // End of try:
    try_end_27:;
    CHECK_OBJECT(tmp_class_creation_25__bases_orig);
    Py_DECREF(tmp_class_creation_25__bases_orig);
    tmp_class_creation_25__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_25__bases);
    Py_DECREF(tmp_class_creation_25__bases);
    tmp_class_creation_25__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_25__class_decl_dict);
    Py_DECREF(tmp_class_creation_25__class_decl_dict);
    tmp_class_creation_25__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_25__metaclass);
    Py_DECREF(tmp_class_creation_25__metaclass);
    tmp_class_creation_25__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_25__prepared);
    Py_DECREF(tmp_class_creation_25__prepared);
    tmp_class_creation_25__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_213;
        PyObject *tmp_tuple_element_99;
        tmp_tuple_element_99 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_99 == NULL)) {
            tmp_tuple_element_99 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        tmp_assign_source_213 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_213, 0, tmp_tuple_element_99);
        assert(tmp_class_creation_26__bases_orig == NULL);
        tmp_class_creation_26__bases_orig = tmp_assign_source_213;
    }
    {
        PyObject *tmp_assign_source_214;
        PyObject *tmp_dircall_arg1_26;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dircall_arg1_26 = tmp_class_creation_26__bases_orig;
        Py_INCREF(tmp_dircall_arg1_26);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_26};
            tmp_assign_source_214 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_214 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        assert(tmp_class_creation_26__bases == NULL);
        tmp_class_creation_26__bases = tmp_assign_source_214;
    }
    {
        PyObject *tmp_assign_source_215;
        tmp_assign_source_215 = PyDict_New();
        assert(tmp_class_creation_26__class_decl_dict == NULL);
        tmp_class_creation_26__class_decl_dict = tmp_assign_source_215;
    }
    {
        PyObject *tmp_assign_source_216;
        PyObject *tmp_metaclass_value_26;
        bool tmp_condition_result_151;
        PyObject *tmp_key_value_76;
        PyObject *tmp_dict_arg_value_76;
        PyObject *tmp_dict_arg_value_77;
        PyObject *tmp_key_value_77;
        nuitka_bool tmp_condition_result_152;
        int tmp_truth_name_26;
        PyObject *tmp_type_arg_51;
        PyObject *tmp_expression_value_126;
        PyObject *tmp_subscript_value_26;
        PyObject *tmp_bases_value_26;
        tmp_key_value_76 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_76 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_76, tmp_key_value_76);
        assert(!(tmp_res == -1));
        tmp_condition_result_151 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_151 != false) {
            goto condexpr_true_51;
        } else {
            goto condexpr_false_51;
        }
        condexpr_true_51:;
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_77 = tmp_class_creation_26__class_decl_dict;
        tmp_key_value_77 = mod_consts[205];
        tmp_metaclass_value_26 = DICT_GET_ITEM0(tmp_dict_arg_value_77, tmp_key_value_77);
        if (tmp_metaclass_value_26 == NULL) {
            tmp_metaclass_value_26 = Py_None;
        }
        assert(!(tmp_metaclass_value_26 == NULL));
        Py_INCREF(tmp_metaclass_value_26);
        goto condexpr_end_51;
        condexpr_false_51:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_truth_name_26 = CHECK_IF_TRUE(tmp_class_creation_26__bases);
        if (tmp_truth_name_26 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        tmp_condition_result_152 = tmp_truth_name_26 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_152 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_52;
        } else {
            goto condexpr_false_52;
        }
        condexpr_true_52:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_expression_value_126 = tmp_class_creation_26__bases;
        tmp_subscript_value_26 = mod_consts[4];
        tmp_type_arg_51 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_126, tmp_subscript_value_26, 0);
        if (tmp_type_arg_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        tmp_metaclass_value_26 = BUILTIN_TYPE1(tmp_type_arg_51);
        Py_DECREF(tmp_type_arg_51);
        if (tmp_metaclass_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        goto condexpr_end_52;
        condexpr_false_52:;
        tmp_metaclass_value_26 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_26);
        condexpr_end_52:;
        condexpr_end_51:;
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_bases_value_26 = tmp_class_creation_26__bases;
        tmp_assign_source_216 = SELECT_METACLASS(tmp_metaclass_value_26, tmp_bases_value_26);
        Py_DECREF(tmp_metaclass_value_26);
        if (tmp_assign_source_216 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        assert(tmp_class_creation_26__metaclass == NULL);
        tmp_class_creation_26__metaclass = tmp_assign_source_216;
    }
    {
        bool tmp_condition_result_153;
        PyObject *tmp_key_value_78;
        PyObject *tmp_dict_arg_value_78;
        tmp_key_value_78 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_dict_arg_value_78 = tmp_class_creation_26__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_78, tmp_key_value_78);
        assert(!(tmp_res == -1));
        tmp_condition_result_153 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_153 != false) {
            goto branch_yes_101;
        } else {
            goto branch_no_101;
        }
    }
    branch_yes_101:;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_26__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 536;

        goto try_except_handler_78;
    }
    branch_no_101:;
    {
        nuitka_bool tmp_condition_result_154;
        PyObject *tmp_expression_value_127;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_127 = tmp_class_creation_26__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_127, mod_consts[206]);
        tmp_condition_result_154 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_154 == NUITKA_BOOL_TRUE) {
            goto branch_yes_102;
        } else {
            goto branch_no_102;
        }
    }
    branch_yes_102:;
    {
        PyObject *tmp_assign_source_217;
        PyObject *tmp_called_value_51;
        PyObject *tmp_expression_value_128;
        PyObject *tmp_args_value_51;
        PyObject *tmp_tuple_element_100;
        PyObject *tmp_kwargs_value_51;
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_expression_value_128 = tmp_class_creation_26__metaclass;
        tmp_called_value_51 = LOOKUP_ATTRIBUTE(tmp_expression_value_128, mod_consts[206]);
        if (tmp_called_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        tmp_tuple_element_100 = mod_consts[333];
        tmp_args_value_51 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_51, 0, tmp_tuple_element_100);
        CHECK_OBJECT(tmp_class_creation_26__bases);
        tmp_tuple_element_100 = tmp_class_creation_26__bases;
        PyTuple_SET_ITEM0(tmp_args_value_51, 1, tmp_tuple_element_100);
        CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
        tmp_kwargs_value_51 = tmp_class_creation_26__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 536;
        tmp_assign_source_217 = CALL_FUNCTION(tmp_called_value_51, tmp_args_value_51, tmp_kwargs_value_51);
        Py_DECREF(tmp_called_value_51);
        Py_DECREF(tmp_args_value_51);
        if (tmp_assign_source_217 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_217;
    }
    {
        bool tmp_condition_result_155;
        PyObject *tmp_operand_value_26;
        PyObject *tmp_expression_value_129;
        CHECK_OBJECT(tmp_class_creation_26__prepared);
        tmp_expression_value_129 = tmp_class_creation_26__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_129, mod_consts[208]);
        tmp_operand_value_26 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_26);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        tmp_condition_result_155 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_155 != false) {
            goto branch_yes_103;
        } else {
            goto branch_no_103;
        }
    }
    branch_yes_103:;
    {
        PyObject *tmp_raise_type_26;
        PyObject *tmp_raise_value_26;
        PyObject *tmp_left_value_26;
        PyObject *tmp_right_value_26;
        PyObject *tmp_tuple_element_101;
        PyObject *tmp_getattr_target_26;
        PyObject *tmp_getattr_attr_26;
        PyObject *tmp_getattr_default_26;
        tmp_raise_type_26 = PyExc_TypeError;
        tmp_left_value_26 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_26__metaclass);
        tmp_getattr_target_26 = tmp_class_creation_26__metaclass;
        tmp_getattr_attr_26 = mod_consts[210];
        tmp_getattr_default_26 = mod_consts[211];
        tmp_tuple_element_101 = BUILTIN_GETATTR(tmp_getattr_target_26, tmp_getattr_attr_26, tmp_getattr_default_26);
        if (tmp_tuple_element_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        tmp_right_value_26 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_130;
            PyObject *tmp_type_arg_52;
            PyTuple_SET_ITEM(tmp_right_value_26, 0, tmp_tuple_element_101);
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_type_arg_52 = tmp_class_creation_26__prepared;
            tmp_expression_value_130 = BUILTIN_TYPE1(tmp_type_arg_52);
            assert(!(tmp_expression_value_130 == NULL));
            tmp_tuple_element_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_130, mod_consts[210]);
            Py_DECREF(tmp_expression_value_130);
            if (tmp_tuple_element_101 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 536;

                goto tuple_build_exception_26;
            }
            PyTuple_SET_ITEM(tmp_right_value_26, 1, tmp_tuple_element_101);
        }
        goto tuple_build_noexception_26;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_26:;
        Py_DECREF(tmp_right_value_26);
        goto try_except_handler_78;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_26:;
        tmp_raise_value_26 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_26, tmp_right_value_26);
        Py_DECREF(tmp_right_value_26);
        if (tmp_raise_value_26 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_78;
        }
        exception_type = tmp_raise_type_26;
        Py_INCREF(tmp_raise_type_26);
        exception_value = tmp_raise_value_26;
        exception_lineno = 536;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_78;
    }
    branch_no_103:;
    goto branch_end_102;
    branch_no_102:;
    {
        PyObject *tmp_assign_source_218;
        tmp_assign_source_218 = PyDict_New();
        assert(tmp_class_creation_26__prepared == NULL);
        tmp_class_creation_26__prepared = tmp_assign_source_218;
    }
    branch_end_102:;
    {
        PyObject *tmp_assign_source_219;
        {
            PyObject *tmp_set_locals_26;
            CHECK_OBJECT(tmp_class_creation_26__prepared);
            tmp_set_locals_26 = tmp_class_creation_26__prepared;
            locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536 = tmp_set_locals_26;
            Py_INCREF(tmp_set_locals_26);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_80;
        }
        tmp_dictset_value = mod_consts[334];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_80;
        }
        tmp_dictset_value = mod_consts[333];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_80;
        }
        if (isFrameUnusable(cache_frame_4dd76817f64931cc19522cf900f29b3d_27)) {
            Py_XDECREF(cache_frame_4dd76817f64931cc19522cf900f29b3d_27);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4dd76817f64931cc19522cf900f29b3d_27 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4dd76817f64931cc19522cf900f29b3d_27 = MAKE_FUNCTION_FRAME(codeobj_4dd76817f64931cc19522cf900f29b3d, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4dd76817f64931cc19522cf900f29b3d_27->m_type_description == NULL);
        frame_4dd76817f64931cc19522cf900f29b3d_27 = cache_frame_4dd76817f64931cc19522cf900f29b3d_27;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4dd76817f64931cc19522cf900f29b3d_27);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4dd76817f64931cc19522cf900f29b3d_27) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[130];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 549;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__39___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 551;
            type_description_2 = "o";
            goto frame_exception_exit_27;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4dd76817f64931cc19522cf900f29b3d_27);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_26;

        frame_exception_exit_27:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4dd76817f64931cc19522cf900f29b3d_27);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4dd76817f64931cc19522cf900f29b3d_27, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4dd76817f64931cc19522cf900f29b3d_27->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4dd76817f64931cc19522cf900f29b3d_27, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4dd76817f64931cc19522cf900f29b3d_27,
            type_description_2,
            outline_25_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4dd76817f64931cc19522cf900f29b3d_27 == cache_frame_4dd76817f64931cc19522cf900f29b3d_27) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4dd76817f64931cc19522cf900f29b3d_27);
            cache_frame_4dd76817f64931cc19522cf900f29b3d_27 = NULL;
        }

        assertFrameObject(frame_4dd76817f64931cc19522cf900f29b3d_27);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_26;

        frame_no_exception_26:;
        goto skip_nested_handling_26;
        nested_frame_exit_26:;

        goto try_except_handler_80;
        skip_nested_handling_26:;
        {
            nuitka_bool tmp_condition_result_156;
            PyObject *tmp_cmp_expr_left_26;
            PyObject *tmp_cmp_expr_right_26;
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_cmp_expr_left_26 = tmp_class_creation_26__bases;
            CHECK_OBJECT(tmp_class_creation_26__bases_orig);
            tmp_cmp_expr_right_26 = tmp_class_creation_26__bases_orig;
            tmp_condition_result_156 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_26, tmp_cmp_expr_right_26);
            if (tmp_condition_result_156 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 536;

                goto try_except_handler_80;
            }
            if (tmp_condition_result_156 == NUITKA_BOOL_TRUE) {
                goto branch_yes_104;
            } else {
                goto branch_no_104;
            }
            assert(tmp_condition_result_156 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_104:;
        CHECK_OBJECT(tmp_class_creation_26__bases_orig);
        tmp_dictset_value = tmp_class_creation_26__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 536;

            goto try_except_handler_80;
        }
        branch_no_104:;
        {
            PyObject *tmp_assign_source_220;
            PyObject *tmp_called_value_52;
            PyObject *tmp_args_value_52;
            PyObject *tmp_tuple_element_102;
            PyObject *tmp_kwargs_value_52;
            CHECK_OBJECT(tmp_class_creation_26__metaclass);
            tmp_called_value_52 = tmp_class_creation_26__metaclass;
            tmp_tuple_element_102 = mod_consts[333];
            tmp_args_value_52 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_52, 0, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_26__bases);
            tmp_tuple_element_102 = tmp_class_creation_26__bases;
            PyTuple_SET_ITEM0(tmp_args_value_52, 1, tmp_tuple_element_102);
            tmp_tuple_element_102 = locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536;
            PyTuple_SET_ITEM0(tmp_args_value_52, 2, tmp_tuple_element_102);
            CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
            tmp_kwargs_value_52 = tmp_class_creation_26__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 536;
            tmp_assign_source_220 = CALL_FUNCTION(tmp_called_value_52, tmp_args_value_52, tmp_kwargs_value_52);
            Py_DECREF(tmp_args_value_52);
            if (tmp_assign_source_220 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 536;

                goto try_except_handler_80;
            }
            assert(outline_25_var___class__ == NULL);
            outline_25_var___class__ = tmp_assign_source_220;
        }
        CHECK_OBJECT(outline_25_var___class__);
        tmp_assign_source_219 = outline_25_var___class__;
        Py_INCREF(tmp_assign_source_219);
        goto try_return_handler_80;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_80:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536);
        locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536 = NULL;
        goto try_return_handler_79;
        // Exception handler code:
        try_except_handler_80:;
        exception_keeper_type_78 = exception_type;
        exception_keeper_value_78 = exception_value;
        exception_keeper_tb_78 = exception_tb;
        exception_keeper_lineno_78 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536);
        locals_xlwt$BIFFRecords$$$class__26_PrecisionRecord_536 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_78;
        exception_value = exception_keeper_value_78;
        exception_tb = exception_keeper_tb_78;
        exception_lineno = exception_keeper_lineno_78;

        goto try_except_handler_79;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_79:;
        CHECK_OBJECT(outline_25_var___class__);
        Py_DECREF(outline_25_var___class__);
        outline_25_var___class__ = NULL;
        goto outline_result_26;
        // Exception handler code:
        try_except_handler_79:;
        exception_keeper_type_79 = exception_type;
        exception_keeper_value_79 = exception_value;
        exception_keeper_tb_79 = exception_tb;
        exception_keeper_lineno_79 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_79;
        exception_value = exception_keeper_value_79;
        exception_tb = exception_keeper_tb_79;
        exception_lineno = exception_keeper_lineno_79;

        goto outline_exception_26;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_26:;
        exception_lineno = 536;
        goto try_except_handler_78;
        outline_result_26:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[333], tmp_assign_source_219);
    }
    goto try_end_28;
    // Exception handler code:
    try_except_handler_78:;
    exception_keeper_type_80 = exception_type;
    exception_keeper_value_80 = exception_value;
    exception_keeper_tb_80 = exception_tb;
    exception_keeper_lineno_80 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    Py_XDECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_80;
    exception_value = exception_keeper_value_80;
    exception_tb = exception_keeper_tb_80;
    exception_lineno = exception_keeper_lineno_80;

    goto frame_exception_exit_1;
    // End of try:
    try_end_28:;
    CHECK_OBJECT(tmp_class_creation_26__bases_orig);
    Py_DECREF(tmp_class_creation_26__bases_orig);
    tmp_class_creation_26__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_26__bases);
    Py_DECREF(tmp_class_creation_26__bases);
    tmp_class_creation_26__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_26__class_decl_dict);
    Py_DECREF(tmp_class_creation_26__class_decl_dict);
    tmp_class_creation_26__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_26__metaclass);
    Py_DECREF(tmp_class_creation_26__metaclass);
    tmp_class_creation_26__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_26__prepared);
    Py_DECREF(tmp_class_creation_26__prepared);
    tmp_class_creation_26__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_221;
        PyObject *tmp_tuple_element_103;
        tmp_tuple_element_103 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_103 == NULL)) {
            tmp_tuple_element_103 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        tmp_assign_source_221 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_221, 0, tmp_tuple_element_103);
        assert(tmp_class_creation_27__bases_orig == NULL);
        tmp_class_creation_27__bases_orig = tmp_assign_source_221;
    }
    {
        PyObject *tmp_assign_source_222;
        PyObject *tmp_dircall_arg1_27;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dircall_arg1_27 = tmp_class_creation_27__bases_orig;
        Py_INCREF(tmp_dircall_arg1_27);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_27};
            tmp_assign_source_222 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_222 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_27__bases == NULL);
        tmp_class_creation_27__bases = tmp_assign_source_222;
    }
    {
        PyObject *tmp_assign_source_223;
        tmp_assign_source_223 = PyDict_New();
        assert(tmp_class_creation_27__class_decl_dict == NULL);
        tmp_class_creation_27__class_decl_dict = tmp_assign_source_223;
    }
    {
        PyObject *tmp_assign_source_224;
        PyObject *tmp_metaclass_value_27;
        bool tmp_condition_result_157;
        PyObject *tmp_key_value_79;
        PyObject *tmp_dict_arg_value_79;
        PyObject *tmp_dict_arg_value_80;
        PyObject *tmp_key_value_80;
        nuitka_bool tmp_condition_result_158;
        int tmp_truth_name_27;
        PyObject *tmp_type_arg_53;
        PyObject *tmp_expression_value_131;
        PyObject *tmp_subscript_value_27;
        PyObject *tmp_bases_value_27;
        tmp_key_value_79 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_79 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_79, tmp_key_value_79);
        assert(!(tmp_res == -1));
        tmp_condition_result_157 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_157 != false) {
            goto condexpr_true_53;
        } else {
            goto condexpr_false_53;
        }
        condexpr_true_53:;
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_80 = tmp_class_creation_27__class_decl_dict;
        tmp_key_value_80 = mod_consts[205];
        tmp_metaclass_value_27 = DICT_GET_ITEM0(tmp_dict_arg_value_80, tmp_key_value_80);
        if (tmp_metaclass_value_27 == NULL) {
            tmp_metaclass_value_27 = Py_None;
        }
        assert(!(tmp_metaclass_value_27 == NULL));
        Py_INCREF(tmp_metaclass_value_27);
        goto condexpr_end_53;
        condexpr_false_53:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_truth_name_27 = CHECK_IF_TRUE(tmp_class_creation_27__bases);
        if (tmp_truth_name_27 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        tmp_condition_result_158 = tmp_truth_name_27 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_158 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_54;
        } else {
            goto condexpr_false_54;
        }
        condexpr_true_54:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_expression_value_131 = tmp_class_creation_27__bases;
        tmp_subscript_value_27 = mod_consts[4];
        tmp_type_arg_53 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_131, tmp_subscript_value_27, 0);
        if (tmp_type_arg_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        tmp_metaclass_value_27 = BUILTIN_TYPE1(tmp_type_arg_53);
        Py_DECREF(tmp_type_arg_53);
        if (tmp_metaclass_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        goto condexpr_end_54;
        condexpr_false_54:;
        tmp_metaclass_value_27 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_27);
        condexpr_end_54:;
        condexpr_end_53:;
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_bases_value_27 = tmp_class_creation_27__bases;
        tmp_assign_source_224 = SELECT_METACLASS(tmp_metaclass_value_27, tmp_bases_value_27);
        Py_DECREF(tmp_metaclass_value_27);
        if (tmp_assign_source_224 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_27__metaclass == NULL);
        tmp_class_creation_27__metaclass = tmp_assign_source_224;
    }
    {
        bool tmp_condition_result_159;
        PyObject *tmp_key_value_81;
        PyObject *tmp_dict_arg_value_81;
        tmp_key_value_81 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_dict_arg_value_81 = tmp_class_creation_27__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_81, tmp_key_value_81);
        assert(!(tmp_res == -1));
        tmp_condition_result_159 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_159 != false) {
            goto branch_yes_105;
        } else {
            goto branch_no_105;
        }
    }
    branch_yes_105:;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_27__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 558;

        goto try_except_handler_81;
    }
    branch_no_105:;
    {
        nuitka_bool tmp_condition_result_160;
        PyObject *tmp_expression_value_132;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_132 = tmp_class_creation_27__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_132, mod_consts[206]);
        tmp_condition_result_160 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_160 == NUITKA_BOOL_TRUE) {
            goto branch_yes_106;
        } else {
            goto branch_no_106;
        }
    }
    branch_yes_106:;
    {
        PyObject *tmp_assign_source_225;
        PyObject *tmp_called_value_53;
        PyObject *tmp_expression_value_133;
        PyObject *tmp_args_value_53;
        PyObject *tmp_tuple_element_104;
        PyObject *tmp_kwargs_value_53;
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_expression_value_133 = tmp_class_creation_27__metaclass;
        tmp_called_value_53 = LOOKUP_ATTRIBUTE(tmp_expression_value_133, mod_consts[206]);
        if (tmp_called_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        tmp_tuple_element_104 = mod_consts[336];
        tmp_args_value_53 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_53, 0, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_27__bases);
        tmp_tuple_element_104 = tmp_class_creation_27__bases;
        PyTuple_SET_ITEM0(tmp_args_value_53, 1, tmp_tuple_element_104);
        CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
        tmp_kwargs_value_53 = tmp_class_creation_27__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 558;
        tmp_assign_source_225 = CALL_FUNCTION(tmp_called_value_53, tmp_args_value_53, tmp_kwargs_value_53);
        Py_DECREF(tmp_called_value_53);
        Py_DECREF(tmp_args_value_53);
        if (tmp_assign_source_225 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_225;
    }
    {
        bool tmp_condition_result_161;
        PyObject *tmp_operand_value_27;
        PyObject *tmp_expression_value_134;
        CHECK_OBJECT(tmp_class_creation_27__prepared);
        tmp_expression_value_134 = tmp_class_creation_27__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_134, mod_consts[208]);
        tmp_operand_value_27 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_27);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        tmp_condition_result_161 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_161 != false) {
            goto branch_yes_107;
        } else {
            goto branch_no_107;
        }
    }
    branch_yes_107:;
    {
        PyObject *tmp_raise_type_27;
        PyObject *tmp_raise_value_27;
        PyObject *tmp_left_value_27;
        PyObject *tmp_right_value_27;
        PyObject *tmp_tuple_element_105;
        PyObject *tmp_getattr_target_27;
        PyObject *tmp_getattr_attr_27;
        PyObject *tmp_getattr_default_27;
        tmp_raise_type_27 = PyExc_TypeError;
        tmp_left_value_27 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_27__metaclass);
        tmp_getattr_target_27 = tmp_class_creation_27__metaclass;
        tmp_getattr_attr_27 = mod_consts[210];
        tmp_getattr_default_27 = mod_consts[211];
        tmp_tuple_element_105 = BUILTIN_GETATTR(tmp_getattr_target_27, tmp_getattr_attr_27, tmp_getattr_default_27);
        if (tmp_tuple_element_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        tmp_right_value_27 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_135;
            PyObject *tmp_type_arg_54;
            PyTuple_SET_ITEM(tmp_right_value_27, 0, tmp_tuple_element_105);
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_type_arg_54 = tmp_class_creation_27__prepared;
            tmp_expression_value_135 = BUILTIN_TYPE1(tmp_type_arg_54);
            assert(!(tmp_expression_value_135 == NULL));
            tmp_tuple_element_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_135, mod_consts[210]);
            Py_DECREF(tmp_expression_value_135);
            if (tmp_tuple_element_105 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;

                goto tuple_build_exception_27;
            }
            PyTuple_SET_ITEM(tmp_right_value_27, 1, tmp_tuple_element_105);
        }
        goto tuple_build_noexception_27;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_27:;
        Py_DECREF(tmp_right_value_27);
        goto try_except_handler_81;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_27:;
        tmp_raise_value_27 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_27, tmp_right_value_27);
        Py_DECREF(tmp_right_value_27);
        if (tmp_raise_value_27 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_81;
        }
        exception_type = tmp_raise_type_27;
        Py_INCREF(tmp_raise_type_27);
        exception_value = tmp_raise_value_27;
        exception_lineno = 558;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_81;
    }
    branch_no_107:;
    goto branch_end_106;
    branch_no_106:;
    {
        PyObject *tmp_assign_source_226;
        tmp_assign_source_226 = PyDict_New();
        assert(tmp_class_creation_27__prepared == NULL);
        tmp_class_creation_27__prepared = tmp_assign_source_226;
    }
    branch_end_106:;
    {
        PyObject *tmp_assign_source_227;
        {
            PyObject *tmp_set_locals_27;
            CHECK_OBJECT(tmp_class_creation_27__prepared);
            tmp_set_locals_27 = tmp_class_creation_27__prepared;
            locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558 = tmp_set_locals_27;
            Py_INCREF(tmp_set_locals_27);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_83;
        }
        tmp_dictset_value = mod_consts[337];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_83;
        }
        tmp_dictset_value = mod_consts[336];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_83;
        }
        if (isFrameUnusable(cache_frame_4ae7df40eff3fded78999a10de4f37af_28)) {
            Py_XDECREF(cache_frame_4ae7df40eff3fded78999a10de4f37af_28);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4ae7df40eff3fded78999a10de4f37af_28 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4ae7df40eff3fded78999a10de4f37af_28 = MAKE_FUNCTION_FRAME(codeobj_4ae7df40eff3fded78999a10de4f37af, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4ae7df40eff3fded78999a10de4f37af_28->m_type_description == NULL);
        frame_4ae7df40eff3fded78999a10de4f37af_28 = cache_frame_4ae7df40eff3fded78999a10de4f37af_28;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4ae7df40eff3fded78999a10de4f37af_28);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4ae7df40eff3fded78999a10de4f37af_28) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[338];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 608;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }
        tmp_dictset_value = mod_consts[339];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558, mod_consts[87], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 609;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__40___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 611;
            type_description_2 = "o";
            goto frame_exception_exit_28;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4ae7df40eff3fded78999a10de4f37af_28);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_27;

        frame_exception_exit_28:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4ae7df40eff3fded78999a10de4f37af_28);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4ae7df40eff3fded78999a10de4f37af_28, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4ae7df40eff3fded78999a10de4f37af_28->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4ae7df40eff3fded78999a10de4f37af_28, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4ae7df40eff3fded78999a10de4f37af_28,
            type_description_2,
            outline_26_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4ae7df40eff3fded78999a10de4f37af_28 == cache_frame_4ae7df40eff3fded78999a10de4f37af_28) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4ae7df40eff3fded78999a10de4f37af_28);
            cache_frame_4ae7df40eff3fded78999a10de4f37af_28 = NULL;
        }

        assertFrameObject(frame_4ae7df40eff3fded78999a10de4f37af_28);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_27;

        frame_no_exception_27:;
        goto skip_nested_handling_27;
        nested_frame_exit_27:;

        goto try_except_handler_83;
        skip_nested_handling_27:;
        {
            nuitka_bool tmp_condition_result_162;
            PyObject *tmp_cmp_expr_left_27;
            PyObject *tmp_cmp_expr_right_27;
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_cmp_expr_left_27 = tmp_class_creation_27__bases;
            CHECK_OBJECT(tmp_class_creation_27__bases_orig);
            tmp_cmp_expr_right_27 = tmp_class_creation_27__bases_orig;
            tmp_condition_result_162 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_27, tmp_cmp_expr_right_27);
            if (tmp_condition_result_162 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;

                goto try_except_handler_83;
            }
            if (tmp_condition_result_162 == NUITKA_BOOL_TRUE) {
                goto branch_yes_108;
            } else {
                goto branch_no_108;
            }
            assert(tmp_condition_result_162 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_108:;
        CHECK_OBJECT(tmp_class_creation_27__bases_orig);
        tmp_dictset_value = tmp_class_creation_27__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 558;

            goto try_except_handler_83;
        }
        branch_no_108:;
        {
            PyObject *tmp_assign_source_228;
            PyObject *tmp_called_value_54;
            PyObject *tmp_args_value_54;
            PyObject *tmp_tuple_element_106;
            PyObject *tmp_kwargs_value_54;
            CHECK_OBJECT(tmp_class_creation_27__metaclass);
            tmp_called_value_54 = tmp_class_creation_27__metaclass;
            tmp_tuple_element_106 = mod_consts[336];
            tmp_args_value_54 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_54, 0, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_class_creation_27__bases);
            tmp_tuple_element_106 = tmp_class_creation_27__bases;
            PyTuple_SET_ITEM0(tmp_args_value_54, 1, tmp_tuple_element_106);
            tmp_tuple_element_106 = locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558;
            PyTuple_SET_ITEM0(tmp_args_value_54, 2, tmp_tuple_element_106);
            CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
            tmp_kwargs_value_54 = tmp_class_creation_27__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 558;
            tmp_assign_source_228 = CALL_FUNCTION(tmp_called_value_54, tmp_args_value_54, tmp_kwargs_value_54);
            Py_DECREF(tmp_args_value_54);
            if (tmp_assign_source_228 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 558;

                goto try_except_handler_83;
            }
            assert(outline_26_var___class__ == NULL);
            outline_26_var___class__ = tmp_assign_source_228;
        }
        CHECK_OBJECT(outline_26_var___class__);
        tmp_assign_source_227 = outline_26_var___class__;
        Py_INCREF(tmp_assign_source_227);
        goto try_return_handler_83;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_83:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558);
        locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558 = NULL;
        goto try_return_handler_82;
        // Exception handler code:
        try_except_handler_83:;
        exception_keeper_type_81 = exception_type;
        exception_keeper_value_81 = exception_value;
        exception_keeper_tb_81 = exception_tb;
        exception_keeper_lineno_81 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558);
        locals_xlwt$BIFFRecords$$$class__27_CodepageBiff8Record_558 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_81;
        exception_value = exception_keeper_value_81;
        exception_tb = exception_keeper_tb_81;
        exception_lineno = exception_keeper_lineno_81;

        goto try_except_handler_82;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_82:;
        CHECK_OBJECT(outline_26_var___class__);
        Py_DECREF(outline_26_var___class__);
        outline_26_var___class__ = NULL;
        goto outline_result_27;
        // Exception handler code:
        try_except_handler_82:;
        exception_keeper_type_82 = exception_type;
        exception_keeper_value_82 = exception_value;
        exception_keeper_tb_82 = exception_tb;
        exception_keeper_lineno_82 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_82;
        exception_value = exception_keeper_value_82;
        exception_tb = exception_keeper_tb_82;
        exception_lineno = exception_keeper_lineno_82;

        goto outline_exception_27;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_27:;
        exception_lineno = 558;
        goto try_except_handler_81;
        outline_result_27:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[336], tmp_assign_source_227);
    }
    goto try_end_29;
    // Exception handler code:
    try_except_handler_81:;
    exception_keeper_type_83 = exception_type;
    exception_keeper_value_83 = exception_value;
    exception_keeper_tb_83 = exception_tb;
    exception_keeper_lineno_83 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    Py_XDECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_83;
    exception_value = exception_keeper_value_83;
    exception_tb = exception_keeper_tb_83;
    exception_lineno = exception_keeper_lineno_83;

    goto frame_exception_exit_1;
    // End of try:
    try_end_29:;
    CHECK_OBJECT(tmp_class_creation_27__bases_orig);
    Py_DECREF(tmp_class_creation_27__bases_orig);
    tmp_class_creation_27__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_27__bases);
    Py_DECREF(tmp_class_creation_27__bases);
    tmp_class_creation_27__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_27__class_decl_dict);
    Py_DECREF(tmp_class_creation_27__class_decl_dict);
    tmp_class_creation_27__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_27__metaclass);
    Py_DECREF(tmp_class_creation_27__metaclass);
    tmp_class_creation_27__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_27__prepared);
    Py_DECREF(tmp_class_creation_27__prepared);
    tmp_class_creation_27__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_229;
        PyObject *tmp_tuple_element_107;
        tmp_tuple_element_107 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_107 == NULL)) {
            tmp_tuple_element_107 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        tmp_assign_source_229 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_229, 0, tmp_tuple_element_107);
        assert(tmp_class_creation_28__bases_orig == NULL);
        tmp_class_creation_28__bases_orig = tmp_assign_source_229;
    }
    {
        PyObject *tmp_assign_source_230;
        PyObject *tmp_dircall_arg1_28;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dircall_arg1_28 = tmp_class_creation_28__bases_orig;
        Py_INCREF(tmp_dircall_arg1_28);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_28};
            tmp_assign_source_230 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_230 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        assert(tmp_class_creation_28__bases == NULL);
        tmp_class_creation_28__bases = tmp_assign_source_230;
    }
    {
        PyObject *tmp_assign_source_231;
        tmp_assign_source_231 = PyDict_New();
        assert(tmp_class_creation_28__class_decl_dict == NULL);
        tmp_class_creation_28__class_decl_dict = tmp_assign_source_231;
    }
    {
        PyObject *tmp_assign_source_232;
        PyObject *tmp_metaclass_value_28;
        bool tmp_condition_result_163;
        PyObject *tmp_key_value_82;
        PyObject *tmp_dict_arg_value_82;
        PyObject *tmp_dict_arg_value_83;
        PyObject *tmp_key_value_83;
        nuitka_bool tmp_condition_result_164;
        int tmp_truth_name_28;
        PyObject *tmp_type_arg_55;
        PyObject *tmp_expression_value_136;
        PyObject *tmp_subscript_value_28;
        PyObject *tmp_bases_value_28;
        tmp_key_value_82 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_82 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_82, tmp_key_value_82);
        assert(!(tmp_res == -1));
        tmp_condition_result_163 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_163 != false) {
            goto condexpr_true_55;
        } else {
            goto condexpr_false_55;
        }
        condexpr_true_55:;
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_83 = tmp_class_creation_28__class_decl_dict;
        tmp_key_value_83 = mod_consts[205];
        tmp_metaclass_value_28 = DICT_GET_ITEM0(tmp_dict_arg_value_83, tmp_key_value_83);
        if (tmp_metaclass_value_28 == NULL) {
            tmp_metaclass_value_28 = Py_None;
        }
        assert(!(tmp_metaclass_value_28 == NULL));
        Py_INCREF(tmp_metaclass_value_28);
        goto condexpr_end_55;
        condexpr_false_55:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_truth_name_28 = CHECK_IF_TRUE(tmp_class_creation_28__bases);
        if (tmp_truth_name_28 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        tmp_condition_result_164 = tmp_truth_name_28 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_164 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_56;
        } else {
            goto condexpr_false_56;
        }
        condexpr_true_56:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_expression_value_136 = tmp_class_creation_28__bases;
        tmp_subscript_value_28 = mod_consts[4];
        tmp_type_arg_55 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_136, tmp_subscript_value_28, 0);
        if (tmp_type_arg_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        tmp_metaclass_value_28 = BUILTIN_TYPE1(tmp_type_arg_55);
        Py_DECREF(tmp_type_arg_55);
        if (tmp_metaclass_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        goto condexpr_end_56;
        condexpr_false_56:;
        tmp_metaclass_value_28 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_28);
        condexpr_end_56:;
        condexpr_end_55:;
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_bases_value_28 = tmp_class_creation_28__bases;
        tmp_assign_source_232 = SELECT_METACLASS(tmp_metaclass_value_28, tmp_bases_value_28);
        Py_DECREF(tmp_metaclass_value_28);
        if (tmp_assign_source_232 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        assert(tmp_class_creation_28__metaclass == NULL);
        tmp_class_creation_28__metaclass = tmp_assign_source_232;
    }
    {
        bool tmp_condition_result_165;
        PyObject *tmp_key_value_84;
        PyObject *tmp_dict_arg_value_84;
        tmp_key_value_84 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_dict_arg_value_84 = tmp_class_creation_28__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_84, tmp_key_value_84);
        assert(!(tmp_res == -1));
        tmp_condition_result_165 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_165 != false) {
            goto branch_yes_109;
        } else {
            goto branch_no_109;
        }
    }
    branch_yes_109:;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_28__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 614;

        goto try_except_handler_84;
    }
    branch_no_109:;
    {
        nuitka_bool tmp_condition_result_166;
        PyObject *tmp_expression_value_137;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_137 = tmp_class_creation_28__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_137, mod_consts[206]);
        tmp_condition_result_166 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_166 == NUITKA_BOOL_TRUE) {
            goto branch_yes_110;
        } else {
            goto branch_no_110;
        }
    }
    branch_yes_110:;
    {
        PyObject *tmp_assign_source_233;
        PyObject *tmp_called_value_55;
        PyObject *tmp_expression_value_138;
        PyObject *tmp_args_value_55;
        PyObject *tmp_tuple_element_108;
        PyObject *tmp_kwargs_value_55;
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_expression_value_138 = tmp_class_creation_28__metaclass;
        tmp_called_value_55 = LOOKUP_ATTRIBUTE(tmp_expression_value_138, mod_consts[206]);
        if (tmp_called_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        tmp_tuple_element_108 = mod_consts[341];
        tmp_args_value_55 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_55, 0, tmp_tuple_element_108);
        CHECK_OBJECT(tmp_class_creation_28__bases);
        tmp_tuple_element_108 = tmp_class_creation_28__bases;
        PyTuple_SET_ITEM0(tmp_args_value_55, 1, tmp_tuple_element_108);
        CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
        tmp_kwargs_value_55 = tmp_class_creation_28__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 614;
        tmp_assign_source_233 = CALL_FUNCTION(tmp_called_value_55, tmp_args_value_55, tmp_kwargs_value_55);
        Py_DECREF(tmp_called_value_55);
        Py_DECREF(tmp_args_value_55);
        if (tmp_assign_source_233 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_233;
    }
    {
        bool tmp_condition_result_167;
        PyObject *tmp_operand_value_28;
        PyObject *tmp_expression_value_139;
        CHECK_OBJECT(tmp_class_creation_28__prepared);
        tmp_expression_value_139 = tmp_class_creation_28__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_139, mod_consts[208]);
        tmp_operand_value_28 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_28);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        tmp_condition_result_167 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_167 != false) {
            goto branch_yes_111;
        } else {
            goto branch_no_111;
        }
    }
    branch_yes_111:;
    {
        PyObject *tmp_raise_type_28;
        PyObject *tmp_raise_value_28;
        PyObject *tmp_left_value_28;
        PyObject *tmp_right_value_28;
        PyObject *tmp_tuple_element_109;
        PyObject *tmp_getattr_target_28;
        PyObject *tmp_getattr_attr_28;
        PyObject *tmp_getattr_default_28;
        tmp_raise_type_28 = PyExc_TypeError;
        tmp_left_value_28 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_28__metaclass);
        tmp_getattr_target_28 = tmp_class_creation_28__metaclass;
        tmp_getattr_attr_28 = mod_consts[210];
        tmp_getattr_default_28 = mod_consts[211];
        tmp_tuple_element_109 = BUILTIN_GETATTR(tmp_getattr_target_28, tmp_getattr_attr_28, tmp_getattr_default_28);
        if (tmp_tuple_element_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        tmp_right_value_28 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_140;
            PyObject *tmp_type_arg_56;
            PyTuple_SET_ITEM(tmp_right_value_28, 0, tmp_tuple_element_109);
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_type_arg_56 = tmp_class_creation_28__prepared;
            tmp_expression_value_140 = BUILTIN_TYPE1(tmp_type_arg_56);
            assert(!(tmp_expression_value_140 == NULL));
            tmp_tuple_element_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_140, mod_consts[210]);
            Py_DECREF(tmp_expression_value_140);
            if (tmp_tuple_element_109 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 614;

                goto tuple_build_exception_28;
            }
            PyTuple_SET_ITEM(tmp_right_value_28, 1, tmp_tuple_element_109);
        }
        goto tuple_build_noexception_28;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_28:;
        Py_DECREF(tmp_right_value_28);
        goto try_except_handler_84;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_28:;
        tmp_raise_value_28 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_28, tmp_right_value_28);
        Py_DECREF(tmp_right_value_28);
        if (tmp_raise_value_28 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_84;
        }
        exception_type = tmp_raise_type_28;
        Py_INCREF(tmp_raise_type_28);
        exception_value = tmp_raise_value_28;
        exception_lineno = 614;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_84;
    }
    branch_no_111:;
    goto branch_end_110;
    branch_no_110:;
    {
        PyObject *tmp_assign_source_234;
        tmp_assign_source_234 = PyDict_New();
        assert(tmp_class_creation_28__prepared == NULL);
        tmp_class_creation_28__prepared = tmp_assign_source_234;
    }
    branch_end_110:;
    {
        PyObject *tmp_assign_source_235;
        {
            PyObject *tmp_set_locals_28;
            CHECK_OBJECT(tmp_class_creation_28__prepared);
            tmp_set_locals_28 = tmp_class_creation_28__prepared;
            locals_xlwt$BIFFRecords$$$class__28_Window1Record_614 = tmp_set_locals_28;
            Py_INCREF(tmp_set_locals_28);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_86;
        }
        tmp_dictset_value = mod_consts[342];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_86;
        }
        tmp_dictset_value = mod_consts[341];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_86;
        }
        if (isFrameUnusable(cache_frame_9681e027f11210e14065bef3e5100ede_29)) {
            Py_XDECREF(cache_frame_9681e027f11210e14065bef3e5100ede_29);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9681e027f11210e14065bef3e5100ede_29 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9681e027f11210e14065bef3e5100ede_29 = MAKE_FUNCTION_FRAME(codeobj_9681e027f11210e14065bef3e5100ede, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9681e027f11210e14065bef3e5100ede_29->m_type_description == NULL);
        frame_9681e027f11210e14065bef3e5100ede_29 = cache_frame_9681e027f11210e14065bef3e5100ede_29;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9681e027f11210e14065bef3e5100ede_29);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9681e027f11210e14065bef3e5100ede_29) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[343];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 634;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__41___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 637;
            type_description_2 = "o";
            goto frame_exception_exit_29;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9681e027f11210e14065bef3e5100ede_29);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_28;

        frame_exception_exit_29:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9681e027f11210e14065bef3e5100ede_29);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9681e027f11210e14065bef3e5100ede_29, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9681e027f11210e14065bef3e5100ede_29->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9681e027f11210e14065bef3e5100ede_29, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9681e027f11210e14065bef3e5100ede_29,
            type_description_2,
            outline_27_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_9681e027f11210e14065bef3e5100ede_29 == cache_frame_9681e027f11210e14065bef3e5100ede_29) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9681e027f11210e14065bef3e5100ede_29);
            cache_frame_9681e027f11210e14065bef3e5100ede_29 = NULL;
        }

        assertFrameObject(frame_9681e027f11210e14065bef3e5100ede_29);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_28;

        frame_no_exception_28:;
        goto skip_nested_handling_28;
        nested_frame_exit_28:;

        goto try_except_handler_86;
        skip_nested_handling_28:;
        {
            nuitka_bool tmp_condition_result_168;
            PyObject *tmp_cmp_expr_left_28;
            PyObject *tmp_cmp_expr_right_28;
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_cmp_expr_left_28 = tmp_class_creation_28__bases;
            CHECK_OBJECT(tmp_class_creation_28__bases_orig);
            tmp_cmp_expr_right_28 = tmp_class_creation_28__bases_orig;
            tmp_condition_result_168 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_28, tmp_cmp_expr_right_28);
            if (tmp_condition_result_168 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 614;

                goto try_except_handler_86;
            }
            if (tmp_condition_result_168 == NUITKA_BOOL_TRUE) {
                goto branch_yes_112;
            } else {
                goto branch_no_112;
            }
            assert(tmp_condition_result_168 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_112:;
        CHECK_OBJECT(tmp_class_creation_28__bases_orig);
        tmp_dictset_value = tmp_class_creation_28__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 614;

            goto try_except_handler_86;
        }
        branch_no_112:;
        {
            PyObject *tmp_assign_source_236;
            PyObject *tmp_called_value_56;
            PyObject *tmp_args_value_56;
            PyObject *tmp_tuple_element_110;
            PyObject *tmp_kwargs_value_56;
            CHECK_OBJECT(tmp_class_creation_28__metaclass);
            tmp_called_value_56 = tmp_class_creation_28__metaclass;
            tmp_tuple_element_110 = mod_consts[341];
            tmp_args_value_56 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_56, 0, tmp_tuple_element_110);
            CHECK_OBJECT(tmp_class_creation_28__bases);
            tmp_tuple_element_110 = tmp_class_creation_28__bases;
            PyTuple_SET_ITEM0(tmp_args_value_56, 1, tmp_tuple_element_110);
            tmp_tuple_element_110 = locals_xlwt$BIFFRecords$$$class__28_Window1Record_614;
            PyTuple_SET_ITEM0(tmp_args_value_56, 2, tmp_tuple_element_110);
            CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
            tmp_kwargs_value_56 = tmp_class_creation_28__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 614;
            tmp_assign_source_236 = CALL_FUNCTION(tmp_called_value_56, tmp_args_value_56, tmp_kwargs_value_56);
            Py_DECREF(tmp_args_value_56);
            if (tmp_assign_source_236 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 614;

                goto try_except_handler_86;
            }
            assert(outline_27_var___class__ == NULL);
            outline_27_var___class__ = tmp_assign_source_236;
        }
        CHECK_OBJECT(outline_27_var___class__);
        tmp_assign_source_235 = outline_27_var___class__;
        Py_INCREF(tmp_assign_source_235);
        goto try_return_handler_86;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_86:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614);
        locals_xlwt$BIFFRecords$$$class__28_Window1Record_614 = NULL;
        goto try_return_handler_85;
        // Exception handler code:
        try_except_handler_86:;
        exception_keeper_type_84 = exception_type;
        exception_keeper_value_84 = exception_value;
        exception_keeper_tb_84 = exception_tb;
        exception_keeper_lineno_84 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__28_Window1Record_614);
        locals_xlwt$BIFFRecords$$$class__28_Window1Record_614 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_84;
        exception_value = exception_keeper_value_84;
        exception_tb = exception_keeper_tb_84;
        exception_lineno = exception_keeper_lineno_84;

        goto try_except_handler_85;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_85:;
        CHECK_OBJECT(outline_27_var___class__);
        Py_DECREF(outline_27_var___class__);
        outline_27_var___class__ = NULL;
        goto outline_result_28;
        // Exception handler code:
        try_except_handler_85:;
        exception_keeper_type_85 = exception_type;
        exception_keeper_value_85 = exception_value;
        exception_keeper_tb_85 = exception_tb;
        exception_keeper_lineno_85 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_85;
        exception_value = exception_keeper_value_85;
        exception_tb = exception_keeper_tb_85;
        exception_lineno = exception_keeper_lineno_85;

        goto outline_exception_28;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_28:;
        exception_lineno = 614;
        goto try_except_handler_84;
        outline_result_28:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[341], tmp_assign_source_235);
    }
    goto try_end_30;
    // Exception handler code:
    try_except_handler_84:;
    exception_keeper_type_86 = exception_type;
    exception_keeper_value_86 = exception_value;
    exception_keeper_tb_86 = exception_tb;
    exception_keeper_lineno_86 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    Py_XDECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_86;
    exception_value = exception_keeper_value_86;
    exception_tb = exception_keeper_tb_86;
    exception_lineno = exception_keeper_lineno_86;

    goto frame_exception_exit_1;
    // End of try:
    try_end_30:;
    CHECK_OBJECT(tmp_class_creation_28__bases_orig);
    Py_DECREF(tmp_class_creation_28__bases_orig);
    tmp_class_creation_28__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_28__bases);
    Py_DECREF(tmp_class_creation_28__bases);
    tmp_class_creation_28__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_28__class_decl_dict);
    Py_DECREF(tmp_class_creation_28__class_decl_dict);
    tmp_class_creation_28__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_28__metaclass);
    Py_DECREF(tmp_class_creation_28__metaclass);
    tmp_class_creation_28__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_28__prepared);
    Py_DECREF(tmp_class_creation_28__prepared);
    tmp_class_creation_28__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_237;
        PyObject *tmp_tuple_element_111;
        tmp_tuple_element_111 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_111 == NULL)) {
            tmp_tuple_element_111 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        tmp_assign_source_237 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_237, 0, tmp_tuple_element_111);
        assert(tmp_class_creation_29__bases_orig == NULL);
        tmp_class_creation_29__bases_orig = tmp_assign_source_237;
    }
    {
        PyObject *tmp_assign_source_238;
        PyObject *tmp_dircall_arg1_29;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dircall_arg1_29 = tmp_class_creation_29__bases_orig;
        Py_INCREF(tmp_dircall_arg1_29);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_29};
            tmp_assign_source_238 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_238 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        assert(tmp_class_creation_29__bases == NULL);
        tmp_class_creation_29__bases = tmp_assign_source_238;
    }
    {
        PyObject *tmp_assign_source_239;
        tmp_assign_source_239 = PyDict_New();
        assert(tmp_class_creation_29__class_decl_dict == NULL);
        tmp_class_creation_29__class_decl_dict = tmp_assign_source_239;
    }
    {
        PyObject *tmp_assign_source_240;
        PyObject *tmp_metaclass_value_29;
        bool tmp_condition_result_169;
        PyObject *tmp_key_value_85;
        PyObject *tmp_dict_arg_value_85;
        PyObject *tmp_dict_arg_value_86;
        PyObject *tmp_key_value_86;
        nuitka_bool tmp_condition_result_170;
        int tmp_truth_name_29;
        PyObject *tmp_type_arg_57;
        PyObject *tmp_expression_value_141;
        PyObject *tmp_subscript_value_29;
        PyObject *tmp_bases_value_29;
        tmp_key_value_85 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_85 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_85, tmp_key_value_85);
        assert(!(tmp_res == -1));
        tmp_condition_result_169 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_169 != false) {
            goto condexpr_true_57;
        } else {
            goto condexpr_false_57;
        }
        condexpr_true_57:;
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_86 = tmp_class_creation_29__class_decl_dict;
        tmp_key_value_86 = mod_consts[205];
        tmp_metaclass_value_29 = DICT_GET_ITEM0(tmp_dict_arg_value_86, tmp_key_value_86);
        if (tmp_metaclass_value_29 == NULL) {
            tmp_metaclass_value_29 = Py_None;
        }
        assert(!(tmp_metaclass_value_29 == NULL));
        Py_INCREF(tmp_metaclass_value_29);
        goto condexpr_end_57;
        condexpr_false_57:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_truth_name_29 = CHECK_IF_TRUE(tmp_class_creation_29__bases);
        if (tmp_truth_name_29 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        tmp_condition_result_170 = tmp_truth_name_29 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_170 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_58;
        } else {
            goto condexpr_false_58;
        }
        condexpr_true_58:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_expression_value_141 = tmp_class_creation_29__bases;
        tmp_subscript_value_29 = mod_consts[4];
        tmp_type_arg_57 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_141, tmp_subscript_value_29, 0);
        if (tmp_type_arg_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        tmp_metaclass_value_29 = BUILTIN_TYPE1(tmp_type_arg_57);
        Py_DECREF(tmp_type_arg_57);
        if (tmp_metaclass_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        goto condexpr_end_58;
        condexpr_false_58:;
        tmp_metaclass_value_29 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_29);
        condexpr_end_58:;
        condexpr_end_57:;
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_bases_value_29 = tmp_class_creation_29__bases;
        tmp_assign_source_240 = SELECT_METACLASS(tmp_metaclass_value_29, tmp_bases_value_29);
        Py_DECREF(tmp_metaclass_value_29);
        if (tmp_assign_source_240 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        assert(tmp_class_creation_29__metaclass == NULL);
        tmp_class_creation_29__metaclass = tmp_assign_source_240;
    }
    {
        bool tmp_condition_result_171;
        PyObject *tmp_key_value_87;
        PyObject *tmp_dict_arg_value_87;
        tmp_key_value_87 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_dict_arg_value_87 = tmp_class_creation_29__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_87, tmp_key_value_87);
        assert(!(tmp_res == -1));
        tmp_condition_result_171 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_171 != false) {
            goto branch_yes_113;
        } else {
            goto branch_no_113;
        }
    }
    branch_yes_113:;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_29__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 649;

        goto try_except_handler_87;
    }
    branch_no_113:;
    {
        nuitka_bool tmp_condition_result_172;
        PyObject *tmp_expression_value_142;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_142 = tmp_class_creation_29__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_142, mod_consts[206]);
        tmp_condition_result_172 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_172 == NUITKA_BOOL_TRUE) {
            goto branch_yes_114;
        } else {
            goto branch_no_114;
        }
    }
    branch_yes_114:;
    {
        PyObject *tmp_assign_source_241;
        PyObject *tmp_called_value_57;
        PyObject *tmp_expression_value_143;
        PyObject *tmp_args_value_57;
        PyObject *tmp_tuple_element_112;
        PyObject *tmp_kwargs_value_57;
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_expression_value_143 = tmp_class_creation_29__metaclass;
        tmp_called_value_57 = LOOKUP_ATTRIBUTE(tmp_expression_value_143, mod_consts[206]);
        if (tmp_called_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        tmp_tuple_element_112 = mod_consts[345];
        tmp_args_value_57 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_57, 0, tmp_tuple_element_112);
        CHECK_OBJECT(tmp_class_creation_29__bases);
        tmp_tuple_element_112 = tmp_class_creation_29__bases;
        PyTuple_SET_ITEM0(tmp_args_value_57, 1, tmp_tuple_element_112);
        CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
        tmp_kwargs_value_57 = tmp_class_creation_29__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 649;
        tmp_assign_source_241 = CALL_FUNCTION(tmp_called_value_57, tmp_args_value_57, tmp_kwargs_value_57);
        Py_DECREF(tmp_called_value_57);
        Py_DECREF(tmp_args_value_57);
        if (tmp_assign_source_241 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_241;
    }
    {
        bool tmp_condition_result_173;
        PyObject *tmp_operand_value_29;
        PyObject *tmp_expression_value_144;
        CHECK_OBJECT(tmp_class_creation_29__prepared);
        tmp_expression_value_144 = tmp_class_creation_29__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_144, mod_consts[208]);
        tmp_operand_value_29 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_29);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        tmp_condition_result_173 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_173 != false) {
            goto branch_yes_115;
        } else {
            goto branch_no_115;
        }
    }
    branch_yes_115:;
    {
        PyObject *tmp_raise_type_29;
        PyObject *tmp_raise_value_29;
        PyObject *tmp_left_value_29;
        PyObject *tmp_right_value_29;
        PyObject *tmp_tuple_element_113;
        PyObject *tmp_getattr_target_29;
        PyObject *tmp_getattr_attr_29;
        PyObject *tmp_getattr_default_29;
        tmp_raise_type_29 = PyExc_TypeError;
        tmp_left_value_29 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_29__metaclass);
        tmp_getattr_target_29 = tmp_class_creation_29__metaclass;
        tmp_getattr_attr_29 = mod_consts[210];
        tmp_getattr_default_29 = mod_consts[211];
        tmp_tuple_element_113 = BUILTIN_GETATTR(tmp_getattr_target_29, tmp_getattr_attr_29, tmp_getattr_default_29);
        if (tmp_tuple_element_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        tmp_right_value_29 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_145;
            PyObject *tmp_type_arg_58;
            PyTuple_SET_ITEM(tmp_right_value_29, 0, tmp_tuple_element_113);
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_type_arg_58 = tmp_class_creation_29__prepared;
            tmp_expression_value_145 = BUILTIN_TYPE1(tmp_type_arg_58);
            assert(!(tmp_expression_value_145 == NULL));
            tmp_tuple_element_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_145, mod_consts[210]);
            Py_DECREF(tmp_expression_value_145);
            if (tmp_tuple_element_113 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 649;

                goto tuple_build_exception_29;
            }
            PyTuple_SET_ITEM(tmp_right_value_29, 1, tmp_tuple_element_113);
        }
        goto tuple_build_noexception_29;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_29:;
        Py_DECREF(tmp_right_value_29);
        goto try_except_handler_87;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_29:;
        tmp_raise_value_29 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_29, tmp_right_value_29);
        Py_DECREF(tmp_right_value_29);
        if (tmp_raise_value_29 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_87;
        }
        exception_type = tmp_raise_type_29;
        Py_INCREF(tmp_raise_type_29);
        exception_value = tmp_raise_value_29;
        exception_lineno = 649;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_87;
    }
    branch_no_115:;
    goto branch_end_114;
    branch_no_114:;
    {
        PyObject *tmp_assign_source_242;
        tmp_assign_source_242 = PyDict_New();
        assert(tmp_class_creation_29__prepared == NULL);
        tmp_class_creation_29__prepared = tmp_assign_source_242;
    }
    branch_end_114:;
    {
        PyObject *tmp_assign_source_243;
        {
            PyObject *tmp_set_locals_29;
            CHECK_OBJECT(tmp_class_creation_29__prepared);
            tmp_set_locals_29 = tmp_class_creation_29__prepared;
            locals_xlwt$BIFFRecords$$$class__29_FontRecord_649 = tmp_set_locals_29;
            Py_INCREF(tmp_set_locals_29);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_89;
        }
        tmp_dictset_value = mod_consts[346];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_89;
        }
        tmp_dictset_value = mod_consts[345];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_89;
        }
        if (isFrameUnusable(cache_frame_8152037321aedae08e78b64fab5cc474_30)) {
            Py_XDECREF(cache_frame_8152037321aedae08e78b64fab5cc474_30);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8152037321aedae08e78b64fab5cc474_30 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8152037321aedae08e78b64fab5cc474_30 = MAKE_FUNCTION_FRAME(codeobj_8152037321aedae08e78b64fab5cc474, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8152037321aedae08e78b64fab5cc474_30->m_type_description == NULL);
        frame_8152037321aedae08e78b64fab5cc474_30 = cache_frame_8152037321aedae08e78b64fab5cc474_30;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8152037321aedae08e78b64fab5cc474_30);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8152037321aedae08e78b64fab5cc474_30) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[347];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 716;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__42___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 718;
            type_description_2 = "o";
            goto frame_exception_exit_30;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8152037321aedae08e78b64fab5cc474_30);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_29;

        frame_exception_exit_30:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8152037321aedae08e78b64fab5cc474_30);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8152037321aedae08e78b64fab5cc474_30, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8152037321aedae08e78b64fab5cc474_30->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8152037321aedae08e78b64fab5cc474_30, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8152037321aedae08e78b64fab5cc474_30,
            type_description_2,
            outline_28_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8152037321aedae08e78b64fab5cc474_30 == cache_frame_8152037321aedae08e78b64fab5cc474_30) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8152037321aedae08e78b64fab5cc474_30);
            cache_frame_8152037321aedae08e78b64fab5cc474_30 = NULL;
        }

        assertFrameObject(frame_8152037321aedae08e78b64fab5cc474_30);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_29;

        frame_no_exception_29:;
        goto skip_nested_handling_29;
        nested_frame_exit_29:;

        goto try_except_handler_89;
        skip_nested_handling_29:;
        {
            nuitka_bool tmp_condition_result_174;
            PyObject *tmp_cmp_expr_left_29;
            PyObject *tmp_cmp_expr_right_29;
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_cmp_expr_left_29 = tmp_class_creation_29__bases;
            CHECK_OBJECT(tmp_class_creation_29__bases_orig);
            tmp_cmp_expr_right_29 = tmp_class_creation_29__bases_orig;
            tmp_condition_result_174 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_29, tmp_cmp_expr_right_29);
            if (tmp_condition_result_174 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 649;

                goto try_except_handler_89;
            }
            if (tmp_condition_result_174 == NUITKA_BOOL_TRUE) {
                goto branch_yes_116;
            } else {
                goto branch_no_116;
            }
            assert(tmp_condition_result_174 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_116:;
        CHECK_OBJECT(tmp_class_creation_29__bases_orig);
        tmp_dictset_value = tmp_class_creation_29__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 649;

            goto try_except_handler_89;
        }
        branch_no_116:;
        {
            PyObject *tmp_assign_source_244;
            PyObject *tmp_called_value_58;
            PyObject *tmp_args_value_58;
            PyObject *tmp_tuple_element_114;
            PyObject *tmp_kwargs_value_58;
            CHECK_OBJECT(tmp_class_creation_29__metaclass);
            tmp_called_value_58 = tmp_class_creation_29__metaclass;
            tmp_tuple_element_114 = mod_consts[345];
            tmp_args_value_58 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_58, 0, tmp_tuple_element_114);
            CHECK_OBJECT(tmp_class_creation_29__bases);
            tmp_tuple_element_114 = tmp_class_creation_29__bases;
            PyTuple_SET_ITEM0(tmp_args_value_58, 1, tmp_tuple_element_114);
            tmp_tuple_element_114 = locals_xlwt$BIFFRecords$$$class__29_FontRecord_649;
            PyTuple_SET_ITEM0(tmp_args_value_58, 2, tmp_tuple_element_114);
            CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
            tmp_kwargs_value_58 = tmp_class_creation_29__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 649;
            tmp_assign_source_244 = CALL_FUNCTION(tmp_called_value_58, tmp_args_value_58, tmp_kwargs_value_58);
            Py_DECREF(tmp_args_value_58);
            if (tmp_assign_source_244 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 649;

                goto try_except_handler_89;
            }
            assert(outline_28_var___class__ == NULL);
            outline_28_var___class__ = tmp_assign_source_244;
        }
        CHECK_OBJECT(outline_28_var___class__);
        tmp_assign_source_243 = outline_28_var___class__;
        Py_INCREF(tmp_assign_source_243);
        goto try_return_handler_89;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_89:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649);
        locals_xlwt$BIFFRecords$$$class__29_FontRecord_649 = NULL;
        goto try_return_handler_88;
        // Exception handler code:
        try_except_handler_89:;
        exception_keeper_type_87 = exception_type;
        exception_keeper_value_87 = exception_value;
        exception_keeper_tb_87 = exception_tb;
        exception_keeper_lineno_87 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__29_FontRecord_649);
        locals_xlwt$BIFFRecords$$$class__29_FontRecord_649 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_87;
        exception_value = exception_keeper_value_87;
        exception_tb = exception_keeper_tb_87;
        exception_lineno = exception_keeper_lineno_87;

        goto try_except_handler_88;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_88:;
        CHECK_OBJECT(outline_28_var___class__);
        Py_DECREF(outline_28_var___class__);
        outline_28_var___class__ = NULL;
        goto outline_result_29;
        // Exception handler code:
        try_except_handler_88:;
        exception_keeper_type_88 = exception_type;
        exception_keeper_value_88 = exception_value;
        exception_keeper_tb_88 = exception_tb;
        exception_keeper_lineno_88 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_88;
        exception_value = exception_keeper_value_88;
        exception_tb = exception_keeper_tb_88;
        exception_lineno = exception_keeper_lineno_88;

        goto outline_exception_29;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_29:;
        exception_lineno = 649;
        goto try_except_handler_87;
        outline_result_29:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[345], tmp_assign_source_243);
    }
    goto try_end_31;
    // Exception handler code:
    try_except_handler_87:;
    exception_keeper_type_89 = exception_type;
    exception_keeper_value_89 = exception_value;
    exception_keeper_tb_89 = exception_tb;
    exception_keeper_lineno_89 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    Py_XDECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_89;
    exception_value = exception_keeper_value_89;
    exception_tb = exception_keeper_tb_89;
    exception_lineno = exception_keeper_lineno_89;

    goto frame_exception_exit_1;
    // End of try:
    try_end_31:;
    CHECK_OBJECT(tmp_class_creation_29__bases_orig);
    Py_DECREF(tmp_class_creation_29__bases_orig);
    tmp_class_creation_29__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_29__bases);
    Py_DECREF(tmp_class_creation_29__bases);
    tmp_class_creation_29__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_29__class_decl_dict);
    Py_DECREF(tmp_class_creation_29__class_decl_dict);
    tmp_class_creation_29__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_29__metaclass);
    Py_DECREF(tmp_class_creation_29__metaclass);
    tmp_class_creation_29__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_29__prepared);
    Py_DECREF(tmp_class_creation_29__prepared);
    tmp_class_creation_29__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_245;
        PyObject *tmp_tuple_element_115;
        tmp_tuple_element_115 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_115 == NULL)) {
            tmp_tuple_element_115 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        tmp_assign_source_245 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_245, 0, tmp_tuple_element_115);
        assert(tmp_class_creation_30__bases_orig == NULL);
        tmp_class_creation_30__bases_orig = tmp_assign_source_245;
    }
    {
        PyObject *tmp_assign_source_246;
        PyObject *tmp_dircall_arg1_30;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dircall_arg1_30 = tmp_class_creation_30__bases_orig;
        Py_INCREF(tmp_dircall_arg1_30);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_30};
            tmp_assign_source_246 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_246 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        assert(tmp_class_creation_30__bases == NULL);
        tmp_class_creation_30__bases = tmp_assign_source_246;
    }
    {
        PyObject *tmp_assign_source_247;
        tmp_assign_source_247 = PyDict_New();
        assert(tmp_class_creation_30__class_decl_dict == NULL);
        tmp_class_creation_30__class_decl_dict = tmp_assign_source_247;
    }
    {
        PyObject *tmp_assign_source_248;
        PyObject *tmp_metaclass_value_30;
        bool tmp_condition_result_175;
        PyObject *tmp_key_value_88;
        PyObject *tmp_dict_arg_value_88;
        PyObject *tmp_dict_arg_value_89;
        PyObject *tmp_key_value_89;
        nuitka_bool tmp_condition_result_176;
        int tmp_truth_name_30;
        PyObject *tmp_type_arg_59;
        PyObject *tmp_expression_value_146;
        PyObject *tmp_subscript_value_30;
        PyObject *tmp_bases_value_30;
        tmp_key_value_88 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_88 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_88, tmp_key_value_88);
        assert(!(tmp_res == -1));
        tmp_condition_result_175 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_175 != false) {
            goto condexpr_true_59;
        } else {
            goto condexpr_false_59;
        }
        condexpr_true_59:;
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_89 = tmp_class_creation_30__class_decl_dict;
        tmp_key_value_89 = mod_consts[205];
        tmp_metaclass_value_30 = DICT_GET_ITEM0(tmp_dict_arg_value_89, tmp_key_value_89);
        if (tmp_metaclass_value_30 == NULL) {
            tmp_metaclass_value_30 = Py_None;
        }
        assert(!(tmp_metaclass_value_30 == NULL));
        Py_INCREF(tmp_metaclass_value_30);
        goto condexpr_end_59;
        condexpr_false_59:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_truth_name_30 = CHECK_IF_TRUE(tmp_class_creation_30__bases);
        if (tmp_truth_name_30 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        tmp_condition_result_176 = tmp_truth_name_30 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_176 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_60;
        } else {
            goto condexpr_false_60;
        }
        condexpr_true_60:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_expression_value_146 = tmp_class_creation_30__bases;
        tmp_subscript_value_30 = mod_consts[4];
        tmp_type_arg_59 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_146, tmp_subscript_value_30, 0);
        if (tmp_type_arg_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        tmp_metaclass_value_30 = BUILTIN_TYPE1(tmp_type_arg_59);
        Py_DECREF(tmp_type_arg_59);
        if (tmp_metaclass_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        goto condexpr_end_60;
        condexpr_false_60:;
        tmp_metaclass_value_30 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_30);
        condexpr_end_60:;
        condexpr_end_59:;
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_bases_value_30 = tmp_class_creation_30__bases;
        tmp_assign_source_248 = SELECT_METACLASS(tmp_metaclass_value_30, tmp_bases_value_30);
        Py_DECREF(tmp_metaclass_value_30);
        if (tmp_assign_source_248 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        assert(tmp_class_creation_30__metaclass == NULL);
        tmp_class_creation_30__metaclass = tmp_assign_source_248;
    }
    {
        bool tmp_condition_result_177;
        PyObject *tmp_key_value_90;
        PyObject *tmp_dict_arg_value_90;
        tmp_key_value_90 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_dict_arg_value_90 = tmp_class_creation_30__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_90, tmp_key_value_90);
        assert(!(tmp_res == -1));
        tmp_condition_result_177 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_177 != false) {
            goto branch_yes_117;
        } else {
            goto branch_no_117;
        }
    }
    branch_yes_117:;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_30__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 729;

        goto try_except_handler_90;
    }
    branch_no_117:;
    {
        nuitka_bool tmp_condition_result_178;
        PyObject *tmp_expression_value_147;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_147 = tmp_class_creation_30__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_147, mod_consts[206]);
        tmp_condition_result_178 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_178 == NUITKA_BOOL_TRUE) {
            goto branch_yes_118;
        } else {
            goto branch_no_118;
        }
    }
    branch_yes_118:;
    {
        PyObject *tmp_assign_source_249;
        PyObject *tmp_called_value_59;
        PyObject *tmp_expression_value_148;
        PyObject *tmp_args_value_59;
        PyObject *tmp_tuple_element_116;
        PyObject *tmp_kwargs_value_59;
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_expression_value_148 = tmp_class_creation_30__metaclass;
        tmp_called_value_59 = LOOKUP_ATTRIBUTE(tmp_expression_value_148, mod_consts[206]);
        if (tmp_called_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        tmp_tuple_element_116 = mod_consts[349];
        tmp_args_value_59 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_59, 0, tmp_tuple_element_116);
        CHECK_OBJECT(tmp_class_creation_30__bases);
        tmp_tuple_element_116 = tmp_class_creation_30__bases;
        PyTuple_SET_ITEM0(tmp_args_value_59, 1, tmp_tuple_element_116);
        CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
        tmp_kwargs_value_59 = tmp_class_creation_30__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 729;
        tmp_assign_source_249 = CALL_FUNCTION(tmp_called_value_59, tmp_args_value_59, tmp_kwargs_value_59);
        Py_DECREF(tmp_called_value_59);
        Py_DECREF(tmp_args_value_59);
        if (tmp_assign_source_249 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_249;
    }
    {
        bool tmp_condition_result_179;
        PyObject *tmp_operand_value_30;
        PyObject *tmp_expression_value_149;
        CHECK_OBJECT(tmp_class_creation_30__prepared);
        tmp_expression_value_149 = tmp_class_creation_30__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_149, mod_consts[208]);
        tmp_operand_value_30 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_30);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        tmp_condition_result_179 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_179 != false) {
            goto branch_yes_119;
        } else {
            goto branch_no_119;
        }
    }
    branch_yes_119:;
    {
        PyObject *tmp_raise_type_30;
        PyObject *tmp_raise_value_30;
        PyObject *tmp_left_value_30;
        PyObject *tmp_right_value_30;
        PyObject *tmp_tuple_element_117;
        PyObject *tmp_getattr_target_30;
        PyObject *tmp_getattr_attr_30;
        PyObject *tmp_getattr_default_30;
        tmp_raise_type_30 = PyExc_TypeError;
        tmp_left_value_30 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_30__metaclass);
        tmp_getattr_target_30 = tmp_class_creation_30__metaclass;
        tmp_getattr_attr_30 = mod_consts[210];
        tmp_getattr_default_30 = mod_consts[211];
        tmp_tuple_element_117 = BUILTIN_GETATTR(tmp_getattr_target_30, tmp_getattr_attr_30, tmp_getattr_default_30);
        if (tmp_tuple_element_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        tmp_right_value_30 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_150;
            PyObject *tmp_type_arg_60;
            PyTuple_SET_ITEM(tmp_right_value_30, 0, tmp_tuple_element_117);
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_type_arg_60 = tmp_class_creation_30__prepared;
            tmp_expression_value_150 = BUILTIN_TYPE1(tmp_type_arg_60);
            assert(!(tmp_expression_value_150 == NULL));
            tmp_tuple_element_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_150, mod_consts[210]);
            Py_DECREF(tmp_expression_value_150);
            if (tmp_tuple_element_117 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 729;

                goto tuple_build_exception_30;
            }
            PyTuple_SET_ITEM(tmp_right_value_30, 1, tmp_tuple_element_117);
        }
        goto tuple_build_noexception_30;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_30:;
        Py_DECREF(tmp_right_value_30);
        goto try_except_handler_90;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_30:;
        tmp_raise_value_30 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_30, tmp_right_value_30);
        Py_DECREF(tmp_right_value_30);
        if (tmp_raise_value_30 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_90;
        }
        exception_type = tmp_raise_type_30;
        Py_INCREF(tmp_raise_type_30);
        exception_value = tmp_raise_value_30;
        exception_lineno = 729;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_90;
    }
    branch_no_119:;
    goto branch_end_118;
    branch_no_118:;
    {
        PyObject *tmp_assign_source_250;
        tmp_assign_source_250 = PyDict_New();
        assert(tmp_class_creation_30__prepared == NULL);
        tmp_class_creation_30__prepared = tmp_assign_source_250;
    }
    branch_end_118:;
    {
        PyObject *tmp_assign_source_251;
        {
            PyObject *tmp_set_locals_30;
            CHECK_OBJECT(tmp_class_creation_30__prepared);
            tmp_set_locals_30 = tmp_class_creation_30__prepared;
            locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729 = tmp_set_locals_30;
            Py_INCREF(tmp_set_locals_30);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_92;
        }
        tmp_dictset_value = mod_consts[350];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_92;
        }
        tmp_dictset_value = mod_consts[349];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_92;
        }
        if (isFrameUnusable(cache_frame_062df5792298b4a7928d15d17dc48814_31)) {
            Py_XDECREF(cache_frame_062df5792298b4a7928d15d17dc48814_31);

#if _DEBUG_REFCOUNTS
            if (cache_frame_062df5792298b4a7928d15d17dc48814_31 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_062df5792298b4a7928d15d17dc48814_31 = MAKE_FUNCTION_FRAME(codeobj_062df5792298b4a7928d15d17dc48814, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_062df5792298b4a7928d15d17dc48814_31->m_type_description == NULL);
        frame_062df5792298b4a7928d15d17dc48814_31 = cache_frame_062df5792298b4a7928d15d17dc48814_31;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_062df5792298b4a7928d15d17dc48814_31);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_062df5792298b4a7928d15d17dc48814_31) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[351];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 782;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__43___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 784;
            type_description_2 = "o";
            goto frame_exception_exit_31;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_062df5792298b4a7928d15d17dc48814_31);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_30;

        frame_exception_exit_31:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_062df5792298b4a7928d15d17dc48814_31);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_062df5792298b4a7928d15d17dc48814_31, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_062df5792298b4a7928d15d17dc48814_31->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_062df5792298b4a7928d15d17dc48814_31, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_062df5792298b4a7928d15d17dc48814_31,
            type_description_2,
            outline_29_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_062df5792298b4a7928d15d17dc48814_31 == cache_frame_062df5792298b4a7928d15d17dc48814_31) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_062df5792298b4a7928d15d17dc48814_31);
            cache_frame_062df5792298b4a7928d15d17dc48814_31 = NULL;
        }

        assertFrameObject(frame_062df5792298b4a7928d15d17dc48814_31);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_30;

        frame_no_exception_30:;
        goto skip_nested_handling_30;
        nested_frame_exit_30:;

        goto try_except_handler_92;
        skip_nested_handling_30:;
        {
            nuitka_bool tmp_condition_result_180;
            PyObject *tmp_cmp_expr_left_30;
            PyObject *tmp_cmp_expr_right_30;
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_cmp_expr_left_30 = tmp_class_creation_30__bases;
            CHECK_OBJECT(tmp_class_creation_30__bases_orig);
            tmp_cmp_expr_right_30 = tmp_class_creation_30__bases_orig;
            tmp_condition_result_180 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_30, tmp_cmp_expr_right_30);
            if (tmp_condition_result_180 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 729;

                goto try_except_handler_92;
            }
            if (tmp_condition_result_180 == NUITKA_BOOL_TRUE) {
                goto branch_yes_120;
            } else {
                goto branch_no_120;
            }
            assert(tmp_condition_result_180 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_120:;
        CHECK_OBJECT(tmp_class_creation_30__bases_orig);
        tmp_dictset_value = tmp_class_creation_30__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 729;

            goto try_except_handler_92;
        }
        branch_no_120:;
        {
            PyObject *tmp_assign_source_252;
            PyObject *tmp_called_value_60;
            PyObject *tmp_args_value_60;
            PyObject *tmp_tuple_element_118;
            PyObject *tmp_kwargs_value_60;
            CHECK_OBJECT(tmp_class_creation_30__metaclass);
            tmp_called_value_60 = tmp_class_creation_30__metaclass;
            tmp_tuple_element_118 = mod_consts[349];
            tmp_args_value_60 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_60, 0, tmp_tuple_element_118);
            CHECK_OBJECT(tmp_class_creation_30__bases);
            tmp_tuple_element_118 = tmp_class_creation_30__bases;
            PyTuple_SET_ITEM0(tmp_args_value_60, 1, tmp_tuple_element_118);
            tmp_tuple_element_118 = locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729;
            PyTuple_SET_ITEM0(tmp_args_value_60, 2, tmp_tuple_element_118);
            CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
            tmp_kwargs_value_60 = tmp_class_creation_30__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 729;
            tmp_assign_source_252 = CALL_FUNCTION(tmp_called_value_60, tmp_args_value_60, tmp_kwargs_value_60);
            Py_DECREF(tmp_args_value_60);
            if (tmp_assign_source_252 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 729;

                goto try_except_handler_92;
            }
            assert(outline_29_var___class__ == NULL);
            outline_29_var___class__ = tmp_assign_source_252;
        }
        CHECK_OBJECT(outline_29_var___class__);
        tmp_assign_source_251 = outline_29_var___class__;
        Py_INCREF(tmp_assign_source_251);
        goto try_return_handler_92;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_92:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729);
        locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729 = NULL;
        goto try_return_handler_91;
        // Exception handler code:
        try_except_handler_92:;
        exception_keeper_type_90 = exception_type;
        exception_keeper_value_90 = exception_value;
        exception_keeper_tb_90 = exception_tb;
        exception_keeper_lineno_90 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729);
        locals_xlwt$BIFFRecords$$$class__30_NumberFormatRecord_729 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_90;
        exception_value = exception_keeper_value_90;
        exception_tb = exception_keeper_tb_90;
        exception_lineno = exception_keeper_lineno_90;

        goto try_except_handler_91;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_91:;
        CHECK_OBJECT(outline_29_var___class__);
        Py_DECREF(outline_29_var___class__);
        outline_29_var___class__ = NULL;
        goto outline_result_30;
        // Exception handler code:
        try_except_handler_91:;
        exception_keeper_type_91 = exception_type;
        exception_keeper_value_91 = exception_value;
        exception_keeper_tb_91 = exception_tb;
        exception_keeper_lineno_91 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_91;
        exception_value = exception_keeper_value_91;
        exception_tb = exception_keeper_tb_91;
        exception_lineno = exception_keeper_lineno_91;

        goto outline_exception_30;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_30:;
        exception_lineno = 729;
        goto try_except_handler_90;
        outline_result_30:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[349], tmp_assign_source_251);
    }
    goto try_end_32;
    // Exception handler code:
    try_except_handler_90:;
    exception_keeper_type_92 = exception_type;
    exception_keeper_value_92 = exception_value;
    exception_keeper_tb_92 = exception_tb;
    exception_keeper_lineno_92 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    Py_XDECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_92;
    exception_value = exception_keeper_value_92;
    exception_tb = exception_keeper_tb_92;
    exception_lineno = exception_keeper_lineno_92;

    goto frame_exception_exit_1;
    // End of try:
    try_end_32:;
    CHECK_OBJECT(tmp_class_creation_30__bases_orig);
    Py_DECREF(tmp_class_creation_30__bases_orig);
    tmp_class_creation_30__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_30__bases);
    Py_DECREF(tmp_class_creation_30__bases);
    tmp_class_creation_30__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_30__class_decl_dict);
    Py_DECREF(tmp_class_creation_30__class_decl_dict);
    tmp_class_creation_30__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_30__metaclass);
    Py_DECREF(tmp_class_creation_30__metaclass);
    tmp_class_creation_30__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_30__prepared);
    Py_DECREF(tmp_class_creation_30__prepared);
    tmp_class_creation_30__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_253;
        PyObject *tmp_tuple_element_119;
        tmp_tuple_element_119 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_119 == NULL)) {
            tmp_tuple_element_119 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        tmp_assign_source_253 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_253, 0, tmp_tuple_element_119);
        assert(tmp_class_creation_31__bases_orig == NULL);
        tmp_class_creation_31__bases_orig = tmp_assign_source_253;
    }
    {
        PyObject *tmp_assign_source_254;
        PyObject *tmp_dircall_arg1_31;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dircall_arg1_31 = tmp_class_creation_31__bases_orig;
        Py_INCREF(tmp_dircall_arg1_31);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_31};
            tmp_assign_source_254 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_254 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        assert(tmp_class_creation_31__bases == NULL);
        tmp_class_creation_31__bases = tmp_assign_source_254;
    }
    {
        PyObject *tmp_assign_source_255;
        tmp_assign_source_255 = PyDict_New();
        assert(tmp_class_creation_31__class_decl_dict == NULL);
        tmp_class_creation_31__class_decl_dict = tmp_assign_source_255;
    }
    {
        PyObject *tmp_assign_source_256;
        PyObject *tmp_metaclass_value_31;
        bool tmp_condition_result_181;
        PyObject *tmp_key_value_91;
        PyObject *tmp_dict_arg_value_91;
        PyObject *tmp_dict_arg_value_92;
        PyObject *tmp_key_value_92;
        nuitka_bool tmp_condition_result_182;
        int tmp_truth_name_31;
        PyObject *tmp_type_arg_61;
        PyObject *tmp_expression_value_151;
        PyObject *tmp_subscript_value_31;
        PyObject *tmp_bases_value_31;
        tmp_key_value_91 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_91 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_91, tmp_key_value_91);
        assert(!(tmp_res == -1));
        tmp_condition_result_181 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_181 != false) {
            goto condexpr_true_61;
        } else {
            goto condexpr_false_61;
        }
        condexpr_true_61:;
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_92 = tmp_class_creation_31__class_decl_dict;
        tmp_key_value_92 = mod_consts[205];
        tmp_metaclass_value_31 = DICT_GET_ITEM0(tmp_dict_arg_value_92, tmp_key_value_92);
        if (tmp_metaclass_value_31 == NULL) {
            tmp_metaclass_value_31 = Py_None;
        }
        assert(!(tmp_metaclass_value_31 == NULL));
        Py_INCREF(tmp_metaclass_value_31);
        goto condexpr_end_61;
        condexpr_false_61:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_truth_name_31 = CHECK_IF_TRUE(tmp_class_creation_31__bases);
        if (tmp_truth_name_31 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        tmp_condition_result_182 = tmp_truth_name_31 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_182 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_62;
        } else {
            goto condexpr_false_62;
        }
        condexpr_true_62:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_expression_value_151 = tmp_class_creation_31__bases;
        tmp_subscript_value_31 = mod_consts[4];
        tmp_type_arg_61 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_151, tmp_subscript_value_31, 0);
        if (tmp_type_arg_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        tmp_metaclass_value_31 = BUILTIN_TYPE1(tmp_type_arg_61);
        Py_DECREF(tmp_type_arg_61);
        if (tmp_metaclass_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        goto condexpr_end_62;
        condexpr_false_62:;
        tmp_metaclass_value_31 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_31);
        condexpr_end_62:;
        condexpr_end_61:;
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_bases_value_31 = tmp_class_creation_31__bases;
        tmp_assign_source_256 = SELECT_METACLASS(tmp_metaclass_value_31, tmp_bases_value_31);
        Py_DECREF(tmp_metaclass_value_31);
        if (tmp_assign_source_256 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        assert(tmp_class_creation_31__metaclass == NULL);
        tmp_class_creation_31__metaclass = tmp_assign_source_256;
    }
    {
        bool tmp_condition_result_183;
        PyObject *tmp_key_value_93;
        PyObject *tmp_dict_arg_value_93;
        tmp_key_value_93 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_dict_arg_value_93 = tmp_class_creation_31__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_93, tmp_key_value_93);
        assert(!(tmp_res == -1));
        tmp_condition_result_183 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_183 != false) {
            goto branch_yes_121;
        } else {
            goto branch_no_121;
        }
    }
    branch_yes_121:;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_31__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 791;

        goto try_except_handler_93;
    }
    branch_no_121:;
    {
        nuitka_bool tmp_condition_result_184;
        PyObject *tmp_expression_value_152;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_152 = tmp_class_creation_31__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_152, mod_consts[206]);
        tmp_condition_result_184 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_184 == NUITKA_BOOL_TRUE) {
            goto branch_yes_122;
        } else {
            goto branch_no_122;
        }
    }
    branch_yes_122:;
    {
        PyObject *tmp_assign_source_257;
        PyObject *tmp_called_value_61;
        PyObject *tmp_expression_value_153;
        PyObject *tmp_args_value_61;
        PyObject *tmp_tuple_element_120;
        PyObject *tmp_kwargs_value_61;
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_expression_value_153 = tmp_class_creation_31__metaclass;
        tmp_called_value_61 = LOOKUP_ATTRIBUTE(tmp_expression_value_153, mod_consts[206]);
        if (tmp_called_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        tmp_tuple_element_120 = mod_consts[353];
        tmp_args_value_61 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_61, 0, tmp_tuple_element_120);
        CHECK_OBJECT(tmp_class_creation_31__bases);
        tmp_tuple_element_120 = tmp_class_creation_31__bases;
        PyTuple_SET_ITEM0(tmp_args_value_61, 1, tmp_tuple_element_120);
        CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
        tmp_kwargs_value_61 = tmp_class_creation_31__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 791;
        tmp_assign_source_257 = CALL_FUNCTION(tmp_called_value_61, tmp_args_value_61, tmp_kwargs_value_61);
        Py_DECREF(tmp_called_value_61);
        Py_DECREF(tmp_args_value_61);
        if (tmp_assign_source_257 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_257;
    }
    {
        bool tmp_condition_result_185;
        PyObject *tmp_operand_value_31;
        PyObject *tmp_expression_value_154;
        CHECK_OBJECT(tmp_class_creation_31__prepared);
        tmp_expression_value_154 = tmp_class_creation_31__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_154, mod_consts[208]);
        tmp_operand_value_31 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_31);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        tmp_condition_result_185 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_185 != false) {
            goto branch_yes_123;
        } else {
            goto branch_no_123;
        }
    }
    branch_yes_123:;
    {
        PyObject *tmp_raise_type_31;
        PyObject *tmp_raise_value_31;
        PyObject *tmp_left_value_31;
        PyObject *tmp_right_value_31;
        PyObject *tmp_tuple_element_121;
        PyObject *tmp_getattr_target_31;
        PyObject *tmp_getattr_attr_31;
        PyObject *tmp_getattr_default_31;
        tmp_raise_type_31 = PyExc_TypeError;
        tmp_left_value_31 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_31__metaclass);
        tmp_getattr_target_31 = tmp_class_creation_31__metaclass;
        tmp_getattr_attr_31 = mod_consts[210];
        tmp_getattr_default_31 = mod_consts[211];
        tmp_tuple_element_121 = BUILTIN_GETATTR(tmp_getattr_target_31, tmp_getattr_attr_31, tmp_getattr_default_31);
        if (tmp_tuple_element_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        tmp_right_value_31 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_155;
            PyObject *tmp_type_arg_62;
            PyTuple_SET_ITEM(tmp_right_value_31, 0, tmp_tuple_element_121);
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_type_arg_62 = tmp_class_creation_31__prepared;
            tmp_expression_value_155 = BUILTIN_TYPE1(tmp_type_arg_62);
            assert(!(tmp_expression_value_155 == NULL));
            tmp_tuple_element_121 = LOOKUP_ATTRIBUTE(tmp_expression_value_155, mod_consts[210]);
            Py_DECREF(tmp_expression_value_155);
            if (tmp_tuple_element_121 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 791;

                goto tuple_build_exception_31;
            }
            PyTuple_SET_ITEM(tmp_right_value_31, 1, tmp_tuple_element_121);
        }
        goto tuple_build_noexception_31;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_31:;
        Py_DECREF(tmp_right_value_31);
        goto try_except_handler_93;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_31:;
        tmp_raise_value_31 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_31, tmp_right_value_31);
        Py_DECREF(tmp_right_value_31);
        if (tmp_raise_value_31 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_93;
        }
        exception_type = tmp_raise_type_31;
        Py_INCREF(tmp_raise_type_31);
        exception_value = tmp_raise_value_31;
        exception_lineno = 791;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_93;
    }
    branch_no_123:;
    goto branch_end_122;
    branch_no_122:;
    {
        PyObject *tmp_assign_source_258;
        tmp_assign_source_258 = PyDict_New();
        assert(tmp_class_creation_31__prepared == NULL);
        tmp_class_creation_31__prepared = tmp_assign_source_258;
    }
    branch_end_122:;
    {
        PyObject *tmp_assign_source_259;
        {
            PyObject *tmp_set_locals_31;
            CHECK_OBJECT(tmp_class_creation_31__prepared);
            tmp_set_locals_31 = tmp_class_creation_31__prepared;
            locals_xlwt$BIFFRecords$$$class__31_XFRecord_791 = tmp_set_locals_31;
            Py_INCREF(tmp_set_locals_31);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_95;
        }
        tmp_dictset_value = mod_consts[354];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_95;
        }
        tmp_dictset_value = mod_consts[353];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_95;
        }
        if (isFrameUnusable(cache_frame_e50b2904296655817fac37212bb44d8e_32)) {
            Py_XDECREF(cache_frame_e50b2904296655817fac37212bb44d8e_32);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e50b2904296655817fac37212bb44d8e_32 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e50b2904296655817fac37212bb44d8e_32 = MAKE_FUNCTION_FRAME(codeobj_e50b2904296655817fac37212bb44d8e, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e50b2904296655817fac37212bb44d8e_32->m_type_description == NULL);
        frame_e50b2904296655817fac37212bb44d8e_32 = cache_frame_e50b2904296655817fac37212bb44d8e_32;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e50b2904296655817fac37212bb44d8e_32);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e50b2904296655817fac37212bb44d8e_32) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[355];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 922;
            type_description_2 = "o";
            goto frame_exception_exit_32;
        }
        {
            PyObject *tmp_defaults_2;
            tmp_defaults_2 = mod_consts[356];
            Py_INCREF(tmp_defaults_2);


            tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__44___init__(tmp_defaults_2);

            tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791, mod_consts[216], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 924;
                type_description_2 = "o";
                goto frame_exception_exit_32;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e50b2904296655817fac37212bb44d8e_32);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_31;

        frame_exception_exit_32:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e50b2904296655817fac37212bb44d8e_32);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e50b2904296655817fac37212bb44d8e_32, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e50b2904296655817fac37212bb44d8e_32->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e50b2904296655817fac37212bb44d8e_32, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e50b2904296655817fac37212bb44d8e_32,
            type_description_2,
            outline_30_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e50b2904296655817fac37212bb44d8e_32 == cache_frame_e50b2904296655817fac37212bb44d8e_32) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e50b2904296655817fac37212bb44d8e_32);
            cache_frame_e50b2904296655817fac37212bb44d8e_32 = NULL;
        }

        assertFrameObject(frame_e50b2904296655817fac37212bb44d8e_32);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_31;

        frame_no_exception_31:;
        goto skip_nested_handling_31;
        nested_frame_exit_31:;

        goto try_except_handler_95;
        skip_nested_handling_31:;
        {
            nuitka_bool tmp_condition_result_186;
            PyObject *tmp_cmp_expr_left_31;
            PyObject *tmp_cmp_expr_right_31;
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_cmp_expr_left_31 = tmp_class_creation_31__bases;
            CHECK_OBJECT(tmp_class_creation_31__bases_orig);
            tmp_cmp_expr_right_31 = tmp_class_creation_31__bases_orig;
            tmp_condition_result_186 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_31, tmp_cmp_expr_right_31);
            if (tmp_condition_result_186 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 791;

                goto try_except_handler_95;
            }
            if (tmp_condition_result_186 == NUITKA_BOOL_TRUE) {
                goto branch_yes_124;
            } else {
                goto branch_no_124;
            }
            assert(tmp_condition_result_186 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_124:;
        CHECK_OBJECT(tmp_class_creation_31__bases_orig);
        tmp_dictset_value = tmp_class_creation_31__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 791;

            goto try_except_handler_95;
        }
        branch_no_124:;
        {
            PyObject *tmp_assign_source_260;
            PyObject *tmp_called_value_62;
            PyObject *tmp_args_value_62;
            PyObject *tmp_tuple_element_122;
            PyObject *tmp_kwargs_value_62;
            CHECK_OBJECT(tmp_class_creation_31__metaclass);
            tmp_called_value_62 = tmp_class_creation_31__metaclass;
            tmp_tuple_element_122 = mod_consts[353];
            tmp_args_value_62 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_62, 0, tmp_tuple_element_122);
            CHECK_OBJECT(tmp_class_creation_31__bases);
            tmp_tuple_element_122 = tmp_class_creation_31__bases;
            PyTuple_SET_ITEM0(tmp_args_value_62, 1, tmp_tuple_element_122);
            tmp_tuple_element_122 = locals_xlwt$BIFFRecords$$$class__31_XFRecord_791;
            PyTuple_SET_ITEM0(tmp_args_value_62, 2, tmp_tuple_element_122);
            CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
            tmp_kwargs_value_62 = tmp_class_creation_31__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 791;
            tmp_assign_source_260 = CALL_FUNCTION(tmp_called_value_62, tmp_args_value_62, tmp_kwargs_value_62);
            Py_DECREF(tmp_args_value_62);
            if (tmp_assign_source_260 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 791;

                goto try_except_handler_95;
            }
            assert(outline_30_var___class__ == NULL);
            outline_30_var___class__ = tmp_assign_source_260;
        }
        CHECK_OBJECT(outline_30_var___class__);
        tmp_assign_source_259 = outline_30_var___class__;
        Py_INCREF(tmp_assign_source_259);
        goto try_return_handler_95;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_95:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791);
        locals_xlwt$BIFFRecords$$$class__31_XFRecord_791 = NULL;
        goto try_return_handler_94;
        // Exception handler code:
        try_except_handler_95:;
        exception_keeper_type_93 = exception_type;
        exception_keeper_value_93 = exception_value;
        exception_keeper_tb_93 = exception_tb;
        exception_keeper_lineno_93 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__31_XFRecord_791);
        locals_xlwt$BIFFRecords$$$class__31_XFRecord_791 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_93;
        exception_value = exception_keeper_value_93;
        exception_tb = exception_keeper_tb_93;
        exception_lineno = exception_keeper_lineno_93;

        goto try_except_handler_94;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_94:;
        CHECK_OBJECT(outline_30_var___class__);
        Py_DECREF(outline_30_var___class__);
        outline_30_var___class__ = NULL;
        goto outline_result_31;
        // Exception handler code:
        try_except_handler_94:;
        exception_keeper_type_94 = exception_type;
        exception_keeper_value_94 = exception_value;
        exception_keeper_tb_94 = exception_tb;
        exception_keeper_lineno_94 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_94;
        exception_value = exception_keeper_value_94;
        exception_tb = exception_keeper_tb_94;
        exception_lineno = exception_keeper_lineno_94;

        goto outline_exception_31;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_31:;
        exception_lineno = 791;
        goto try_except_handler_93;
        outline_result_31:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[353], tmp_assign_source_259);
    }
    goto try_end_33;
    // Exception handler code:
    try_except_handler_93:;
    exception_keeper_type_95 = exception_type;
    exception_keeper_value_95 = exception_value;
    exception_keeper_tb_95 = exception_tb;
    exception_keeper_lineno_95 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    Py_XDECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_95;
    exception_value = exception_keeper_value_95;
    exception_tb = exception_keeper_tb_95;
    exception_lineno = exception_keeper_lineno_95;

    goto frame_exception_exit_1;
    // End of try:
    try_end_33:;
    CHECK_OBJECT(tmp_class_creation_31__bases_orig);
    Py_DECREF(tmp_class_creation_31__bases_orig);
    tmp_class_creation_31__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_31__bases);
    Py_DECREF(tmp_class_creation_31__bases);
    tmp_class_creation_31__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_31__class_decl_dict);
    Py_DECREF(tmp_class_creation_31__class_decl_dict);
    tmp_class_creation_31__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_31__metaclass);
    Py_DECREF(tmp_class_creation_31__metaclass);
    tmp_class_creation_31__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_31__prepared);
    Py_DECREF(tmp_class_creation_31__prepared);
    tmp_class_creation_31__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_261;
        PyObject *tmp_tuple_element_123;
        tmp_tuple_element_123 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_123 == NULL)) {
            tmp_tuple_element_123 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        tmp_assign_source_261 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_261, 0, tmp_tuple_element_123);
        assert(tmp_class_creation_32__bases_orig == NULL);
        tmp_class_creation_32__bases_orig = tmp_assign_source_261;
    }
    {
        PyObject *tmp_assign_source_262;
        PyObject *tmp_dircall_arg1_32;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dircall_arg1_32 = tmp_class_creation_32__bases_orig;
        Py_INCREF(tmp_dircall_arg1_32);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_32};
            tmp_assign_source_262 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_262 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        assert(tmp_class_creation_32__bases == NULL);
        tmp_class_creation_32__bases = tmp_assign_source_262;
    }
    {
        PyObject *tmp_assign_source_263;
        tmp_assign_source_263 = PyDict_New();
        assert(tmp_class_creation_32__class_decl_dict == NULL);
        tmp_class_creation_32__class_decl_dict = tmp_assign_source_263;
    }
    {
        PyObject *tmp_assign_source_264;
        PyObject *tmp_metaclass_value_32;
        bool tmp_condition_result_187;
        PyObject *tmp_key_value_94;
        PyObject *tmp_dict_arg_value_94;
        PyObject *tmp_dict_arg_value_95;
        PyObject *tmp_key_value_95;
        nuitka_bool tmp_condition_result_188;
        int tmp_truth_name_32;
        PyObject *tmp_type_arg_63;
        PyObject *tmp_expression_value_156;
        PyObject *tmp_subscript_value_32;
        PyObject *tmp_bases_value_32;
        tmp_key_value_94 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_94 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_94, tmp_key_value_94);
        assert(!(tmp_res == -1));
        tmp_condition_result_187 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_187 != false) {
            goto condexpr_true_63;
        } else {
            goto condexpr_false_63;
        }
        condexpr_true_63:;
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_95 = tmp_class_creation_32__class_decl_dict;
        tmp_key_value_95 = mod_consts[205];
        tmp_metaclass_value_32 = DICT_GET_ITEM0(tmp_dict_arg_value_95, tmp_key_value_95);
        if (tmp_metaclass_value_32 == NULL) {
            tmp_metaclass_value_32 = Py_None;
        }
        assert(!(tmp_metaclass_value_32 == NULL));
        Py_INCREF(tmp_metaclass_value_32);
        goto condexpr_end_63;
        condexpr_false_63:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_truth_name_32 = CHECK_IF_TRUE(tmp_class_creation_32__bases);
        if (tmp_truth_name_32 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        tmp_condition_result_188 = tmp_truth_name_32 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_188 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_64;
        } else {
            goto condexpr_false_64;
        }
        condexpr_true_64:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_expression_value_156 = tmp_class_creation_32__bases;
        tmp_subscript_value_32 = mod_consts[4];
        tmp_type_arg_63 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_156, tmp_subscript_value_32, 0);
        if (tmp_type_arg_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        tmp_metaclass_value_32 = BUILTIN_TYPE1(tmp_type_arg_63);
        Py_DECREF(tmp_type_arg_63);
        if (tmp_metaclass_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        goto condexpr_end_64;
        condexpr_false_64:;
        tmp_metaclass_value_32 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_32);
        condexpr_end_64:;
        condexpr_end_63:;
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_bases_value_32 = tmp_class_creation_32__bases;
        tmp_assign_source_264 = SELECT_METACLASS(tmp_metaclass_value_32, tmp_bases_value_32);
        Py_DECREF(tmp_metaclass_value_32);
        if (tmp_assign_source_264 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        assert(tmp_class_creation_32__metaclass == NULL);
        tmp_class_creation_32__metaclass = tmp_assign_source_264;
    }
    {
        bool tmp_condition_result_189;
        PyObject *tmp_key_value_96;
        PyObject *tmp_dict_arg_value_96;
        tmp_key_value_96 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_dict_arg_value_96 = tmp_class_creation_32__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_96, tmp_key_value_96);
        assert(!(tmp_res == -1));
        tmp_condition_result_189 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_189 != false) {
            goto branch_yes_125;
        } else {
            goto branch_no_125;
        }
    }
    branch_yes_125:;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_32__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 988;

        goto try_except_handler_96;
    }
    branch_no_125:;
    {
        nuitka_bool tmp_condition_result_190;
        PyObject *tmp_expression_value_157;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_157 = tmp_class_creation_32__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_157, mod_consts[206]);
        tmp_condition_result_190 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_190 == NUITKA_BOOL_TRUE) {
            goto branch_yes_126;
        } else {
            goto branch_no_126;
        }
    }
    branch_yes_126:;
    {
        PyObject *tmp_assign_source_265;
        PyObject *tmp_called_value_63;
        PyObject *tmp_expression_value_158;
        PyObject *tmp_args_value_63;
        PyObject *tmp_tuple_element_124;
        PyObject *tmp_kwargs_value_63;
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_expression_value_158 = tmp_class_creation_32__metaclass;
        tmp_called_value_63 = LOOKUP_ATTRIBUTE(tmp_expression_value_158, mod_consts[206]);
        if (tmp_called_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        tmp_tuple_element_124 = mod_consts[358];
        tmp_args_value_63 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_63, 0, tmp_tuple_element_124);
        CHECK_OBJECT(tmp_class_creation_32__bases);
        tmp_tuple_element_124 = tmp_class_creation_32__bases;
        PyTuple_SET_ITEM0(tmp_args_value_63, 1, tmp_tuple_element_124);
        CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
        tmp_kwargs_value_63 = tmp_class_creation_32__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 988;
        tmp_assign_source_265 = CALL_FUNCTION(tmp_called_value_63, tmp_args_value_63, tmp_kwargs_value_63);
        Py_DECREF(tmp_called_value_63);
        Py_DECREF(tmp_args_value_63);
        if (tmp_assign_source_265 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_265;
    }
    {
        bool tmp_condition_result_191;
        PyObject *tmp_operand_value_32;
        PyObject *tmp_expression_value_159;
        CHECK_OBJECT(tmp_class_creation_32__prepared);
        tmp_expression_value_159 = tmp_class_creation_32__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_159, mod_consts[208]);
        tmp_operand_value_32 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_32);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        tmp_condition_result_191 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_191 != false) {
            goto branch_yes_127;
        } else {
            goto branch_no_127;
        }
    }
    branch_yes_127:;
    {
        PyObject *tmp_raise_type_32;
        PyObject *tmp_raise_value_32;
        PyObject *tmp_left_value_32;
        PyObject *tmp_right_value_32;
        PyObject *tmp_tuple_element_125;
        PyObject *tmp_getattr_target_32;
        PyObject *tmp_getattr_attr_32;
        PyObject *tmp_getattr_default_32;
        tmp_raise_type_32 = PyExc_TypeError;
        tmp_left_value_32 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_32__metaclass);
        tmp_getattr_target_32 = tmp_class_creation_32__metaclass;
        tmp_getattr_attr_32 = mod_consts[210];
        tmp_getattr_default_32 = mod_consts[211];
        tmp_tuple_element_125 = BUILTIN_GETATTR(tmp_getattr_target_32, tmp_getattr_attr_32, tmp_getattr_default_32);
        if (tmp_tuple_element_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        tmp_right_value_32 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_160;
            PyObject *tmp_type_arg_64;
            PyTuple_SET_ITEM(tmp_right_value_32, 0, tmp_tuple_element_125);
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_type_arg_64 = tmp_class_creation_32__prepared;
            tmp_expression_value_160 = BUILTIN_TYPE1(tmp_type_arg_64);
            assert(!(tmp_expression_value_160 == NULL));
            tmp_tuple_element_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_160, mod_consts[210]);
            Py_DECREF(tmp_expression_value_160);
            if (tmp_tuple_element_125 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 988;

                goto tuple_build_exception_32;
            }
            PyTuple_SET_ITEM(tmp_right_value_32, 1, tmp_tuple_element_125);
        }
        goto tuple_build_noexception_32;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_32:;
        Py_DECREF(tmp_right_value_32);
        goto try_except_handler_96;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_32:;
        tmp_raise_value_32 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_32, tmp_right_value_32);
        Py_DECREF(tmp_right_value_32);
        if (tmp_raise_value_32 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_96;
        }
        exception_type = tmp_raise_type_32;
        Py_INCREF(tmp_raise_type_32);
        exception_value = tmp_raise_value_32;
        exception_lineno = 988;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_96;
    }
    branch_no_127:;
    goto branch_end_126;
    branch_no_126:;
    {
        PyObject *tmp_assign_source_266;
        tmp_assign_source_266 = PyDict_New();
        assert(tmp_class_creation_32__prepared == NULL);
        tmp_class_creation_32__prepared = tmp_assign_source_266;
    }
    branch_end_126:;
    {
        PyObject *tmp_assign_source_267;
        {
            PyObject *tmp_set_locals_32;
            CHECK_OBJECT(tmp_class_creation_32__prepared);
            tmp_set_locals_32 = tmp_class_creation_32__prepared;
            locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988 = tmp_set_locals_32;
            Py_INCREF(tmp_set_locals_32);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_98;
        }
        tmp_dictset_value = mod_consts[359];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_98;
        }
        tmp_dictset_value = mod_consts[358];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_98;
        }
        if (isFrameUnusable(cache_frame_be74ee3365a0729e839e44f2456dae4c_33)) {
            Py_XDECREF(cache_frame_be74ee3365a0729e839e44f2456dae4c_33);

#if _DEBUG_REFCOUNTS
            if (cache_frame_be74ee3365a0729e839e44f2456dae4c_33 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_be74ee3365a0729e839e44f2456dae4c_33 = MAKE_FUNCTION_FRAME(codeobj_be74ee3365a0729e839e44f2456dae4c, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_be74ee3365a0729e839e44f2456dae4c_33->m_type_description == NULL);
        frame_be74ee3365a0729e839e44f2456dae4c_33 = cache_frame_be74ee3365a0729e839e44f2456dae4c_33;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_be74ee3365a0729e839e44f2456dae4c_33);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_be74ee3365a0729e839e44f2456dae4c_33) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[360];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1020;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__45___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1022;
            type_description_2 = "o";
            goto frame_exception_exit_33;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_be74ee3365a0729e839e44f2456dae4c_33);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_32;

        frame_exception_exit_33:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_be74ee3365a0729e839e44f2456dae4c_33);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_be74ee3365a0729e839e44f2456dae4c_33, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_be74ee3365a0729e839e44f2456dae4c_33->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_be74ee3365a0729e839e44f2456dae4c_33, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_be74ee3365a0729e839e44f2456dae4c_33,
            type_description_2,
            outline_31_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_be74ee3365a0729e839e44f2456dae4c_33 == cache_frame_be74ee3365a0729e839e44f2456dae4c_33) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_be74ee3365a0729e839e44f2456dae4c_33);
            cache_frame_be74ee3365a0729e839e44f2456dae4c_33 = NULL;
        }

        assertFrameObject(frame_be74ee3365a0729e839e44f2456dae4c_33);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_32;

        frame_no_exception_32:;
        goto skip_nested_handling_32;
        nested_frame_exit_32:;

        goto try_except_handler_98;
        skip_nested_handling_32:;
        {
            nuitka_bool tmp_condition_result_192;
            PyObject *tmp_cmp_expr_left_32;
            PyObject *tmp_cmp_expr_right_32;
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_cmp_expr_left_32 = tmp_class_creation_32__bases;
            CHECK_OBJECT(tmp_class_creation_32__bases_orig);
            tmp_cmp_expr_right_32 = tmp_class_creation_32__bases_orig;
            tmp_condition_result_192 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_32, tmp_cmp_expr_right_32);
            if (tmp_condition_result_192 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 988;

                goto try_except_handler_98;
            }
            if (tmp_condition_result_192 == NUITKA_BOOL_TRUE) {
                goto branch_yes_128;
            } else {
                goto branch_no_128;
            }
            assert(tmp_condition_result_192 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_128:;
        CHECK_OBJECT(tmp_class_creation_32__bases_orig);
        tmp_dictset_value = tmp_class_creation_32__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 988;

            goto try_except_handler_98;
        }
        branch_no_128:;
        {
            PyObject *tmp_assign_source_268;
            PyObject *tmp_called_value_64;
            PyObject *tmp_args_value_64;
            PyObject *tmp_tuple_element_126;
            PyObject *tmp_kwargs_value_64;
            CHECK_OBJECT(tmp_class_creation_32__metaclass);
            tmp_called_value_64 = tmp_class_creation_32__metaclass;
            tmp_tuple_element_126 = mod_consts[358];
            tmp_args_value_64 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_64, 0, tmp_tuple_element_126);
            CHECK_OBJECT(tmp_class_creation_32__bases);
            tmp_tuple_element_126 = tmp_class_creation_32__bases;
            PyTuple_SET_ITEM0(tmp_args_value_64, 1, tmp_tuple_element_126);
            tmp_tuple_element_126 = locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988;
            PyTuple_SET_ITEM0(tmp_args_value_64, 2, tmp_tuple_element_126);
            CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
            tmp_kwargs_value_64 = tmp_class_creation_32__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 988;
            tmp_assign_source_268 = CALL_FUNCTION(tmp_called_value_64, tmp_args_value_64, tmp_kwargs_value_64);
            Py_DECREF(tmp_args_value_64);
            if (tmp_assign_source_268 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 988;

                goto try_except_handler_98;
            }
            assert(outline_31_var___class__ == NULL);
            outline_31_var___class__ = tmp_assign_source_268;
        }
        CHECK_OBJECT(outline_31_var___class__);
        tmp_assign_source_267 = outline_31_var___class__;
        Py_INCREF(tmp_assign_source_267);
        goto try_return_handler_98;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_98:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988);
        locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988 = NULL;
        goto try_return_handler_97;
        // Exception handler code:
        try_except_handler_98:;
        exception_keeper_type_96 = exception_type;
        exception_keeper_value_96 = exception_value;
        exception_keeper_tb_96 = exception_tb;
        exception_keeper_lineno_96 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988);
        locals_xlwt$BIFFRecords$$$class__32_StyleRecord_988 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_96;
        exception_value = exception_keeper_value_96;
        exception_tb = exception_keeper_tb_96;
        exception_lineno = exception_keeper_lineno_96;

        goto try_except_handler_97;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_97:;
        CHECK_OBJECT(outline_31_var___class__);
        Py_DECREF(outline_31_var___class__);
        outline_31_var___class__ = NULL;
        goto outline_result_32;
        // Exception handler code:
        try_except_handler_97:;
        exception_keeper_type_97 = exception_type;
        exception_keeper_value_97 = exception_value;
        exception_keeper_tb_97 = exception_tb;
        exception_keeper_lineno_97 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_97;
        exception_value = exception_keeper_value_97;
        exception_tb = exception_keeper_tb_97;
        exception_lineno = exception_keeper_lineno_97;

        goto outline_exception_32;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_32:;
        exception_lineno = 988;
        goto try_except_handler_96;
        outline_result_32:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[358], tmp_assign_source_267);
    }
    goto try_end_34;
    // Exception handler code:
    try_except_handler_96:;
    exception_keeper_type_98 = exception_type;
    exception_keeper_value_98 = exception_value;
    exception_keeper_tb_98 = exception_tb;
    exception_keeper_lineno_98 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    Py_XDECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_98;
    exception_value = exception_keeper_value_98;
    exception_tb = exception_keeper_tb_98;
    exception_lineno = exception_keeper_lineno_98;

    goto frame_exception_exit_1;
    // End of try:
    try_end_34:;
    CHECK_OBJECT(tmp_class_creation_32__bases_orig);
    Py_DECREF(tmp_class_creation_32__bases_orig);
    tmp_class_creation_32__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_32__bases);
    Py_DECREF(tmp_class_creation_32__bases);
    tmp_class_creation_32__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_32__class_decl_dict);
    Py_DECREF(tmp_class_creation_32__class_decl_dict);
    tmp_class_creation_32__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_32__metaclass);
    Py_DECREF(tmp_class_creation_32__metaclass);
    tmp_class_creation_32__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_32__prepared);
    Py_DECREF(tmp_class_creation_32__prepared);
    tmp_class_creation_32__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_269;
        PyObject *tmp_tuple_element_127;
        tmp_tuple_element_127 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_127 == NULL)) {
            tmp_tuple_element_127 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        tmp_assign_source_269 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_269, 0, tmp_tuple_element_127);
        assert(tmp_class_creation_33__bases_orig == NULL);
        tmp_class_creation_33__bases_orig = tmp_assign_source_269;
    }
    {
        PyObject *tmp_assign_source_270;
        PyObject *tmp_dircall_arg1_33;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dircall_arg1_33 = tmp_class_creation_33__bases_orig;
        Py_INCREF(tmp_dircall_arg1_33);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_33};
            tmp_assign_source_270 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_270 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_33__bases == NULL);
        tmp_class_creation_33__bases = tmp_assign_source_270;
    }
    {
        PyObject *tmp_assign_source_271;
        tmp_assign_source_271 = PyDict_New();
        assert(tmp_class_creation_33__class_decl_dict == NULL);
        tmp_class_creation_33__class_decl_dict = tmp_assign_source_271;
    }
    {
        PyObject *tmp_assign_source_272;
        PyObject *tmp_metaclass_value_33;
        bool tmp_condition_result_193;
        PyObject *tmp_key_value_97;
        PyObject *tmp_dict_arg_value_97;
        PyObject *tmp_dict_arg_value_98;
        PyObject *tmp_key_value_98;
        nuitka_bool tmp_condition_result_194;
        int tmp_truth_name_33;
        PyObject *tmp_type_arg_65;
        PyObject *tmp_expression_value_161;
        PyObject *tmp_subscript_value_33;
        PyObject *tmp_bases_value_33;
        tmp_key_value_97 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_97 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_97, tmp_key_value_97);
        assert(!(tmp_res == -1));
        tmp_condition_result_193 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_193 != false) {
            goto condexpr_true_65;
        } else {
            goto condexpr_false_65;
        }
        condexpr_true_65:;
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_98 = tmp_class_creation_33__class_decl_dict;
        tmp_key_value_98 = mod_consts[205];
        tmp_metaclass_value_33 = DICT_GET_ITEM0(tmp_dict_arg_value_98, tmp_key_value_98);
        if (tmp_metaclass_value_33 == NULL) {
            tmp_metaclass_value_33 = Py_None;
        }
        assert(!(tmp_metaclass_value_33 == NULL));
        Py_INCREF(tmp_metaclass_value_33);
        goto condexpr_end_65;
        condexpr_false_65:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_truth_name_33 = CHECK_IF_TRUE(tmp_class_creation_33__bases);
        if (tmp_truth_name_33 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        tmp_condition_result_194 = tmp_truth_name_33 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_194 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_66;
        } else {
            goto condexpr_false_66;
        }
        condexpr_true_66:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_expression_value_161 = tmp_class_creation_33__bases;
        tmp_subscript_value_33 = mod_consts[4];
        tmp_type_arg_65 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_161, tmp_subscript_value_33, 0);
        if (tmp_type_arg_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        tmp_metaclass_value_33 = BUILTIN_TYPE1(tmp_type_arg_65);
        Py_DECREF(tmp_type_arg_65);
        if (tmp_metaclass_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        goto condexpr_end_66;
        condexpr_false_66:;
        tmp_metaclass_value_33 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_33);
        condexpr_end_66:;
        condexpr_end_65:;
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_bases_value_33 = tmp_class_creation_33__bases;
        tmp_assign_source_272 = SELECT_METACLASS(tmp_metaclass_value_33, tmp_bases_value_33);
        Py_DECREF(tmp_metaclass_value_33);
        if (tmp_assign_source_272 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_33__metaclass == NULL);
        tmp_class_creation_33__metaclass = tmp_assign_source_272;
    }
    {
        bool tmp_condition_result_195;
        PyObject *tmp_key_value_99;
        PyObject *tmp_dict_arg_value_99;
        tmp_key_value_99 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_dict_arg_value_99 = tmp_class_creation_33__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_99, tmp_key_value_99);
        assert(!(tmp_res == -1));
        tmp_condition_result_195 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_195 != false) {
            goto branch_yes_129;
        } else {
            goto branch_no_129;
        }
    }
    branch_yes_129:;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_33__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1027;

        goto try_except_handler_99;
    }
    branch_no_129:;
    {
        nuitka_bool tmp_condition_result_196;
        PyObject *tmp_expression_value_162;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_162 = tmp_class_creation_33__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_162, mod_consts[206]);
        tmp_condition_result_196 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_196 == NUITKA_BOOL_TRUE) {
            goto branch_yes_130;
        } else {
            goto branch_no_130;
        }
    }
    branch_yes_130:;
    {
        PyObject *tmp_assign_source_273;
        PyObject *tmp_called_value_65;
        PyObject *tmp_expression_value_163;
        PyObject *tmp_args_value_65;
        PyObject *tmp_tuple_element_128;
        PyObject *tmp_kwargs_value_65;
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_expression_value_163 = tmp_class_creation_33__metaclass;
        tmp_called_value_65 = LOOKUP_ATTRIBUTE(tmp_expression_value_163, mod_consts[206]);
        if (tmp_called_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        tmp_tuple_element_128 = mod_consts[362];
        tmp_args_value_65 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_65, 0, tmp_tuple_element_128);
        CHECK_OBJECT(tmp_class_creation_33__bases);
        tmp_tuple_element_128 = tmp_class_creation_33__bases;
        PyTuple_SET_ITEM0(tmp_args_value_65, 1, tmp_tuple_element_128);
        CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
        tmp_kwargs_value_65 = tmp_class_creation_33__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1027;
        tmp_assign_source_273 = CALL_FUNCTION(tmp_called_value_65, tmp_args_value_65, tmp_kwargs_value_65);
        Py_DECREF(tmp_called_value_65);
        Py_DECREF(tmp_args_value_65);
        if (tmp_assign_source_273 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_273;
    }
    {
        bool tmp_condition_result_197;
        PyObject *tmp_operand_value_33;
        PyObject *tmp_expression_value_164;
        CHECK_OBJECT(tmp_class_creation_33__prepared);
        tmp_expression_value_164 = tmp_class_creation_33__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_164, mod_consts[208]);
        tmp_operand_value_33 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_33);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        tmp_condition_result_197 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_197 != false) {
            goto branch_yes_131;
        } else {
            goto branch_no_131;
        }
    }
    branch_yes_131:;
    {
        PyObject *tmp_raise_type_33;
        PyObject *tmp_raise_value_33;
        PyObject *tmp_left_value_33;
        PyObject *tmp_right_value_33;
        PyObject *tmp_tuple_element_129;
        PyObject *tmp_getattr_target_33;
        PyObject *tmp_getattr_attr_33;
        PyObject *tmp_getattr_default_33;
        tmp_raise_type_33 = PyExc_TypeError;
        tmp_left_value_33 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_33__metaclass);
        tmp_getattr_target_33 = tmp_class_creation_33__metaclass;
        tmp_getattr_attr_33 = mod_consts[210];
        tmp_getattr_default_33 = mod_consts[211];
        tmp_tuple_element_129 = BUILTIN_GETATTR(tmp_getattr_target_33, tmp_getattr_attr_33, tmp_getattr_default_33);
        if (tmp_tuple_element_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        tmp_right_value_33 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_165;
            PyObject *tmp_type_arg_66;
            PyTuple_SET_ITEM(tmp_right_value_33, 0, tmp_tuple_element_129);
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_type_arg_66 = tmp_class_creation_33__prepared;
            tmp_expression_value_165 = BUILTIN_TYPE1(tmp_type_arg_66);
            assert(!(tmp_expression_value_165 == NULL));
            tmp_tuple_element_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_165, mod_consts[210]);
            Py_DECREF(tmp_expression_value_165);
            if (tmp_tuple_element_129 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1027;

                goto tuple_build_exception_33;
            }
            PyTuple_SET_ITEM(tmp_right_value_33, 1, tmp_tuple_element_129);
        }
        goto tuple_build_noexception_33;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_33:;
        Py_DECREF(tmp_right_value_33);
        goto try_except_handler_99;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_33:;
        tmp_raise_value_33 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_33, tmp_right_value_33);
        Py_DECREF(tmp_right_value_33);
        if (tmp_raise_value_33 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_99;
        }
        exception_type = tmp_raise_type_33;
        Py_INCREF(tmp_raise_type_33);
        exception_value = tmp_raise_value_33;
        exception_lineno = 1027;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_99;
    }
    branch_no_131:;
    goto branch_end_130;
    branch_no_130:;
    {
        PyObject *tmp_assign_source_274;
        tmp_assign_source_274 = PyDict_New();
        assert(tmp_class_creation_33__prepared == NULL);
        tmp_class_creation_33__prepared = tmp_assign_source_274;
    }
    branch_end_130:;
    {
        PyObject *tmp_assign_source_275;
        {
            PyObject *tmp_set_locals_33;
            CHECK_OBJECT(tmp_class_creation_33__prepared);
            tmp_set_locals_33 = tmp_class_creation_33__prepared;
            locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027 = tmp_set_locals_33;
            Py_INCREF(tmp_set_locals_33);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_101;
        }
        tmp_dictset_value = mod_consts[363];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_101;
        }
        tmp_dictset_value = mod_consts[362];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_101;
        }
        if (isFrameUnusable(cache_frame_37590bfdc658e8c7f52448be0f0de734_34)) {
            Py_XDECREF(cache_frame_37590bfdc658e8c7f52448be0f0de734_34);

#if _DEBUG_REFCOUNTS
            if (cache_frame_37590bfdc658e8c7f52448be0f0de734_34 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_37590bfdc658e8c7f52448be0f0de734_34 = MAKE_FUNCTION_FRAME(codeobj_37590bfdc658e8c7f52448be0f0de734, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_37590bfdc658e8c7f52448be0f0de734_34->m_type_description == NULL);
        frame_37590bfdc658e8c7f52448be0f0de734_34 = cache_frame_37590bfdc658e8c7f52448be0f0de734_34;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_37590bfdc658e8c7f52448be0f0de734_34);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_37590bfdc658e8c7f52448be0f0de734_34) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[364];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1070;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__46___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1072;
            type_description_2 = "o";
            goto frame_exception_exit_34;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37590bfdc658e8c7f52448be0f0de734_34);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_33;

        frame_exception_exit_34:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37590bfdc658e8c7f52448be0f0de734_34);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_37590bfdc658e8c7f52448be0f0de734_34, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_37590bfdc658e8c7f52448be0f0de734_34->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_37590bfdc658e8c7f52448be0f0de734_34, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_37590bfdc658e8c7f52448be0f0de734_34,
            type_description_2,
            outline_32_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_37590bfdc658e8c7f52448be0f0de734_34 == cache_frame_37590bfdc658e8c7f52448be0f0de734_34) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_37590bfdc658e8c7f52448be0f0de734_34);
            cache_frame_37590bfdc658e8c7f52448be0f0de734_34 = NULL;
        }

        assertFrameObject(frame_37590bfdc658e8c7f52448be0f0de734_34);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_33;

        frame_no_exception_33:;
        goto skip_nested_handling_33;
        nested_frame_exit_33:;

        goto try_except_handler_101;
        skip_nested_handling_33:;
        {
            nuitka_bool tmp_condition_result_198;
            PyObject *tmp_cmp_expr_left_33;
            PyObject *tmp_cmp_expr_right_33;
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_cmp_expr_left_33 = tmp_class_creation_33__bases;
            CHECK_OBJECT(tmp_class_creation_33__bases_orig);
            tmp_cmp_expr_right_33 = tmp_class_creation_33__bases_orig;
            tmp_condition_result_198 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_33, tmp_cmp_expr_right_33);
            if (tmp_condition_result_198 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1027;

                goto try_except_handler_101;
            }
            if (tmp_condition_result_198 == NUITKA_BOOL_TRUE) {
                goto branch_yes_132;
            } else {
                goto branch_no_132;
            }
            assert(tmp_condition_result_198 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_132:;
        CHECK_OBJECT(tmp_class_creation_33__bases_orig);
        tmp_dictset_value = tmp_class_creation_33__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1027;

            goto try_except_handler_101;
        }
        branch_no_132:;
        {
            PyObject *tmp_assign_source_276;
            PyObject *tmp_called_value_66;
            PyObject *tmp_args_value_66;
            PyObject *tmp_tuple_element_130;
            PyObject *tmp_kwargs_value_66;
            CHECK_OBJECT(tmp_class_creation_33__metaclass);
            tmp_called_value_66 = tmp_class_creation_33__metaclass;
            tmp_tuple_element_130 = mod_consts[362];
            tmp_args_value_66 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_66, 0, tmp_tuple_element_130);
            CHECK_OBJECT(tmp_class_creation_33__bases);
            tmp_tuple_element_130 = tmp_class_creation_33__bases;
            PyTuple_SET_ITEM0(tmp_args_value_66, 1, tmp_tuple_element_130);
            tmp_tuple_element_130 = locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027;
            PyTuple_SET_ITEM0(tmp_args_value_66, 2, tmp_tuple_element_130);
            CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
            tmp_kwargs_value_66 = tmp_class_creation_33__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1027;
            tmp_assign_source_276 = CALL_FUNCTION(tmp_called_value_66, tmp_args_value_66, tmp_kwargs_value_66);
            Py_DECREF(tmp_args_value_66);
            if (tmp_assign_source_276 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1027;

                goto try_except_handler_101;
            }
            assert(outline_32_var___class__ == NULL);
            outline_32_var___class__ = tmp_assign_source_276;
        }
        CHECK_OBJECT(outline_32_var___class__);
        tmp_assign_source_275 = outline_32_var___class__;
        Py_INCREF(tmp_assign_source_275);
        goto try_return_handler_101;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_101:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027);
        locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027 = NULL;
        goto try_return_handler_100;
        // Exception handler code:
        try_except_handler_101:;
        exception_keeper_type_99 = exception_type;
        exception_keeper_value_99 = exception_value;
        exception_keeper_tb_99 = exception_tb;
        exception_keeper_lineno_99 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027);
        locals_xlwt$BIFFRecords$$$class__33_PaletteRecord_1027 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_99;
        exception_value = exception_keeper_value_99;
        exception_tb = exception_keeper_tb_99;
        exception_lineno = exception_keeper_lineno_99;

        goto try_except_handler_100;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_100:;
        CHECK_OBJECT(outline_32_var___class__);
        Py_DECREF(outline_32_var___class__);
        outline_32_var___class__ = NULL;
        goto outline_result_33;
        // Exception handler code:
        try_except_handler_100:;
        exception_keeper_type_100 = exception_type;
        exception_keeper_value_100 = exception_value;
        exception_keeper_tb_100 = exception_tb;
        exception_keeper_lineno_100 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_100;
        exception_value = exception_keeper_value_100;
        exception_tb = exception_keeper_tb_100;
        exception_lineno = exception_keeper_lineno_100;

        goto outline_exception_33;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_33:;
        exception_lineno = 1027;
        goto try_except_handler_99;
        outline_result_33:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[362], tmp_assign_source_275);
    }
    goto try_end_35;
    // Exception handler code:
    try_except_handler_99:;
    exception_keeper_type_101 = exception_type;
    exception_keeper_value_101 = exception_value;
    exception_keeper_tb_101 = exception_tb;
    exception_keeper_lineno_101 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    Py_XDECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_101;
    exception_value = exception_keeper_value_101;
    exception_tb = exception_keeper_tb_101;
    exception_lineno = exception_keeper_lineno_101;

    goto frame_exception_exit_1;
    // End of try:
    try_end_35:;
    CHECK_OBJECT(tmp_class_creation_33__bases_orig);
    Py_DECREF(tmp_class_creation_33__bases_orig);
    tmp_class_creation_33__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_33__bases);
    Py_DECREF(tmp_class_creation_33__bases);
    tmp_class_creation_33__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_33__class_decl_dict);
    Py_DECREF(tmp_class_creation_33__class_decl_dict);
    tmp_class_creation_33__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_33__metaclass);
    Py_DECREF(tmp_class_creation_33__metaclass);
    tmp_class_creation_33__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_33__prepared);
    Py_DECREF(tmp_class_creation_33__prepared);
    tmp_class_creation_33__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_277;
        PyObject *tmp_tuple_element_131;
        tmp_tuple_element_131 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_131 == NULL)) {
            tmp_tuple_element_131 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        tmp_assign_source_277 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_277, 0, tmp_tuple_element_131);
        assert(tmp_class_creation_34__bases_orig == NULL);
        tmp_class_creation_34__bases_orig = tmp_assign_source_277;
    }
    {
        PyObject *tmp_assign_source_278;
        PyObject *tmp_dircall_arg1_34;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dircall_arg1_34 = tmp_class_creation_34__bases_orig;
        Py_INCREF(tmp_dircall_arg1_34);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_34};
            tmp_assign_source_278 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_278 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        assert(tmp_class_creation_34__bases == NULL);
        tmp_class_creation_34__bases = tmp_assign_source_278;
    }
    {
        PyObject *tmp_assign_source_279;
        tmp_assign_source_279 = PyDict_New();
        assert(tmp_class_creation_34__class_decl_dict == NULL);
        tmp_class_creation_34__class_decl_dict = tmp_assign_source_279;
    }
    {
        PyObject *tmp_assign_source_280;
        PyObject *tmp_metaclass_value_34;
        bool tmp_condition_result_199;
        PyObject *tmp_key_value_100;
        PyObject *tmp_dict_arg_value_100;
        PyObject *tmp_dict_arg_value_101;
        PyObject *tmp_key_value_101;
        nuitka_bool tmp_condition_result_200;
        int tmp_truth_name_34;
        PyObject *tmp_type_arg_67;
        PyObject *tmp_expression_value_166;
        PyObject *tmp_subscript_value_34;
        PyObject *tmp_bases_value_34;
        tmp_key_value_100 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_100 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_100, tmp_key_value_100);
        assert(!(tmp_res == -1));
        tmp_condition_result_199 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_199 != false) {
            goto condexpr_true_67;
        } else {
            goto condexpr_false_67;
        }
        condexpr_true_67:;
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_101 = tmp_class_creation_34__class_decl_dict;
        tmp_key_value_101 = mod_consts[205];
        tmp_metaclass_value_34 = DICT_GET_ITEM0(tmp_dict_arg_value_101, tmp_key_value_101);
        if (tmp_metaclass_value_34 == NULL) {
            tmp_metaclass_value_34 = Py_None;
        }
        assert(!(tmp_metaclass_value_34 == NULL));
        Py_INCREF(tmp_metaclass_value_34);
        goto condexpr_end_67;
        condexpr_false_67:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_truth_name_34 = CHECK_IF_TRUE(tmp_class_creation_34__bases);
        if (tmp_truth_name_34 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        tmp_condition_result_200 = tmp_truth_name_34 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_200 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_68;
        } else {
            goto condexpr_false_68;
        }
        condexpr_true_68:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_expression_value_166 = tmp_class_creation_34__bases;
        tmp_subscript_value_34 = mod_consts[4];
        tmp_type_arg_67 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_166, tmp_subscript_value_34, 0);
        if (tmp_type_arg_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        tmp_metaclass_value_34 = BUILTIN_TYPE1(tmp_type_arg_67);
        Py_DECREF(tmp_type_arg_67);
        if (tmp_metaclass_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        goto condexpr_end_68;
        condexpr_false_68:;
        tmp_metaclass_value_34 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_34);
        condexpr_end_68:;
        condexpr_end_67:;
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_bases_value_34 = tmp_class_creation_34__bases;
        tmp_assign_source_280 = SELECT_METACLASS(tmp_metaclass_value_34, tmp_bases_value_34);
        Py_DECREF(tmp_metaclass_value_34);
        if (tmp_assign_source_280 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        assert(tmp_class_creation_34__metaclass == NULL);
        tmp_class_creation_34__metaclass = tmp_assign_source_280;
    }
    {
        bool tmp_condition_result_201;
        PyObject *tmp_key_value_102;
        PyObject *tmp_dict_arg_value_102;
        tmp_key_value_102 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_dict_arg_value_102 = tmp_class_creation_34__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_102, tmp_key_value_102);
        assert(!(tmp_res == -1));
        tmp_condition_result_201 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_201 != false) {
            goto branch_yes_133;
        } else {
            goto branch_no_133;
        }
    }
    branch_yes_133:;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_34__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1082;

        goto try_except_handler_102;
    }
    branch_no_133:;
    {
        nuitka_bool tmp_condition_result_202;
        PyObject *tmp_expression_value_167;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_167 = tmp_class_creation_34__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_167, mod_consts[206]);
        tmp_condition_result_202 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_202 == NUITKA_BOOL_TRUE) {
            goto branch_yes_134;
        } else {
            goto branch_no_134;
        }
    }
    branch_yes_134:;
    {
        PyObject *tmp_assign_source_281;
        PyObject *tmp_called_value_67;
        PyObject *tmp_expression_value_168;
        PyObject *tmp_args_value_67;
        PyObject *tmp_tuple_element_132;
        PyObject *tmp_kwargs_value_67;
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_expression_value_168 = tmp_class_creation_34__metaclass;
        tmp_called_value_67 = LOOKUP_ATTRIBUTE(tmp_expression_value_168, mod_consts[206]);
        if (tmp_called_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        tmp_tuple_element_132 = mod_consts[366];
        tmp_args_value_67 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_67, 0, tmp_tuple_element_132);
        CHECK_OBJECT(tmp_class_creation_34__bases);
        tmp_tuple_element_132 = tmp_class_creation_34__bases;
        PyTuple_SET_ITEM0(tmp_args_value_67, 1, tmp_tuple_element_132);
        CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
        tmp_kwargs_value_67 = tmp_class_creation_34__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1082;
        tmp_assign_source_281 = CALL_FUNCTION(tmp_called_value_67, tmp_args_value_67, tmp_kwargs_value_67);
        Py_DECREF(tmp_called_value_67);
        Py_DECREF(tmp_args_value_67);
        if (tmp_assign_source_281 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_281;
    }
    {
        bool tmp_condition_result_203;
        PyObject *tmp_operand_value_34;
        PyObject *tmp_expression_value_169;
        CHECK_OBJECT(tmp_class_creation_34__prepared);
        tmp_expression_value_169 = tmp_class_creation_34__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_169, mod_consts[208]);
        tmp_operand_value_34 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_34);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        tmp_condition_result_203 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_203 != false) {
            goto branch_yes_135;
        } else {
            goto branch_no_135;
        }
    }
    branch_yes_135:;
    {
        PyObject *tmp_raise_type_34;
        PyObject *tmp_raise_value_34;
        PyObject *tmp_left_value_34;
        PyObject *tmp_right_value_34;
        PyObject *tmp_tuple_element_133;
        PyObject *tmp_getattr_target_34;
        PyObject *tmp_getattr_attr_34;
        PyObject *tmp_getattr_default_34;
        tmp_raise_type_34 = PyExc_TypeError;
        tmp_left_value_34 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_34__metaclass);
        tmp_getattr_target_34 = tmp_class_creation_34__metaclass;
        tmp_getattr_attr_34 = mod_consts[210];
        tmp_getattr_default_34 = mod_consts[211];
        tmp_tuple_element_133 = BUILTIN_GETATTR(tmp_getattr_target_34, tmp_getattr_attr_34, tmp_getattr_default_34);
        if (tmp_tuple_element_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        tmp_right_value_34 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_170;
            PyObject *tmp_type_arg_68;
            PyTuple_SET_ITEM(tmp_right_value_34, 0, tmp_tuple_element_133);
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_type_arg_68 = tmp_class_creation_34__prepared;
            tmp_expression_value_170 = BUILTIN_TYPE1(tmp_type_arg_68);
            assert(!(tmp_expression_value_170 == NULL));
            tmp_tuple_element_133 = LOOKUP_ATTRIBUTE(tmp_expression_value_170, mod_consts[210]);
            Py_DECREF(tmp_expression_value_170);
            if (tmp_tuple_element_133 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1082;

                goto tuple_build_exception_34;
            }
            PyTuple_SET_ITEM(tmp_right_value_34, 1, tmp_tuple_element_133);
        }
        goto tuple_build_noexception_34;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_34:;
        Py_DECREF(tmp_right_value_34);
        goto try_except_handler_102;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_34:;
        tmp_raise_value_34 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_34, tmp_right_value_34);
        Py_DECREF(tmp_right_value_34);
        if (tmp_raise_value_34 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_102;
        }
        exception_type = tmp_raise_type_34;
        Py_INCREF(tmp_raise_type_34);
        exception_value = tmp_raise_value_34;
        exception_lineno = 1082;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_102;
    }
    branch_no_135:;
    goto branch_end_134;
    branch_no_134:;
    {
        PyObject *tmp_assign_source_282;
        tmp_assign_source_282 = PyDict_New();
        assert(tmp_class_creation_34__prepared == NULL);
        tmp_class_creation_34__prepared = tmp_assign_source_282;
    }
    branch_end_134:;
    {
        PyObject *tmp_assign_source_283;
        {
            PyObject *tmp_set_locals_34;
            CHECK_OBJECT(tmp_class_creation_34__prepared);
            tmp_set_locals_34 = tmp_class_creation_34__prepared;
            locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082 = tmp_set_locals_34;
            Py_INCREF(tmp_set_locals_34);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_104;
        }
        tmp_dictset_value = mod_consts[367];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_104;
        }
        tmp_dictset_value = mod_consts[366];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_104;
        }
        if (isFrameUnusable(cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35)) {
            Py_XDECREF(cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35);

#if _DEBUG_REFCOUNTS
            if (cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35 = MAKE_FUNCTION_FRAME(codeobj_fb361f9d0e6a182ca93af130c75a50b2, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35->m_type_description == NULL);
        frame_fb361f9d0e6a182ca93af130c75a50b2_35 = cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_fb361f9d0e6a182ca93af130c75a50b2_35);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_fb361f9d0e6a182ca93af130c75a50b2_35) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[368];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1106;
            type_description_2 = "o";
            goto frame_exception_exit_35;
        }
        {
            PyObject *tmp_defaults_3;
            tmp_defaults_3 = mod_consts[73];
            Py_INCREF(tmp_defaults_3);


            tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__47___init__(tmp_defaults_3);

            tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082, mod_consts[216], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1108;
                type_description_2 = "o";
                goto frame_exception_exit_35;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fb361f9d0e6a182ca93af130c75a50b2_35);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_34;

        frame_exception_exit_35:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fb361f9d0e6a182ca93af130c75a50b2_35);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_fb361f9d0e6a182ca93af130c75a50b2_35, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_fb361f9d0e6a182ca93af130c75a50b2_35->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_fb361f9d0e6a182ca93af130c75a50b2_35, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_fb361f9d0e6a182ca93af130c75a50b2_35,
            type_description_2,
            outline_33_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_fb361f9d0e6a182ca93af130c75a50b2_35 == cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35);
            cache_frame_fb361f9d0e6a182ca93af130c75a50b2_35 = NULL;
        }

        assertFrameObject(frame_fb361f9d0e6a182ca93af130c75a50b2_35);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_34;

        frame_no_exception_34:;
        goto skip_nested_handling_34;
        nested_frame_exit_34:;

        goto try_except_handler_104;
        skip_nested_handling_34:;
        {
            nuitka_bool tmp_condition_result_204;
            PyObject *tmp_cmp_expr_left_34;
            PyObject *tmp_cmp_expr_right_34;
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_cmp_expr_left_34 = tmp_class_creation_34__bases;
            CHECK_OBJECT(tmp_class_creation_34__bases_orig);
            tmp_cmp_expr_right_34 = tmp_class_creation_34__bases_orig;
            tmp_condition_result_204 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_34, tmp_cmp_expr_right_34);
            if (tmp_condition_result_204 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1082;

                goto try_except_handler_104;
            }
            if (tmp_condition_result_204 == NUITKA_BOOL_TRUE) {
                goto branch_yes_136;
            } else {
                goto branch_no_136;
            }
            assert(tmp_condition_result_204 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_136:;
        CHECK_OBJECT(tmp_class_creation_34__bases_orig);
        tmp_dictset_value = tmp_class_creation_34__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1082;

            goto try_except_handler_104;
        }
        branch_no_136:;
        {
            PyObject *tmp_assign_source_284;
            PyObject *tmp_called_value_68;
            PyObject *tmp_args_value_68;
            PyObject *tmp_tuple_element_134;
            PyObject *tmp_kwargs_value_68;
            CHECK_OBJECT(tmp_class_creation_34__metaclass);
            tmp_called_value_68 = tmp_class_creation_34__metaclass;
            tmp_tuple_element_134 = mod_consts[366];
            tmp_args_value_68 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_68, 0, tmp_tuple_element_134);
            CHECK_OBJECT(tmp_class_creation_34__bases);
            tmp_tuple_element_134 = tmp_class_creation_34__bases;
            PyTuple_SET_ITEM0(tmp_args_value_68, 1, tmp_tuple_element_134);
            tmp_tuple_element_134 = locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082;
            PyTuple_SET_ITEM0(tmp_args_value_68, 2, tmp_tuple_element_134);
            CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
            tmp_kwargs_value_68 = tmp_class_creation_34__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1082;
            tmp_assign_source_284 = CALL_FUNCTION(tmp_called_value_68, tmp_args_value_68, tmp_kwargs_value_68);
            Py_DECREF(tmp_args_value_68);
            if (tmp_assign_source_284 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1082;

                goto try_except_handler_104;
            }
            assert(outline_33_var___class__ == NULL);
            outline_33_var___class__ = tmp_assign_source_284;
        }
        CHECK_OBJECT(outline_33_var___class__);
        tmp_assign_source_283 = outline_33_var___class__;
        Py_INCREF(tmp_assign_source_283);
        goto try_return_handler_104;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_104:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082);
        locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082 = NULL;
        goto try_return_handler_103;
        // Exception handler code:
        try_except_handler_104:;
        exception_keeper_type_102 = exception_type;
        exception_keeper_value_102 = exception_value;
        exception_keeper_tb_102 = exception_tb;
        exception_keeper_lineno_102 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082);
        locals_xlwt$BIFFRecords$$$class__34_BoundSheetRecord_1082 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_102;
        exception_value = exception_keeper_value_102;
        exception_tb = exception_keeper_tb_102;
        exception_lineno = exception_keeper_lineno_102;

        goto try_except_handler_103;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_103:;
        CHECK_OBJECT(outline_33_var___class__);
        Py_DECREF(outline_33_var___class__);
        outline_33_var___class__ = NULL;
        goto outline_result_34;
        // Exception handler code:
        try_except_handler_103:;
        exception_keeper_type_103 = exception_type;
        exception_keeper_value_103 = exception_value;
        exception_keeper_tb_103 = exception_tb;
        exception_keeper_lineno_103 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_103;
        exception_value = exception_keeper_value_103;
        exception_tb = exception_keeper_tb_103;
        exception_lineno = exception_keeper_lineno_103;

        goto outline_exception_34;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_34:;
        exception_lineno = 1082;
        goto try_except_handler_102;
        outline_result_34:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[366], tmp_assign_source_283);
    }
    goto try_end_36;
    // Exception handler code:
    try_except_handler_102:;
    exception_keeper_type_104 = exception_type;
    exception_keeper_value_104 = exception_value;
    exception_keeper_tb_104 = exception_tb;
    exception_keeper_lineno_104 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    Py_XDECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_104;
    exception_value = exception_keeper_value_104;
    exception_tb = exception_keeper_tb_104;
    exception_lineno = exception_keeper_lineno_104;

    goto frame_exception_exit_1;
    // End of try:
    try_end_36:;
    CHECK_OBJECT(tmp_class_creation_34__bases_orig);
    Py_DECREF(tmp_class_creation_34__bases_orig);
    tmp_class_creation_34__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_34__bases);
    Py_DECREF(tmp_class_creation_34__bases);
    tmp_class_creation_34__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_34__class_decl_dict);
    Py_DECREF(tmp_class_creation_34__class_decl_dict);
    tmp_class_creation_34__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_34__metaclass);
    Py_DECREF(tmp_class_creation_34__metaclass);
    tmp_class_creation_34__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_34__prepared);
    Py_DECREF(tmp_class_creation_34__prepared);
    tmp_class_creation_34__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_285;
        PyObject *tmp_tuple_element_135;
        tmp_tuple_element_135 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_135 == NULL)) {
            tmp_tuple_element_135 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        tmp_assign_source_285 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_285, 0, tmp_tuple_element_135);
        assert(tmp_class_creation_35__bases_orig == NULL);
        tmp_class_creation_35__bases_orig = tmp_assign_source_285;
    }
    {
        PyObject *tmp_assign_source_286;
        PyObject *tmp_dircall_arg1_35;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dircall_arg1_35 = tmp_class_creation_35__bases_orig;
        Py_INCREF(tmp_dircall_arg1_35);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_35};
            tmp_assign_source_286 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_286 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        assert(tmp_class_creation_35__bases == NULL);
        tmp_class_creation_35__bases = tmp_assign_source_286;
    }
    {
        PyObject *tmp_assign_source_287;
        tmp_assign_source_287 = PyDict_New();
        assert(tmp_class_creation_35__class_decl_dict == NULL);
        tmp_class_creation_35__class_decl_dict = tmp_assign_source_287;
    }
    {
        PyObject *tmp_assign_source_288;
        PyObject *tmp_metaclass_value_35;
        bool tmp_condition_result_205;
        PyObject *tmp_key_value_103;
        PyObject *tmp_dict_arg_value_103;
        PyObject *tmp_dict_arg_value_104;
        PyObject *tmp_key_value_104;
        nuitka_bool tmp_condition_result_206;
        int tmp_truth_name_35;
        PyObject *tmp_type_arg_69;
        PyObject *tmp_expression_value_171;
        PyObject *tmp_subscript_value_35;
        PyObject *tmp_bases_value_35;
        tmp_key_value_103 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_103 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_103, tmp_key_value_103);
        assert(!(tmp_res == -1));
        tmp_condition_result_205 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_205 != false) {
            goto condexpr_true_69;
        } else {
            goto condexpr_false_69;
        }
        condexpr_true_69:;
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_104 = tmp_class_creation_35__class_decl_dict;
        tmp_key_value_104 = mod_consts[205];
        tmp_metaclass_value_35 = DICT_GET_ITEM0(tmp_dict_arg_value_104, tmp_key_value_104);
        if (tmp_metaclass_value_35 == NULL) {
            tmp_metaclass_value_35 = Py_None;
        }
        assert(!(tmp_metaclass_value_35 == NULL));
        Py_INCREF(tmp_metaclass_value_35);
        goto condexpr_end_69;
        condexpr_false_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_truth_name_35 = CHECK_IF_TRUE(tmp_class_creation_35__bases);
        if (tmp_truth_name_35 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        tmp_condition_result_206 = tmp_truth_name_35 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_206 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_70;
        } else {
            goto condexpr_false_70;
        }
        condexpr_true_70:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_expression_value_171 = tmp_class_creation_35__bases;
        tmp_subscript_value_35 = mod_consts[4];
        tmp_type_arg_69 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_171, tmp_subscript_value_35, 0);
        if (tmp_type_arg_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        tmp_metaclass_value_35 = BUILTIN_TYPE1(tmp_type_arg_69);
        Py_DECREF(tmp_type_arg_69);
        if (tmp_metaclass_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        goto condexpr_end_70;
        condexpr_false_70:;
        tmp_metaclass_value_35 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_35);
        condexpr_end_70:;
        condexpr_end_69:;
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_bases_value_35 = tmp_class_creation_35__bases;
        tmp_assign_source_288 = SELECT_METACLASS(tmp_metaclass_value_35, tmp_bases_value_35);
        Py_DECREF(tmp_metaclass_value_35);
        if (tmp_assign_source_288 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        assert(tmp_class_creation_35__metaclass == NULL);
        tmp_class_creation_35__metaclass = tmp_assign_source_288;
    }
    {
        bool tmp_condition_result_207;
        PyObject *tmp_key_value_105;
        PyObject *tmp_dict_arg_value_105;
        tmp_key_value_105 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_dict_arg_value_105 = tmp_class_creation_35__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_105, tmp_key_value_105);
        assert(!(tmp_res == -1));
        tmp_condition_result_207 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_207 != false) {
            goto branch_yes_137;
        } else {
            goto branch_no_137;
        }
    }
    branch_yes_137:;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_35__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1115;

        goto try_except_handler_105;
    }
    branch_no_137:;
    {
        nuitka_bool tmp_condition_result_208;
        PyObject *tmp_expression_value_172;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_172 = tmp_class_creation_35__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_172, mod_consts[206]);
        tmp_condition_result_208 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_208 == NUITKA_BOOL_TRUE) {
            goto branch_yes_138;
        } else {
            goto branch_no_138;
        }
    }
    branch_yes_138:;
    {
        PyObject *tmp_assign_source_289;
        PyObject *tmp_called_value_69;
        PyObject *tmp_expression_value_173;
        PyObject *tmp_args_value_69;
        PyObject *tmp_tuple_element_136;
        PyObject *tmp_kwargs_value_69;
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_expression_value_173 = tmp_class_creation_35__metaclass;
        tmp_called_value_69 = LOOKUP_ATTRIBUTE(tmp_expression_value_173, mod_consts[206]);
        if (tmp_called_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        tmp_tuple_element_136 = mod_consts[370];
        tmp_args_value_69 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_69, 0, tmp_tuple_element_136);
        CHECK_OBJECT(tmp_class_creation_35__bases);
        tmp_tuple_element_136 = tmp_class_creation_35__bases;
        PyTuple_SET_ITEM0(tmp_args_value_69, 1, tmp_tuple_element_136);
        CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
        tmp_kwargs_value_69 = tmp_class_creation_35__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1115;
        tmp_assign_source_289 = CALL_FUNCTION(tmp_called_value_69, tmp_args_value_69, tmp_kwargs_value_69);
        Py_DECREF(tmp_called_value_69);
        Py_DECREF(tmp_args_value_69);
        if (tmp_assign_source_289 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_289;
    }
    {
        bool tmp_condition_result_209;
        PyObject *tmp_operand_value_35;
        PyObject *tmp_expression_value_174;
        CHECK_OBJECT(tmp_class_creation_35__prepared);
        tmp_expression_value_174 = tmp_class_creation_35__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_174, mod_consts[208]);
        tmp_operand_value_35 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_35);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        tmp_condition_result_209 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_209 != false) {
            goto branch_yes_139;
        } else {
            goto branch_no_139;
        }
    }
    branch_yes_139:;
    {
        PyObject *tmp_raise_type_35;
        PyObject *tmp_raise_value_35;
        PyObject *tmp_left_value_35;
        PyObject *tmp_right_value_35;
        PyObject *tmp_tuple_element_137;
        PyObject *tmp_getattr_target_35;
        PyObject *tmp_getattr_attr_35;
        PyObject *tmp_getattr_default_35;
        tmp_raise_type_35 = PyExc_TypeError;
        tmp_left_value_35 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_35__metaclass);
        tmp_getattr_target_35 = tmp_class_creation_35__metaclass;
        tmp_getattr_attr_35 = mod_consts[210];
        tmp_getattr_default_35 = mod_consts[211];
        tmp_tuple_element_137 = BUILTIN_GETATTR(tmp_getattr_target_35, tmp_getattr_attr_35, tmp_getattr_default_35);
        if (tmp_tuple_element_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        tmp_right_value_35 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_175;
            PyObject *tmp_type_arg_70;
            PyTuple_SET_ITEM(tmp_right_value_35, 0, tmp_tuple_element_137);
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_type_arg_70 = tmp_class_creation_35__prepared;
            tmp_expression_value_175 = BUILTIN_TYPE1(tmp_type_arg_70);
            assert(!(tmp_expression_value_175 == NULL));
            tmp_tuple_element_137 = LOOKUP_ATTRIBUTE(tmp_expression_value_175, mod_consts[210]);
            Py_DECREF(tmp_expression_value_175);
            if (tmp_tuple_element_137 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1115;

                goto tuple_build_exception_35;
            }
            PyTuple_SET_ITEM(tmp_right_value_35, 1, tmp_tuple_element_137);
        }
        goto tuple_build_noexception_35;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_35:;
        Py_DECREF(tmp_right_value_35);
        goto try_except_handler_105;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_35:;
        tmp_raise_value_35 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_35, tmp_right_value_35);
        Py_DECREF(tmp_right_value_35);
        if (tmp_raise_value_35 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_105;
        }
        exception_type = tmp_raise_type_35;
        Py_INCREF(tmp_raise_type_35);
        exception_value = tmp_raise_value_35;
        exception_lineno = 1115;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_105;
    }
    branch_no_139:;
    goto branch_end_138;
    branch_no_138:;
    {
        PyObject *tmp_assign_source_290;
        tmp_assign_source_290 = PyDict_New();
        assert(tmp_class_creation_35__prepared == NULL);
        tmp_class_creation_35__prepared = tmp_assign_source_290;
    }
    branch_end_138:;
    {
        PyObject *tmp_assign_source_291;
        {
            PyObject *tmp_set_locals_35;
            CHECK_OBJECT(tmp_class_creation_35__prepared);
            tmp_set_locals_35 = tmp_class_creation_35__prepared;
            locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115 = tmp_set_locals_35;
            Py_INCREF(tmp_set_locals_35);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_107;
        }
        tmp_dictset_value = mod_consts[371];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_107;
        }
        tmp_dictset_value = mod_consts[370];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_107;
        }
        if (isFrameUnusable(cache_frame_fead5254e6910aca50851e0d22b77d62_36)) {
            Py_XDECREF(cache_frame_fead5254e6910aca50851e0d22b77d62_36);

#if _DEBUG_REFCOUNTS
            if (cache_frame_fead5254e6910aca50851e0d22b77d62_36 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_fead5254e6910aca50851e0d22b77d62_36 = MAKE_FUNCTION_FRAME(codeobj_fead5254e6910aca50851e0d22b77d62, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_fead5254e6910aca50851e0d22b77d62_36->m_type_description == NULL);
        frame_fead5254e6910aca50851e0d22b77d62_36 = cache_frame_fead5254e6910aca50851e0d22b77d62_36;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_fead5254e6910aca50851e0d22b77d62_36);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_fead5254e6910aca50851e0d22b77d62_36) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[63];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1145;
            type_description_2 = "o";
            goto frame_exception_exit_36;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fead5254e6910aca50851e0d22b77d62_36);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_35;

        frame_exception_exit_36:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_fead5254e6910aca50851e0d22b77d62_36);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_fead5254e6910aca50851e0d22b77d62_36, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_fead5254e6910aca50851e0d22b77d62_36->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_fead5254e6910aca50851e0d22b77d62_36, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_fead5254e6910aca50851e0d22b77d62_36,
            type_description_2,
            outline_34_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_fead5254e6910aca50851e0d22b77d62_36 == cache_frame_fead5254e6910aca50851e0d22b77d62_36) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_fead5254e6910aca50851e0d22b77d62_36);
            cache_frame_fead5254e6910aca50851e0d22b77d62_36 = NULL;
        }

        assertFrameObject(frame_fead5254e6910aca50851e0d22b77d62_36);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_35;

        frame_no_exception_35:;
        goto skip_nested_handling_35;
        nested_frame_exit_35:;

        goto try_except_handler_107;
        skip_nested_handling_35:;
        {
            nuitka_bool tmp_condition_result_210;
            PyObject *tmp_cmp_expr_left_35;
            PyObject *tmp_cmp_expr_right_35;
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_cmp_expr_left_35 = tmp_class_creation_35__bases;
            CHECK_OBJECT(tmp_class_creation_35__bases_orig);
            tmp_cmp_expr_right_35 = tmp_class_creation_35__bases_orig;
            tmp_condition_result_210 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_35, tmp_cmp_expr_right_35);
            if (tmp_condition_result_210 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1115;

                goto try_except_handler_107;
            }
            if (tmp_condition_result_210 == NUITKA_BOOL_TRUE) {
                goto branch_yes_140;
            } else {
                goto branch_no_140;
            }
            assert(tmp_condition_result_210 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_140:;
        CHECK_OBJECT(tmp_class_creation_35__bases_orig);
        tmp_dictset_value = tmp_class_creation_35__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1115;

            goto try_except_handler_107;
        }
        branch_no_140:;
        {
            PyObject *tmp_assign_source_292;
            PyObject *tmp_called_value_70;
            PyObject *tmp_args_value_70;
            PyObject *tmp_tuple_element_138;
            PyObject *tmp_kwargs_value_70;
            CHECK_OBJECT(tmp_class_creation_35__metaclass);
            tmp_called_value_70 = tmp_class_creation_35__metaclass;
            tmp_tuple_element_138 = mod_consts[370];
            tmp_args_value_70 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_70, 0, tmp_tuple_element_138);
            CHECK_OBJECT(tmp_class_creation_35__bases);
            tmp_tuple_element_138 = tmp_class_creation_35__bases;
            PyTuple_SET_ITEM0(tmp_args_value_70, 1, tmp_tuple_element_138);
            tmp_tuple_element_138 = locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115;
            PyTuple_SET_ITEM0(tmp_args_value_70, 2, tmp_tuple_element_138);
            CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
            tmp_kwargs_value_70 = tmp_class_creation_35__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1115;
            tmp_assign_source_292 = CALL_FUNCTION(tmp_called_value_70, tmp_args_value_70, tmp_kwargs_value_70);
            Py_DECREF(tmp_args_value_70);
            if (tmp_assign_source_292 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1115;

                goto try_except_handler_107;
            }
            assert(outline_34_var___class__ == NULL);
            outline_34_var___class__ = tmp_assign_source_292;
        }
        CHECK_OBJECT(outline_34_var___class__);
        tmp_assign_source_291 = outline_34_var___class__;
        Py_INCREF(tmp_assign_source_291);
        goto try_return_handler_107;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_107:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115);
        locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115 = NULL;
        goto try_return_handler_106;
        // Exception handler code:
        try_except_handler_107:;
        exception_keeper_type_105 = exception_type;
        exception_keeper_value_105 = exception_value;
        exception_keeper_tb_105 = exception_tb;
        exception_keeper_lineno_105 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115);
        locals_xlwt$BIFFRecords$$$class__35_ContinueRecord_1115 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_105;
        exception_value = exception_keeper_value_105;
        exception_tb = exception_keeper_tb_105;
        exception_lineno = exception_keeper_lineno_105;

        goto try_except_handler_106;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_106:;
        CHECK_OBJECT(outline_34_var___class__);
        Py_DECREF(outline_34_var___class__);
        outline_34_var___class__ = NULL;
        goto outline_result_35;
        // Exception handler code:
        try_except_handler_106:;
        exception_keeper_type_106 = exception_type;
        exception_keeper_value_106 = exception_value;
        exception_keeper_tb_106 = exception_tb;
        exception_keeper_lineno_106 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_106;
        exception_value = exception_keeper_value_106;
        exception_tb = exception_keeper_tb_106;
        exception_lineno = exception_keeper_lineno_106;

        goto outline_exception_35;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_35:;
        exception_lineno = 1115;
        goto try_except_handler_105;
        outline_result_35:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[370], tmp_assign_source_291);
    }
    goto try_end_37;
    // Exception handler code:
    try_except_handler_105:;
    exception_keeper_type_107 = exception_type;
    exception_keeper_value_107 = exception_value;
    exception_keeper_tb_107 = exception_tb;
    exception_keeper_lineno_107 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    Py_XDECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_107;
    exception_value = exception_keeper_value_107;
    exception_tb = exception_keeper_tb_107;
    exception_lineno = exception_keeper_lineno_107;

    goto frame_exception_exit_1;
    // End of try:
    try_end_37:;
    CHECK_OBJECT(tmp_class_creation_35__bases_orig);
    Py_DECREF(tmp_class_creation_35__bases_orig);
    tmp_class_creation_35__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_35__bases);
    Py_DECREF(tmp_class_creation_35__bases);
    tmp_class_creation_35__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_35__class_decl_dict);
    Py_DECREF(tmp_class_creation_35__class_decl_dict);
    tmp_class_creation_35__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_35__metaclass);
    Py_DECREF(tmp_class_creation_35__metaclass);
    tmp_class_creation_35__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_35__prepared);
    Py_DECREF(tmp_class_creation_35__prepared);
    tmp_class_creation_35__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_293;
        PyObject *tmp_tuple_element_139;
        tmp_tuple_element_139 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_139 == NULL)) {
            tmp_tuple_element_139 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        tmp_assign_source_293 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_293, 0, tmp_tuple_element_139);
        assert(tmp_class_creation_36__bases_orig == NULL);
        tmp_class_creation_36__bases_orig = tmp_assign_source_293;
    }
    {
        PyObject *tmp_assign_source_294;
        PyObject *tmp_dircall_arg1_36;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dircall_arg1_36 = tmp_class_creation_36__bases_orig;
        Py_INCREF(tmp_dircall_arg1_36);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_36};
            tmp_assign_source_294 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_294 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        assert(tmp_class_creation_36__bases == NULL);
        tmp_class_creation_36__bases = tmp_assign_source_294;
    }
    {
        PyObject *tmp_assign_source_295;
        tmp_assign_source_295 = PyDict_New();
        assert(tmp_class_creation_36__class_decl_dict == NULL);
        tmp_class_creation_36__class_decl_dict = tmp_assign_source_295;
    }
    {
        PyObject *tmp_assign_source_296;
        PyObject *tmp_metaclass_value_36;
        bool tmp_condition_result_211;
        PyObject *tmp_key_value_106;
        PyObject *tmp_dict_arg_value_106;
        PyObject *tmp_dict_arg_value_107;
        PyObject *tmp_key_value_107;
        nuitka_bool tmp_condition_result_212;
        int tmp_truth_name_36;
        PyObject *tmp_type_arg_71;
        PyObject *tmp_expression_value_176;
        PyObject *tmp_subscript_value_36;
        PyObject *tmp_bases_value_36;
        tmp_key_value_106 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_106 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_106, tmp_key_value_106);
        assert(!(tmp_res == -1));
        tmp_condition_result_211 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_211 != false) {
            goto condexpr_true_71;
        } else {
            goto condexpr_false_71;
        }
        condexpr_true_71:;
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_107 = tmp_class_creation_36__class_decl_dict;
        tmp_key_value_107 = mod_consts[205];
        tmp_metaclass_value_36 = DICT_GET_ITEM0(tmp_dict_arg_value_107, tmp_key_value_107);
        if (tmp_metaclass_value_36 == NULL) {
            tmp_metaclass_value_36 = Py_None;
        }
        assert(!(tmp_metaclass_value_36 == NULL));
        Py_INCREF(tmp_metaclass_value_36);
        goto condexpr_end_71;
        condexpr_false_71:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_truth_name_36 = CHECK_IF_TRUE(tmp_class_creation_36__bases);
        if (tmp_truth_name_36 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        tmp_condition_result_212 = tmp_truth_name_36 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_212 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_72;
        } else {
            goto condexpr_false_72;
        }
        condexpr_true_72:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_expression_value_176 = tmp_class_creation_36__bases;
        tmp_subscript_value_36 = mod_consts[4];
        tmp_type_arg_71 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_176, tmp_subscript_value_36, 0);
        if (tmp_type_arg_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        tmp_metaclass_value_36 = BUILTIN_TYPE1(tmp_type_arg_71);
        Py_DECREF(tmp_type_arg_71);
        if (tmp_metaclass_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        goto condexpr_end_72;
        condexpr_false_72:;
        tmp_metaclass_value_36 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_36);
        condexpr_end_72:;
        condexpr_end_71:;
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_bases_value_36 = tmp_class_creation_36__bases;
        tmp_assign_source_296 = SELECT_METACLASS(tmp_metaclass_value_36, tmp_bases_value_36);
        Py_DECREF(tmp_metaclass_value_36);
        if (tmp_assign_source_296 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        assert(tmp_class_creation_36__metaclass == NULL);
        tmp_class_creation_36__metaclass = tmp_assign_source_296;
    }
    {
        bool tmp_condition_result_213;
        PyObject *tmp_key_value_108;
        PyObject *tmp_dict_arg_value_108;
        tmp_key_value_108 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_dict_arg_value_108 = tmp_class_creation_36__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_108, tmp_key_value_108);
        assert(!(tmp_res == -1));
        tmp_condition_result_213 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_213 != false) {
            goto branch_yes_141;
        } else {
            goto branch_no_141;
        }
    }
    branch_yes_141:;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_36__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1148;

        goto try_except_handler_108;
    }
    branch_no_141:;
    {
        nuitka_bool tmp_condition_result_214;
        PyObject *tmp_expression_value_177;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_177 = tmp_class_creation_36__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_177, mod_consts[206]);
        tmp_condition_result_214 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_214 == NUITKA_BOOL_TRUE) {
            goto branch_yes_142;
        } else {
            goto branch_no_142;
        }
    }
    branch_yes_142:;
    {
        PyObject *tmp_assign_source_297;
        PyObject *tmp_called_value_71;
        PyObject *tmp_expression_value_178;
        PyObject *tmp_args_value_71;
        PyObject *tmp_tuple_element_140;
        PyObject *tmp_kwargs_value_71;
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_expression_value_178 = tmp_class_creation_36__metaclass;
        tmp_called_value_71 = LOOKUP_ATTRIBUTE(tmp_expression_value_178, mod_consts[206]);
        if (tmp_called_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        tmp_tuple_element_140 = mod_consts[372];
        tmp_args_value_71 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_71, 0, tmp_tuple_element_140);
        CHECK_OBJECT(tmp_class_creation_36__bases);
        tmp_tuple_element_140 = tmp_class_creation_36__bases;
        PyTuple_SET_ITEM0(tmp_args_value_71, 1, tmp_tuple_element_140);
        CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
        tmp_kwargs_value_71 = tmp_class_creation_36__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1148;
        tmp_assign_source_297 = CALL_FUNCTION(tmp_called_value_71, tmp_args_value_71, tmp_kwargs_value_71);
        Py_DECREF(tmp_called_value_71);
        Py_DECREF(tmp_args_value_71);
        if (tmp_assign_source_297 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_297;
    }
    {
        bool tmp_condition_result_215;
        PyObject *tmp_operand_value_36;
        PyObject *tmp_expression_value_179;
        CHECK_OBJECT(tmp_class_creation_36__prepared);
        tmp_expression_value_179 = tmp_class_creation_36__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_179, mod_consts[208]);
        tmp_operand_value_36 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_36);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        tmp_condition_result_215 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_215 != false) {
            goto branch_yes_143;
        } else {
            goto branch_no_143;
        }
    }
    branch_yes_143:;
    {
        PyObject *tmp_raise_type_36;
        PyObject *tmp_raise_value_36;
        PyObject *tmp_left_value_36;
        PyObject *tmp_right_value_36;
        PyObject *tmp_tuple_element_141;
        PyObject *tmp_getattr_target_36;
        PyObject *tmp_getattr_attr_36;
        PyObject *tmp_getattr_default_36;
        tmp_raise_type_36 = PyExc_TypeError;
        tmp_left_value_36 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_36__metaclass);
        tmp_getattr_target_36 = tmp_class_creation_36__metaclass;
        tmp_getattr_attr_36 = mod_consts[210];
        tmp_getattr_default_36 = mod_consts[211];
        tmp_tuple_element_141 = BUILTIN_GETATTR(tmp_getattr_target_36, tmp_getattr_attr_36, tmp_getattr_default_36);
        if (tmp_tuple_element_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        tmp_right_value_36 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_180;
            PyObject *tmp_type_arg_72;
            PyTuple_SET_ITEM(tmp_right_value_36, 0, tmp_tuple_element_141);
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_type_arg_72 = tmp_class_creation_36__prepared;
            tmp_expression_value_180 = BUILTIN_TYPE1(tmp_type_arg_72);
            assert(!(tmp_expression_value_180 == NULL));
            tmp_tuple_element_141 = LOOKUP_ATTRIBUTE(tmp_expression_value_180, mod_consts[210]);
            Py_DECREF(tmp_expression_value_180);
            if (tmp_tuple_element_141 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1148;

                goto tuple_build_exception_36;
            }
            PyTuple_SET_ITEM(tmp_right_value_36, 1, tmp_tuple_element_141);
        }
        goto tuple_build_noexception_36;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_36:;
        Py_DECREF(tmp_right_value_36);
        goto try_except_handler_108;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_36:;
        tmp_raise_value_36 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_36, tmp_right_value_36);
        Py_DECREF(tmp_right_value_36);
        if (tmp_raise_value_36 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_108;
        }
        exception_type = tmp_raise_type_36;
        Py_INCREF(tmp_raise_type_36);
        exception_value = tmp_raise_value_36;
        exception_lineno = 1148;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_108;
    }
    branch_no_143:;
    goto branch_end_142;
    branch_no_142:;
    {
        PyObject *tmp_assign_source_298;
        tmp_assign_source_298 = PyDict_New();
        assert(tmp_class_creation_36__prepared == NULL);
        tmp_class_creation_36__prepared = tmp_assign_source_298;
    }
    branch_end_142:;
    {
        PyObject *tmp_assign_source_299;
        {
            PyObject *tmp_set_locals_36;
            CHECK_OBJECT(tmp_class_creation_36__prepared);
            tmp_set_locals_36 = tmp_class_creation_36__prepared;
            locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148 = tmp_set_locals_36;
            Py_INCREF(tmp_set_locals_36);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_110;
        }
        tmp_dictset_value = mod_consts[373];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_110;
        }
        tmp_dictset_value = mod_consts[372];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_110;
        }
        if (isFrameUnusable(cache_frame_71dfa77e0090cb598bd714737eb7d809_37)) {
            Py_XDECREF(cache_frame_71dfa77e0090cb598bd714737eb7d809_37);

#if _DEBUG_REFCOUNTS
            if (cache_frame_71dfa77e0090cb598bd714737eb7d809_37 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_71dfa77e0090cb598bd714737eb7d809_37 = MAKE_FUNCTION_FRAME(codeobj_71dfa77e0090cb598bd714737eb7d809, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_71dfa77e0090cb598bd714737eb7d809_37->m_type_description == NULL);
        frame_71dfa77e0090cb598bd714737eb7d809_37 = cache_frame_71dfa77e0090cb598bd714737eb7d809_37;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_71dfa77e0090cb598bd714737eb7d809_37);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_71dfa77e0090cb598bd714737eb7d809_37) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[215];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1165;
            type_description_2 = "o";
            goto frame_exception_exit_37;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_71dfa77e0090cb598bd714737eb7d809_37);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_36;

        frame_exception_exit_37:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_71dfa77e0090cb598bd714737eb7d809_37);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_71dfa77e0090cb598bd714737eb7d809_37, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_71dfa77e0090cb598bd714737eb7d809_37->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_71dfa77e0090cb598bd714737eb7d809_37, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_71dfa77e0090cb598bd714737eb7d809_37,
            type_description_2,
            outline_35_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_71dfa77e0090cb598bd714737eb7d809_37 == cache_frame_71dfa77e0090cb598bd714737eb7d809_37) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_71dfa77e0090cb598bd714737eb7d809_37);
            cache_frame_71dfa77e0090cb598bd714737eb7d809_37 = NULL;
        }

        assertFrameObject(frame_71dfa77e0090cb598bd714737eb7d809_37);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_36;

        frame_no_exception_36:;
        goto skip_nested_handling_36;
        nested_frame_exit_36:;

        goto try_except_handler_110;
        skip_nested_handling_36:;
        {
            nuitka_bool tmp_condition_result_216;
            PyObject *tmp_cmp_expr_left_36;
            PyObject *tmp_cmp_expr_right_36;
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_cmp_expr_left_36 = tmp_class_creation_36__bases;
            CHECK_OBJECT(tmp_class_creation_36__bases_orig);
            tmp_cmp_expr_right_36 = tmp_class_creation_36__bases_orig;
            tmp_condition_result_216 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_36, tmp_cmp_expr_right_36);
            if (tmp_condition_result_216 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1148;

                goto try_except_handler_110;
            }
            if (tmp_condition_result_216 == NUITKA_BOOL_TRUE) {
                goto branch_yes_144;
            } else {
                goto branch_no_144;
            }
            assert(tmp_condition_result_216 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_144:;
        CHECK_OBJECT(tmp_class_creation_36__bases_orig);
        tmp_dictset_value = tmp_class_creation_36__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1148;

            goto try_except_handler_110;
        }
        branch_no_144:;
        {
            PyObject *tmp_assign_source_300;
            PyObject *tmp_called_value_72;
            PyObject *tmp_args_value_72;
            PyObject *tmp_tuple_element_142;
            PyObject *tmp_kwargs_value_72;
            CHECK_OBJECT(tmp_class_creation_36__metaclass);
            tmp_called_value_72 = tmp_class_creation_36__metaclass;
            tmp_tuple_element_142 = mod_consts[372];
            tmp_args_value_72 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_72, 0, tmp_tuple_element_142);
            CHECK_OBJECT(tmp_class_creation_36__bases);
            tmp_tuple_element_142 = tmp_class_creation_36__bases;
            PyTuple_SET_ITEM0(tmp_args_value_72, 1, tmp_tuple_element_142);
            tmp_tuple_element_142 = locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148;
            PyTuple_SET_ITEM0(tmp_args_value_72, 2, tmp_tuple_element_142);
            CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
            tmp_kwargs_value_72 = tmp_class_creation_36__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1148;
            tmp_assign_source_300 = CALL_FUNCTION(tmp_called_value_72, tmp_args_value_72, tmp_kwargs_value_72);
            Py_DECREF(tmp_args_value_72);
            if (tmp_assign_source_300 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1148;

                goto try_except_handler_110;
            }
            assert(outline_35_var___class__ == NULL);
            outline_35_var___class__ = tmp_assign_source_300;
        }
        CHECK_OBJECT(outline_35_var___class__);
        tmp_assign_source_299 = outline_35_var___class__;
        Py_INCREF(tmp_assign_source_299);
        goto try_return_handler_110;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_110:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148);
        locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148 = NULL;
        goto try_return_handler_109;
        // Exception handler code:
        try_except_handler_110:;
        exception_keeper_type_108 = exception_type;
        exception_keeper_value_108 = exception_value;
        exception_keeper_tb_108 = exception_tb;
        exception_keeper_lineno_108 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148);
        locals_xlwt$BIFFRecords$$$class__36_SSTRecord_1148 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_108;
        exception_value = exception_keeper_value_108;
        exception_tb = exception_keeper_tb_108;
        exception_lineno = exception_keeper_lineno_108;

        goto try_except_handler_109;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_109:;
        CHECK_OBJECT(outline_35_var___class__);
        Py_DECREF(outline_35_var___class__);
        outline_35_var___class__ = NULL;
        goto outline_result_36;
        // Exception handler code:
        try_except_handler_109:;
        exception_keeper_type_109 = exception_type;
        exception_keeper_value_109 = exception_value;
        exception_keeper_tb_109 = exception_tb;
        exception_keeper_lineno_109 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_109;
        exception_value = exception_keeper_value_109;
        exception_tb = exception_keeper_tb_109;
        exception_lineno = exception_keeper_lineno_109;

        goto outline_exception_36;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_36:;
        exception_lineno = 1148;
        goto try_except_handler_108;
        outline_result_36:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[372], tmp_assign_source_299);
    }
    goto try_end_38;
    // Exception handler code:
    try_except_handler_108:;
    exception_keeper_type_110 = exception_type;
    exception_keeper_value_110 = exception_value;
    exception_keeper_tb_110 = exception_tb;
    exception_keeper_lineno_110 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    Py_XDECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_110;
    exception_value = exception_keeper_value_110;
    exception_tb = exception_keeper_tb_110;
    exception_lineno = exception_keeper_lineno_110;

    goto frame_exception_exit_1;
    // End of try:
    try_end_38:;
    CHECK_OBJECT(tmp_class_creation_36__bases_orig);
    Py_DECREF(tmp_class_creation_36__bases_orig);
    tmp_class_creation_36__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_36__bases);
    Py_DECREF(tmp_class_creation_36__bases);
    tmp_class_creation_36__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_36__class_decl_dict);
    Py_DECREF(tmp_class_creation_36__class_decl_dict);
    tmp_class_creation_36__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_36__metaclass);
    Py_DECREF(tmp_class_creation_36__metaclass);
    tmp_class_creation_36__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_36__prepared);
    Py_DECREF(tmp_class_creation_36__prepared);
    tmp_class_creation_36__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_301;
        PyObject *tmp_tuple_element_143;
        tmp_tuple_element_143 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_143 == NULL)) {
            tmp_tuple_element_143 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        tmp_assign_source_301 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_301, 0, tmp_tuple_element_143);
        assert(tmp_class_creation_37__bases_orig == NULL);
        tmp_class_creation_37__bases_orig = tmp_assign_source_301;
    }
    {
        PyObject *tmp_assign_source_302;
        PyObject *tmp_dircall_arg1_37;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dircall_arg1_37 = tmp_class_creation_37__bases_orig;
        Py_INCREF(tmp_dircall_arg1_37);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_37};
            tmp_assign_source_302 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_302 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        assert(tmp_class_creation_37__bases == NULL);
        tmp_class_creation_37__bases = tmp_assign_source_302;
    }
    {
        PyObject *tmp_assign_source_303;
        tmp_assign_source_303 = PyDict_New();
        assert(tmp_class_creation_37__class_decl_dict == NULL);
        tmp_class_creation_37__class_decl_dict = tmp_assign_source_303;
    }
    {
        PyObject *tmp_assign_source_304;
        PyObject *tmp_metaclass_value_37;
        bool tmp_condition_result_217;
        PyObject *tmp_key_value_109;
        PyObject *tmp_dict_arg_value_109;
        PyObject *tmp_dict_arg_value_110;
        PyObject *tmp_key_value_110;
        nuitka_bool tmp_condition_result_218;
        int tmp_truth_name_37;
        PyObject *tmp_type_arg_73;
        PyObject *tmp_expression_value_181;
        PyObject *tmp_subscript_value_37;
        PyObject *tmp_bases_value_37;
        tmp_key_value_109 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_109 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_109, tmp_key_value_109);
        assert(!(tmp_res == -1));
        tmp_condition_result_217 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_217 != false) {
            goto condexpr_true_73;
        } else {
            goto condexpr_false_73;
        }
        condexpr_true_73:;
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_110 = tmp_class_creation_37__class_decl_dict;
        tmp_key_value_110 = mod_consts[205];
        tmp_metaclass_value_37 = DICT_GET_ITEM0(tmp_dict_arg_value_110, tmp_key_value_110);
        if (tmp_metaclass_value_37 == NULL) {
            tmp_metaclass_value_37 = Py_None;
        }
        assert(!(tmp_metaclass_value_37 == NULL));
        Py_INCREF(tmp_metaclass_value_37);
        goto condexpr_end_73;
        condexpr_false_73:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_truth_name_37 = CHECK_IF_TRUE(tmp_class_creation_37__bases);
        if (tmp_truth_name_37 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        tmp_condition_result_218 = tmp_truth_name_37 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_218 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_74;
        } else {
            goto condexpr_false_74;
        }
        condexpr_true_74:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_expression_value_181 = tmp_class_creation_37__bases;
        tmp_subscript_value_37 = mod_consts[4];
        tmp_type_arg_73 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_181, tmp_subscript_value_37, 0);
        if (tmp_type_arg_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        tmp_metaclass_value_37 = BUILTIN_TYPE1(tmp_type_arg_73);
        Py_DECREF(tmp_type_arg_73);
        if (tmp_metaclass_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        goto condexpr_end_74;
        condexpr_false_74:;
        tmp_metaclass_value_37 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_37);
        condexpr_end_74:;
        condexpr_end_73:;
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_bases_value_37 = tmp_class_creation_37__bases;
        tmp_assign_source_304 = SELECT_METACLASS(tmp_metaclass_value_37, tmp_bases_value_37);
        Py_DECREF(tmp_metaclass_value_37);
        if (tmp_assign_source_304 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        assert(tmp_class_creation_37__metaclass == NULL);
        tmp_class_creation_37__metaclass = tmp_assign_source_304;
    }
    {
        bool tmp_condition_result_219;
        PyObject *tmp_key_value_111;
        PyObject *tmp_dict_arg_value_111;
        tmp_key_value_111 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_dict_arg_value_111 = tmp_class_creation_37__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_111, tmp_key_value_111);
        assert(!(tmp_res == -1));
        tmp_condition_result_219 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_219 != false) {
            goto branch_yes_145;
        } else {
            goto branch_no_145;
        }
    }
    branch_yes_145:;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_37__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1168;

        goto try_except_handler_111;
    }
    branch_no_145:;
    {
        nuitka_bool tmp_condition_result_220;
        PyObject *tmp_expression_value_182;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_182 = tmp_class_creation_37__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_182, mod_consts[206]);
        tmp_condition_result_220 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_220 == NUITKA_BOOL_TRUE) {
            goto branch_yes_146;
        } else {
            goto branch_no_146;
        }
    }
    branch_yes_146:;
    {
        PyObject *tmp_assign_source_305;
        PyObject *tmp_called_value_73;
        PyObject *tmp_expression_value_183;
        PyObject *tmp_args_value_73;
        PyObject *tmp_tuple_element_144;
        PyObject *tmp_kwargs_value_73;
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_expression_value_183 = tmp_class_creation_37__metaclass;
        tmp_called_value_73 = LOOKUP_ATTRIBUTE(tmp_expression_value_183, mod_consts[206]);
        if (tmp_called_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        tmp_tuple_element_144 = mod_consts[374];
        tmp_args_value_73 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_73, 0, tmp_tuple_element_144);
        CHECK_OBJECT(tmp_class_creation_37__bases);
        tmp_tuple_element_144 = tmp_class_creation_37__bases;
        PyTuple_SET_ITEM0(tmp_args_value_73, 1, tmp_tuple_element_144);
        CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
        tmp_kwargs_value_73 = tmp_class_creation_37__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1168;
        tmp_assign_source_305 = CALL_FUNCTION(tmp_called_value_73, tmp_args_value_73, tmp_kwargs_value_73);
        Py_DECREF(tmp_called_value_73);
        Py_DECREF(tmp_args_value_73);
        if (tmp_assign_source_305 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_305;
    }
    {
        bool tmp_condition_result_221;
        PyObject *tmp_operand_value_37;
        PyObject *tmp_expression_value_184;
        CHECK_OBJECT(tmp_class_creation_37__prepared);
        tmp_expression_value_184 = tmp_class_creation_37__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_184, mod_consts[208]);
        tmp_operand_value_37 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_37);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        tmp_condition_result_221 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_221 != false) {
            goto branch_yes_147;
        } else {
            goto branch_no_147;
        }
    }
    branch_yes_147:;
    {
        PyObject *tmp_raise_type_37;
        PyObject *tmp_raise_value_37;
        PyObject *tmp_left_value_37;
        PyObject *tmp_right_value_37;
        PyObject *tmp_tuple_element_145;
        PyObject *tmp_getattr_target_37;
        PyObject *tmp_getattr_attr_37;
        PyObject *tmp_getattr_default_37;
        tmp_raise_type_37 = PyExc_TypeError;
        tmp_left_value_37 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_37__metaclass);
        tmp_getattr_target_37 = tmp_class_creation_37__metaclass;
        tmp_getattr_attr_37 = mod_consts[210];
        tmp_getattr_default_37 = mod_consts[211];
        tmp_tuple_element_145 = BUILTIN_GETATTR(tmp_getattr_target_37, tmp_getattr_attr_37, tmp_getattr_default_37);
        if (tmp_tuple_element_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        tmp_right_value_37 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_185;
            PyObject *tmp_type_arg_74;
            PyTuple_SET_ITEM(tmp_right_value_37, 0, tmp_tuple_element_145);
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_type_arg_74 = tmp_class_creation_37__prepared;
            tmp_expression_value_185 = BUILTIN_TYPE1(tmp_type_arg_74);
            assert(!(tmp_expression_value_185 == NULL));
            tmp_tuple_element_145 = LOOKUP_ATTRIBUTE(tmp_expression_value_185, mod_consts[210]);
            Py_DECREF(tmp_expression_value_185);
            if (tmp_tuple_element_145 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1168;

                goto tuple_build_exception_37;
            }
            PyTuple_SET_ITEM(tmp_right_value_37, 1, tmp_tuple_element_145);
        }
        goto tuple_build_noexception_37;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_37:;
        Py_DECREF(tmp_right_value_37);
        goto try_except_handler_111;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_37:;
        tmp_raise_value_37 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_37, tmp_right_value_37);
        Py_DECREF(tmp_right_value_37);
        if (tmp_raise_value_37 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_111;
        }
        exception_type = tmp_raise_type_37;
        Py_INCREF(tmp_raise_type_37);
        exception_value = tmp_raise_value_37;
        exception_lineno = 1168;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_111;
    }
    branch_no_147:;
    goto branch_end_146;
    branch_no_146:;
    {
        PyObject *tmp_assign_source_306;
        tmp_assign_source_306 = PyDict_New();
        assert(tmp_class_creation_37__prepared == NULL);
        tmp_class_creation_37__prepared = tmp_assign_source_306;
    }
    branch_end_146:;
    {
        PyObject *tmp_assign_source_307;
        {
            PyObject *tmp_set_locals_37;
            CHECK_OBJECT(tmp_class_creation_37__prepared);
            tmp_set_locals_37 = tmp_class_creation_37__prepared;
            locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168 = tmp_set_locals_37;
            Py_INCREF(tmp_set_locals_37);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_113;
        }
        tmp_dictset_value = mod_consts[375];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_113;
        }
        tmp_dictset_value = mod_consts[374];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_113;
        }
        if (isFrameUnusable(cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38)) {
            Py_XDECREF(cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38 = MAKE_FUNCTION_FRAME(codeobj_e9649dbd698081b9d5f1a8ee1bac32ff, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38->m_type_description == NULL);
        frame_e9649dbd698081b9d5f1a8ee1bac32ff_38 = cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e9649dbd698081b9d5f1a8ee1bac32ff_38);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e9649dbd698081b9d5f1a8ee1bac32ff_38) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[376];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1189;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__48___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1191;
            type_description_2 = "o";
            goto frame_exception_exit_38;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e9649dbd698081b9d5f1a8ee1bac32ff_38);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_37;

        frame_exception_exit_38:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e9649dbd698081b9d5f1a8ee1bac32ff_38);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e9649dbd698081b9d5f1a8ee1bac32ff_38, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e9649dbd698081b9d5f1a8ee1bac32ff_38->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e9649dbd698081b9d5f1a8ee1bac32ff_38, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e9649dbd698081b9d5f1a8ee1bac32ff_38,
            type_description_2,
            outline_36_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e9649dbd698081b9d5f1a8ee1bac32ff_38 == cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38);
            cache_frame_e9649dbd698081b9d5f1a8ee1bac32ff_38 = NULL;
        }

        assertFrameObject(frame_e9649dbd698081b9d5f1a8ee1bac32ff_38);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_37;

        frame_no_exception_37:;
        goto skip_nested_handling_37;
        nested_frame_exit_37:;

        goto try_except_handler_113;
        skip_nested_handling_37:;
        {
            nuitka_bool tmp_condition_result_222;
            PyObject *tmp_cmp_expr_left_37;
            PyObject *tmp_cmp_expr_right_37;
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_cmp_expr_left_37 = tmp_class_creation_37__bases;
            CHECK_OBJECT(tmp_class_creation_37__bases_orig);
            tmp_cmp_expr_right_37 = tmp_class_creation_37__bases_orig;
            tmp_condition_result_222 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_37, tmp_cmp_expr_right_37);
            if (tmp_condition_result_222 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1168;

                goto try_except_handler_113;
            }
            if (tmp_condition_result_222 == NUITKA_BOOL_TRUE) {
                goto branch_yes_148;
            } else {
                goto branch_no_148;
            }
            assert(tmp_condition_result_222 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_148:;
        CHECK_OBJECT(tmp_class_creation_37__bases_orig);
        tmp_dictset_value = tmp_class_creation_37__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1168;

            goto try_except_handler_113;
        }
        branch_no_148:;
        {
            PyObject *tmp_assign_source_308;
            PyObject *tmp_called_value_74;
            PyObject *tmp_args_value_74;
            PyObject *tmp_tuple_element_146;
            PyObject *tmp_kwargs_value_74;
            CHECK_OBJECT(tmp_class_creation_37__metaclass);
            tmp_called_value_74 = tmp_class_creation_37__metaclass;
            tmp_tuple_element_146 = mod_consts[374];
            tmp_args_value_74 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_74, 0, tmp_tuple_element_146);
            CHECK_OBJECT(tmp_class_creation_37__bases);
            tmp_tuple_element_146 = tmp_class_creation_37__bases;
            PyTuple_SET_ITEM0(tmp_args_value_74, 1, tmp_tuple_element_146);
            tmp_tuple_element_146 = locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168;
            PyTuple_SET_ITEM0(tmp_args_value_74, 2, tmp_tuple_element_146);
            CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
            tmp_kwargs_value_74 = tmp_class_creation_37__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1168;
            tmp_assign_source_308 = CALL_FUNCTION(tmp_called_value_74, tmp_args_value_74, tmp_kwargs_value_74);
            Py_DECREF(tmp_args_value_74);
            if (tmp_assign_source_308 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1168;

                goto try_except_handler_113;
            }
            assert(outline_36_var___class__ == NULL);
            outline_36_var___class__ = tmp_assign_source_308;
        }
        CHECK_OBJECT(outline_36_var___class__);
        tmp_assign_source_307 = outline_36_var___class__;
        Py_INCREF(tmp_assign_source_307);
        goto try_return_handler_113;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_113:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168);
        locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168 = NULL;
        goto try_return_handler_112;
        // Exception handler code:
        try_except_handler_113:;
        exception_keeper_type_111 = exception_type;
        exception_keeper_value_111 = exception_value;
        exception_keeper_tb_111 = exception_tb;
        exception_keeper_lineno_111 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168);
        locals_xlwt$BIFFRecords$$$class__37_ExtSSTRecord_1168 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_111;
        exception_value = exception_keeper_value_111;
        exception_tb = exception_keeper_tb_111;
        exception_lineno = exception_keeper_lineno_111;

        goto try_except_handler_112;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_112:;
        CHECK_OBJECT(outline_36_var___class__);
        Py_DECREF(outline_36_var___class__);
        outline_36_var___class__ = NULL;
        goto outline_result_37;
        // Exception handler code:
        try_except_handler_112:;
        exception_keeper_type_112 = exception_type;
        exception_keeper_value_112 = exception_value;
        exception_keeper_tb_112 = exception_tb;
        exception_keeper_lineno_112 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_112;
        exception_value = exception_keeper_value_112;
        exception_tb = exception_keeper_tb_112;
        exception_lineno = exception_keeper_lineno_112;

        goto outline_exception_37;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_37:;
        exception_lineno = 1168;
        goto try_except_handler_111;
        outline_result_37:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[374], tmp_assign_source_307);
    }
    goto try_end_39;
    // Exception handler code:
    try_except_handler_111:;
    exception_keeper_type_113 = exception_type;
    exception_keeper_value_113 = exception_value;
    exception_keeper_tb_113 = exception_tb;
    exception_keeper_lineno_113 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    Py_XDECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_113;
    exception_value = exception_keeper_value_113;
    exception_tb = exception_keeper_tb_113;
    exception_lineno = exception_keeper_lineno_113;

    goto frame_exception_exit_1;
    // End of try:
    try_end_39:;
    CHECK_OBJECT(tmp_class_creation_37__bases_orig);
    Py_DECREF(tmp_class_creation_37__bases_orig);
    tmp_class_creation_37__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_37__bases);
    Py_DECREF(tmp_class_creation_37__bases);
    tmp_class_creation_37__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_37__class_decl_dict);
    Py_DECREF(tmp_class_creation_37__class_decl_dict);
    tmp_class_creation_37__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_37__metaclass);
    Py_DECREF(tmp_class_creation_37__metaclass);
    tmp_class_creation_37__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_37__prepared);
    Py_DECREF(tmp_class_creation_37__prepared);
    tmp_class_creation_37__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_309;
        PyObject *tmp_tuple_element_147;
        tmp_tuple_element_147 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_147 == NULL)) {
            tmp_tuple_element_147 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        tmp_assign_source_309 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_309, 0, tmp_tuple_element_147);
        assert(tmp_class_creation_38__bases_orig == NULL);
        tmp_class_creation_38__bases_orig = tmp_assign_source_309;
    }
    {
        PyObject *tmp_assign_source_310;
        PyObject *tmp_dircall_arg1_38;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dircall_arg1_38 = tmp_class_creation_38__bases_orig;
        Py_INCREF(tmp_dircall_arg1_38);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_38};
            tmp_assign_source_310 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_310 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        assert(tmp_class_creation_38__bases == NULL);
        tmp_class_creation_38__bases = tmp_assign_source_310;
    }
    {
        PyObject *tmp_assign_source_311;
        tmp_assign_source_311 = PyDict_New();
        assert(tmp_class_creation_38__class_decl_dict == NULL);
        tmp_class_creation_38__class_decl_dict = tmp_assign_source_311;
    }
    {
        PyObject *tmp_assign_source_312;
        PyObject *tmp_metaclass_value_38;
        bool tmp_condition_result_223;
        PyObject *tmp_key_value_112;
        PyObject *tmp_dict_arg_value_112;
        PyObject *tmp_dict_arg_value_113;
        PyObject *tmp_key_value_113;
        nuitka_bool tmp_condition_result_224;
        int tmp_truth_name_38;
        PyObject *tmp_type_arg_75;
        PyObject *tmp_expression_value_186;
        PyObject *tmp_subscript_value_38;
        PyObject *tmp_bases_value_38;
        tmp_key_value_112 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_112 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_112, tmp_key_value_112);
        assert(!(tmp_res == -1));
        tmp_condition_result_223 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_223 != false) {
            goto condexpr_true_75;
        } else {
            goto condexpr_false_75;
        }
        condexpr_true_75:;
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_113 = tmp_class_creation_38__class_decl_dict;
        tmp_key_value_113 = mod_consts[205];
        tmp_metaclass_value_38 = DICT_GET_ITEM0(tmp_dict_arg_value_113, tmp_key_value_113);
        if (tmp_metaclass_value_38 == NULL) {
            tmp_metaclass_value_38 = Py_None;
        }
        assert(!(tmp_metaclass_value_38 == NULL));
        Py_INCREF(tmp_metaclass_value_38);
        goto condexpr_end_75;
        condexpr_false_75:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_truth_name_38 = CHECK_IF_TRUE(tmp_class_creation_38__bases);
        if (tmp_truth_name_38 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        tmp_condition_result_224 = tmp_truth_name_38 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_224 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_76;
        } else {
            goto condexpr_false_76;
        }
        condexpr_true_76:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_expression_value_186 = tmp_class_creation_38__bases;
        tmp_subscript_value_38 = mod_consts[4];
        tmp_type_arg_75 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_186, tmp_subscript_value_38, 0);
        if (tmp_type_arg_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        tmp_metaclass_value_38 = BUILTIN_TYPE1(tmp_type_arg_75);
        Py_DECREF(tmp_type_arg_75);
        if (tmp_metaclass_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        goto condexpr_end_76;
        condexpr_false_76:;
        tmp_metaclass_value_38 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_38);
        condexpr_end_76:;
        condexpr_end_75:;
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_bases_value_38 = tmp_class_creation_38__bases;
        tmp_assign_source_312 = SELECT_METACLASS(tmp_metaclass_value_38, tmp_bases_value_38);
        Py_DECREF(tmp_metaclass_value_38);
        if (tmp_assign_source_312 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        assert(tmp_class_creation_38__metaclass == NULL);
        tmp_class_creation_38__metaclass = tmp_assign_source_312;
    }
    {
        bool tmp_condition_result_225;
        PyObject *tmp_key_value_114;
        PyObject *tmp_dict_arg_value_114;
        tmp_key_value_114 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_dict_arg_value_114 = tmp_class_creation_38__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_114, tmp_key_value_114);
        assert(!(tmp_res == -1));
        tmp_condition_result_225 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_225 != false) {
            goto branch_yes_149;
        } else {
            goto branch_no_149;
        }
    }
    branch_yes_149:;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_38__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1213;

        goto try_except_handler_114;
    }
    branch_no_149:;
    {
        nuitka_bool tmp_condition_result_226;
        PyObject *tmp_expression_value_187;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_187 = tmp_class_creation_38__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_187, mod_consts[206]);
        tmp_condition_result_226 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_226 == NUITKA_BOOL_TRUE) {
            goto branch_yes_150;
        } else {
            goto branch_no_150;
        }
    }
    branch_yes_150:;
    {
        PyObject *tmp_assign_source_313;
        PyObject *tmp_called_value_75;
        PyObject *tmp_expression_value_188;
        PyObject *tmp_args_value_75;
        PyObject *tmp_tuple_element_148;
        PyObject *tmp_kwargs_value_75;
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_expression_value_188 = tmp_class_creation_38__metaclass;
        tmp_called_value_75 = LOOKUP_ATTRIBUTE(tmp_expression_value_188, mod_consts[206]);
        if (tmp_called_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        tmp_tuple_element_148 = mod_consts[378];
        tmp_args_value_75 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_75, 0, tmp_tuple_element_148);
        CHECK_OBJECT(tmp_class_creation_38__bases);
        tmp_tuple_element_148 = tmp_class_creation_38__bases;
        PyTuple_SET_ITEM0(tmp_args_value_75, 1, tmp_tuple_element_148);
        CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
        tmp_kwargs_value_75 = tmp_class_creation_38__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1213;
        tmp_assign_source_313 = CALL_FUNCTION(tmp_called_value_75, tmp_args_value_75, tmp_kwargs_value_75);
        Py_DECREF(tmp_called_value_75);
        Py_DECREF(tmp_args_value_75);
        if (tmp_assign_source_313 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_313;
    }
    {
        bool tmp_condition_result_227;
        PyObject *tmp_operand_value_38;
        PyObject *tmp_expression_value_189;
        CHECK_OBJECT(tmp_class_creation_38__prepared);
        tmp_expression_value_189 = tmp_class_creation_38__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_189, mod_consts[208]);
        tmp_operand_value_38 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_38);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        tmp_condition_result_227 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_227 != false) {
            goto branch_yes_151;
        } else {
            goto branch_no_151;
        }
    }
    branch_yes_151:;
    {
        PyObject *tmp_raise_type_38;
        PyObject *tmp_raise_value_38;
        PyObject *tmp_left_value_38;
        PyObject *tmp_right_value_38;
        PyObject *tmp_tuple_element_149;
        PyObject *tmp_getattr_target_38;
        PyObject *tmp_getattr_attr_38;
        PyObject *tmp_getattr_default_38;
        tmp_raise_type_38 = PyExc_TypeError;
        tmp_left_value_38 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_38__metaclass);
        tmp_getattr_target_38 = tmp_class_creation_38__metaclass;
        tmp_getattr_attr_38 = mod_consts[210];
        tmp_getattr_default_38 = mod_consts[211];
        tmp_tuple_element_149 = BUILTIN_GETATTR(tmp_getattr_target_38, tmp_getattr_attr_38, tmp_getattr_default_38);
        if (tmp_tuple_element_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        tmp_right_value_38 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_190;
            PyObject *tmp_type_arg_76;
            PyTuple_SET_ITEM(tmp_right_value_38, 0, tmp_tuple_element_149);
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_type_arg_76 = tmp_class_creation_38__prepared;
            tmp_expression_value_190 = BUILTIN_TYPE1(tmp_type_arg_76);
            assert(!(tmp_expression_value_190 == NULL));
            tmp_tuple_element_149 = LOOKUP_ATTRIBUTE(tmp_expression_value_190, mod_consts[210]);
            Py_DECREF(tmp_expression_value_190);
            if (tmp_tuple_element_149 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1213;

                goto tuple_build_exception_38;
            }
            PyTuple_SET_ITEM(tmp_right_value_38, 1, tmp_tuple_element_149);
        }
        goto tuple_build_noexception_38;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_38:;
        Py_DECREF(tmp_right_value_38);
        goto try_except_handler_114;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_38:;
        tmp_raise_value_38 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_38, tmp_right_value_38);
        Py_DECREF(tmp_right_value_38);
        if (tmp_raise_value_38 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_114;
        }
        exception_type = tmp_raise_type_38;
        Py_INCREF(tmp_raise_type_38);
        exception_value = tmp_raise_value_38;
        exception_lineno = 1213;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_114;
    }
    branch_no_151:;
    goto branch_end_150;
    branch_no_150:;
    {
        PyObject *tmp_assign_source_314;
        tmp_assign_source_314 = PyDict_New();
        assert(tmp_class_creation_38__prepared == NULL);
        tmp_class_creation_38__prepared = tmp_assign_source_314;
    }
    branch_end_150:;
    {
        PyObject *tmp_assign_source_315;
        {
            PyObject *tmp_set_locals_38;
            CHECK_OBJECT(tmp_class_creation_38__prepared);
            tmp_set_locals_38 = tmp_class_creation_38__prepared;
            locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213 = tmp_set_locals_38;
            Py_INCREF(tmp_set_locals_38);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_116;
        }
        tmp_dictset_value = mod_consts[379];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_116;
        }
        tmp_dictset_value = mod_consts[378];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_116;
        }
        if (isFrameUnusable(cache_frame_60f323f0adceb50b521402f588e9ed7c_39)) {
            Py_XDECREF(cache_frame_60f323f0adceb50b521402f588e9ed7c_39);

#if _DEBUG_REFCOUNTS
            if (cache_frame_60f323f0adceb50b521402f588e9ed7c_39 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_60f323f0adceb50b521402f588e9ed7c_39 = MAKE_FUNCTION_FRAME(codeobj_60f323f0adceb50b521402f588e9ed7c, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_60f323f0adceb50b521402f588e9ed7c_39->m_type_description == NULL);
        frame_60f323f0adceb50b521402f588e9ed7c_39 = cache_frame_60f323f0adceb50b521402f588e9ed7c_39;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_60f323f0adceb50b521402f588e9ed7c_39);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_60f323f0adceb50b521402f588e9ed7c_39) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[380];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1224;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__49___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1225;
            type_description_2 = "o";
            goto frame_exception_exit_39;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_60f323f0adceb50b521402f588e9ed7c_39);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_38;

        frame_exception_exit_39:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_60f323f0adceb50b521402f588e9ed7c_39);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_60f323f0adceb50b521402f588e9ed7c_39, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_60f323f0adceb50b521402f588e9ed7c_39->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_60f323f0adceb50b521402f588e9ed7c_39, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_60f323f0adceb50b521402f588e9ed7c_39,
            type_description_2,
            outline_37_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_60f323f0adceb50b521402f588e9ed7c_39 == cache_frame_60f323f0adceb50b521402f588e9ed7c_39) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_60f323f0adceb50b521402f588e9ed7c_39);
            cache_frame_60f323f0adceb50b521402f588e9ed7c_39 = NULL;
        }

        assertFrameObject(frame_60f323f0adceb50b521402f588e9ed7c_39);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_38;

        frame_no_exception_38:;
        goto skip_nested_handling_38;
        nested_frame_exit_38:;

        goto try_except_handler_116;
        skip_nested_handling_38:;
        {
            nuitka_bool tmp_condition_result_228;
            PyObject *tmp_cmp_expr_left_38;
            PyObject *tmp_cmp_expr_right_38;
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_cmp_expr_left_38 = tmp_class_creation_38__bases;
            CHECK_OBJECT(tmp_class_creation_38__bases_orig);
            tmp_cmp_expr_right_38 = tmp_class_creation_38__bases_orig;
            tmp_condition_result_228 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_38, tmp_cmp_expr_right_38);
            if (tmp_condition_result_228 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1213;

                goto try_except_handler_116;
            }
            if (tmp_condition_result_228 == NUITKA_BOOL_TRUE) {
                goto branch_yes_152;
            } else {
                goto branch_no_152;
            }
            assert(tmp_condition_result_228 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_152:;
        CHECK_OBJECT(tmp_class_creation_38__bases_orig);
        tmp_dictset_value = tmp_class_creation_38__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1213;

            goto try_except_handler_116;
        }
        branch_no_152:;
        {
            PyObject *tmp_assign_source_316;
            PyObject *tmp_called_value_76;
            PyObject *tmp_args_value_76;
            PyObject *tmp_tuple_element_150;
            PyObject *tmp_kwargs_value_76;
            CHECK_OBJECT(tmp_class_creation_38__metaclass);
            tmp_called_value_76 = tmp_class_creation_38__metaclass;
            tmp_tuple_element_150 = mod_consts[378];
            tmp_args_value_76 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_76, 0, tmp_tuple_element_150);
            CHECK_OBJECT(tmp_class_creation_38__bases);
            tmp_tuple_element_150 = tmp_class_creation_38__bases;
            PyTuple_SET_ITEM0(tmp_args_value_76, 1, tmp_tuple_element_150);
            tmp_tuple_element_150 = locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213;
            PyTuple_SET_ITEM0(tmp_args_value_76, 2, tmp_tuple_element_150);
            CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
            tmp_kwargs_value_76 = tmp_class_creation_38__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1213;
            tmp_assign_source_316 = CALL_FUNCTION(tmp_called_value_76, tmp_args_value_76, tmp_kwargs_value_76);
            Py_DECREF(tmp_args_value_76);
            if (tmp_assign_source_316 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1213;

                goto try_except_handler_116;
            }
            assert(outline_37_var___class__ == NULL);
            outline_37_var___class__ = tmp_assign_source_316;
        }
        CHECK_OBJECT(outline_37_var___class__);
        tmp_assign_source_315 = outline_37_var___class__;
        Py_INCREF(tmp_assign_source_315);
        goto try_return_handler_116;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_116:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213);
        locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213 = NULL;
        goto try_return_handler_115;
        // Exception handler code:
        try_except_handler_116:;
        exception_keeper_type_114 = exception_type;
        exception_keeper_value_114 = exception_value;
        exception_keeper_tb_114 = exception_tb;
        exception_keeper_lineno_114 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213);
        locals_xlwt$BIFFRecords$$$class__38_DimensionsRecord_1213 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_114;
        exception_value = exception_keeper_value_114;
        exception_tb = exception_keeper_tb_114;
        exception_lineno = exception_keeper_lineno_114;

        goto try_except_handler_115;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_115:;
        CHECK_OBJECT(outline_37_var___class__);
        Py_DECREF(outline_37_var___class__);
        outline_37_var___class__ = NULL;
        goto outline_result_38;
        // Exception handler code:
        try_except_handler_115:;
        exception_keeper_type_115 = exception_type;
        exception_keeper_value_115 = exception_value;
        exception_keeper_tb_115 = exception_tb;
        exception_keeper_lineno_115 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_115;
        exception_value = exception_keeper_value_115;
        exception_tb = exception_keeper_tb_115;
        exception_lineno = exception_keeper_lineno_115;

        goto outline_exception_38;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_38:;
        exception_lineno = 1213;
        goto try_except_handler_114;
        outline_result_38:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[378], tmp_assign_source_315);
    }
    goto try_end_40;
    // Exception handler code:
    try_except_handler_114:;
    exception_keeper_type_116 = exception_type;
    exception_keeper_value_116 = exception_value;
    exception_keeper_tb_116 = exception_tb;
    exception_keeper_lineno_116 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    Py_XDECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_116;
    exception_value = exception_keeper_value_116;
    exception_tb = exception_keeper_tb_116;
    exception_lineno = exception_keeper_lineno_116;

    goto frame_exception_exit_1;
    // End of try:
    try_end_40:;
    CHECK_OBJECT(tmp_class_creation_38__bases_orig);
    Py_DECREF(tmp_class_creation_38__bases_orig);
    tmp_class_creation_38__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_38__bases);
    Py_DECREF(tmp_class_creation_38__bases);
    tmp_class_creation_38__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_38__class_decl_dict);
    Py_DECREF(tmp_class_creation_38__class_decl_dict);
    tmp_class_creation_38__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_38__metaclass);
    Py_DECREF(tmp_class_creation_38__metaclass);
    tmp_class_creation_38__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_38__prepared);
    Py_DECREF(tmp_class_creation_38__prepared);
    tmp_class_creation_38__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_317;
        PyObject *tmp_tuple_element_151;
        tmp_tuple_element_151 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_151 == NULL)) {
            tmp_tuple_element_151 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        tmp_assign_source_317 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_317, 0, tmp_tuple_element_151);
        assert(tmp_class_creation_39__bases_orig == NULL);
        tmp_class_creation_39__bases_orig = tmp_assign_source_317;
    }
    {
        PyObject *tmp_assign_source_318;
        PyObject *tmp_dircall_arg1_39;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dircall_arg1_39 = tmp_class_creation_39__bases_orig;
        Py_INCREF(tmp_dircall_arg1_39);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_39};
            tmp_assign_source_318 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_318 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        assert(tmp_class_creation_39__bases == NULL);
        tmp_class_creation_39__bases = tmp_assign_source_318;
    }
    {
        PyObject *tmp_assign_source_319;
        tmp_assign_source_319 = PyDict_New();
        assert(tmp_class_creation_39__class_decl_dict == NULL);
        tmp_class_creation_39__class_decl_dict = tmp_assign_source_319;
    }
    {
        PyObject *tmp_assign_source_320;
        PyObject *tmp_metaclass_value_39;
        bool tmp_condition_result_229;
        PyObject *tmp_key_value_115;
        PyObject *tmp_dict_arg_value_115;
        PyObject *tmp_dict_arg_value_116;
        PyObject *tmp_key_value_116;
        nuitka_bool tmp_condition_result_230;
        int tmp_truth_name_39;
        PyObject *tmp_type_arg_77;
        PyObject *tmp_expression_value_191;
        PyObject *tmp_subscript_value_39;
        PyObject *tmp_bases_value_39;
        tmp_key_value_115 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_115 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_115, tmp_key_value_115);
        assert(!(tmp_res == -1));
        tmp_condition_result_229 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_229 != false) {
            goto condexpr_true_77;
        } else {
            goto condexpr_false_77;
        }
        condexpr_true_77:;
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_116 = tmp_class_creation_39__class_decl_dict;
        tmp_key_value_116 = mod_consts[205];
        tmp_metaclass_value_39 = DICT_GET_ITEM0(tmp_dict_arg_value_116, tmp_key_value_116);
        if (tmp_metaclass_value_39 == NULL) {
            tmp_metaclass_value_39 = Py_None;
        }
        assert(!(tmp_metaclass_value_39 == NULL));
        Py_INCREF(tmp_metaclass_value_39);
        goto condexpr_end_77;
        condexpr_false_77:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_truth_name_39 = CHECK_IF_TRUE(tmp_class_creation_39__bases);
        if (tmp_truth_name_39 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        tmp_condition_result_230 = tmp_truth_name_39 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_230 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_78;
        } else {
            goto condexpr_false_78;
        }
        condexpr_true_78:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_expression_value_191 = tmp_class_creation_39__bases;
        tmp_subscript_value_39 = mod_consts[4];
        tmp_type_arg_77 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_191, tmp_subscript_value_39, 0);
        if (tmp_type_arg_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        tmp_metaclass_value_39 = BUILTIN_TYPE1(tmp_type_arg_77);
        Py_DECREF(tmp_type_arg_77);
        if (tmp_metaclass_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        goto condexpr_end_78;
        condexpr_false_78:;
        tmp_metaclass_value_39 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_39);
        condexpr_end_78:;
        condexpr_end_77:;
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_bases_value_39 = tmp_class_creation_39__bases;
        tmp_assign_source_320 = SELECT_METACLASS(tmp_metaclass_value_39, tmp_bases_value_39);
        Py_DECREF(tmp_metaclass_value_39);
        if (tmp_assign_source_320 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        assert(tmp_class_creation_39__metaclass == NULL);
        tmp_class_creation_39__metaclass = tmp_assign_source_320;
    }
    {
        bool tmp_condition_result_231;
        PyObject *tmp_key_value_117;
        PyObject *tmp_dict_arg_value_117;
        tmp_key_value_117 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_dict_arg_value_117 = tmp_class_creation_39__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_117, tmp_key_value_117);
        assert(!(tmp_res == -1));
        tmp_condition_result_231 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_231 != false) {
            goto branch_yes_153;
        } else {
            goto branch_no_153;
        }
    }
    branch_yes_153:;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_39__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1236;

        goto try_except_handler_117;
    }
    branch_no_153:;
    {
        nuitka_bool tmp_condition_result_232;
        PyObject *tmp_expression_value_192;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_192 = tmp_class_creation_39__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_192, mod_consts[206]);
        tmp_condition_result_232 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_232 == NUITKA_BOOL_TRUE) {
            goto branch_yes_154;
        } else {
            goto branch_no_154;
        }
    }
    branch_yes_154:;
    {
        PyObject *tmp_assign_source_321;
        PyObject *tmp_called_value_77;
        PyObject *tmp_expression_value_193;
        PyObject *tmp_args_value_77;
        PyObject *tmp_tuple_element_152;
        PyObject *tmp_kwargs_value_77;
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_expression_value_193 = tmp_class_creation_39__metaclass;
        tmp_called_value_77 = LOOKUP_ATTRIBUTE(tmp_expression_value_193, mod_consts[206]);
        if (tmp_called_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        tmp_tuple_element_152 = mod_consts[382];
        tmp_args_value_77 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_77, 0, tmp_tuple_element_152);
        CHECK_OBJECT(tmp_class_creation_39__bases);
        tmp_tuple_element_152 = tmp_class_creation_39__bases;
        PyTuple_SET_ITEM0(tmp_args_value_77, 1, tmp_tuple_element_152);
        CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
        tmp_kwargs_value_77 = tmp_class_creation_39__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1236;
        tmp_assign_source_321 = CALL_FUNCTION(tmp_called_value_77, tmp_args_value_77, tmp_kwargs_value_77);
        Py_DECREF(tmp_called_value_77);
        Py_DECREF(tmp_args_value_77);
        if (tmp_assign_source_321 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_321;
    }
    {
        bool tmp_condition_result_233;
        PyObject *tmp_operand_value_39;
        PyObject *tmp_expression_value_194;
        CHECK_OBJECT(tmp_class_creation_39__prepared);
        tmp_expression_value_194 = tmp_class_creation_39__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_194, mod_consts[208]);
        tmp_operand_value_39 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_39);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        tmp_condition_result_233 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_233 != false) {
            goto branch_yes_155;
        } else {
            goto branch_no_155;
        }
    }
    branch_yes_155:;
    {
        PyObject *tmp_raise_type_39;
        PyObject *tmp_raise_value_39;
        PyObject *tmp_left_value_39;
        PyObject *tmp_right_value_39;
        PyObject *tmp_tuple_element_153;
        PyObject *tmp_getattr_target_39;
        PyObject *tmp_getattr_attr_39;
        PyObject *tmp_getattr_default_39;
        tmp_raise_type_39 = PyExc_TypeError;
        tmp_left_value_39 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_39__metaclass);
        tmp_getattr_target_39 = tmp_class_creation_39__metaclass;
        tmp_getattr_attr_39 = mod_consts[210];
        tmp_getattr_default_39 = mod_consts[211];
        tmp_tuple_element_153 = BUILTIN_GETATTR(tmp_getattr_target_39, tmp_getattr_attr_39, tmp_getattr_default_39);
        if (tmp_tuple_element_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        tmp_right_value_39 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_195;
            PyObject *tmp_type_arg_78;
            PyTuple_SET_ITEM(tmp_right_value_39, 0, tmp_tuple_element_153);
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_type_arg_78 = tmp_class_creation_39__prepared;
            tmp_expression_value_195 = BUILTIN_TYPE1(tmp_type_arg_78);
            assert(!(tmp_expression_value_195 == NULL));
            tmp_tuple_element_153 = LOOKUP_ATTRIBUTE(tmp_expression_value_195, mod_consts[210]);
            Py_DECREF(tmp_expression_value_195);
            if (tmp_tuple_element_153 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1236;

                goto tuple_build_exception_39;
            }
            PyTuple_SET_ITEM(tmp_right_value_39, 1, tmp_tuple_element_153);
        }
        goto tuple_build_noexception_39;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_39:;
        Py_DECREF(tmp_right_value_39);
        goto try_except_handler_117;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_39:;
        tmp_raise_value_39 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_39, tmp_right_value_39);
        Py_DECREF(tmp_right_value_39);
        if (tmp_raise_value_39 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_117;
        }
        exception_type = tmp_raise_type_39;
        Py_INCREF(tmp_raise_type_39);
        exception_value = tmp_raise_value_39;
        exception_lineno = 1236;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_117;
    }
    branch_no_155:;
    goto branch_end_154;
    branch_no_154:;
    {
        PyObject *tmp_assign_source_322;
        tmp_assign_source_322 = PyDict_New();
        assert(tmp_class_creation_39__prepared == NULL);
        tmp_class_creation_39__prepared = tmp_assign_source_322;
    }
    branch_end_154:;
    {
        PyObject *tmp_assign_source_323;
        {
            PyObject *tmp_set_locals_39;
            CHECK_OBJECT(tmp_class_creation_39__prepared);
            tmp_set_locals_39 = tmp_class_creation_39__prepared;
            locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236 = tmp_set_locals_39;
            Py_INCREF(tmp_set_locals_39);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_119;
        }
        tmp_dictset_value = mod_consts[383];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_119;
        }
        tmp_dictset_value = mod_consts[382];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_119;
        }
        if (isFrameUnusable(cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40)) {
            Py_XDECREF(cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40);

#if _DEBUG_REFCOUNTS
            if (cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40 = MAKE_FUNCTION_FRAME(codeobj_47ccf13e66f6ac61a011a47329c53a4b, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40->m_type_description == NULL);
        frame_47ccf13e66f6ac61a011a47329c53a4b_40 = cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_47ccf13e66f6ac61a011a47329c53a4b_40);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_47ccf13e66f6ac61a011a47329c53a4b_40) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[384];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1290;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__50___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1292;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__51_get();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236, mod_consts[157], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1305;
            type_description_2 = "o";
            goto frame_exception_exit_40;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_47ccf13e66f6ac61a011a47329c53a4b_40);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_39;

        frame_exception_exit_40:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_47ccf13e66f6ac61a011a47329c53a4b_40);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_47ccf13e66f6ac61a011a47329c53a4b_40, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_47ccf13e66f6ac61a011a47329c53a4b_40->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_47ccf13e66f6ac61a011a47329c53a4b_40, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_47ccf13e66f6ac61a011a47329c53a4b_40,
            type_description_2,
            outline_38_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_47ccf13e66f6ac61a011a47329c53a4b_40 == cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40);
            cache_frame_47ccf13e66f6ac61a011a47329c53a4b_40 = NULL;
        }

        assertFrameObject(frame_47ccf13e66f6ac61a011a47329c53a4b_40);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_39;

        frame_no_exception_39:;
        goto skip_nested_handling_39;
        nested_frame_exit_39:;

        goto try_except_handler_119;
        skip_nested_handling_39:;
        {
            nuitka_bool tmp_condition_result_234;
            PyObject *tmp_cmp_expr_left_39;
            PyObject *tmp_cmp_expr_right_39;
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_cmp_expr_left_39 = tmp_class_creation_39__bases;
            CHECK_OBJECT(tmp_class_creation_39__bases_orig);
            tmp_cmp_expr_right_39 = tmp_class_creation_39__bases_orig;
            tmp_condition_result_234 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_39, tmp_cmp_expr_right_39);
            if (tmp_condition_result_234 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1236;

                goto try_except_handler_119;
            }
            if (tmp_condition_result_234 == NUITKA_BOOL_TRUE) {
                goto branch_yes_156;
            } else {
                goto branch_no_156;
            }
            assert(tmp_condition_result_234 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_156:;
        CHECK_OBJECT(tmp_class_creation_39__bases_orig);
        tmp_dictset_value = tmp_class_creation_39__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1236;

            goto try_except_handler_119;
        }
        branch_no_156:;
        {
            PyObject *tmp_assign_source_324;
            PyObject *tmp_called_value_78;
            PyObject *tmp_args_value_78;
            PyObject *tmp_tuple_element_154;
            PyObject *tmp_kwargs_value_78;
            CHECK_OBJECT(tmp_class_creation_39__metaclass);
            tmp_called_value_78 = tmp_class_creation_39__metaclass;
            tmp_tuple_element_154 = mod_consts[382];
            tmp_args_value_78 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_78, 0, tmp_tuple_element_154);
            CHECK_OBJECT(tmp_class_creation_39__bases);
            tmp_tuple_element_154 = tmp_class_creation_39__bases;
            PyTuple_SET_ITEM0(tmp_args_value_78, 1, tmp_tuple_element_154);
            tmp_tuple_element_154 = locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236;
            PyTuple_SET_ITEM0(tmp_args_value_78, 2, tmp_tuple_element_154);
            CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
            tmp_kwargs_value_78 = tmp_class_creation_39__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1236;
            tmp_assign_source_324 = CALL_FUNCTION(tmp_called_value_78, tmp_args_value_78, tmp_kwargs_value_78);
            Py_DECREF(tmp_args_value_78);
            if (tmp_assign_source_324 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1236;

                goto try_except_handler_119;
            }
            assert(outline_38_var___class__ == NULL);
            outline_38_var___class__ = tmp_assign_source_324;
        }
        CHECK_OBJECT(outline_38_var___class__);
        tmp_assign_source_323 = outline_38_var___class__;
        Py_INCREF(tmp_assign_source_323);
        goto try_return_handler_119;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_119:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236);
        locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236 = NULL;
        goto try_return_handler_118;
        // Exception handler code:
        try_except_handler_119:;
        exception_keeper_type_117 = exception_type;
        exception_keeper_value_117 = exception_value;
        exception_keeper_tb_117 = exception_tb;
        exception_keeper_lineno_117 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236);
        locals_xlwt$BIFFRecords$$$class__39_Window2Record_1236 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_117;
        exception_value = exception_keeper_value_117;
        exception_tb = exception_keeper_tb_117;
        exception_lineno = exception_keeper_lineno_117;

        goto try_except_handler_118;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_118:;
        CHECK_OBJECT(outline_38_var___class__);
        Py_DECREF(outline_38_var___class__);
        outline_38_var___class__ = NULL;
        goto outline_result_39;
        // Exception handler code:
        try_except_handler_118:;
        exception_keeper_type_118 = exception_type;
        exception_keeper_value_118 = exception_value;
        exception_keeper_tb_118 = exception_tb;
        exception_keeper_lineno_118 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_118;
        exception_value = exception_keeper_value_118;
        exception_tb = exception_keeper_tb_118;
        exception_lineno = exception_keeper_lineno_118;

        goto outline_exception_39;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_39:;
        exception_lineno = 1236;
        goto try_except_handler_117;
        outline_result_39:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[382], tmp_assign_source_323);
    }
    goto try_end_41;
    // Exception handler code:
    try_except_handler_117:;
    exception_keeper_type_119 = exception_type;
    exception_keeper_value_119 = exception_value;
    exception_keeper_tb_119 = exception_tb;
    exception_keeper_lineno_119 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    Py_XDECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_119;
    exception_value = exception_keeper_value_119;
    exception_tb = exception_keeper_tb_119;
    exception_lineno = exception_keeper_lineno_119;

    goto frame_exception_exit_1;
    // End of try:
    try_end_41:;
    CHECK_OBJECT(tmp_class_creation_39__bases_orig);
    Py_DECREF(tmp_class_creation_39__bases_orig);
    tmp_class_creation_39__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_39__bases);
    Py_DECREF(tmp_class_creation_39__bases);
    tmp_class_creation_39__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_39__class_decl_dict);
    Py_DECREF(tmp_class_creation_39__class_decl_dict);
    tmp_class_creation_39__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_39__metaclass);
    Py_DECREF(tmp_class_creation_39__metaclass);
    tmp_class_creation_39__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_39__prepared);
    Py_DECREF(tmp_class_creation_39__prepared);
    tmp_class_creation_39__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_325;
        PyObject *tmp_tuple_element_155;
        tmp_tuple_element_155 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_155 == NULL)) {
            tmp_tuple_element_155 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        tmp_assign_source_325 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_325, 0, tmp_tuple_element_155);
        assert(tmp_class_creation_40__bases_orig == NULL);
        tmp_class_creation_40__bases_orig = tmp_assign_source_325;
    }
    {
        PyObject *tmp_assign_source_326;
        PyObject *tmp_dircall_arg1_40;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dircall_arg1_40 = tmp_class_creation_40__bases_orig;
        Py_INCREF(tmp_dircall_arg1_40);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_40};
            tmp_assign_source_326 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_326 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        assert(tmp_class_creation_40__bases == NULL);
        tmp_class_creation_40__bases = tmp_assign_source_326;
    }
    {
        PyObject *tmp_assign_source_327;
        tmp_assign_source_327 = PyDict_New();
        assert(tmp_class_creation_40__class_decl_dict == NULL);
        tmp_class_creation_40__class_decl_dict = tmp_assign_source_327;
    }
    {
        PyObject *tmp_assign_source_328;
        PyObject *tmp_metaclass_value_40;
        bool tmp_condition_result_235;
        PyObject *tmp_key_value_118;
        PyObject *tmp_dict_arg_value_118;
        PyObject *tmp_dict_arg_value_119;
        PyObject *tmp_key_value_119;
        nuitka_bool tmp_condition_result_236;
        int tmp_truth_name_40;
        PyObject *tmp_type_arg_79;
        PyObject *tmp_expression_value_196;
        PyObject *tmp_subscript_value_40;
        PyObject *tmp_bases_value_40;
        tmp_key_value_118 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_118 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_118, tmp_key_value_118);
        assert(!(tmp_res == -1));
        tmp_condition_result_235 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_235 != false) {
            goto condexpr_true_79;
        } else {
            goto condexpr_false_79;
        }
        condexpr_true_79:;
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_119 = tmp_class_creation_40__class_decl_dict;
        tmp_key_value_119 = mod_consts[205];
        tmp_metaclass_value_40 = DICT_GET_ITEM0(tmp_dict_arg_value_119, tmp_key_value_119);
        if (tmp_metaclass_value_40 == NULL) {
            tmp_metaclass_value_40 = Py_None;
        }
        assert(!(tmp_metaclass_value_40 == NULL));
        Py_INCREF(tmp_metaclass_value_40);
        goto condexpr_end_79;
        condexpr_false_79:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_truth_name_40 = CHECK_IF_TRUE(tmp_class_creation_40__bases);
        if (tmp_truth_name_40 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        tmp_condition_result_236 = tmp_truth_name_40 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_236 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_80;
        } else {
            goto condexpr_false_80;
        }
        condexpr_true_80:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_expression_value_196 = tmp_class_creation_40__bases;
        tmp_subscript_value_40 = mod_consts[4];
        tmp_type_arg_79 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_196, tmp_subscript_value_40, 0);
        if (tmp_type_arg_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        tmp_metaclass_value_40 = BUILTIN_TYPE1(tmp_type_arg_79);
        Py_DECREF(tmp_type_arg_79);
        if (tmp_metaclass_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        goto condexpr_end_80;
        condexpr_false_80:;
        tmp_metaclass_value_40 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_40);
        condexpr_end_80:;
        condexpr_end_79:;
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_bases_value_40 = tmp_class_creation_40__bases;
        tmp_assign_source_328 = SELECT_METACLASS(tmp_metaclass_value_40, tmp_bases_value_40);
        Py_DECREF(tmp_metaclass_value_40);
        if (tmp_assign_source_328 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        assert(tmp_class_creation_40__metaclass == NULL);
        tmp_class_creation_40__metaclass = tmp_assign_source_328;
    }
    {
        bool tmp_condition_result_237;
        PyObject *tmp_key_value_120;
        PyObject *tmp_dict_arg_value_120;
        tmp_key_value_120 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_dict_arg_value_120 = tmp_class_creation_40__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_120, tmp_key_value_120);
        assert(!(tmp_res == -1));
        tmp_condition_result_237 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_237 != false) {
            goto branch_yes_157;
        } else {
            goto branch_no_157;
        }
    }
    branch_yes_157:;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_40__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1309;

        goto try_except_handler_120;
    }
    branch_no_157:;
    {
        nuitka_bool tmp_condition_result_238;
        PyObject *tmp_expression_value_197;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_197 = tmp_class_creation_40__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_197, mod_consts[206]);
        tmp_condition_result_238 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_238 == NUITKA_BOOL_TRUE) {
            goto branch_yes_158;
        } else {
            goto branch_no_158;
        }
    }
    branch_yes_158:;
    {
        PyObject *tmp_assign_source_329;
        PyObject *tmp_called_value_79;
        PyObject *tmp_expression_value_198;
        PyObject *tmp_args_value_79;
        PyObject *tmp_tuple_element_156;
        PyObject *tmp_kwargs_value_79;
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_expression_value_198 = tmp_class_creation_40__metaclass;
        tmp_called_value_79 = LOOKUP_ATTRIBUTE(tmp_expression_value_198, mod_consts[206]);
        if (tmp_called_value_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        tmp_tuple_element_156 = mod_consts[387];
        tmp_args_value_79 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_79, 0, tmp_tuple_element_156);
        CHECK_OBJECT(tmp_class_creation_40__bases);
        tmp_tuple_element_156 = tmp_class_creation_40__bases;
        PyTuple_SET_ITEM0(tmp_args_value_79, 1, tmp_tuple_element_156);
        CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
        tmp_kwargs_value_79 = tmp_class_creation_40__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1309;
        tmp_assign_source_329 = CALL_FUNCTION(tmp_called_value_79, tmp_args_value_79, tmp_kwargs_value_79);
        Py_DECREF(tmp_called_value_79);
        Py_DECREF(tmp_args_value_79);
        if (tmp_assign_source_329 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_329;
    }
    {
        bool tmp_condition_result_239;
        PyObject *tmp_operand_value_40;
        PyObject *tmp_expression_value_199;
        CHECK_OBJECT(tmp_class_creation_40__prepared);
        tmp_expression_value_199 = tmp_class_creation_40__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_199, mod_consts[208]);
        tmp_operand_value_40 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_40);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        tmp_condition_result_239 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_239 != false) {
            goto branch_yes_159;
        } else {
            goto branch_no_159;
        }
    }
    branch_yes_159:;
    {
        PyObject *tmp_raise_type_40;
        PyObject *tmp_raise_value_40;
        PyObject *tmp_left_value_40;
        PyObject *tmp_right_value_40;
        PyObject *tmp_tuple_element_157;
        PyObject *tmp_getattr_target_40;
        PyObject *tmp_getattr_attr_40;
        PyObject *tmp_getattr_default_40;
        tmp_raise_type_40 = PyExc_TypeError;
        tmp_left_value_40 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_40__metaclass);
        tmp_getattr_target_40 = tmp_class_creation_40__metaclass;
        tmp_getattr_attr_40 = mod_consts[210];
        tmp_getattr_default_40 = mod_consts[211];
        tmp_tuple_element_157 = BUILTIN_GETATTR(tmp_getattr_target_40, tmp_getattr_attr_40, tmp_getattr_default_40);
        if (tmp_tuple_element_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        tmp_right_value_40 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_200;
            PyObject *tmp_type_arg_80;
            PyTuple_SET_ITEM(tmp_right_value_40, 0, tmp_tuple_element_157);
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_type_arg_80 = tmp_class_creation_40__prepared;
            tmp_expression_value_200 = BUILTIN_TYPE1(tmp_type_arg_80);
            assert(!(tmp_expression_value_200 == NULL));
            tmp_tuple_element_157 = LOOKUP_ATTRIBUTE(tmp_expression_value_200, mod_consts[210]);
            Py_DECREF(tmp_expression_value_200);
            if (tmp_tuple_element_157 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1309;

                goto tuple_build_exception_40;
            }
            PyTuple_SET_ITEM(tmp_right_value_40, 1, tmp_tuple_element_157);
        }
        goto tuple_build_noexception_40;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_40:;
        Py_DECREF(tmp_right_value_40);
        goto try_except_handler_120;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_40:;
        tmp_raise_value_40 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_40, tmp_right_value_40);
        Py_DECREF(tmp_right_value_40);
        if (tmp_raise_value_40 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_120;
        }
        exception_type = tmp_raise_type_40;
        Py_INCREF(tmp_raise_type_40);
        exception_value = tmp_raise_value_40;
        exception_lineno = 1309;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_120;
    }
    branch_no_159:;
    goto branch_end_158;
    branch_no_158:;
    {
        PyObject *tmp_assign_source_330;
        tmp_assign_source_330 = PyDict_New();
        assert(tmp_class_creation_40__prepared == NULL);
        tmp_class_creation_40__prepared = tmp_assign_source_330;
    }
    branch_end_158:;
    {
        PyObject *tmp_assign_source_331;
        {
            PyObject *tmp_set_locals_40;
            CHECK_OBJECT(tmp_class_creation_40__prepared);
            tmp_set_locals_40 = tmp_class_creation_40__prepared;
            locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309 = tmp_set_locals_40;
            Py_INCREF(tmp_set_locals_40);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_122;
        }
        tmp_dictset_value = mod_consts[388];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_122;
        }
        tmp_dictset_value = mod_consts[387];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_122;
        }
        if (isFrameUnusable(cache_frame_52f176b2df23f42535d2dfb28a602c31_41)) {
            Py_XDECREF(cache_frame_52f176b2df23f42535d2dfb28a602c31_41);

#if _DEBUG_REFCOUNTS
            if (cache_frame_52f176b2df23f42535d2dfb28a602c31_41 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_52f176b2df23f42535d2dfb28a602c31_41 = MAKE_FUNCTION_FRAME(codeobj_52f176b2df23f42535d2dfb28a602c31, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_52f176b2df23f42535d2dfb28a602c31_41->m_type_description == NULL);
        frame_52f176b2df23f42535d2dfb28a602c31_41 = cache_frame_52f176b2df23f42535d2dfb28a602c31_41;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_52f176b2df23f42535d2dfb28a602c31_41);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_52f176b2df23f42535d2dfb28a602c31_41) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[389];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1367;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }
        tmp_dictset_value = PyDict_Copy(mod_consts[390]);
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309, mod_consts[156], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1369;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__52___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1378;
            type_description_2 = "o";
            goto frame_exception_exit_41;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_52f176b2df23f42535d2dfb28a602c31_41);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_40;

        frame_exception_exit_41:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_52f176b2df23f42535d2dfb28a602c31_41);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_52f176b2df23f42535d2dfb28a602c31_41, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_52f176b2df23f42535d2dfb28a602c31_41->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_52f176b2df23f42535d2dfb28a602c31_41, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_52f176b2df23f42535d2dfb28a602c31_41,
            type_description_2,
            outline_39_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_52f176b2df23f42535d2dfb28a602c31_41 == cache_frame_52f176b2df23f42535d2dfb28a602c31_41) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_52f176b2df23f42535d2dfb28a602c31_41);
            cache_frame_52f176b2df23f42535d2dfb28a602c31_41 = NULL;
        }

        assertFrameObject(frame_52f176b2df23f42535d2dfb28a602c31_41);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_40;

        frame_no_exception_40:;
        goto skip_nested_handling_40;
        nested_frame_exit_40:;

        goto try_except_handler_122;
        skip_nested_handling_40:;
        {
            nuitka_bool tmp_condition_result_240;
            PyObject *tmp_cmp_expr_left_40;
            PyObject *tmp_cmp_expr_right_40;
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_cmp_expr_left_40 = tmp_class_creation_40__bases;
            CHECK_OBJECT(tmp_class_creation_40__bases_orig);
            tmp_cmp_expr_right_40 = tmp_class_creation_40__bases_orig;
            tmp_condition_result_240 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_40, tmp_cmp_expr_right_40);
            if (tmp_condition_result_240 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1309;

                goto try_except_handler_122;
            }
            if (tmp_condition_result_240 == NUITKA_BOOL_TRUE) {
                goto branch_yes_160;
            } else {
                goto branch_no_160;
            }
            assert(tmp_condition_result_240 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_160:;
        CHECK_OBJECT(tmp_class_creation_40__bases_orig);
        tmp_dictset_value = tmp_class_creation_40__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1309;

            goto try_except_handler_122;
        }
        branch_no_160:;
        {
            PyObject *tmp_assign_source_332;
            PyObject *tmp_called_value_80;
            PyObject *tmp_args_value_80;
            PyObject *tmp_tuple_element_158;
            PyObject *tmp_kwargs_value_80;
            CHECK_OBJECT(tmp_class_creation_40__metaclass);
            tmp_called_value_80 = tmp_class_creation_40__metaclass;
            tmp_tuple_element_158 = mod_consts[387];
            tmp_args_value_80 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_80, 0, tmp_tuple_element_158);
            CHECK_OBJECT(tmp_class_creation_40__bases);
            tmp_tuple_element_158 = tmp_class_creation_40__bases;
            PyTuple_SET_ITEM0(tmp_args_value_80, 1, tmp_tuple_element_158);
            tmp_tuple_element_158 = locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309;
            PyTuple_SET_ITEM0(tmp_args_value_80, 2, tmp_tuple_element_158);
            CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
            tmp_kwargs_value_80 = tmp_class_creation_40__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1309;
            tmp_assign_source_332 = CALL_FUNCTION(tmp_called_value_80, tmp_args_value_80, tmp_kwargs_value_80);
            Py_DECREF(tmp_args_value_80);
            if (tmp_assign_source_332 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1309;

                goto try_except_handler_122;
            }
            assert(outline_39_var___class__ == NULL);
            outline_39_var___class__ = tmp_assign_source_332;
        }
        CHECK_OBJECT(outline_39_var___class__);
        tmp_assign_source_331 = outline_39_var___class__;
        Py_INCREF(tmp_assign_source_331);
        goto try_return_handler_122;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_122:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309);
        locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309 = NULL;
        goto try_return_handler_121;
        // Exception handler code:
        try_except_handler_122:;
        exception_keeper_type_120 = exception_type;
        exception_keeper_value_120 = exception_value;
        exception_keeper_tb_120 = exception_tb;
        exception_keeper_lineno_120 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309);
        locals_xlwt$BIFFRecords$$$class__40_PanesRecord_1309 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_120;
        exception_value = exception_keeper_value_120;
        exception_tb = exception_keeper_tb_120;
        exception_lineno = exception_keeper_lineno_120;

        goto try_except_handler_121;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_121:;
        CHECK_OBJECT(outline_39_var___class__);
        Py_DECREF(outline_39_var___class__);
        outline_39_var___class__ = NULL;
        goto outline_result_40;
        // Exception handler code:
        try_except_handler_121:;
        exception_keeper_type_121 = exception_type;
        exception_keeper_value_121 = exception_value;
        exception_keeper_tb_121 = exception_tb;
        exception_keeper_lineno_121 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_121;
        exception_value = exception_keeper_value_121;
        exception_tb = exception_keeper_tb_121;
        exception_lineno = exception_keeper_lineno_121;

        goto outline_exception_40;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_40:;
        exception_lineno = 1309;
        goto try_except_handler_120;
        outline_result_40:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[387], tmp_assign_source_331);
    }
    goto try_end_42;
    // Exception handler code:
    try_except_handler_120:;
    exception_keeper_type_122 = exception_type;
    exception_keeper_value_122 = exception_value;
    exception_keeper_tb_122 = exception_tb;
    exception_keeper_lineno_122 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    Py_XDECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_122;
    exception_value = exception_keeper_value_122;
    exception_tb = exception_keeper_tb_122;
    exception_lineno = exception_keeper_lineno_122;

    goto frame_exception_exit_1;
    // End of try:
    try_end_42:;
    CHECK_OBJECT(tmp_class_creation_40__bases_orig);
    Py_DECREF(tmp_class_creation_40__bases_orig);
    tmp_class_creation_40__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_40__bases);
    Py_DECREF(tmp_class_creation_40__bases);
    tmp_class_creation_40__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_40__class_decl_dict);
    Py_DECREF(tmp_class_creation_40__class_decl_dict);
    tmp_class_creation_40__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_40__metaclass);
    Py_DECREF(tmp_class_creation_40__metaclass);
    tmp_class_creation_40__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_40__prepared);
    Py_DECREF(tmp_class_creation_40__prepared);
    tmp_class_creation_40__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_333;
        PyObject *tmp_tuple_element_159;
        tmp_tuple_element_159 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_159 == NULL)) {
            tmp_tuple_element_159 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        tmp_assign_source_333 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_333, 0, tmp_tuple_element_159);
        assert(tmp_class_creation_41__bases_orig == NULL);
        tmp_class_creation_41__bases_orig = tmp_assign_source_333;
    }
    {
        PyObject *tmp_assign_source_334;
        PyObject *tmp_dircall_arg1_41;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dircall_arg1_41 = tmp_class_creation_41__bases_orig;
        Py_INCREF(tmp_dircall_arg1_41);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_41};
            tmp_assign_source_334 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_334 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        assert(tmp_class_creation_41__bases == NULL);
        tmp_class_creation_41__bases = tmp_assign_source_334;
    }
    {
        PyObject *tmp_assign_source_335;
        tmp_assign_source_335 = PyDict_New();
        assert(tmp_class_creation_41__class_decl_dict == NULL);
        tmp_class_creation_41__class_decl_dict = tmp_assign_source_335;
    }
    {
        PyObject *tmp_assign_source_336;
        PyObject *tmp_metaclass_value_41;
        bool tmp_condition_result_241;
        PyObject *tmp_key_value_121;
        PyObject *tmp_dict_arg_value_121;
        PyObject *tmp_dict_arg_value_122;
        PyObject *tmp_key_value_122;
        nuitka_bool tmp_condition_result_242;
        int tmp_truth_name_41;
        PyObject *tmp_type_arg_81;
        PyObject *tmp_expression_value_201;
        PyObject *tmp_subscript_value_41;
        PyObject *tmp_bases_value_41;
        tmp_key_value_121 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_121 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_121, tmp_key_value_121);
        assert(!(tmp_res == -1));
        tmp_condition_result_241 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_241 != false) {
            goto condexpr_true_81;
        } else {
            goto condexpr_false_81;
        }
        condexpr_true_81:;
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_122 = tmp_class_creation_41__class_decl_dict;
        tmp_key_value_122 = mod_consts[205];
        tmp_metaclass_value_41 = DICT_GET_ITEM0(tmp_dict_arg_value_122, tmp_key_value_122);
        if (tmp_metaclass_value_41 == NULL) {
            tmp_metaclass_value_41 = Py_None;
        }
        assert(!(tmp_metaclass_value_41 == NULL));
        Py_INCREF(tmp_metaclass_value_41);
        goto condexpr_end_81;
        condexpr_false_81:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_truth_name_41 = CHECK_IF_TRUE(tmp_class_creation_41__bases);
        if (tmp_truth_name_41 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        tmp_condition_result_242 = tmp_truth_name_41 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_242 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_82;
        } else {
            goto condexpr_false_82;
        }
        condexpr_true_82:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_expression_value_201 = tmp_class_creation_41__bases;
        tmp_subscript_value_41 = mod_consts[4];
        tmp_type_arg_81 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_201, tmp_subscript_value_41, 0);
        if (tmp_type_arg_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        tmp_metaclass_value_41 = BUILTIN_TYPE1(tmp_type_arg_81);
        Py_DECREF(tmp_type_arg_81);
        if (tmp_metaclass_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        goto condexpr_end_82;
        condexpr_false_82:;
        tmp_metaclass_value_41 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_41);
        condexpr_end_82:;
        condexpr_end_81:;
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_bases_value_41 = tmp_class_creation_41__bases;
        tmp_assign_source_336 = SELECT_METACLASS(tmp_metaclass_value_41, tmp_bases_value_41);
        Py_DECREF(tmp_metaclass_value_41);
        if (tmp_assign_source_336 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        assert(tmp_class_creation_41__metaclass == NULL);
        tmp_class_creation_41__metaclass = tmp_assign_source_336;
    }
    {
        bool tmp_condition_result_243;
        PyObject *tmp_key_value_123;
        PyObject *tmp_dict_arg_value_123;
        tmp_key_value_123 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_dict_arg_value_123 = tmp_class_creation_41__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_123, tmp_key_value_123);
        assert(!(tmp_res == -1));
        tmp_condition_result_243 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_243 != false) {
            goto branch_yes_161;
        } else {
            goto branch_no_161;
        }
    }
    branch_yes_161:;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_41__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1392;

        goto try_except_handler_123;
    }
    branch_no_161:;
    {
        nuitka_bool tmp_condition_result_244;
        PyObject *tmp_expression_value_202;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_202 = tmp_class_creation_41__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_202, mod_consts[206]);
        tmp_condition_result_244 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_244 == NUITKA_BOOL_TRUE) {
            goto branch_yes_162;
        } else {
            goto branch_no_162;
        }
    }
    branch_yes_162:;
    {
        PyObject *tmp_assign_source_337;
        PyObject *tmp_called_value_81;
        PyObject *tmp_expression_value_203;
        PyObject *tmp_args_value_81;
        PyObject *tmp_tuple_element_160;
        PyObject *tmp_kwargs_value_81;
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_expression_value_203 = tmp_class_creation_41__metaclass;
        tmp_called_value_81 = LOOKUP_ATTRIBUTE(tmp_expression_value_203, mod_consts[206]);
        if (tmp_called_value_81 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        tmp_tuple_element_160 = mod_consts[392];
        tmp_args_value_81 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_81, 0, tmp_tuple_element_160);
        CHECK_OBJECT(tmp_class_creation_41__bases);
        tmp_tuple_element_160 = tmp_class_creation_41__bases;
        PyTuple_SET_ITEM0(tmp_args_value_81, 1, tmp_tuple_element_160);
        CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
        tmp_kwargs_value_81 = tmp_class_creation_41__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1392;
        tmp_assign_source_337 = CALL_FUNCTION(tmp_called_value_81, tmp_args_value_81, tmp_kwargs_value_81);
        Py_DECREF(tmp_called_value_81);
        Py_DECREF(tmp_args_value_81);
        if (tmp_assign_source_337 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_337;
    }
    {
        bool tmp_condition_result_245;
        PyObject *tmp_operand_value_41;
        PyObject *tmp_expression_value_204;
        CHECK_OBJECT(tmp_class_creation_41__prepared);
        tmp_expression_value_204 = tmp_class_creation_41__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_204, mod_consts[208]);
        tmp_operand_value_41 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_41);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        tmp_condition_result_245 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_245 != false) {
            goto branch_yes_163;
        } else {
            goto branch_no_163;
        }
    }
    branch_yes_163:;
    {
        PyObject *tmp_raise_type_41;
        PyObject *tmp_raise_value_41;
        PyObject *tmp_left_value_41;
        PyObject *tmp_right_value_41;
        PyObject *tmp_tuple_element_161;
        PyObject *tmp_getattr_target_41;
        PyObject *tmp_getattr_attr_41;
        PyObject *tmp_getattr_default_41;
        tmp_raise_type_41 = PyExc_TypeError;
        tmp_left_value_41 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_41__metaclass);
        tmp_getattr_target_41 = tmp_class_creation_41__metaclass;
        tmp_getattr_attr_41 = mod_consts[210];
        tmp_getattr_default_41 = mod_consts[211];
        tmp_tuple_element_161 = BUILTIN_GETATTR(tmp_getattr_target_41, tmp_getattr_attr_41, tmp_getattr_default_41);
        if (tmp_tuple_element_161 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        tmp_right_value_41 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_205;
            PyObject *tmp_type_arg_82;
            PyTuple_SET_ITEM(tmp_right_value_41, 0, tmp_tuple_element_161);
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_type_arg_82 = tmp_class_creation_41__prepared;
            tmp_expression_value_205 = BUILTIN_TYPE1(tmp_type_arg_82);
            assert(!(tmp_expression_value_205 == NULL));
            tmp_tuple_element_161 = LOOKUP_ATTRIBUTE(tmp_expression_value_205, mod_consts[210]);
            Py_DECREF(tmp_expression_value_205);
            if (tmp_tuple_element_161 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1392;

                goto tuple_build_exception_41;
            }
            PyTuple_SET_ITEM(tmp_right_value_41, 1, tmp_tuple_element_161);
        }
        goto tuple_build_noexception_41;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_41:;
        Py_DECREF(tmp_right_value_41);
        goto try_except_handler_123;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_41:;
        tmp_raise_value_41 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_41, tmp_right_value_41);
        Py_DECREF(tmp_right_value_41);
        if (tmp_raise_value_41 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_123;
        }
        exception_type = tmp_raise_type_41;
        Py_INCREF(tmp_raise_type_41);
        exception_value = tmp_raise_value_41;
        exception_lineno = 1392;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_123;
    }
    branch_no_163:;
    goto branch_end_162;
    branch_no_162:;
    {
        PyObject *tmp_assign_source_338;
        tmp_assign_source_338 = PyDict_New();
        assert(tmp_class_creation_41__prepared == NULL);
        tmp_class_creation_41__prepared = tmp_assign_source_338;
    }
    branch_end_162:;
    {
        PyObject *tmp_assign_source_339;
        {
            PyObject *tmp_set_locals_41;
            CHECK_OBJECT(tmp_class_creation_41__prepared);
            tmp_set_locals_41 = tmp_class_creation_41__prepared;
            locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392 = tmp_set_locals_41;
            Py_INCREF(tmp_set_locals_41);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_125;
        }
        tmp_dictset_value = mod_consts[393];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_125;
        }
        tmp_dictset_value = mod_consts[392];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_125;
        }
        if (isFrameUnusable(cache_frame_e6579948de04ebf98f1b99b896a713f4_42)) {
            Py_XDECREF(cache_frame_e6579948de04ebf98f1b99b896a713f4_42);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e6579948de04ebf98f1b99b896a713f4_42 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e6579948de04ebf98f1b99b896a713f4_42 = MAKE_FUNCTION_FRAME(codeobj_e6579948de04ebf98f1b99b896a713f4, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e6579948de04ebf98f1b99b896a713f4_42->m_type_description == NULL);
        frame_e6579948de04ebf98f1b99b896a713f4_42 = cache_frame_e6579948de04ebf98f1b99b896a713f4_42;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e6579948de04ebf98f1b99b896a713f4_42);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e6579948de04ebf98f1b99b896a713f4_42) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[394];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1435;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__53___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1437;
            type_description_2 = "o";
            goto frame_exception_exit_42;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e6579948de04ebf98f1b99b896a713f4_42);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_41;

        frame_exception_exit_42:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e6579948de04ebf98f1b99b896a713f4_42);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e6579948de04ebf98f1b99b896a713f4_42, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e6579948de04ebf98f1b99b896a713f4_42->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e6579948de04ebf98f1b99b896a713f4_42, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e6579948de04ebf98f1b99b896a713f4_42,
            type_description_2,
            outline_40_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e6579948de04ebf98f1b99b896a713f4_42 == cache_frame_e6579948de04ebf98f1b99b896a713f4_42) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e6579948de04ebf98f1b99b896a713f4_42);
            cache_frame_e6579948de04ebf98f1b99b896a713f4_42 = NULL;
        }

        assertFrameObject(frame_e6579948de04ebf98f1b99b896a713f4_42);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_41;

        frame_no_exception_41:;
        goto skip_nested_handling_41;
        nested_frame_exit_41:;

        goto try_except_handler_125;
        skip_nested_handling_41:;
        {
            nuitka_bool tmp_condition_result_246;
            PyObject *tmp_cmp_expr_left_41;
            PyObject *tmp_cmp_expr_right_41;
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_cmp_expr_left_41 = tmp_class_creation_41__bases;
            CHECK_OBJECT(tmp_class_creation_41__bases_orig);
            tmp_cmp_expr_right_41 = tmp_class_creation_41__bases_orig;
            tmp_condition_result_246 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_41, tmp_cmp_expr_right_41);
            if (tmp_condition_result_246 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1392;

                goto try_except_handler_125;
            }
            if (tmp_condition_result_246 == NUITKA_BOOL_TRUE) {
                goto branch_yes_164;
            } else {
                goto branch_no_164;
            }
            assert(tmp_condition_result_246 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_164:;
        CHECK_OBJECT(tmp_class_creation_41__bases_orig);
        tmp_dictset_value = tmp_class_creation_41__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1392;

            goto try_except_handler_125;
        }
        branch_no_164:;
        {
            PyObject *tmp_assign_source_340;
            PyObject *tmp_called_value_82;
            PyObject *tmp_args_value_82;
            PyObject *tmp_tuple_element_162;
            PyObject *tmp_kwargs_value_82;
            CHECK_OBJECT(tmp_class_creation_41__metaclass);
            tmp_called_value_82 = tmp_class_creation_41__metaclass;
            tmp_tuple_element_162 = mod_consts[392];
            tmp_args_value_82 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_82, 0, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_41__bases);
            tmp_tuple_element_162 = tmp_class_creation_41__bases;
            PyTuple_SET_ITEM0(tmp_args_value_82, 1, tmp_tuple_element_162);
            tmp_tuple_element_162 = locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392;
            PyTuple_SET_ITEM0(tmp_args_value_82, 2, tmp_tuple_element_162);
            CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
            tmp_kwargs_value_82 = tmp_class_creation_41__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1392;
            tmp_assign_source_340 = CALL_FUNCTION(tmp_called_value_82, tmp_args_value_82, tmp_kwargs_value_82);
            Py_DECREF(tmp_args_value_82);
            if (tmp_assign_source_340 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1392;

                goto try_except_handler_125;
            }
            assert(outline_40_var___class__ == NULL);
            outline_40_var___class__ = tmp_assign_source_340;
        }
        CHECK_OBJECT(outline_40_var___class__);
        tmp_assign_source_339 = outline_40_var___class__;
        Py_INCREF(tmp_assign_source_339);
        goto try_return_handler_125;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_125:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392);
        locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392 = NULL;
        goto try_return_handler_124;
        // Exception handler code:
        try_except_handler_125:;
        exception_keeper_type_123 = exception_type;
        exception_keeper_value_123 = exception_value;
        exception_keeper_tb_123 = exception_tb;
        exception_keeper_lineno_123 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392);
        locals_xlwt$BIFFRecords$$$class__41_RowRecord_1392 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_123;
        exception_value = exception_keeper_value_123;
        exception_tb = exception_keeper_tb_123;
        exception_lineno = exception_keeper_lineno_123;

        goto try_except_handler_124;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_124:;
        CHECK_OBJECT(outline_40_var___class__);
        Py_DECREF(outline_40_var___class__);
        outline_40_var___class__ = NULL;
        goto outline_result_41;
        // Exception handler code:
        try_except_handler_124:;
        exception_keeper_type_124 = exception_type;
        exception_keeper_value_124 = exception_value;
        exception_keeper_tb_124 = exception_tb;
        exception_keeper_lineno_124 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_124;
        exception_value = exception_keeper_value_124;
        exception_tb = exception_keeper_tb_124;
        exception_lineno = exception_keeper_lineno_124;

        goto outline_exception_41;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_41:;
        exception_lineno = 1392;
        goto try_except_handler_123;
        outline_result_41:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[392], tmp_assign_source_339);
    }
    goto try_end_43;
    // Exception handler code:
    try_except_handler_123:;
    exception_keeper_type_125 = exception_type;
    exception_keeper_value_125 = exception_value;
    exception_keeper_tb_125 = exception_tb;
    exception_keeper_lineno_125 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    Py_XDECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_125;
    exception_value = exception_keeper_value_125;
    exception_tb = exception_keeper_tb_125;
    exception_lineno = exception_keeper_lineno_125;

    goto frame_exception_exit_1;
    // End of try:
    try_end_43:;
    CHECK_OBJECT(tmp_class_creation_41__bases_orig);
    Py_DECREF(tmp_class_creation_41__bases_orig);
    tmp_class_creation_41__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_41__bases);
    Py_DECREF(tmp_class_creation_41__bases);
    tmp_class_creation_41__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_41__class_decl_dict);
    Py_DECREF(tmp_class_creation_41__class_decl_dict);
    tmp_class_creation_41__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_41__metaclass);
    Py_DECREF(tmp_class_creation_41__metaclass);
    tmp_class_creation_41__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_41__prepared);
    Py_DECREF(tmp_class_creation_41__prepared);
    tmp_class_creation_41__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_341;
        PyObject *tmp_tuple_element_163;
        tmp_tuple_element_163 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_163 == NULL)) {
            tmp_tuple_element_163 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_163 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        tmp_assign_source_341 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_341, 0, tmp_tuple_element_163);
        assert(tmp_class_creation_42__bases_orig == NULL);
        tmp_class_creation_42__bases_orig = tmp_assign_source_341;
    }
    {
        PyObject *tmp_assign_source_342;
        PyObject *tmp_dircall_arg1_42;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dircall_arg1_42 = tmp_class_creation_42__bases_orig;
        Py_INCREF(tmp_dircall_arg1_42);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_42};
            tmp_assign_source_342 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_342 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        assert(tmp_class_creation_42__bases == NULL);
        tmp_class_creation_42__bases = tmp_assign_source_342;
    }
    {
        PyObject *tmp_assign_source_343;
        tmp_assign_source_343 = PyDict_New();
        assert(tmp_class_creation_42__class_decl_dict == NULL);
        tmp_class_creation_42__class_decl_dict = tmp_assign_source_343;
    }
    {
        PyObject *tmp_assign_source_344;
        PyObject *tmp_metaclass_value_42;
        bool tmp_condition_result_247;
        PyObject *tmp_key_value_124;
        PyObject *tmp_dict_arg_value_124;
        PyObject *tmp_dict_arg_value_125;
        PyObject *tmp_key_value_125;
        nuitka_bool tmp_condition_result_248;
        int tmp_truth_name_42;
        PyObject *tmp_type_arg_83;
        PyObject *tmp_expression_value_206;
        PyObject *tmp_subscript_value_42;
        PyObject *tmp_bases_value_42;
        tmp_key_value_124 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_124 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_124, tmp_key_value_124);
        assert(!(tmp_res == -1));
        tmp_condition_result_247 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_247 != false) {
            goto condexpr_true_83;
        } else {
            goto condexpr_false_83;
        }
        condexpr_true_83:;
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_125 = tmp_class_creation_42__class_decl_dict;
        tmp_key_value_125 = mod_consts[205];
        tmp_metaclass_value_42 = DICT_GET_ITEM0(tmp_dict_arg_value_125, tmp_key_value_125);
        if (tmp_metaclass_value_42 == NULL) {
            tmp_metaclass_value_42 = Py_None;
        }
        assert(!(tmp_metaclass_value_42 == NULL));
        Py_INCREF(tmp_metaclass_value_42);
        goto condexpr_end_83;
        condexpr_false_83:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_truth_name_42 = CHECK_IF_TRUE(tmp_class_creation_42__bases);
        if (tmp_truth_name_42 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        tmp_condition_result_248 = tmp_truth_name_42 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_248 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_84;
        } else {
            goto condexpr_false_84;
        }
        condexpr_true_84:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_expression_value_206 = tmp_class_creation_42__bases;
        tmp_subscript_value_42 = mod_consts[4];
        tmp_type_arg_83 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_206, tmp_subscript_value_42, 0);
        if (tmp_type_arg_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        tmp_metaclass_value_42 = BUILTIN_TYPE1(tmp_type_arg_83);
        Py_DECREF(tmp_type_arg_83);
        if (tmp_metaclass_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        goto condexpr_end_84;
        condexpr_false_84:;
        tmp_metaclass_value_42 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_42);
        condexpr_end_84:;
        condexpr_end_83:;
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_bases_value_42 = tmp_class_creation_42__bases;
        tmp_assign_source_344 = SELECT_METACLASS(tmp_metaclass_value_42, tmp_bases_value_42);
        Py_DECREF(tmp_metaclass_value_42);
        if (tmp_assign_source_344 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        assert(tmp_class_creation_42__metaclass == NULL);
        tmp_class_creation_42__metaclass = tmp_assign_source_344;
    }
    {
        bool tmp_condition_result_249;
        PyObject *tmp_key_value_126;
        PyObject *tmp_dict_arg_value_126;
        tmp_key_value_126 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_dict_arg_value_126 = tmp_class_creation_42__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_126, tmp_key_value_126);
        assert(!(tmp_res == -1));
        tmp_condition_result_249 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_249 != false) {
            goto branch_yes_165;
        } else {
            goto branch_no_165;
        }
    }
    branch_yes_165:;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_42__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1443;

        goto try_except_handler_126;
    }
    branch_no_165:;
    {
        nuitka_bool tmp_condition_result_250;
        PyObject *tmp_expression_value_207;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_207 = tmp_class_creation_42__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_207, mod_consts[206]);
        tmp_condition_result_250 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_250 == NUITKA_BOOL_TRUE) {
            goto branch_yes_166;
        } else {
            goto branch_no_166;
        }
    }
    branch_yes_166:;
    {
        PyObject *tmp_assign_source_345;
        PyObject *tmp_called_value_83;
        PyObject *tmp_expression_value_208;
        PyObject *tmp_args_value_83;
        PyObject *tmp_tuple_element_164;
        PyObject *tmp_kwargs_value_83;
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_expression_value_208 = tmp_class_creation_42__metaclass;
        tmp_called_value_83 = LOOKUP_ATTRIBUTE(tmp_expression_value_208, mod_consts[206]);
        if (tmp_called_value_83 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        tmp_tuple_element_164 = mod_consts[396];
        tmp_args_value_83 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_83, 0, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_42__bases);
        tmp_tuple_element_164 = tmp_class_creation_42__bases;
        PyTuple_SET_ITEM0(tmp_args_value_83, 1, tmp_tuple_element_164);
        CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
        tmp_kwargs_value_83 = tmp_class_creation_42__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1443;
        tmp_assign_source_345 = CALL_FUNCTION(tmp_called_value_83, tmp_args_value_83, tmp_kwargs_value_83);
        Py_DECREF(tmp_called_value_83);
        Py_DECREF(tmp_args_value_83);
        if (tmp_assign_source_345 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_345;
    }
    {
        bool tmp_condition_result_251;
        PyObject *tmp_operand_value_42;
        PyObject *tmp_expression_value_209;
        CHECK_OBJECT(tmp_class_creation_42__prepared);
        tmp_expression_value_209 = tmp_class_creation_42__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_209, mod_consts[208]);
        tmp_operand_value_42 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_42);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        tmp_condition_result_251 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_251 != false) {
            goto branch_yes_167;
        } else {
            goto branch_no_167;
        }
    }
    branch_yes_167:;
    {
        PyObject *tmp_raise_type_42;
        PyObject *tmp_raise_value_42;
        PyObject *tmp_left_value_42;
        PyObject *tmp_right_value_42;
        PyObject *tmp_tuple_element_165;
        PyObject *tmp_getattr_target_42;
        PyObject *tmp_getattr_attr_42;
        PyObject *tmp_getattr_default_42;
        tmp_raise_type_42 = PyExc_TypeError;
        tmp_left_value_42 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_42__metaclass);
        tmp_getattr_target_42 = tmp_class_creation_42__metaclass;
        tmp_getattr_attr_42 = mod_consts[210];
        tmp_getattr_default_42 = mod_consts[211];
        tmp_tuple_element_165 = BUILTIN_GETATTR(tmp_getattr_target_42, tmp_getattr_attr_42, tmp_getattr_default_42);
        if (tmp_tuple_element_165 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        tmp_right_value_42 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_210;
            PyObject *tmp_type_arg_84;
            PyTuple_SET_ITEM(tmp_right_value_42, 0, tmp_tuple_element_165);
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_type_arg_84 = tmp_class_creation_42__prepared;
            tmp_expression_value_210 = BUILTIN_TYPE1(tmp_type_arg_84);
            assert(!(tmp_expression_value_210 == NULL));
            tmp_tuple_element_165 = LOOKUP_ATTRIBUTE(tmp_expression_value_210, mod_consts[210]);
            Py_DECREF(tmp_expression_value_210);
            if (tmp_tuple_element_165 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1443;

                goto tuple_build_exception_42;
            }
            PyTuple_SET_ITEM(tmp_right_value_42, 1, tmp_tuple_element_165);
        }
        goto tuple_build_noexception_42;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_42:;
        Py_DECREF(tmp_right_value_42);
        goto try_except_handler_126;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_42:;
        tmp_raise_value_42 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_42, tmp_right_value_42);
        Py_DECREF(tmp_right_value_42);
        if (tmp_raise_value_42 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_126;
        }
        exception_type = tmp_raise_type_42;
        Py_INCREF(tmp_raise_type_42);
        exception_value = tmp_raise_value_42;
        exception_lineno = 1443;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_126;
    }
    branch_no_167:;
    goto branch_end_166;
    branch_no_166:;
    {
        PyObject *tmp_assign_source_346;
        tmp_assign_source_346 = PyDict_New();
        assert(tmp_class_creation_42__prepared == NULL);
        tmp_class_creation_42__prepared = tmp_assign_source_346;
    }
    branch_end_166:;
    {
        PyObject *tmp_assign_source_347;
        {
            PyObject *tmp_set_locals_42;
            CHECK_OBJECT(tmp_class_creation_42__prepared);
            tmp_set_locals_42 = tmp_class_creation_42__prepared;
            locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443 = tmp_set_locals_42;
            Py_INCREF(tmp_set_locals_42);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_128;
        }
        tmp_dictset_value = mod_consts[397];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_128;
        }
        tmp_dictset_value = mod_consts[396];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_128;
        }
        if (isFrameUnusable(cache_frame_5d58bba435feb3d9176e957cd07d5a36_43)) {
            Py_XDECREF(cache_frame_5d58bba435feb3d9176e957cd07d5a36_43);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5d58bba435feb3d9176e957cd07d5a36_43 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5d58bba435feb3d9176e957cd07d5a36_43 = MAKE_FUNCTION_FRAME(codeobj_5d58bba435feb3d9176e957cd07d5a36, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5d58bba435feb3d9176e957cd07d5a36_43->m_type_description == NULL);
        frame_5d58bba435feb3d9176e957cd07d5a36_43 = cache_frame_5d58bba435feb3d9176e957cd07d5a36_43;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5d58bba435feb3d9176e957cd07d5a36_43);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5d58bba435feb3d9176e957cd07d5a36_43) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[398];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1448;
            type_description_2 = "o";
            goto frame_exception_exit_43;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__54___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1450;
            type_description_2 = "o";
            goto frame_exception_exit_43;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5d58bba435feb3d9176e957cd07d5a36_43);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_42;

        frame_exception_exit_43:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5d58bba435feb3d9176e957cd07d5a36_43);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5d58bba435feb3d9176e957cd07d5a36_43, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5d58bba435feb3d9176e957cd07d5a36_43->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5d58bba435feb3d9176e957cd07d5a36_43, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5d58bba435feb3d9176e957cd07d5a36_43,
            type_description_2,
            outline_41_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5d58bba435feb3d9176e957cd07d5a36_43 == cache_frame_5d58bba435feb3d9176e957cd07d5a36_43) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5d58bba435feb3d9176e957cd07d5a36_43);
            cache_frame_5d58bba435feb3d9176e957cd07d5a36_43 = NULL;
        }

        assertFrameObject(frame_5d58bba435feb3d9176e957cd07d5a36_43);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_42;

        frame_no_exception_42:;
        goto skip_nested_handling_42;
        nested_frame_exit_42:;

        goto try_except_handler_128;
        skip_nested_handling_42:;
        {
            nuitka_bool tmp_condition_result_252;
            PyObject *tmp_cmp_expr_left_42;
            PyObject *tmp_cmp_expr_right_42;
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_cmp_expr_left_42 = tmp_class_creation_42__bases;
            CHECK_OBJECT(tmp_class_creation_42__bases_orig);
            tmp_cmp_expr_right_42 = tmp_class_creation_42__bases_orig;
            tmp_condition_result_252 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_42, tmp_cmp_expr_right_42);
            if (tmp_condition_result_252 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1443;

                goto try_except_handler_128;
            }
            if (tmp_condition_result_252 == NUITKA_BOOL_TRUE) {
                goto branch_yes_168;
            } else {
                goto branch_no_168;
            }
            assert(tmp_condition_result_252 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_168:;
        CHECK_OBJECT(tmp_class_creation_42__bases_orig);
        tmp_dictset_value = tmp_class_creation_42__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1443;

            goto try_except_handler_128;
        }
        branch_no_168:;
        {
            PyObject *tmp_assign_source_348;
            PyObject *tmp_called_value_84;
            PyObject *tmp_args_value_84;
            PyObject *tmp_tuple_element_166;
            PyObject *tmp_kwargs_value_84;
            CHECK_OBJECT(tmp_class_creation_42__metaclass);
            tmp_called_value_84 = tmp_class_creation_42__metaclass;
            tmp_tuple_element_166 = mod_consts[396];
            tmp_args_value_84 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_84, 0, tmp_tuple_element_166);
            CHECK_OBJECT(tmp_class_creation_42__bases);
            tmp_tuple_element_166 = tmp_class_creation_42__bases;
            PyTuple_SET_ITEM0(tmp_args_value_84, 1, tmp_tuple_element_166);
            tmp_tuple_element_166 = locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443;
            PyTuple_SET_ITEM0(tmp_args_value_84, 2, tmp_tuple_element_166);
            CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
            tmp_kwargs_value_84 = tmp_class_creation_42__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1443;
            tmp_assign_source_348 = CALL_FUNCTION(tmp_called_value_84, tmp_args_value_84, tmp_kwargs_value_84);
            Py_DECREF(tmp_args_value_84);
            if (tmp_assign_source_348 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1443;

                goto try_except_handler_128;
            }
            assert(outline_41_var___class__ == NULL);
            outline_41_var___class__ = tmp_assign_source_348;
        }
        CHECK_OBJECT(outline_41_var___class__);
        tmp_assign_source_347 = outline_41_var___class__;
        Py_INCREF(tmp_assign_source_347);
        goto try_return_handler_128;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_128:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443);
        locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443 = NULL;
        goto try_return_handler_127;
        // Exception handler code:
        try_except_handler_128:;
        exception_keeper_type_126 = exception_type;
        exception_keeper_value_126 = exception_value;
        exception_keeper_tb_126 = exception_tb;
        exception_keeper_lineno_126 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443);
        locals_xlwt$BIFFRecords$$$class__42_LabelSSTRecord_1443 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_126;
        exception_value = exception_keeper_value_126;
        exception_tb = exception_keeper_tb_126;
        exception_lineno = exception_keeper_lineno_126;

        goto try_except_handler_127;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_127:;
        CHECK_OBJECT(outline_41_var___class__);
        Py_DECREF(outline_41_var___class__);
        outline_41_var___class__ = NULL;
        goto outline_result_42;
        // Exception handler code:
        try_except_handler_127:;
        exception_keeper_type_127 = exception_type;
        exception_keeper_value_127 = exception_value;
        exception_keeper_tb_127 = exception_tb;
        exception_keeper_lineno_127 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_127;
        exception_value = exception_keeper_value_127;
        exception_tb = exception_keeper_tb_127;
        exception_lineno = exception_keeper_lineno_127;

        goto outline_exception_42;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_42:;
        exception_lineno = 1443;
        goto try_except_handler_126;
        outline_result_42:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[396], tmp_assign_source_347);
    }
    goto try_end_44;
    // Exception handler code:
    try_except_handler_126:;
    exception_keeper_type_128 = exception_type;
    exception_keeper_value_128 = exception_value;
    exception_keeper_tb_128 = exception_tb;
    exception_keeper_lineno_128 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    Py_XDECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_128;
    exception_value = exception_keeper_value_128;
    exception_tb = exception_keeper_tb_128;
    exception_lineno = exception_keeper_lineno_128;

    goto frame_exception_exit_1;
    // End of try:
    try_end_44:;
    CHECK_OBJECT(tmp_class_creation_42__bases_orig);
    Py_DECREF(tmp_class_creation_42__bases_orig);
    tmp_class_creation_42__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_42__bases);
    Py_DECREF(tmp_class_creation_42__bases);
    tmp_class_creation_42__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_42__class_decl_dict);
    Py_DECREF(tmp_class_creation_42__class_decl_dict);
    tmp_class_creation_42__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_42__metaclass);
    Py_DECREF(tmp_class_creation_42__metaclass);
    tmp_class_creation_42__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_42__prepared);
    Py_DECREF(tmp_class_creation_42__prepared);
    tmp_class_creation_42__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_349;
        PyObject *tmp_tuple_element_167;
        tmp_tuple_element_167 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_167 == NULL)) {
            tmp_tuple_element_167 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_167 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        tmp_assign_source_349 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_349, 0, tmp_tuple_element_167);
        assert(tmp_class_creation_43__bases_orig == NULL);
        tmp_class_creation_43__bases_orig = tmp_assign_source_349;
    }
    {
        PyObject *tmp_assign_source_350;
        PyObject *tmp_dircall_arg1_43;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dircall_arg1_43 = tmp_class_creation_43__bases_orig;
        Py_INCREF(tmp_dircall_arg1_43);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_43};
            tmp_assign_source_350 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_350 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        assert(tmp_class_creation_43__bases == NULL);
        tmp_class_creation_43__bases = tmp_assign_source_350;
    }
    {
        PyObject *tmp_assign_source_351;
        tmp_assign_source_351 = PyDict_New();
        assert(tmp_class_creation_43__class_decl_dict == NULL);
        tmp_class_creation_43__class_decl_dict = tmp_assign_source_351;
    }
    {
        PyObject *tmp_assign_source_352;
        PyObject *tmp_metaclass_value_43;
        bool tmp_condition_result_253;
        PyObject *tmp_key_value_127;
        PyObject *tmp_dict_arg_value_127;
        PyObject *tmp_dict_arg_value_128;
        PyObject *tmp_key_value_128;
        nuitka_bool tmp_condition_result_254;
        int tmp_truth_name_43;
        PyObject *tmp_type_arg_85;
        PyObject *tmp_expression_value_211;
        PyObject *tmp_subscript_value_43;
        PyObject *tmp_bases_value_43;
        tmp_key_value_127 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_127 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_127, tmp_key_value_127);
        assert(!(tmp_res == -1));
        tmp_condition_result_253 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_253 != false) {
            goto condexpr_true_85;
        } else {
            goto condexpr_false_85;
        }
        condexpr_true_85:;
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_128 = tmp_class_creation_43__class_decl_dict;
        tmp_key_value_128 = mod_consts[205];
        tmp_metaclass_value_43 = DICT_GET_ITEM0(tmp_dict_arg_value_128, tmp_key_value_128);
        if (tmp_metaclass_value_43 == NULL) {
            tmp_metaclass_value_43 = Py_None;
        }
        assert(!(tmp_metaclass_value_43 == NULL));
        Py_INCREF(tmp_metaclass_value_43);
        goto condexpr_end_85;
        condexpr_false_85:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_truth_name_43 = CHECK_IF_TRUE(tmp_class_creation_43__bases);
        if (tmp_truth_name_43 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        tmp_condition_result_254 = tmp_truth_name_43 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_254 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_86;
        } else {
            goto condexpr_false_86;
        }
        condexpr_true_86:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_expression_value_211 = tmp_class_creation_43__bases;
        tmp_subscript_value_43 = mod_consts[4];
        tmp_type_arg_85 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_211, tmp_subscript_value_43, 0);
        if (tmp_type_arg_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        tmp_metaclass_value_43 = BUILTIN_TYPE1(tmp_type_arg_85);
        Py_DECREF(tmp_type_arg_85);
        if (tmp_metaclass_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        goto condexpr_end_86;
        condexpr_false_86:;
        tmp_metaclass_value_43 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_43);
        condexpr_end_86:;
        condexpr_end_85:;
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_bases_value_43 = tmp_class_creation_43__bases;
        tmp_assign_source_352 = SELECT_METACLASS(tmp_metaclass_value_43, tmp_bases_value_43);
        Py_DECREF(tmp_metaclass_value_43);
        if (tmp_assign_source_352 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        assert(tmp_class_creation_43__metaclass == NULL);
        tmp_class_creation_43__metaclass = tmp_assign_source_352;
    }
    {
        bool tmp_condition_result_255;
        PyObject *tmp_key_value_129;
        PyObject *tmp_dict_arg_value_129;
        tmp_key_value_129 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_dict_arg_value_129 = tmp_class_creation_43__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_129, tmp_key_value_129);
        assert(!(tmp_res == -1));
        tmp_condition_result_255 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_255 != false) {
            goto branch_yes_169;
        } else {
            goto branch_no_169;
        }
    }
    branch_yes_169:;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_43__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1454;

        goto try_except_handler_129;
    }
    branch_no_169:;
    {
        nuitka_bool tmp_condition_result_256;
        PyObject *tmp_expression_value_212;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_212 = tmp_class_creation_43__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_212, mod_consts[206]);
        tmp_condition_result_256 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_256 == NUITKA_BOOL_TRUE) {
            goto branch_yes_170;
        } else {
            goto branch_no_170;
        }
    }
    branch_yes_170:;
    {
        PyObject *tmp_assign_source_353;
        PyObject *tmp_called_value_85;
        PyObject *tmp_expression_value_213;
        PyObject *tmp_args_value_85;
        PyObject *tmp_tuple_element_168;
        PyObject *tmp_kwargs_value_85;
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_expression_value_213 = tmp_class_creation_43__metaclass;
        tmp_called_value_85 = LOOKUP_ATTRIBUTE(tmp_expression_value_213, mod_consts[206]);
        if (tmp_called_value_85 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        tmp_tuple_element_168 = mod_consts[400];
        tmp_args_value_85 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_85, 0, tmp_tuple_element_168);
        CHECK_OBJECT(tmp_class_creation_43__bases);
        tmp_tuple_element_168 = tmp_class_creation_43__bases;
        PyTuple_SET_ITEM0(tmp_args_value_85, 1, tmp_tuple_element_168);
        CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
        tmp_kwargs_value_85 = tmp_class_creation_43__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1454;
        tmp_assign_source_353 = CALL_FUNCTION(tmp_called_value_85, tmp_args_value_85, tmp_kwargs_value_85);
        Py_DECREF(tmp_called_value_85);
        Py_DECREF(tmp_args_value_85);
        if (tmp_assign_source_353 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_353;
    }
    {
        bool tmp_condition_result_257;
        PyObject *tmp_operand_value_43;
        PyObject *tmp_expression_value_214;
        CHECK_OBJECT(tmp_class_creation_43__prepared);
        tmp_expression_value_214 = tmp_class_creation_43__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_214, mod_consts[208]);
        tmp_operand_value_43 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_43);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        tmp_condition_result_257 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_257 != false) {
            goto branch_yes_171;
        } else {
            goto branch_no_171;
        }
    }
    branch_yes_171:;
    {
        PyObject *tmp_raise_type_43;
        PyObject *tmp_raise_value_43;
        PyObject *tmp_left_value_43;
        PyObject *tmp_right_value_43;
        PyObject *tmp_tuple_element_169;
        PyObject *tmp_getattr_target_43;
        PyObject *tmp_getattr_attr_43;
        PyObject *tmp_getattr_default_43;
        tmp_raise_type_43 = PyExc_TypeError;
        tmp_left_value_43 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_43__metaclass);
        tmp_getattr_target_43 = tmp_class_creation_43__metaclass;
        tmp_getattr_attr_43 = mod_consts[210];
        tmp_getattr_default_43 = mod_consts[211];
        tmp_tuple_element_169 = BUILTIN_GETATTR(tmp_getattr_target_43, tmp_getattr_attr_43, tmp_getattr_default_43);
        if (tmp_tuple_element_169 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        tmp_right_value_43 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_215;
            PyObject *tmp_type_arg_86;
            PyTuple_SET_ITEM(tmp_right_value_43, 0, tmp_tuple_element_169);
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_type_arg_86 = tmp_class_creation_43__prepared;
            tmp_expression_value_215 = BUILTIN_TYPE1(tmp_type_arg_86);
            assert(!(tmp_expression_value_215 == NULL));
            tmp_tuple_element_169 = LOOKUP_ATTRIBUTE(tmp_expression_value_215, mod_consts[210]);
            Py_DECREF(tmp_expression_value_215);
            if (tmp_tuple_element_169 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1454;

                goto tuple_build_exception_43;
            }
            PyTuple_SET_ITEM(tmp_right_value_43, 1, tmp_tuple_element_169);
        }
        goto tuple_build_noexception_43;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_43:;
        Py_DECREF(tmp_right_value_43);
        goto try_except_handler_129;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_43:;
        tmp_raise_value_43 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_43, tmp_right_value_43);
        Py_DECREF(tmp_right_value_43);
        if (tmp_raise_value_43 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_129;
        }
        exception_type = tmp_raise_type_43;
        Py_INCREF(tmp_raise_type_43);
        exception_value = tmp_raise_value_43;
        exception_lineno = 1454;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_129;
    }
    branch_no_171:;
    goto branch_end_170;
    branch_no_170:;
    {
        PyObject *tmp_assign_source_354;
        tmp_assign_source_354 = PyDict_New();
        assert(tmp_class_creation_43__prepared == NULL);
        tmp_class_creation_43__prepared = tmp_assign_source_354;
    }
    branch_end_170:;
    {
        PyObject *tmp_assign_source_355;
        {
            PyObject *tmp_set_locals_43;
            CHECK_OBJECT(tmp_class_creation_43__prepared);
            tmp_set_locals_43 = tmp_class_creation_43__prepared;
            locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454 = tmp_set_locals_43;
            Py_INCREF(tmp_set_locals_43);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_131;
        }
        tmp_dictset_value = mod_consts[401];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_131;
        }
        tmp_dictset_value = mod_consts[400];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_131;
        }
        if (isFrameUnusable(cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44)) {
            Py_XDECREF(cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44);

#if _DEBUG_REFCOUNTS
            if (cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44 = MAKE_FUNCTION_FRAME(codeobj_659ce73c83fdc67382c3bdad711f5c3d, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44->m_type_description == NULL);
        frame_659ce73c83fdc67382c3bdad711f5c3d_44 = cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_659ce73c83fdc67382c3bdad711f5c3d_44);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_659ce73c83fdc67382c3bdad711f5c3d_44) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[402];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1484;
            type_description_2 = "o";
            goto frame_exception_exit_44;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__55___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1486;
            type_description_2 = "o";
            goto frame_exception_exit_44;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__56_get();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454, mod_consts[157], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1500;
            type_description_2 = "o";
            goto frame_exception_exit_44;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_659ce73c83fdc67382c3bdad711f5c3d_44);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_43;

        frame_exception_exit_44:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_659ce73c83fdc67382c3bdad711f5c3d_44);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_659ce73c83fdc67382c3bdad711f5c3d_44, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_659ce73c83fdc67382c3bdad711f5c3d_44->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_659ce73c83fdc67382c3bdad711f5c3d_44, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_659ce73c83fdc67382c3bdad711f5c3d_44,
            type_description_2,
            outline_42_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_659ce73c83fdc67382c3bdad711f5c3d_44 == cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44);
            cache_frame_659ce73c83fdc67382c3bdad711f5c3d_44 = NULL;
        }

        assertFrameObject(frame_659ce73c83fdc67382c3bdad711f5c3d_44);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_43;

        frame_no_exception_43:;
        goto skip_nested_handling_43;
        nested_frame_exit_43:;

        goto try_except_handler_131;
        skip_nested_handling_43:;
        {
            nuitka_bool tmp_condition_result_258;
            PyObject *tmp_cmp_expr_left_43;
            PyObject *tmp_cmp_expr_right_43;
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_cmp_expr_left_43 = tmp_class_creation_43__bases;
            CHECK_OBJECT(tmp_class_creation_43__bases_orig);
            tmp_cmp_expr_right_43 = tmp_class_creation_43__bases_orig;
            tmp_condition_result_258 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_43, tmp_cmp_expr_right_43);
            if (tmp_condition_result_258 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1454;

                goto try_except_handler_131;
            }
            if (tmp_condition_result_258 == NUITKA_BOOL_TRUE) {
                goto branch_yes_172;
            } else {
                goto branch_no_172;
            }
            assert(tmp_condition_result_258 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_172:;
        CHECK_OBJECT(tmp_class_creation_43__bases_orig);
        tmp_dictset_value = tmp_class_creation_43__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1454;

            goto try_except_handler_131;
        }
        branch_no_172:;
        {
            PyObject *tmp_assign_source_356;
            PyObject *tmp_called_value_86;
            PyObject *tmp_args_value_86;
            PyObject *tmp_tuple_element_170;
            PyObject *tmp_kwargs_value_86;
            CHECK_OBJECT(tmp_class_creation_43__metaclass);
            tmp_called_value_86 = tmp_class_creation_43__metaclass;
            tmp_tuple_element_170 = mod_consts[400];
            tmp_args_value_86 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_86, 0, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_43__bases);
            tmp_tuple_element_170 = tmp_class_creation_43__bases;
            PyTuple_SET_ITEM0(tmp_args_value_86, 1, tmp_tuple_element_170);
            tmp_tuple_element_170 = locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454;
            PyTuple_SET_ITEM0(tmp_args_value_86, 2, tmp_tuple_element_170);
            CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
            tmp_kwargs_value_86 = tmp_class_creation_43__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1454;
            tmp_assign_source_356 = CALL_FUNCTION(tmp_called_value_86, tmp_args_value_86, tmp_kwargs_value_86);
            Py_DECREF(tmp_args_value_86);
            if (tmp_assign_source_356 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1454;

                goto try_except_handler_131;
            }
            assert(outline_42_var___class__ == NULL);
            outline_42_var___class__ = tmp_assign_source_356;
        }
        CHECK_OBJECT(outline_42_var___class__);
        tmp_assign_source_355 = outline_42_var___class__;
        Py_INCREF(tmp_assign_source_355);
        goto try_return_handler_131;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_131:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454);
        locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454 = NULL;
        goto try_return_handler_130;
        // Exception handler code:
        try_except_handler_131:;
        exception_keeper_type_129 = exception_type;
        exception_keeper_value_129 = exception_value;
        exception_keeper_tb_129 = exception_tb;
        exception_keeper_lineno_129 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454);
        locals_xlwt$BIFFRecords$$$class__43_MergedCellsRecord_1454 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_129;
        exception_value = exception_keeper_value_129;
        exception_tb = exception_keeper_tb_129;
        exception_lineno = exception_keeper_lineno_129;

        goto try_except_handler_130;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_130:;
        CHECK_OBJECT(outline_42_var___class__);
        Py_DECREF(outline_42_var___class__);
        outline_42_var___class__ = NULL;
        goto outline_result_43;
        // Exception handler code:
        try_except_handler_130:;
        exception_keeper_type_130 = exception_type;
        exception_keeper_value_130 = exception_value;
        exception_keeper_tb_130 = exception_tb;
        exception_keeper_lineno_130 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_130;
        exception_value = exception_keeper_value_130;
        exception_tb = exception_keeper_tb_130;
        exception_lineno = exception_keeper_lineno_130;

        goto outline_exception_43;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_43:;
        exception_lineno = 1454;
        goto try_except_handler_129;
        outline_result_43:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[400], tmp_assign_source_355);
    }
    goto try_end_45;
    // Exception handler code:
    try_except_handler_129:;
    exception_keeper_type_131 = exception_type;
    exception_keeper_value_131 = exception_value;
    exception_keeper_tb_131 = exception_tb;
    exception_keeper_lineno_131 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    Py_XDECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_131;
    exception_value = exception_keeper_value_131;
    exception_tb = exception_keeper_tb_131;
    exception_lineno = exception_keeper_lineno_131;

    goto frame_exception_exit_1;
    // End of try:
    try_end_45:;
    CHECK_OBJECT(tmp_class_creation_43__bases_orig);
    Py_DECREF(tmp_class_creation_43__bases_orig);
    tmp_class_creation_43__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_43__bases);
    Py_DECREF(tmp_class_creation_43__bases);
    tmp_class_creation_43__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_43__class_decl_dict);
    Py_DECREF(tmp_class_creation_43__class_decl_dict);
    tmp_class_creation_43__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_43__metaclass);
    Py_DECREF(tmp_class_creation_43__metaclass);
    tmp_class_creation_43__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_43__prepared);
    Py_DECREF(tmp_class_creation_43__prepared);
    tmp_class_creation_43__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_357;
        PyObject *tmp_tuple_element_171;
        tmp_tuple_element_171 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_171 == NULL)) {
            tmp_tuple_element_171 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_171 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        tmp_assign_source_357 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_357, 0, tmp_tuple_element_171);
        assert(tmp_class_creation_44__bases_orig == NULL);
        tmp_class_creation_44__bases_orig = tmp_assign_source_357;
    }
    {
        PyObject *tmp_assign_source_358;
        PyObject *tmp_dircall_arg1_44;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dircall_arg1_44 = tmp_class_creation_44__bases_orig;
        Py_INCREF(tmp_dircall_arg1_44);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_44};
            tmp_assign_source_358 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_358 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        assert(tmp_class_creation_44__bases == NULL);
        tmp_class_creation_44__bases = tmp_assign_source_358;
    }
    {
        PyObject *tmp_assign_source_359;
        tmp_assign_source_359 = PyDict_New();
        assert(tmp_class_creation_44__class_decl_dict == NULL);
        tmp_class_creation_44__class_decl_dict = tmp_assign_source_359;
    }
    {
        PyObject *tmp_assign_source_360;
        PyObject *tmp_metaclass_value_44;
        bool tmp_condition_result_259;
        PyObject *tmp_key_value_130;
        PyObject *tmp_dict_arg_value_130;
        PyObject *tmp_dict_arg_value_131;
        PyObject *tmp_key_value_131;
        nuitka_bool tmp_condition_result_260;
        int tmp_truth_name_44;
        PyObject *tmp_type_arg_87;
        PyObject *tmp_expression_value_216;
        PyObject *tmp_subscript_value_44;
        PyObject *tmp_bases_value_44;
        tmp_key_value_130 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_130 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_130, tmp_key_value_130);
        assert(!(tmp_res == -1));
        tmp_condition_result_259 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_259 != false) {
            goto condexpr_true_87;
        } else {
            goto condexpr_false_87;
        }
        condexpr_true_87:;
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_131 = tmp_class_creation_44__class_decl_dict;
        tmp_key_value_131 = mod_consts[205];
        tmp_metaclass_value_44 = DICT_GET_ITEM0(tmp_dict_arg_value_131, tmp_key_value_131);
        if (tmp_metaclass_value_44 == NULL) {
            tmp_metaclass_value_44 = Py_None;
        }
        assert(!(tmp_metaclass_value_44 == NULL));
        Py_INCREF(tmp_metaclass_value_44);
        goto condexpr_end_87;
        condexpr_false_87:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_truth_name_44 = CHECK_IF_TRUE(tmp_class_creation_44__bases);
        if (tmp_truth_name_44 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        tmp_condition_result_260 = tmp_truth_name_44 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_260 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_88;
        } else {
            goto condexpr_false_88;
        }
        condexpr_true_88:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_expression_value_216 = tmp_class_creation_44__bases;
        tmp_subscript_value_44 = mod_consts[4];
        tmp_type_arg_87 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_216, tmp_subscript_value_44, 0);
        if (tmp_type_arg_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        tmp_metaclass_value_44 = BUILTIN_TYPE1(tmp_type_arg_87);
        Py_DECREF(tmp_type_arg_87);
        if (tmp_metaclass_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        goto condexpr_end_88;
        condexpr_false_88:;
        tmp_metaclass_value_44 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_44);
        condexpr_end_88:;
        condexpr_end_87:;
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_bases_value_44 = tmp_class_creation_44__bases;
        tmp_assign_source_360 = SELECT_METACLASS(tmp_metaclass_value_44, tmp_bases_value_44);
        Py_DECREF(tmp_metaclass_value_44);
        if (tmp_assign_source_360 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        assert(tmp_class_creation_44__metaclass == NULL);
        tmp_class_creation_44__metaclass = tmp_assign_source_360;
    }
    {
        bool tmp_condition_result_261;
        PyObject *tmp_key_value_132;
        PyObject *tmp_dict_arg_value_132;
        tmp_key_value_132 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_dict_arg_value_132 = tmp_class_creation_44__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_132, tmp_key_value_132);
        assert(!(tmp_res == -1));
        tmp_condition_result_261 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_261 != false) {
            goto branch_yes_173;
        } else {
            goto branch_no_173;
        }
    }
    branch_yes_173:;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_44__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1503;

        goto try_except_handler_132;
    }
    branch_no_173:;
    {
        nuitka_bool tmp_condition_result_262;
        PyObject *tmp_expression_value_217;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_217 = tmp_class_creation_44__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_217, mod_consts[206]);
        tmp_condition_result_262 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_262 == NUITKA_BOOL_TRUE) {
            goto branch_yes_174;
        } else {
            goto branch_no_174;
        }
    }
    branch_yes_174:;
    {
        PyObject *tmp_assign_source_361;
        PyObject *tmp_called_value_87;
        PyObject *tmp_expression_value_218;
        PyObject *tmp_args_value_87;
        PyObject *tmp_tuple_element_172;
        PyObject *tmp_kwargs_value_87;
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_expression_value_218 = tmp_class_creation_44__metaclass;
        tmp_called_value_87 = LOOKUP_ATTRIBUTE(tmp_expression_value_218, mod_consts[206]);
        if (tmp_called_value_87 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        tmp_tuple_element_172 = mod_consts[405];
        tmp_args_value_87 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_87, 0, tmp_tuple_element_172);
        CHECK_OBJECT(tmp_class_creation_44__bases);
        tmp_tuple_element_172 = tmp_class_creation_44__bases;
        PyTuple_SET_ITEM0(tmp_args_value_87, 1, tmp_tuple_element_172);
        CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
        tmp_kwargs_value_87 = tmp_class_creation_44__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1503;
        tmp_assign_source_361 = CALL_FUNCTION(tmp_called_value_87, tmp_args_value_87, tmp_kwargs_value_87);
        Py_DECREF(tmp_called_value_87);
        Py_DECREF(tmp_args_value_87);
        if (tmp_assign_source_361 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_361;
    }
    {
        bool tmp_condition_result_263;
        PyObject *tmp_operand_value_44;
        PyObject *tmp_expression_value_219;
        CHECK_OBJECT(tmp_class_creation_44__prepared);
        tmp_expression_value_219 = tmp_class_creation_44__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_219, mod_consts[208]);
        tmp_operand_value_44 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_44);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        tmp_condition_result_263 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_263 != false) {
            goto branch_yes_175;
        } else {
            goto branch_no_175;
        }
    }
    branch_yes_175:;
    {
        PyObject *tmp_raise_type_44;
        PyObject *tmp_raise_value_44;
        PyObject *tmp_left_value_44;
        PyObject *tmp_right_value_44;
        PyObject *tmp_tuple_element_173;
        PyObject *tmp_getattr_target_44;
        PyObject *tmp_getattr_attr_44;
        PyObject *tmp_getattr_default_44;
        tmp_raise_type_44 = PyExc_TypeError;
        tmp_left_value_44 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_44__metaclass);
        tmp_getattr_target_44 = tmp_class_creation_44__metaclass;
        tmp_getattr_attr_44 = mod_consts[210];
        tmp_getattr_default_44 = mod_consts[211];
        tmp_tuple_element_173 = BUILTIN_GETATTR(tmp_getattr_target_44, tmp_getattr_attr_44, tmp_getattr_default_44);
        if (tmp_tuple_element_173 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        tmp_right_value_44 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_220;
            PyObject *tmp_type_arg_88;
            PyTuple_SET_ITEM(tmp_right_value_44, 0, tmp_tuple_element_173);
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_type_arg_88 = tmp_class_creation_44__prepared;
            tmp_expression_value_220 = BUILTIN_TYPE1(tmp_type_arg_88);
            assert(!(tmp_expression_value_220 == NULL));
            tmp_tuple_element_173 = LOOKUP_ATTRIBUTE(tmp_expression_value_220, mod_consts[210]);
            Py_DECREF(tmp_expression_value_220);
            if (tmp_tuple_element_173 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1503;

                goto tuple_build_exception_44;
            }
            PyTuple_SET_ITEM(tmp_right_value_44, 1, tmp_tuple_element_173);
        }
        goto tuple_build_noexception_44;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_44:;
        Py_DECREF(tmp_right_value_44);
        goto try_except_handler_132;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_44:;
        tmp_raise_value_44 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_44, tmp_right_value_44);
        Py_DECREF(tmp_right_value_44);
        if (tmp_raise_value_44 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_132;
        }
        exception_type = tmp_raise_type_44;
        Py_INCREF(tmp_raise_type_44);
        exception_value = tmp_raise_value_44;
        exception_lineno = 1503;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_132;
    }
    branch_no_175:;
    goto branch_end_174;
    branch_no_174:;
    {
        PyObject *tmp_assign_source_362;
        tmp_assign_source_362 = PyDict_New();
        assert(tmp_class_creation_44__prepared == NULL);
        tmp_class_creation_44__prepared = tmp_assign_source_362;
    }
    branch_end_174:;
    {
        PyObject *tmp_assign_source_363;
        {
            PyObject *tmp_set_locals_44;
            CHECK_OBJECT(tmp_class_creation_44__prepared);
            tmp_set_locals_44 = tmp_class_creation_44__prepared;
            locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503 = tmp_set_locals_44;
            Py_INCREF(tmp_set_locals_44);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_134;
        }
        tmp_dictset_value = mod_consts[406];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_134;
        }
        tmp_dictset_value = mod_consts[405];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_134;
        }
        if (isFrameUnusable(cache_frame_4ef073419cc668bd91e82aa4780efd47_45)) {
            Py_XDECREF(cache_frame_4ef073419cc668bd91e82aa4780efd47_45);

#if _DEBUG_REFCOUNTS
            if (cache_frame_4ef073419cc668bd91e82aa4780efd47_45 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_4ef073419cc668bd91e82aa4780efd47_45 = MAKE_FUNCTION_FRAME(codeobj_4ef073419cc668bd91e82aa4780efd47, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_4ef073419cc668bd91e82aa4780efd47_45->m_type_description == NULL);
        frame_4ef073419cc668bd91e82aa4780efd47_45 = cache_frame_4ef073419cc668bd91e82aa4780efd47_45;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_4ef073419cc668bd91e82aa4780efd47_45);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_4ef073419cc668bd91e82aa4780efd47_45) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[407];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1516;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__57___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1518;
            type_description_2 = "o";
            goto frame_exception_exit_45;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4ef073419cc668bd91e82aa4780efd47_45);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_44;

        frame_exception_exit_45:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_4ef073419cc668bd91e82aa4780efd47_45);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_4ef073419cc668bd91e82aa4780efd47_45, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_4ef073419cc668bd91e82aa4780efd47_45->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_4ef073419cc668bd91e82aa4780efd47_45, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_4ef073419cc668bd91e82aa4780efd47_45,
            type_description_2,
            outline_43_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_4ef073419cc668bd91e82aa4780efd47_45 == cache_frame_4ef073419cc668bd91e82aa4780efd47_45) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_4ef073419cc668bd91e82aa4780efd47_45);
            cache_frame_4ef073419cc668bd91e82aa4780efd47_45 = NULL;
        }

        assertFrameObject(frame_4ef073419cc668bd91e82aa4780efd47_45);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_44;

        frame_no_exception_44:;
        goto skip_nested_handling_44;
        nested_frame_exit_44:;

        goto try_except_handler_134;
        skip_nested_handling_44:;
        {
            nuitka_bool tmp_condition_result_264;
            PyObject *tmp_cmp_expr_left_44;
            PyObject *tmp_cmp_expr_right_44;
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_cmp_expr_left_44 = tmp_class_creation_44__bases;
            CHECK_OBJECT(tmp_class_creation_44__bases_orig);
            tmp_cmp_expr_right_44 = tmp_class_creation_44__bases_orig;
            tmp_condition_result_264 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_44, tmp_cmp_expr_right_44);
            if (tmp_condition_result_264 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1503;

                goto try_except_handler_134;
            }
            if (tmp_condition_result_264 == NUITKA_BOOL_TRUE) {
                goto branch_yes_176;
            } else {
                goto branch_no_176;
            }
            assert(tmp_condition_result_264 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_176:;
        CHECK_OBJECT(tmp_class_creation_44__bases_orig);
        tmp_dictset_value = tmp_class_creation_44__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1503;

            goto try_except_handler_134;
        }
        branch_no_176:;
        {
            PyObject *tmp_assign_source_364;
            PyObject *tmp_called_value_88;
            PyObject *tmp_args_value_88;
            PyObject *tmp_tuple_element_174;
            PyObject *tmp_kwargs_value_88;
            CHECK_OBJECT(tmp_class_creation_44__metaclass);
            tmp_called_value_88 = tmp_class_creation_44__metaclass;
            tmp_tuple_element_174 = mod_consts[405];
            tmp_args_value_88 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_88, 0, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_44__bases);
            tmp_tuple_element_174 = tmp_class_creation_44__bases;
            PyTuple_SET_ITEM0(tmp_args_value_88, 1, tmp_tuple_element_174);
            tmp_tuple_element_174 = locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503;
            PyTuple_SET_ITEM0(tmp_args_value_88, 2, tmp_tuple_element_174);
            CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
            tmp_kwargs_value_88 = tmp_class_creation_44__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1503;
            tmp_assign_source_364 = CALL_FUNCTION(tmp_called_value_88, tmp_args_value_88, tmp_kwargs_value_88);
            Py_DECREF(tmp_args_value_88);
            if (tmp_assign_source_364 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1503;

                goto try_except_handler_134;
            }
            assert(outline_43_var___class__ == NULL);
            outline_43_var___class__ = tmp_assign_source_364;
        }
        CHECK_OBJECT(outline_43_var___class__);
        tmp_assign_source_363 = outline_43_var___class__;
        Py_INCREF(tmp_assign_source_363);
        goto try_return_handler_134;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_134:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503);
        locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503 = NULL;
        goto try_return_handler_133;
        // Exception handler code:
        try_except_handler_134:;
        exception_keeper_type_132 = exception_type;
        exception_keeper_value_132 = exception_value;
        exception_keeper_tb_132 = exception_tb;
        exception_keeper_lineno_132 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503);
        locals_xlwt$BIFFRecords$$$class__44_MulBlankRecord_1503 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_132;
        exception_value = exception_keeper_value_132;
        exception_tb = exception_keeper_tb_132;
        exception_lineno = exception_keeper_lineno_132;

        goto try_except_handler_133;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_133:;
        CHECK_OBJECT(outline_43_var___class__);
        Py_DECREF(outline_43_var___class__);
        outline_43_var___class__ = NULL;
        goto outline_result_44;
        // Exception handler code:
        try_except_handler_133:;
        exception_keeper_type_133 = exception_type;
        exception_keeper_value_133 = exception_value;
        exception_keeper_tb_133 = exception_tb;
        exception_keeper_lineno_133 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_133;
        exception_value = exception_keeper_value_133;
        exception_tb = exception_keeper_tb_133;
        exception_lineno = exception_keeper_lineno_133;

        goto outline_exception_44;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_44:;
        exception_lineno = 1503;
        goto try_except_handler_132;
        outline_result_44:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[405], tmp_assign_source_363);
    }
    goto try_end_46;
    // Exception handler code:
    try_except_handler_132:;
    exception_keeper_type_134 = exception_type;
    exception_keeper_value_134 = exception_value;
    exception_keeper_tb_134 = exception_tb;
    exception_keeper_lineno_134 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    Py_XDECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_134;
    exception_value = exception_keeper_value_134;
    exception_tb = exception_keeper_tb_134;
    exception_lineno = exception_keeper_lineno_134;

    goto frame_exception_exit_1;
    // End of try:
    try_end_46:;
    CHECK_OBJECT(tmp_class_creation_44__bases_orig);
    Py_DECREF(tmp_class_creation_44__bases_orig);
    tmp_class_creation_44__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_44__bases);
    Py_DECREF(tmp_class_creation_44__bases);
    tmp_class_creation_44__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_44__class_decl_dict);
    Py_DECREF(tmp_class_creation_44__class_decl_dict);
    tmp_class_creation_44__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_44__metaclass);
    Py_DECREF(tmp_class_creation_44__metaclass);
    tmp_class_creation_44__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_44__prepared);
    Py_DECREF(tmp_class_creation_44__prepared);
    tmp_class_creation_44__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_365;
        PyObject *tmp_tuple_element_175;
        tmp_tuple_element_175 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_175 == NULL)) {
            tmp_tuple_element_175 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_175 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        tmp_assign_source_365 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_365, 0, tmp_tuple_element_175);
        assert(tmp_class_creation_45__bases_orig == NULL);
        tmp_class_creation_45__bases_orig = tmp_assign_source_365;
    }
    {
        PyObject *tmp_assign_source_366;
        PyObject *tmp_dircall_arg1_45;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dircall_arg1_45 = tmp_class_creation_45__bases_orig;
        Py_INCREF(tmp_dircall_arg1_45);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_45};
            tmp_assign_source_366 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_366 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        assert(tmp_class_creation_45__bases == NULL);
        tmp_class_creation_45__bases = tmp_assign_source_366;
    }
    {
        PyObject *tmp_assign_source_367;
        tmp_assign_source_367 = PyDict_New();
        assert(tmp_class_creation_45__class_decl_dict == NULL);
        tmp_class_creation_45__class_decl_dict = tmp_assign_source_367;
    }
    {
        PyObject *tmp_assign_source_368;
        PyObject *tmp_metaclass_value_45;
        bool tmp_condition_result_265;
        PyObject *tmp_key_value_133;
        PyObject *tmp_dict_arg_value_133;
        PyObject *tmp_dict_arg_value_134;
        PyObject *tmp_key_value_134;
        nuitka_bool tmp_condition_result_266;
        int tmp_truth_name_45;
        PyObject *tmp_type_arg_89;
        PyObject *tmp_expression_value_221;
        PyObject *tmp_subscript_value_45;
        PyObject *tmp_bases_value_45;
        tmp_key_value_133 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_133 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_133, tmp_key_value_133);
        assert(!(tmp_res == -1));
        tmp_condition_result_265 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_265 != false) {
            goto condexpr_true_89;
        } else {
            goto condexpr_false_89;
        }
        condexpr_true_89:;
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_134 = tmp_class_creation_45__class_decl_dict;
        tmp_key_value_134 = mod_consts[205];
        tmp_metaclass_value_45 = DICT_GET_ITEM0(tmp_dict_arg_value_134, tmp_key_value_134);
        if (tmp_metaclass_value_45 == NULL) {
            tmp_metaclass_value_45 = Py_None;
        }
        assert(!(tmp_metaclass_value_45 == NULL));
        Py_INCREF(tmp_metaclass_value_45);
        goto condexpr_end_89;
        condexpr_false_89:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_truth_name_45 = CHECK_IF_TRUE(tmp_class_creation_45__bases);
        if (tmp_truth_name_45 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        tmp_condition_result_266 = tmp_truth_name_45 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_266 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_90;
        } else {
            goto condexpr_false_90;
        }
        condexpr_true_90:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_expression_value_221 = tmp_class_creation_45__bases;
        tmp_subscript_value_45 = mod_consts[4];
        tmp_type_arg_89 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_221, tmp_subscript_value_45, 0);
        if (tmp_type_arg_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        tmp_metaclass_value_45 = BUILTIN_TYPE1(tmp_type_arg_89);
        Py_DECREF(tmp_type_arg_89);
        if (tmp_metaclass_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        goto condexpr_end_90;
        condexpr_false_90:;
        tmp_metaclass_value_45 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_45);
        condexpr_end_90:;
        condexpr_end_89:;
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_bases_value_45 = tmp_class_creation_45__bases;
        tmp_assign_source_368 = SELECT_METACLASS(tmp_metaclass_value_45, tmp_bases_value_45);
        Py_DECREF(tmp_metaclass_value_45);
        if (tmp_assign_source_368 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        assert(tmp_class_creation_45__metaclass == NULL);
        tmp_class_creation_45__metaclass = tmp_assign_source_368;
    }
    {
        bool tmp_condition_result_267;
        PyObject *tmp_key_value_135;
        PyObject *tmp_dict_arg_value_135;
        tmp_key_value_135 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_dict_arg_value_135 = tmp_class_creation_45__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_135, tmp_key_value_135);
        assert(!(tmp_res == -1));
        tmp_condition_result_267 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_267 != false) {
            goto branch_yes_177;
        } else {
            goto branch_no_177;
        }
    }
    branch_yes_177:;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_45__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1524;

        goto try_except_handler_135;
    }
    branch_no_177:;
    {
        nuitka_bool tmp_condition_result_268;
        PyObject *tmp_expression_value_222;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_222 = tmp_class_creation_45__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_222, mod_consts[206]);
        tmp_condition_result_268 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_268 == NUITKA_BOOL_TRUE) {
            goto branch_yes_178;
        } else {
            goto branch_no_178;
        }
    }
    branch_yes_178:;
    {
        PyObject *tmp_assign_source_369;
        PyObject *tmp_called_value_89;
        PyObject *tmp_expression_value_223;
        PyObject *tmp_args_value_89;
        PyObject *tmp_tuple_element_176;
        PyObject *tmp_kwargs_value_89;
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_expression_value_223 = tmp_class_creation_45__metaclass;
        tmp_called_value_89 = LOOKUP_ATTRIBUTE(tmp_expression_value_223, mod_consts[206]);
        if (tmp_called_value_89 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        tmp_tuple_element_176 = mod_consts[409];
        tmp_args_value_89 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_89, 0, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_45__bases);
        tmp_tuple_element_176 = tmp_class_creation_45__bases;
        PyTuple_SET_ITEM0(tmp_args_value_89, 1, tmp_tuple_element_176);
        CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
        tmp_kwargs_value_89 = tmp_class_creation_45__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1524;
        tmp_assign_source_369 = CALL_FUNCTION(tmp_called_value_89, tmp_args_value_89, tmp_kwargs_value_89);
        Py_DECREF(tmp_called_value_89);
        Py_DECREF(tmp_args_value_89);
        if (tmp_assign_source_369 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_369;
    }
    {
        bool tmp_condition_result_269;
        PyObject *tmp_operand_value_45;
        PyObject *tmp_expression_value_224;
        CHECK_OBJECT(tmp_class_creation_45__prepared);
        tmp_expression_value_224 = tmp_class_creation_45__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_224, mod_consts[208]);
        tmp_operand_value_45 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_45);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        tmp_condition_result_269 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_269 != false) {
            goto branch_yes_179;
        } else {
            goto branch_no_179;
        }
    }
    branch_yes_179:;
    {
        PyObject *tmp_raise_type_45;
        PyObject *tmp_raise_value_45;
        PyObject *tmp_left_value_45;
        PyObject *tmp_right_value_45;
        PyObject *tmp_tuple_element_177;
        PyObject *tmp_getattr_target_45;
        PyObject *tmp_getattr_attr_45;
        PyObject *tmp_getattr_default_45;
        tmp_raise_type_45 = PyExc_TypeError;
        tmp_left_value_45 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_45__metaclass);
        tmp_getattr_target_45 = tmp_class_creation_45__metaclass;
        tmp_getattr_attr_45 = mod_consts[210];
        tmp_getattr_default_45 = mod_consts[211];
        tmp_tuple_element_177 = BUILTIN_GETATTR(tmp_getattr_target_45, tmp_getattr_attr_45, tmp_getattr_default_45);
        if (tmp_tuple_element_177 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        tmp_right_value_45 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_225;
            PyObject *tmp_type_arg_90;
            PyTuple_SET_ITEM(tmp_right_value_45, 0, tmp_tuple_element_177);
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_type_arg_90 = tmp_class_creation_45__prepared;
            tmp_expression_value_225 = BUILTIN_TYPE1(tmp_type_arg_90);
            assert(!(tmp_expression_value_225 == NULL));
            tmp_tuple_element_177 = LOOKUP_ATTRIBUTE(tmp_expression_value_225, mod_consts[210]);
            Py_DECREF(tmp_expression_value_225);
            if (tmp_tuple_element_177 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1524;

                goto tuple_build_exception_45;
            }
            PyTuple_SET_ITEM(tmp_right_value_45, 1, tmp_tuple_element_177);
        }
        goto tuple_build_noexception_45;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_45:;
        Py_DECREF(tmp_right_value_45);
        goto try_except_handler_135;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_45:;
        tmp_raise_value_45 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_45, tmp_right_value_45);
        Py_DECREF(tmp_right_value_45);
        if (tmp_raise_value_45 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_135;
        }
        exception_type = tmp_raise_type_45;
        Py_INCREF(tmp_raise_type_45);
        exception_value = tmp_raise_value_45;
        exception_lineno = 1524;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_135;
    }
    branch_no_179:;
    goto branch_end_178;
    branch_no_178:;
    {
        PyObject *tmp_assign_source_370;
        tmp_assign_source_370 = PyDict_New();
        assert(tmp_class_creation_45__prepared == NULL);
        tmp_class_creation_45__prepared = tmp_assign_source_370;
    }
    branch_end_178:;
    {
        PyObject *tmp_assign_source_371;
        {
            PyObject *tmp_set_locals_45;
            CHECK_OBJECT(tmp_class_creation_45__prepared);
            tmp_set_locals_45 = tmp_class_creation_45__prepared;
            locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524 = tmp_set_locals_45;
            Py_INCREF(tmp_set_locals_45);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_137;
        }
        tmp_dictset_value = mod_consts[410];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_137;
        }
        tmp_dictset_value = mod_consts[409];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_137;
        }
        if (isFrameUnusable(cache_frame_035b581453d59e71e72b510a88054ab9_46)) {
            Py_XDECREF(cache_frame_035b581453d59e71e72b510a88054ab9_46);

#if _DEBUG_REFCOUNTS
            if (cache_frame_035b581453d59e71e72b510a88054ab9_46 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_035b581453d59e71e72b510a88054ab9_46 = MAKE_FUNCTION_FRAME(codeobj_035b581453d59e71e72b510a88054ab9, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_035b581453d59e71e72b510a88054ab9_46->m_type_description == NULL);
        frame_035b581453d59e71e72b510a88054ab9_46 = cache_frame_035b581453d59e71e72b510a88054ab9_46;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_035b581453d59e71e72b510a88054ab9_46);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_035b581453d59e71e72b510a88054ab9_46) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[411];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1535;
            type_description_2 = "o";
            goto frame_exception_exit_46;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__58___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1537;
            type_description_2 = "o";
            goto frame_exception_exit_46;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_035b581453d59e71e72b510a88054ab9_46);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_45;

        frame_exception_exit_46:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_035b581453d59e71e72b510a88054ab9_46);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_035b581453d59e71e72b510a88054ab9_46, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_035b581453d59e71e72b510a88054ab9_46->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_035b581453d59e71e72b510a88054ab9_46, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_035b581453d59e71e72b510a88054ab9_46,
            type_description_2,
            outline_44_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_035b581453d59e71e72b510a88054ab9_46 == cache_frame_035b581453d59e71e72b510a88054ab9_46) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_035b581453d59e71e72b510a88054ab9_46);
            cache_frame_035b581453d59e71e72b510a88054ab9_46 = NULL;
        }

        assertFrameObject(frame_035b581453d59e71e72b510a88054ab9_46);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_45;

        frame_no_exception_45:;
        goto skip_nested_handling_45;
        nested_frame_exit_45:;

        goto try_except_handler_137;
        skip_nested_handling_45:;
        {
            nuitka_bool tmp_condition_result_270;
            PyObject *tmp_cmp_expr_left_45;
            PyObject *tmp_cmp_expr_right_45;
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_cmp_expr_left_45 = tmp_class_creation_45__bases;
            CHECK_OBJECT(tmp_class_creation_45__bases_orig);
            tmp_cmp_expr_right_45 = tmp_class_creation_45__bases_orig;
            tmp_condition_result_270 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_45, tmp_cmp_expr_right_45);
            if (tmp_condition_result_270 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1524;

                goto try_except_handler_137;
            }
            if (tmp_condition_result_270 == NUITKA_BOOL_TRUE) {
                goto branch_yes_180;
            } else {
                goto branch_no_180;
            }
            assert(tmp_condition_result_270 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_180:;
        CHECK_OBJECT(tmp_class_creation_45__bases_orig);
        tmp_dictset_value = tmp_class_creation_45__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1524;

            goto try_except_handler_137;
        }
        branch_no_180:;
        {
            PyObject *tmp_assign_source_372;
            PyObject *tmp_called_value_90;
            PyObject *tmp_args_value_90;
            PyObject *tmp_tuple_element_178;
            PyObject *tmp_kwargs_value_90;
            CHECK_OBJECT(tmp_class_creation_45__metaclass);
            tmp_called_value_90 = tmp_class_creation_45__metaclass;
            tmp_tuple_element_178 = mod_consts[409];
            tmp_args_value_90 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_90, 0, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_45__bases);
            tmp_tuple_element_178 = tmp_class_creation_45__bases;
            PyTuple_SET_ITEM0(tmp_args_value_90, 1, tmp_tuple_element_178);
            tmp_tuple_element_178 = locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524;
            PyTuple_SET_ITEM0(tmp_args_value_90, 2, tmp_tuple_element_178);
            CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
            tmp_kwargs_value_90 = tmp_class_creation_45__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1524;
            tmp_assign_source_372 = CALL_FUNCTION(tmp_called_value_90, tmp_args_value_90, tmp_kwargs_value_90);
            Py_DECREF(tmp_args_value_90);
            if (tmp_assign_source_372 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1524;

                goto try_except_handler_137;
            }
            assert(outline_44_var___class__ == NULL);
            outline_44_var___class__ = tmp_assign_source_372;
        }
        CHECK_OBJECT(outline_44_var___class__);
        tmp_assign_source_371 = outline_44_var___class__;
        Py_INCREF(tmp_assign_source_371);
        goto try_return_handler_137;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_137:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524);
        locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524 = NULL;
        goto try_return_handler_136;
        // Exception handler code:
        try_except_handler_137:;
        exception_keeper_type_135 = exception_type;
        exception_keeper_value_135 = exception_value;
        exception_keeper_tb_135 = exception_tb;
        exception_keeper_lineno_135 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524);
        locals_xlwt$BIFFRecords$$$class__45_BlankRecord_1524 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_135;
        exception_value = exception_keeper_value_135;
        exception_tb = exception_keeper_tb_135;
        exception_lineno = exception_keeper_lineno_135;

        goto try_except_handler_136;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_136:;
        CHECK_OBJECT(outline_44_var___class__);
        Py_DECREF(outline_44_var___class__);
        outline_44_var___class__ = NULL;
        goto outline_result_45;
        // Exception handler code:
        try_except_handler_136:;
        exception_keeper_type_136 = exception_type;
        exception_keeper_value_136 = exception_value;
        exception_keeper_tb_136 = exception_tb;
        exception_keeper_lineno_136 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_136;
        exception_value = exception_keeper_value_136;
        exception_tb = exception_keeper_tb_136;
        exception_lineno = exception_keeper_lineno_136;

        goto outline_exception_45;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_45:;
        exception_lineno = 1524;
        goto try_except_handler_135;
        outline_result_45:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[409], tmp_assign_source_371);
    }
    goto try_end_47;
    // Exception handler code:
    try_except_handler_135:;
    exception_keeper_type_137 = exception_type;
    exception_keeper_value_137 = exception_value;
    exception_keeper_tb_137 = exception_tb;
    exception_keeper_lineno_137 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    Py_XDECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_137;
    exception_value = exception_keeper_value_137;
    exception_tb = exception_keeper_tb_137;
    exception_lineno = exception_keeper_lineno_137;

    goto frame_exception_exit_1;
    // End of try:
    try_end_47:;
    CHECK_OBJECT(tmp_class_creation_45__bases_orig);
    Py_DECREF(tmp_class_creation_45__bases_orig);
    tmp_class_creation_45__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_45__bases);
    Py_DECREF(tmp_class_creation_45__bases);
    tmp_class_creation_45__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_45__class_decl_dict);
    Py_DECREF(tmp_class_creation_45__class_decl_dict);
    tmp_class_creation_45__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_45__metaclass);
    Py_DECREF(tmp_class_creation_45__metaclass);
    tmp_class_creation_45__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_45__prepared);
    Py_DECREF(tmp_class_creation_45__prepared);
    tmp_class_creation_45__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_373;
        PyObject *tmp_tuple_element_179;
        tmp_tuple_element_179 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_179 == NULL)) {
            tmp_tuple_element_179 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_179 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        tmp_assign_source_373 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_373, 0, tmp_tuple_element_179);
        assert(tmp_class_creation_46__bases_orig == NULL);
        tmp_class_creation_46__bases_orig = tmp_assign_source_373;
    }
    {
        PyObject *tmp_assign_source_374;
        PyObject *tmp_dircall_arg1_46;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dircall_arg1_46 = tmp_class_creation_46__bases_orig;
        Py_INCREF(tmp_dircall_arg1_46);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_46};
            tmp_assign_source_374 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_374 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        assert(tmp_class_creation_46__bases == NULL);
        tmp_class_creation_46__bases = tmp_assign_source_374;
    }
    {
        PyObject *tmp_assign_source_375;
        tmp_assign_source_375 = PyDict_New();
        assert(tmp_class_creation_46__class_decl_dict == NULL);
        tmp_class_creation_46__class_decl_dict = tmp_assign_source_375;
    }
    {
        PyObject *tmp_assign_source_376;
        PyObject *tmp_metaclass_value_46;
        bool tmp_condition_result_271;
        PyObject *tmp_key_value_136;
        PyObject *tmp_dict_arg_value_136;
        PyObject *tmp_dict_arg_value_137;
        PyObject *tmp_key_value_137;
        nuitka_bool tmp_condition_result_272;
        int tmp_truth_name_46;
        PyObject *tmp_type_arg_91;
        PyObject *tmp_expression_value_226;
        PyObject *tmp_subscript_value_46;
        PyObject *tmp_bases_value_46;
        tmp_key_value_136 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_136 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_136, tmp_key_value_136);
        assert(!(tmp_res == -1));
        tmp_condition_result_271 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_271 != false) {
            goto condexpr_true_91;
        } else {
            goto condexpr_false_91;
        }
        condexpr_true_91:;
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_137 = tmp_class_creation_46__class_decl_dict;
        tmp_key_value_137 = mod_consts[205];
        tmp_metaclass_value_46 = DICT_GET_ITEM0(tmp_dict_arg_value_137, tmp_key_value_137);
        if (tmp_metaclass_value_46 == NULL) {
            tmp_metaclass_value_46 = Py_None;
        }
        assert(!(tmp_metaclass_value_46 == NULL));
        Py_INCREF(tmp_metaclass_value_46);
        goto condexpr_end_91;
        condexpr_false_91:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_truth_name_46 = CHECK_IF_TRUE(tmp_class_creation_46__bases);
        if (tmp_truth_name_46 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        tmp_condition_result_272 = tmp_truth_name_46 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_272 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_92;
        } else {
            goto condexpr_false_92;
        }
        condexpr_true_92:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_expression_value_226 = tmp_class_creation_46__bases;
        tmp_subscript_value_46 = mod_consts[4];
        tmp_type_arg_91 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_226, tmp_subscript_value_46, 0);
        if (tmp_type_arg_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        tmp_metaclass_value_46 = BUILTIN_TYPE1(tmp_type_arg_91);
        Py_DECREF(tmp_type_arg_91);
        if (tmp_metaclass_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        goto condexpr_end_92;
        condexpr_false_92:;
        tmp_metaclass_value_46 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_46);
        condexpr_end_92:;
        condexpr_end_91:;
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_bases_value_46 = tmp_class_creation_46__bases;
        tmp_assign_source_376 = SELECT_METACLASS(tmp_metaclass_value_46, tmp_bases_value_46);
        Py_DECREF(tmp_metaclass_value_46);
        if (tmp_assign_source_376 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        assert(tmp_class_creation_46__metaclass == NULL);
        tmp_class_creation_46__metaclass = tmp_assign_source_376;
    }
    {
        bool tmp_condition_result_273;
        PyObject *tmp_key_value_138;
        PyObject *tmp_dict_arg_value_138;
        tmp_key_value_138 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_dict_arg_value_138 = tmp_class_creation_46__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_138, tmp_key_value_138);
        assert(!(tmp_res == -1));
        tmp_condition_result_273 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_273 != false) {
            goto branch_yes_181;
        } else {
            goto branch_no_181;
        }
    }
    branch_yes_181:;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_46__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1541;

        goto try_except_handler_138;
    }
    branch_no_181:;
    {
        nuitka_bool tmp_condition_result_274;
        PyObject *tmp_expression_value_227;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_227 = tmp_class_creation_46__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_227, mod_consts[206]);
        tmp_condition_result_274 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_274 == NUITKA_BOOL_TRUE) {
            goto branch_yes_182;
        } else {
            goto branch_no_182;
        }
    }
    branch_yes_182:;
    {
        PyObject *tmp_assign_source_377;
        PyObject *tmp_called_value_91;
        PyObject *tmp_expression_value_228;
        PyObject *tmp_args_value_91;
        PyObject *tmp_tuple_element_180;
        PyObject *tmp_kwargs_value_91;
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_expression_value_228 = tmp_class_creation_46__metaclass;
        tmp_called_value_91 = LOOKUP_ATTRIBUTE(tmp_expression_value_228, mod_consts[206]);
        if (tmp_called_value_91 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        tmp_tuple_element_180 = mod_consts[413];
        tmp_args_value_91 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_91, 0, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_46__bases);
        tmp_tuple_element_180 = tmp_class_creation_46__bases;
        PyTuple_SET_ITEM0(tmp_args_value_91, 1, tmp_tuple_element_180);
        CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
        tmp_kwargs_value_91 = tmp_class_creation_46__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1541;
        tmp_assign_source_377 = CALL_FUNCTION(tmp_called_value_91, tmp_args_value_91, tmp_kwargs_value_91);
        Py_DECREF(tmp_called_value_91);
        Py_DECREF(tmp_args_value_91);
        if (tmp_assign_source_377 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_377;
    }
    {
        bool tmp_condition_result_275;
        PyObject *tmp_operand_value_46;
        PyObject *tmp_expression_value_229;
        CHECK_OBJECT(tmp_class_creation_46__prepared);
        tmp_expression_value_229 = tmp_class_creation_46__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_229, mod_consts[208]);
        tmp_operand_value_46 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_46);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        tmp_condition_result_275 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_275 != false) {
            goto branch_yes_183;
        } else {
            goto branch_no_183;
        }
    }
    branch_yes_183:;
    {
        PyObject *tmp_raise_type_46;
        PyObject *tmp_raise_value_46;
        PyObject *tmp_left_value_46;
        PyObject *tmp_right_value_46;
        PyObject *tmp_tuple_element_181;
        PyObject *tmp_getattr_target_46;
        PyObject *tmp_getattr_attr_46;
        PyObject *tmp_getattr_default_46;
        tmp_raise_type_46 = PyExc_TypeError;
        tmp_left_value_46 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_46__metaclass);
        tmp_getattr_target_46 = tmp_class_creation_46__metaclass;
        tmp_getattr_attr_46 = mod_consts[210];
        tmp_getattr_default_46 = mod_consts[211];
        tmp_tuple_element_181 = BUILTIN_GETATTR(tmp_getattr_target_46, tmp_getattr_attr_46, tmp_getattr_default_46);
        if (tmp_tuple_element_181 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        tmp_right_value_46 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_230;
            PyObject *tmp_type_arg_92;
            PyTuple_SET_ITEM(tmp_right_value_46, 0, tmp_tuple_element_181);
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_type_arg_92 = tmp_class_creation_46__prepared;
            tmp_expression_value_230 = BUILTIN_TYPE1(tmp_type_arg_92);
            assert(!(tmp_expression_value_230 == NULL));
            tmp_tuple_element_181 = LOOKUP_ATTRIBUTE(tmp_expression_value_230, mod_consts[210]);
            Py_DECREF(tmp_expression_value_230);
            if (tmp_tuple_element_181 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1541;

                goto tuple_build_exception_46;
            }
            PyTuple_SET_ITEM(tmp_right_value_46, 1, tmp_tuple_element_181);
        }
        goto tuple_build_noexception_46;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_46:;
        Py_DECREF(tmp_right_value_46);
        goto try_except_handler_138;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_46:;
        tmp_raise_value_46 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_46, tmp_right_value_46);
        Py_DECREF(tmp_right_value_46);
        if (tmp_raise_value_46 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_138;
        }
        exception_type = tmp_raise_type_46;
        Py_INCREF(tmp_raise_type_46);
        exception_value = tmp_raise_value_46;
        exception_lineno = 1541;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_138;
    }
    branch_no_183:;
    goto branch_end_182;
    branch_no_182:;
    {
        PyObject *tmp_assign_source_378;
        tmp_assign_source_378 = PyDict_New();
        assert(tmp_class_creation_46__prepared == NULL);
        tmp_class_creation_46__prepared = tmp_assign_source_378;
    }
    branch_end_182:;
    {
        PyObject *tmp_assign_source_379;
        {
            PyObject *tmp_set_locals_46;
            CHECK_OBJECT(tmp_class_creation_46__prepared);
            tmp_set_locals_46 = tmp_class_creation_46__prepared;
            locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541 = tmp_set_locals_46;
            Py_INCREF(tmp_set_locals_46);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_140;
        }
        tmp_dictset_value = mod_consts[414];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_140;
        }
        tmp_dictset_value = mod_consts[413];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_140;
        }
        if (isFrameUnusable(cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47)) {
            Py_XDECREF(cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47);

#if _DEBUG_REFCOUNTS
            if (cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47 = MAKE_FUNCTION_FRAME(codeobj_de6baac6bdc8d5b7cbc934b30a0fb8c3, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47->m_type_description == NULL);
        frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47 = cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[415];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1547;
            type_description_2 = "o";
            goto frame_exception_exit_47;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__59___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1549;
            type_description_2 = "o";
            goto frame_exception_exit_47;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_46;

        frame_exception_exit_47:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47,
            type_description_2,
            outline_45_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47 == cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47);
            cache_frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47 = NULL;
        }

        assertFrameObject(frame_de6baac6bdc8d5b7cbc934b30a0fb8c3_47);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_46;

        frame_no_exception_46:;
        goto skip_nested_handling_46;
        nested_frame_exit_46:;

        goto try_except_handler_140;
        skip_nested_handling_46:;
        {
            nuitka_bool tmp_condition_result_276;
            PyObject *tmp_cmp_expr_left_46;
            PyObject *tmp_cmp_expr_right_46;
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_cmp_expr_left_46 = tmp_class_creation_46__bases;
            CHECK_OBJECT(tmp_class_creation_46__bases_orig);
            tmp_cmp_expr_right_46 = tmp_class_creation_46__bases_orig;
            tmp_condition_result_276 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_46, tmp_cmp_expr_right_46);
            if (tmp_condition_result_276 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1541;

                goto try_except_handler_140;
            }
            if (tmp_condition_result_276 == NUITKA_BOOL_TRUE) {
                goto branch_yes_184;
            } else {
                goto branch_no_184;
            }
            assert(tmp_condition_result_276 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_184:;
        CHECK_OBJECT(tmp_class_creation_46__bases_orig);
        tmp_dictset_value = tmp_class_creation_46__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1541;

            goto try_except_handler_140;
        }
        branch_no_184:;
        {
            PyObject *tmp_assign_source_380;
            PyObject *tmp_called_value_92;
            PyObject *tmp_args_value_92;
            PyObject *tmp_tuple_element_182;
            PyObject *tmp_kwargs_value_92;
            CHECK_OBJECT(tmp_class_creation_46__metaclass);
            tmp_called_value_92 = tmp_class_creation_46__metaclass;
            tmp_tuple_element_182 = mod_consts[413];
            tmp_args_value_92 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_92, 0, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_46__bases);
            tmp_tuple_element_182 = tmp_class_creation_46__bases;
            PyTuple_SET_ITEM0(tmp_args_value_92, 1, tmp_tuple_element_182);
            tmp_tuple_element_182 = locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541;
            PyTuple_SET_ITEM0(tmp_args_value_92, 2, tmp_tuple_element_182);
            CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
            tmp_kwargs_value_92 = tmp_class_creation_46__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1541;
            tmp_assign_source_380 = CALL_FUNCTION(tmp_called_value_92, tmp_args_value_92, tmp_kwargs_value_92);
            Py_DECREF(tmp_args_value_92);
            if (tmp_assign_source_380 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1541;

                goto try_except_handler_140;
            }
            assert(outline_45_var___class__ == NULL);
            outline_45_var___class__ = tmp_assign_source_380;
        }
        CHECK_OBJECT(outline_45_var___class__);
        tmp_assign_source_379 = outline_45_var___class__;
        Py_INCREF(tmp_assign_source_379);
        goto try_return_handler_140;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_140:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541);
        locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541 = NULL;
        goto try_return_handler_139;
        // Exception handler code:
        try_except_handler_140:;
        exception_keeper_type_138 = exception_type;
        exception_keeper_value_138 = exception_value;
        exception_keeper_tb_138 = exception_tb;
        exception_keeper_lineno_138 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541);
        locals_xlwt$BIFFRecords$$$class__46_RKRecord_1541 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_138;
        exception_value = exception_keeper_value_138;
        exception_tb = exception_keeper_tb_138;
        exception_lineno = exception_keeper_lineno_138;

        goto try_except_handler_139;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_139:;
        CHECK_OBJECT(outline_45_var___class__);
        Py_DECREF(outline_45_var___class__);
        outline_45_var___class__ = NULL;
        goto outline_result_46;
        // Exception handler code:
        try_except_handler_139:;
        exception_keeper_type_139 = exception_type;
        exception_keeper_value_139 = exception_value;
        exception_keeper_tb_139 = exception_tb;
        exception_keeper_lineno_139 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_139;
        exception_value = exception_keeper_value_139;
        exception_tb = exception_keeper_tb_139;
        exception_lineno = exception_keeper_lineno_139;

        goto outline_exception_46;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_46:;
        exception_lineno = 1541;
        goto try_except_handler_138;
        outline_result_46:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[413], tmp_assign_source_379);
    }
    goto try_end_48;
    // Exception handler code:
    try_except_handler_138:;
    exception_keeper_type_140 = exception_type;
    exception_keeper_value_140 = exception_value;
    exception_keeper_tb_140 = exception_tb;
    exception_keeper_lineno_140 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    Py_XDECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_140;
    exception_value = exception_keeper_value_140;
    exception_tb = exception_keeper_tb_140;
    exception_lineno = exception_keeper_lineno_140;

    goto frame_exception_exit_1;
    // End of try:
    try_end_48:;
    CHECK_OBJECT(tmp_class_creation_46__bases_orig);
    Py_DECREF(tmp_class_creation_46__bases_orig);
    tmp_class_creation_46__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_46__bases);
    Py_DECREF(tmp_class_creation_46__bases);
    tmp_class_creation_46__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_46__class_decl_dict);
    Py_DECREF(tmp_class_creation_46__class_decl_dict);
    tmp_class_creation_46__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_46__metaclass);
    Py_DECREF(tmp_class_creation_46__metaclass);
    tmp_class_creation_46__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_46__prepared);
    Py_DECREF(tmp_class_creation_46__prepared);
    tmp_class_creation_46__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_381;
        PyObject *tmp_tuple_element_183;
        tmp_tuple_element_183 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_183 == NULL)) {
            tmp_tuple_element_183 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_183 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        tmp_assign_source_381 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_381, 0, tmp_tuple_element_183);
        assert(tmp_class_creation_47__bases_orig == NULL);
        tmp_class_creation_47__bases_orig = tmp_assign_source_381;
    }
    {
        PyObject *tmp_assign_source_382;
        PyObject *tmp_dircall_arg1_47;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dircall_arg1_47 = tmp_class_creation_47__bases_orig;
        Py_INCREF(tmp_dircall_arg1_47);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_47};
            tmp_assign_source_382 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_382 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        assert(tmp_class_creation_47__bases == NULL);
        tmp_class_creation_47__bases = tmp_assign_source_382;
    }
    {
        PyObject *tmp_assign_source_383;
        tmp_assign_source_383 = PyDict_New();
        assert(tmp_class_creation_47__class_decl_dict == NULL);
        tmp_class_creation_47__class_decl_dict = tmp_assign_source_383;
    }
    {
        PyObject *tmp_assign_source_384;
        PyObject *tmp_metaclass_value_47;
        bool tmp_condition_result_277;
        PyObject *tmp_key_value_139;
        PyObject *tmp_dict_arg_value_139;
        PyObject *tmp_dict_arg_value_140;
        PyObject *tmp_key_value_140;
        nuitka_bool tmp_condition_result_278;
        int tmp_truth_name_47;
        PyObject *tmp_type_arg_93;
        PyObject *tmp_expression_value_231;
        PyObject *tmp_subscript_value_47;
        PyObject *tmp_bases_value_47;
        tmp_key_value_139 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_139 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_139, tmp_key_value_139);
        assert(!(tmp_res == -1));
        tmp_condition_result_277 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_277 != false) {
            goto condexpr_true_93;
        } else {
            goto condexpr_false_93;
        }
        condexpr_true_93:;
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_140 = tmp_class_creation_47__class_decl_dict;
        tmp_key_value_140 = mod_consts[205];
        tmp_metaclass_value_47 = DICT_GET_ITEM0(tmp_dict_arg_value_140, tmp_key_value_140);
        if (tmp_metaclass_value_47 == NULL) {
            tmp_metaclass_value_47 = Py_None;
        }
        assert(!(tmp_metaclass_value_47 == NULL));
        Py_INCREF(tmp_metaclass_value_47);
        goto condexpr_end_93;
        condexpr_false_93:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_truth_name_47 = CHECK_IF_TRUE(tmp_class_creation_47__bases);
        if (tmp_truth_name_47 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        tmp_condition_result_278 = tmp_truth_name_47 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_278 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_94;
        } else {
            goto condexpr_false_94;
        }
        condexpr_true_94:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_expression_value_231 = tmp_class_creation_47__bases;
        tmp_subscript_value_47 = mod_consts[4];
        tmp_type_arg_93 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_231, tmp_subscript_value_47, 0);
        if (tmp_type_arg_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        tmp_metaclass_value_47 = BUILTIN_TYPE1(tmp_type_arg_93);
        Py_DECREF(tmp_type_arg_93);
        if (tmp_metaclass_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        goto condexpr_end_94;
        condexpr_false_94:;
        tmp_metaclass_value_47 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_47);
        condexpr_end_94:;
        condexpr_end_93:;
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_bases_value_47 = tmp_class_creation_47__bases;
        tmp_assign_source_384 = SELECT_METACLASS(tmp_metaclass_value_47, tmp_bases_value_47);
        Py_DECREF(tmp_metaclass_value_47);
        if (tmp_assign_source_384 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        assert(tmp_class_creation_47__metaclass == NULL);
        tmp_class_creation_47__metaclass = tmp_assign_source_384;
    }
    {
        bool tmp_condition_result_279;
        PyObject *tmp_key_value_141;
        PyObject *tmp_dict_arg_value_141;
        tmp_key_value_141 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_dict_arg_value_141 = tmp_class_creation_47__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_141, tmp_key_value_141);
        assert(!(tmp_res == -1));
        tmp_condition_result_279 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_279 != false) {
            goto branch_yes_185;
        } else {
            goto branch_no_185;
        }
    }
    branch_yes_185:;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_47__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1553;

        goto try_except_handler_141;
    }
    branch_no_185:;
    {
        nuitka_bool tmp_condition_result_280;
        PyObject *tmp_expression_value_232;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_232 = tmp_class_creation_47__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_232, mod_consts[206]);
        tmp_condition_result_280 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_280 == NUITKA_BOOL_TRUE) {
            goto branch_yes_186;
        } else {
            goto branch_no_186;
        }
    }
    branch_yes_186:;
    {
        PyObject *tmp_assign_source_385;
        PyObject *tmp_called_value_93;
        PyObject *tmp_expression_value_233;
        PyObject *tmp_args_value_93;
        PyObject *tmp_tuple_element_184;
        PyObject *tmp_kwargs_value_93;
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_expression_value_233 = tmp_class_creation_47__metaclass;
        tmp_called_value_93 = LOOKUP_ATTRIBUTE(tmp_expression_value_233, mod_consts[206]);
        if (tmp_called_value_93 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        tmp_tuple_element_184 = mod_consts[417];
        tmp_args_value_93 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_93, 0, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_47__bases);
        tmp_tuple_element_184 = tmp_class_creation_47__bases;
        PyTuple_SET_ITEM0(tmp_args_value_93, 1, tmp_tuple_element_184);
        CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
        tmp_kwargs_value_93 = tmp_class_creation_47__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1553;
        tmp_assign_source_385 = CALL_FUNCTION(tmp_called_value_93, tmp_args_value_93, tmp_kwargs_value_93);
        Py_DECREF(tmp_called_value_93);
        Py_DECREF(tmp_args_value_93);
        if (tmp_assign_source_385 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_385;
    }
    {
        bool tmp_condition_result_281;
        PyObject *tmp_operand_value_47;
        PyObject *tmp_expression_value_234;
        CHECK_OBJECT(tmp_class_creation_47__prepared);
        tmp_expression_value_234 = tmp_class_creation_47__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_234, mod_consts[208]);
        tmp_operand_value_47 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_47);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        tmp_condition_result_281 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_281 != false) {
            goto branch_yes_187;
        } else {
            goto branch_no_187;
        }
    }
    branch_yes_187:;
    {
        PyObject *tmp_raise_type_47;
        PyObject *tmp_raise_value_47;
        PyObject *tmp_left_value_47;
        PyObject *tmp_right_value_47;
        PyObject *tmp_tuple_element_185;
        PyObject *tmp_getattr_target_47;
        PyObject *tmp_getattr_attr_47;
        PyObject *tmp_getattr_default_47;
        tmp_raise_type_47 = PyExc_TypeError;
        tmp_left_value_47 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_47__metaclass);
        tmp_getattr_target_47 = tmp_class_creation_47__metaclass;
        tmp_getattr_attr_47 = mod_consts[210];
        tmp_getattr_default_47 = mod_consts[211];
        tmp_tuple_element_185 = BUILTIN_GETATTR(tmp_getattr_target_47, tmp_getattr_attr_47, tmp_getattr_default_47);
        if (tmp_tuple_element_185 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        tmp_right_value_47 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_235;
            PyObject *tmp_type_arg_94;
            PyTuple_SET_ITEM(tmp_right_value_47, 0, tmp_tuple_element_185);
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_type_arg_94 = tmp_class_creation_47__prepared;
            tmp_expression_value_235 = BUILTIN_TYPE1(tmp_type_arg_94);
            assert(!(tmp_expression_value_235 == NULL));
            tmp_tuple_element_185 = LOOKUP_ATTRIBUTE(tmp_expression_value_235, mod_consts[210]);
            Py_DECREF(tmp_expression_value_235);
            if (tmp_tuple_element_185 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1553;

                goto tuple_build_exception_47;
            }
            PyTuple_SET_ITEM(tmp_right_value_47, 1, tmp_tuple_element_185);
        }
        goto tuple_build_noexception_47;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_47:;
        Py_DECREF(tmp_right_value_47);
        goto try_except_handler_141;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_47:;
        tmp_raise_value_47 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_47, tmp_right_value_47);
        Py_DECREF(tmp_right_value_47);
        if (tmp_raise_value_47 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_141;
        }
        exception_type = tmp_raise_type_47;
        Py_INCREF(tmp_raise_type_47);
        exception_value = tmp_raise_value_47;
        exception_lineno = 1553;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_141;
    }
    branch_no_187:;
    goto branch_end_186;
    branch_no_186:;
    {
        PyObject *tmp_assign_source_386;
        tmp_assign_source_386 = PyDict_New();
        assert(tmp_class_creation_47__prepared == NULL);
        tmp_class_creation_47__prepared = tmp_assign_source_386;
    }
    branch_end_186:;
    {
        PyObject *tmp_assign_source_387;
        {
            PyObject *tmp_set_locals_47;
            CHECK_OBJECT(tmp_class_creation_47__prepared);
            tmp_set_locals_47 = tmp_class_creation_47__prepared;
            locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553 = tmp_set_locals_47;
            Py_INCREF(tmp_set_locals_47);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_143;
        }
        tmp_dictset_value = mod_consts[418];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_143;
        }
        tmp_dictset_value = mod_consts[417];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_143;
        }
        if (isFrameUnusable(cache_frame_49399aedf390a01df790981af0c8265a_48)) {
            Py_XDECREF(cache_frame_49399aedf390a01df790981af0c8265a_48);

#if _DEBUG_REFCOUNTS
            if (cache_frame_49399aedf390a01df790981af0c8265a_48 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_49399aedf390a01df790981af0c8265a_48 = MAKE_FUNCTION_FRAME(codeobj_49399aedf390a01df790981af0c8265a, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_49399aedf390a01df790981af0c8265a_48->m_type_description == NULL);
        frame_49399aedf390a01df790981af0c8265a_48 = cache_frame_49399aedf390a01df790981af0c8265a_48;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_49399aedf390a01df790981af0c8265a_48);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_49399aedf390a01df790981af0c8265a_48) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[419];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1557;
            type_description_2 = "o";
            goto frame_exception_exit_48;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__60___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1559;
            type_description_2 = "o";
            goto frame_exception_exit_48;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_49399aedf390a01df790981af0c8265a_48);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_47;

        frame_exception_exit_48:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_49399aedf390a01df790981af0c8265a_48);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_49399aedf390a01df790981af0c8265a_48, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_49399aedf390a01df790981af0c8265a_48->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_49399aedf390a01df790981af0c8265a_48, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_49399aedf390a01df790981af0c8265a_48,
            type_description_2,
            outline_46_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_49399aedf390a01df790981af0c8265a_48 == cache_frame_49399aedf390a01df790981af0c8265a_48) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_49399aedf390a01df790981af0c8265a_48);
            cache_frame_49399aedf390a01df790981af0c8265a_48 = NULL;
        }

        assertFrameObject(frame_49399aedf390a01df790981af0c8265a_48);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_47;

        frame_no_exception_47:;
        goto skip_nested_handling_47;
        nested_frame_exit_47:;

        goto try_except_handler_143;
        skip_nested_handling_47:;
        {
            nuitka_bool tmp_condition_result_282;
            PyObject *tmp_cmp_expr_left_47;
            PyObject *tmp_cmp_expr_right_47;
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_cmp_expr_left_47 = tmp_class_creation_47__bases;
            CHECK_OBJECT(tmp_class_creation_47__bases_orig);
            tmp_cmp_expr_right_47 = tmp_class_creation_47__bases_orig;
            tmp_condition_result_282 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_47, tmp_cmp_expr_right_47);
            if (tmp_condition_result_282 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1553;

                goto try_except_handler_143;
            }
            if (tmp_condition_result_282 == NUITKA_BOOL_TRUE) {
                goto branch_yes_188;
            } else {
                goto branch_no_188;
            }
            assert(tmp_condition_result_282 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_188:;
        CHECK_OBJECT(tmp_class_creation_47__bases_orig);
        tmp_dictset_value = tmp_class_creation_47__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1553;

            goto try_except_handler_143;
        }
        branch_no_188:;
        {
            PyObject *tmp_assign_source_388;
            PyObject *tmp_called_value_94;
            PyObject *tmp_args_value_94;
            PyObject *tmp_tuple_element_186;
            PyObject *tmp_kwargs_value_94;
            CHECK_OBJECT(tmp_class_creation_47__metaclass);
            tmp_called_value_94 = tmp_class_creation_47__metaclass;
            tmp_tuple_element_186 = mod_consts[417];
            tmp_args_value_94 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_94, 0, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_47__bases);
            tmp_tuple_element_186 = tmp_class_creation_47__bases;
            PyTuple_SET_ITEM0(tmp_args_value_94, 1, tmp_tuple_element_186);
            tmp_tuple_element_186 = locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553;
            PyTuple_SET_ITEM0(tmp_args_value_94, 2, tmp_tuple_element_186);
            CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
            tmp_kwargs_value_94 = tmp_class_creation_47__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1553;
            tmp_assign_source_388 = CALL_FUNCTION(tmp_called_value_94, tmp_args_value_94, tmp_kwargs_value_94);
            Py_DECREF(tmp_args_value_94);
            if (tmp_assign_source_388 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1553;

                goto try_except_handler_143;
            }
            assert(outline_46_var___class__ == NULL);
            outline_46_var___class__ = tmp_assign_source_388;
        }
        CHECK_OBJECT(outline_46_var___class__);
        tmp_assign_source_387 = outline_46_var___class__;
        Py_INCREF(tmp_assign_source_387);
        goto try_return_handler_143;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_143:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553);
        locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553 = NULL;
        goto try_return_handler_142;
        // Exception handler code:
        try_except_handler_143:;
        exception_keeper_type_141 = exception_type;
        exception_keeper_value_141 = exception_value;
        exception_keeper_tb_141 = exception_tb;
        exception_keeper_lineno_141 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553);
        locals_xlwt$BIFFRecords$$$class__47_NumberRecord_1553 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_141;
        exception_value = exception_keeper_value_141;
        exception_tb = exception_keeper_tb_141;
        exception_lineno = exception_keeper_lineno_141;

        goto try_except_handler_142;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_142:;
        CHECK_OBJECT(outline_46_var___class__);
        Py_DECREF(outline_46_var___class__);
        outline_46_var___class__ = NULL;
        goto outline_result_47;
        // Exception handler code:
        try_except_handler_142:;
        exception_keeper_type_142 = exception_type;
        exception_keeper_value_142 = exception_value;
        exception_keeper_tb_142 = exception_tb;
        exception_keeper_lineno_142 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_142;
        exception_value = exception_keeper_value_142;
        exception_tb = exception_keeper_tb_142;
        exception_lineno = exception_keeper_lineno_142;

        goto outline_exception_47;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_47:;
        exception_lineno = 1553;
        goto try_except_handler_141;
        outline_result_47:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[417], tmp_assign_source_387);
    }
    goto try_end_49;
    // Exception handler code:
    try_except_handler_141:;
    exception_keeper_type_143 = exception_type;
    exception_keeper_value_143 = exception_value;
    exception_keeper_tb_143 = exception_tb;
    exception_keeper_lineno_143 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    Py_XDECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_143;
    exception_value = exception_keeper_value_143;
    exception_tb = exception_keeper_tb_143;
    exception_lineno = exception_keeper_lineno_143;

    goto frame_exception_exit_1;
    // End of try:
    try_end_49:;
    CHECK_OBJECT(tmp_class_creation_47__bases_orig);
    Py_DECREF(tmp_class_creation_47__bases_orig);
    tmp_class_creation_47__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_47__bases);
    Py_DECREF(tmp_class_creation_47__bases);
    tmp_class_creation_47__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_47__class_decl_dict);
    Py_DECREF(tmp_class_creation_47__class_decl_dict);
    tmp_class_creation_47__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_47__metaclass);
    Py_DECREF(tmp_class_creation_47__metaclass);
    tmp_class_creation_47__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_47__prepared);
    Py_DECREF(tmp_class_creation_47__prepared);
    tmp_class_creation_47__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_389;
        PyObject *tmp_tuple_element_187;
        tmp_tuple_element_187 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_187 == NULL)) {
            tmp_tuple_element_187 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_187 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        tmp_assign_source_389 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_389, 0, tmp_tuple_element_187);
        assert(tmp_class_creation_48__bases_orig == NULL);
        tmp_class_creation_48__bases_orig = tmp_assign_source_389;
    }
    {
        PyObject *tmp_assign_source_390;
        PyObject *tmp_dircall_arg1_48;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dircall_arg1_48 = tmp_class_creation_48__bases_orig;
        Py_INCREF(tmp_dircall_arg1_48);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_48};
            tmp_assign_source_390 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_390 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        assert(tmp_class_creation_48__bases == NULL);
        tmp_class_creation_48__bases = tmp_assign_source_390;
    }
    {
        PyObject *tmp_assign_source_391;
        tmp_assign_source_391 = PyDict_New();
        assert(tmp_class_creation_48__class_decl_dict == NULL);
        tmp_class_creation_48__class_decl_dict = tmp_assign_source_391;
    }
    {
        PyObject *tmp_assign_source_392;
        PyObject *tmp_metaclass_value_48;
        bool tmp_condition_result_283;
        PyObject *tmp_key_value_142;
        PyObject *tmp_dict_arg_value_142;
        PyObject *tmp_dict_arg_value_143;
        PyObject *tmp_key_value_143;
        nuitka_bool tmp_condition_result_284;
        int tmp_truth_name_48;
        PyObject *tmp_type_arg_95;
        PyObject *tmp_expression_value_236;
        PyObject *tmp_subscript_value_48;
        PyObject *tmp_bases_value_48;
        tmp_key_value_142 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_142 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_142, tmp_key_value_142);
        assert(!(tmp_res == -1));
        tmp_condition_result_283 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_283 != false) {
            goto condexpr_true_95;
        } else {
            goto condexpr_false_95;
        }
        condexpr_true_95:;
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_143 = tmp_class_creation_48__class_decl_dict;
        tmp_key_value_143 = mod_consts[205];
        tmp_metaclass_value_48 = DICT_GET_ITEM0(tmp_dict_arg_value_143, tmp_key_value_143);
        if (tmp_metaclass_value_48 == NULL) {
            tmp_metaclass_value_48 = Py_None;
        }
        assert(!(tmp_metaclass_value_48 == NULL));
        Py_INCREF(tmp_metaclass_value_48);
        goto condexpr_end_95;
        condexpr_false_95:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_truth_name_48 = CHECK_IF_TRUE(tmp_class_creation_48__bases);
        if (tmp_truth_name_48 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        tmp_condition_result_284 = tmp_truth_name_48 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_284 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_96;
        } else {
            goto condexpr_false_96;
        }
        condexpr_true_96:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_expression_value_236 = tmp_class_creation_48__bases;
        tmp_subscript_value_48 = mod_consts[4];
        tmp_type_arg_95 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_236, tmp_subscript_value_48, 0);
        if (tmp_type_arg_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        tmp_metaclass_value_48 = BUILTIN_TYPE1(tmp_type_arg_95);
        Py_DECREF(tmp_type_arg_95);
        if (tmp_metaclass_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        goto condexpr_end_96;
        condexpr_false_96:;
        tmp_metaclass_value_48 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_48);
        condexpr_end_96:;
        condexpr_end_95:;
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_bases_value_48 = tmp_class_creation_48__bases;
        tmp_assign_source_392 = SELECT_METACLASS(tmp_metaclass_value_48, tmp_bases_value_48);
        Py_DECREF(tmp_metaclass_value_48);
        if (tmp_assign_source_392 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        assert(tmp_class_creation_48__metaclass == NULL);
        tmp_class_creation_48__metaclass = tmp_assign_source_392;
    }
    {
        bool tmp_condition_result_285;
        PyObject *tmp_key_value_144;
        PyObject *tmp_dict_arg_value_144;
        tmp_key_value_144 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_dict_arg_value_144 = tmp_class_creation_48__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_144, tmp_key_value_144);
        assert(!(tmp_res == -1));
        tmp_condition_result_285 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_285 != false) {
            goto branch_yes_189;
        } else {
            goto branch_no_189;
        }
    }
    branch_yes_189:;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_48__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1562;

        goto try_except_handler_144;
    }
    branch_no_189:;
    {
        nuitka_bool tmp_condition_result_286;
        PyObject *tmp_expression_value_237;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_237 = tmp_class_creation_48__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_237, mod_consts[206]);
        tmp_condition_result_286 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_286 == NUITKA_BOOL_TRUE) {
            goto branch_yes_190;
        } else {
            goto branch_no_190;
        }
    }
    branch_yes_190:;
    {
        PyObject *tmp_assign_source_393;
        PyObject *tmp_called_value_95;
        PyObject *tmp_expression_value_238;
        PyObject *tmp_args_value_95;
        PyObject *tmp_tuple_element_188;
        PyObject *tmp_kwargs_value_95;
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_expression_value_238 = tmp_class_creation_48__metaclass;
        tmp_called_value_95 = LOOKUP_ATTRIBUTE(tmp_expression_value_238, mod_consts[206]);
        if (tmp_called_value_95 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        tmp_tuple_element_188 = mod_consts[421];
        tmp_args_value_95 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_95, 0, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_48__bases);
        tmp_tuple_element_188 = tmp_class_creation_48__bases;
        PyTuple_SET_ITEM0(tmp_args_value_95, 1, tmp_tuple_element_188);
        CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
        tmp_kwargs_value_95 = tmp_class_creation_48__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1562;
        tmp_assign_source_393 = CALL_FUNCTION(tmp_called_value_95, tmp_args_value_95, tmp_kwargs_value_95);
        Py_DECREF(tmp_called_value_95);
        Py_DECREF(tmp_args_value_95);
        if (tmp_assign_source_393 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_393;
    }
    {
        bool tmp_condition_result_287;
        PyObject *tmp_operand_value_48;
        PyObject *tmp_expression_value_239;
        CHECK_OBJECT(tmp_class_creation_48__prepared);
        tmp_expression_value_239 = tmp_class_creation_48__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_239, mod_consts[208]);
        tmp_operand_value_48 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_48);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        tmp_condition_result_287 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_287 != false) {
            goto branch_yes_191;
        } else {
            goto branch_no_191;
        }
    }
    branch_yes_191:;
    {
        PyObject *tmp_raise_type_48;
        PyObject *tmp_raise_value_48;
        PyObject *tmp_left_value_48;
        PyObject *tmp_right_value_48;
        PyObject *tmp_tuple_element_189;
        PyObject *tmp_getattr_target_48;
        PyObject *tmp_getattr_attr_48;
        PyObject *tmp_getattr_default_48;
        tmp_raise_type_48 = PyExc_TypeError;
        tmp_left_value_48 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_48__metaclass);
        tmp_getattr_target_48 = tmp_class_creation_48__metaclass;
        tmp_getattr_attr_48 = mod_consts[210];
        tmp_getattr_default_48 = mod_consts[211];
        tmp_tuple_element_189 = BUILTIN_GETATTR(tmp_getattr_target_48, tmp_getattr_attr_48, tmp_getattr_default_48);
        if (tmp_tuple_element_189 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        tmp_right_value_48 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_240;
            PyObject *tmp_type_arg_96;
            PyTuple_SET_ITEM(tmp_right_value_48, 0, tmp_tuple_element_189);
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_type_arg_96 = tmp_class_creation_48__prepared;
            tmp_expression_value_240 = BUILTIN_TYPE1(tmp_type_arg_96);
            assert(!(tmp_expression_value_240 == NULL));
            tmp_tuple_element_189 = LOOKUP_ATTRIBUTE(tmp_expression_value_240, mod_consts[210]);
            Py_DECREF(tmp_expression_value_240);
            if (tmp_tuple_element_189 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1562;

                goto tuple_build_exception_48;
            }
            PyTuple_SET_ITEM(tmp_right_value_48, 1, tmp_tuple_element_189);
        }
        goto tuple_build_noexception_48;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_48:;
        Py_DECREF(tmp_right_value_48);
        goto try_except_handler_144;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_48:;
        tmp_raise_value_48 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_48, tmp_right_value_48);
        Py_DECREF(tmp_right_value_48);
        if (tmp_raise_value_48 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_144;
        }
        exception_type = tmp_raise_type_48;
        Py_INCREF(tmp_raise_type_48);
        exception_value = tmp_raise_value_48;
        exception_lineno = 1562;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_144;
    }
    branch_no_191:;
    goto branch_end_190;
    branch_no_190:;
    {
        PyObject *tmp_assign_source_394;
        tmp_assign_source_394 = PyDict_New();
        assert(tmp_class_creation_48__prepared == NULL);
        tmp_class_creation_48__prepared = tmp_assign_source_394;
    }
    branch_end_190:;
    {
        PyObject *tmp_assign_source_395;
        {
            PyObject *tmp_set_locals_48;
            CHECK_OBJECT(tmp_class_creation_48__prepared);
            tmp_set_locals_48 = tmp_class_creation_48__prepared;
            locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562 = tmp_set_locals_48;
            Py_INCREF(tmp_set_locals_48);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_146;
        }
        tmp_dictset_value = mod_consts[422];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_146;
        }
        tmp_dictset_value = mod_consts[421];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_146;
        }
        if (isFrameUnusable(cache_frame_b0dc467e698887b60e489f0e52ea2185_49)) {
            Py_XDECREF(cache_frame_b0dc467e698887b60e489f0e52ea2185_49);

#if _DEBUG_REFCOUNTS
            if (cache_frame_b0dc467e698887b60e489f0e52ea2185_49 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_b0dc467e698887b60e489f0e52ea2185_49 = MAKE_FUNCTION_FRAME(codeobj_b0dc467e698887b60e489f0e52ea2185, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_b0dc467e698887b60e489f0e52ea2185_49->m_type_description == NULL);
        frame_b0dc467e698887b60e489f0e52ea2185_49 = cache_frame_b0dc467e698887b60e489f0e52ea2185_49;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_b0dc467e698887b60e489f0e52ea2185_49);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_b0dc467e698887b60e489f0e52ea2185_49) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[423];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1566;
            type_description_2 = "o";
            goto frame_exception_exit_49;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__61___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1568;
            type_description_2 = "o";
            goto frame_exception_exit_49;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b0dc467e698887b60e489f0e52ea2185_49);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_48;

        frame_exception_exit_49:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_b0dc467e698887b60e489f0e52ea2185_49);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_b0dc467e698887b60e489f0e52ea2185_49, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_b0dc467e698887b60e489f0e52ea2185_49->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_b0dc467e698887b60e489f0e52ea2185_49, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_b0dc467e698887b60e489f0e52ea2185_49,
            type_description_2,
            outline_47_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_b0dc467e698887b60e489f0e52ea2185_49 == cache_frame_b0dc467e698887b60e489f0e52ea2185_49) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_b0dc467e698887b60e489f0e52ea2185_49);
            cache_frame_b0dc467e698887b60e489f0e52ea2185_49 = NULL;
        }

        assertFrameObject(frame_b0dc467e698887b60e489f0e52ea2185_49);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_48;

        frame_no_exception_48:;
        goto skip_nested_handling_48;
        nested_frame_exit_48:;

        goto try_except_handler_146;
        skip_nested_handling_48:;
        {
            nuitka_bool tmp_condition_result_288;
            PyObject *tmp_cmp_expr_left_48;
            PyObject *tmp_cmp_expr_right_48;
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_cmp_expr_left_48 = tmp_class_creation_48__bases;
            CHECK_OBJECT(tmp_class_creation_48__bases_orig);
            tmp_cmp_expr_right_48 = tmp_class_creation_48__bases_orig;
            tmp_condition_result_288 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_48, tmp_cmp_expr_right_48);
            if (tmp_condition_result_288 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1562;

                goto try_except_handler_146;
            }
            if (tmp_condition_result_288 == NUITKA_BOOL_TRUE) {
                goto branch_yes_192;
            } else {
                goto branch_no_192;
            }
            assert(tmp_condition_result_288 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_192:;
        CHECK_OBJECT(tmp_class_creation_48__bases_orig);
        tmp_dictset_value = tmp_class_creation_48__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1562;

            goto try_except_handler_146;
        }
        branch_no_192:;
        {
            PyObject *tmp_assign_source_396;
            PyObject *tmp_called_value_96;
            PyObject *tmp_args_value_96;
            PyObject *tmp_tuple_element_190;
            PyObject *tmp_kwargs_value_96;
            CHECK_OBJECT(tmp_class_creation_48__metaclass);
            tmp_called_value_96 = tmp_class_creation_48__metaclass;
            tmp_tuple_element_190 = mod_consts[421];
            tmp_args_value_96 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_96, 0, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_48__bases);
            tmp_tuple_element_190 = tmp_class_creation_48__bases;
            PyTuple_SET_ITEM0(tmp_args_value_96, 1, tmp_tuple_element_190);
            tmp_tuple_element_190 = locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562;
            PyTuple_SET_ITEM0(tmp_args_value_96, 2, tmp_tuple_element_190);
            CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
            tmp_kwargs_value_96 = tmp_class_creation_48__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1562;
            tmp_assign_source_396 = CALL_FUNCTION(tmp_called_value_96, tmp_args_value_96, tmp_kwargs_value_96);
            Py_DECREF(tmp_args_value_96);
            if (tmp_assign_source_396 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1562;

                goto try_except_handler_146;
            }
            assert(outline_47_var___class__ == NULL);
            outline_47_var___class__ = tmp_assign_source_396;
        }
        CHECK_OBJECT(outline_47_var___class__);
        tmp_assign_source_395 = outline_47_var___class__;
        Py_INCREF(tmp_assign_source_395);
        goto try_return_handler_146;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_146:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562);
        locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562 = NULL;
        goto try_return_handler_145;
        // Exception handler code:
        try_except_handler_146:;
        exception_keeper_type_144 = exception_type;
        exception_keeper_value_144 = exception_value;
        exception_keeper_tb_144 = exception_tb;
        exception_keeper_lineno_144 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562);
        locals_xlwt$BIFFRecords$$$class__48_BoolErrRecord_1562 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_144;
        exception_value = exception_keeper_value_144;
        exception_tb = exception_keeper_tb_144;
        exception_lineno = exception_keeper_lineno_144;

        goto try_except_handler_145;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_145:;
        CHECK_OBJECT(outline_47_var___class__);
        Py_DECREF(outline_47_var___class__);
        outline_47_var___class__ = NULL;
        goto outline_result_48;
        // Exception handler code:
        try_except_handler_145:;
        exception_keeper_type_145 = exception_type;
        exception_keeper_value_145 = exception_value;
        exception_keeper_tb_145 = exception_tb;
        exception_keeper_lineno_145 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_145;
        exception_value = exception_keeper_value_145;
        exception_tb = exception_keeper_tb_145;
        exception_lineno = exception_keeper_lineno_145;

        goto outline_exception_48;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_48:;
        exception_lineno = 1562;
        goto try_except_handler_144;
        outline_result_48:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[421], tmp_assign_source_395);
    }
    goto try_end_50;
    // Exception handler code:
    try_except_handler_144:;
    exception_keeper_type_146 = exception_type;
    exception_keeper_value_146 = exception_value;
    exception_keeper_tb_146 = exception_tb;
    exception_keeper_lineno_146 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    Py_XDECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_146;
    exception_value = exception_keeper_value_146;
    exception_tb = exception_keeper_tb_146;
    exception_lineno = exception_keeper_lineno_146;

    goto frame_exception_exit_1;
    // End of try:
    try_end_50:;
    CHECK_OBJECT(tmp_class_creation_48__bases_orig);
    Py_DECREF(tmp_class_creation_48__bases_orig);
    tmp_class_creation_48__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_48__bases);
    Py_DECREF(tmp_class_creation_48__bases);
    tmp_class_creation_48__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_48__class_decl_dict);
    Py_DECREF(tmp_class_creation_48__class_decl_dict);
    tmp_class_creation_48__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_48__metaclass);
    Py_DECREF(tmp_class_creation_48__metaclass);
    tmp_class_creation_48__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_48__prepared);
    Py_DECREF(tmp_class_creation_48__prepared);
    tmp_class_creation_48__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_397;
        PyObject *tmp_tuple_element_191;
        tmp_tuple_element_191 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_191 == NULL)) {
            tmp_tuple_element_191 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_191 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        tmp_assign_source_397 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_397, 0, tmp_tuple_element_191);
        assert(tmp_class_creation_49__bases_orig == NULL);
        tmp_class_creation_49__bases_orig = tmp_assign_source_397;
    }
    {
        PyObject *tmp_assign_source_398;
        PyObject *tmp_dircall_arg1_49;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dircall_arg1_49 = tmp_class_creation_49__bases_orig;
        Py_INCREF(tmp_dircall_arg1_49);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_49};
            tmp_assign_source_398 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_398 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        assert(tmp_class_creation_49__bases == NULL);
        tmp_class_creation_49__bases = tmp_assign_source_398;
    }
    {
        PyObject *tmp_assign_source_399;
        tmp_assign_source_399 = PyDict_New();
        assert(tmp_class_creation_49__class_decl_dict == NULL);
        tmp_class_creation_49__class_decl_dict = tmp_assign_source_399;
    }
    {
        PyObject *tmp_assign_source_400;
        PyObject *tmp_metaclass_value_49;
        bool tmp_condition_result_289;
        PyObject *tmp_key_value_145;
        PyObject *tmp_dict_arg_value_145;
        PyObject *tmp_dict_arg_value_146;
        PyObject *tmp_key_value_146;
        nuitka_bool tmp_condition_result_290;
        int tmp_truth_name_49;
        PyObject *tmp_type_arg_97;
        PyObject *tmp_expression_value_241;
        PyObject *tmp_subscript_value_49;
        PyObject *tmp_bases_value_49;
        tmp_key_value_145 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_145 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_145, tmp_key_value_145);
        assert(!(tmp_res == -1));
        tmp_condition_result_289 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_289 != false) {
            goto condexpr_true_97;
        } else {
            goto condexpr_false_97;
        }
        condexpr_true_97:;
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_146 = tmp_class_creation_49__class_decl_dict;
        tmp_key_value_146 = mod_consts[205];
        tmp_metaclass_value_49 = DICT_GET_ITEM0(tmp_dict_arg_value_146, tmp_key_value_146);
        if (tmp_metaclass_value_49 == NULL) {
            tmp_metaclass_value_49 = Py_None;
        }
        assert(!(tmp_metaclass_value_49 == NULL));
        Py_INCREF(tmp_metaclass_value_49);
        goto condexpr_end_97;
        condexpr_false_97:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_truth_name_49 = CHECK_IF_TRUE(tmp_class_creation_49__bases);
        if (tmp_truth_name_49 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        tmp_condition_result_290 = tmp_truth_name_49 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_290 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_98;
        } else {
            goto condexpr_false_98;
        }
        condexpr_true_98:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_expression_value_241 = tmp_class_creation_49__bases;
        tmp_subscript_value_49 = mod_consts[4];
        tmp_type_arg_97 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_241, tmp_subscript_value_49, 0);
        if (tmp_type_arg_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        tmp_metaclass_value_49 = BUILTIN_TYPE1(tmp_type_arg_97);
        Py_DECREF(tmp_type_arg_97);
        if (tmp_metaclass_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        goto condexpr_end_98;
        condexpr_false_98:;
        tmp_metaclass_value_49 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_49);
        condexpr_end_98:;
        condexpr_end_97:;
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_bases_value_49 = tmp_class_creation_49__bases;
        tmp_assign_source_400 = SELECT_METACLASS(tmp_metaclass_value_49, tmp_bases_value_49);
        Py_DECREF(tmp_metaclass_value_49);
        if (tmp_assign_source_400 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        assert(tmp_class_creation_49__metaclass == NULL);
        tmp_class_creation_49__metaclass = tmp_assign_source_400;
    }
    {
        bool tmp_condition_result_291;
        PyObject *tmp_key_value_147;
        PyObject *tmp_dict_arg_value_147;
        tmp_key_value_147 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_dict_arg_value_147 = tmp_class_creation_49__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_147, tmp_key_value_147);
        assert(!(tmp_res == -1));
        tmp_condition_result_291 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_291 != false) {
            goto branch_yes_193;
        } else {
            goto branch_no_193;
        }
    }
    branch_yes_193:;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_49__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1572;

        goto try_except_handler_147;
    }
    branch_no_193:;
    {
        nuitka_bool tmp_condition_result_292;
        PyObject *tmp_expression_value_242;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_242 = tmp_class_creation_49__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_242, mod_consts[206]);
        tmp_condition_result_292 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_292 == NUITKA_BOOL_TRUE) {
            goto branch_yes_194;
        } else {
            goto branch_no_194;
        }
    }
    branch_yes_194:;
    {
        PyObject *tmp_assign_source_401;
        PyObject *tmp_called_value_97;
        PyObject *tmp_expression_value_243;
        PyObject *tmp_args_value_97;
        PyObject *tmp_tuple_element_192;
        PyObject *tmp_kwargs_value_97;
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_expression_value_243 = tmp_class_creation_49__metaclass;
        tmp_called_value_97 = LOOKUP_ATTRIBUTE(tmp_expression_value_243, mod_consts[206]);
        if (tmp_called_value_97 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        tmp_tuple_element_192 = mod_consts[425];
        tmp_args_value_97 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_97, 0, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_49__bases);
        tmp_tuple_element_192 = tmp_class_creation_49__bases;
        PyTuple_SET_ITEM0(tmp_args_value_97, 1, tmp_tuple_element_192);
        CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
        tmp_kwargs_value_97 = tmp_class_creation_49__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1572;
        tmp_assign_source_401 = CALL_FUNCTION(tmp_called_value_97, tmp_args_value_97, tmp_kwargs_value_97);
        Py_DECREF(tmp_called_value_97);
        Py_DECREF(tmp_args_value_97);
        if (tmp_assign_source_401 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_401;
    }
    {
        bool tmp_condition_result_293;
        PyObject *tmp_operand_value_49;
        PyObject *tmp_expression_value_244;
        CHECK_OBJECT(tmp_class_creation_49__prepared);
        tmp_expression_value_244 = tmp_class_creation_49__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_244, mod_consts[208]);
        tmp_operand_value_49 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_49);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        tmp_condition_result_293 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_293 != false) {
            goto branch_yes_195;
        } else {
            goto branch_no_195;
        }
    }
    branch_yes_195:;
    {
        PyObject *tmp_raise_type_49;
        PyObject *tmp_raise_value_49;
        PyObject *tmp_left_value_49;
        PyObject *tmp_right_value_49;
        PyObject *tmp_tuple_element_193;
        PyObject *tmp_getattr_target_49;
        PyObject *tmp_getattr_attr_49;
        PyObject *tmp_getattr_default_49;
        tmp_raise_type_49 = PyExc_TypeError;
        tmp_left_value_49 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_49__metaclass);
        tmp_getattr_target_49 = tmp_class_creation_49__metaclass;
        tmp_getattr_attr_49 = mod_consts[210];
        tmp_getattr_default_49 = mod_consts[211];
        tmp_tuple_element_193 = BUILTIN_GETATTR(tmp_getattr_target_49, tmp_getattr_attr_49, tmp_getattr_default_49);
        if (tmp_tuple_element_193 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        tmp_right_value_49 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_245;
            PyObject *tmp_type_arg_98;
            PyTuple_SET_ITEM(tmp_right_value_49, 0, tmp_tuple_element_193);
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_type_arg_98 = tmp_class_creation_49__prepared;
            tmp_expression_value_245 = BUILTIN_TYPE1(tmp_type_arg_98);
            assert(!(tmp_expression_value_245 == NULL));
            tmp_tuple_element_193 = LOOKUP_ATTRIBUTE(tmp_expression_value_245, mod_consts[210]);
            Py_DECREF(tmp_expression_value_245);
            if (tmp_tuple_element_193 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1572;

                goto tuple_build_exception_49;
            }
            PyTuple_SET_ITEM(tmp_right_value_49, 1, tmp_tuple_element_193);
        }
        goto tuple_build_noexception_49;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_49:;
        Py_DECREF(tmp_right_value_49);
        goto try_except_handler_147;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_49:;
        tmp_raise_value_49 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_49, tmp_right_value_49);
        Py_DECREF(tmp_right_value_49);
        if (tmp_raise_value_49 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_147;
        }
        exception_type = tmp_raise_type_49;
        Py_INCREF(tmp_raise_type_49);
        exception_value = tmp_raise_value_49;
        exception_lineno = 1572;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_147;
    }
    branch_no_195:;
    goto branch_end_194;
    branch_no_194:;
    {
        PyObject *tmp_assign_source_402;
        tmp_assign_source_402 = PyDict_New();
        assert(tmp_class_creation_49__prepared == NULL);
        tmp_class_creation_49__prepared = tmp_assign_source_402;
    }
    branch_end_194:;
    {
        PyObject *tmp_assign_source_403;
        {
            PyObject *tmp_set_locals_49;
            CHECK_OBJECT(tmp_class_creation_49__prepared);
            tmp_set_locals_49 = tmp_class_creation_49__prepared;
            locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572 = tmp_set_locals_49;
            Py_INCREF(tmp_set_locals_49);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_149;
        }
        tmp_dictset_value = mod_consts[426];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_149;
        }
        tmp_dictset_value = mod_consts[425];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_149;
        }
        if (isFrameUnusable(cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50)) {
            Py_XDECREF(cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50);

#if _DEBUG_REFCOUNTS
            if (cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50 = MAKE_FUNCTION_FRAME(codeobj_09c725bbcb12f5d5fa930ae5cc5b23a0, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50->m_type_description == NULL);
        frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50 = cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[46];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1588;
            type_description_2 = "o";
            goto frame_exception_exit_50;
        }
        {
            PyObject *tmp_defaults_4;
            tmp_defaults_4 = mod_consts[427];
            Py_INCREF(tmp_defaults_4);


            tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__62___init__(tmp_defaults_4);

            tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572, mod_consts[216], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1590;
                type_description_2 = "o";
                goto frame_exception_exit_50;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_49;

        frame_exception_exit_50:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50,
            type_description_2,
            outline_48_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50 == cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50);
            cache_frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50 = NULL;
        }

        assertFrameObject(frame_09c725bbcb12f5d5fa930ae5cc5b23a0_50);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_49;

        frame_no_exception_49:;
        goto skip_nested_handling_49;
        nested_frame_exit_49:;

        goto try_except_handler_149;
        skip_nested_handling_49:;
        {
            nuitka_bool tmp_condition_result_294;
            PyObject *tmp_cmp_expr_left_49;
            PyObject *tmp_cmp_expr_right_49;
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_cmp_expr_left_49 = tmp_class_creation_49__bases;
            CHECK_OBJECT(tmp_class_creation_49__bases_orig);
            tmp_cmp_expr_right_49 = tmp_class_creation_49__bases_orig;
            tmp_condition_result_294 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_49, tmp_cmp_expr_right_49);
            if (tmp_condition_result_294 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1572;

                goto try_except_handler_149;
            }
            if (tmp_condition_result_294 == NUITKA_BOOL_TRUE) {
                goto branch_yes_196;
            } else {
                goto branch_no_196;
            }
            assert(tmp_condition_result_294 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_196:;
        CHECK_OBJECT(tmp_class_creation_49__bases_orig);
        tmp_dictset_value = tmp_class_creation_49__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1572;

            goto try_except_handler_149;
        }
        branch_no_196:;
        {
            PyObject *tmp_assign_source_404;
            PyObject *tmp_called_value_98;
            PyObject *tmp_args_value_98;
            PyObject *tmp_tuple_element_194;
            PyObject *tmp_kwargs_value_98;
            CHECK_OBJECT(tmp_class_creation_49__metaclass);
            tmp_called_value_98 = tmp_class_creation_49__metaclass;
            tmp_tuple_element_194 = mod_consts[425];
            tmp_args_value_98 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_98, 0, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_49__bases);
            tmp_tuple_element_194 = tmp_class_creation_49__bases;
            PyTuple_SET_ITEM0(tmp_args_value_98, 1, tmp_tuple_element_194);
            tmp_tuple_element_194 = locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572;
            PyTuple_SET_ITEM0(tmp_args_value_98, 2, tmp_tuple_element_194);
            CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
            tmp_kwargs_value_98 = tmp_class_creation_49__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1572;
            tmp_assign_source_404 = CALL_FUNCTION(tmp_called_value_98, tmp_args_value_98, tmp_kwargs_value_98);
            Py_DECREF(tmp_args_value_98);
            if (tmp_assign_source_404 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1572;

                goto try_except_handler_149;
            }
            assert(outline_48_var___class__ == NULL);
            outline_48_var___class__ = tmp_assign_source_404;
        }
        CHECK_OBJECT(outline_48_var___class__);
        tmp_assign_source_403 = outline_48_var___class__;
        Py_INCREF(tmp_assign_source_403);
        goto try_return_handler_149;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_149:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572);
        locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572 = NULL;
        goto try_return_handler_148;
        // Exception handler code:
        try_except_handler_149:;
        exception_keeper_type_147 = exception_type;
        exception_keeper_value_147 = exception_value;
        exception_keeper_tb_147 = exception_tb;
        exception_keeper_lineno_147 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572);
        locals_xlwt$BIFFRecords$$$class__49_FormulaRecord_1572 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_147;
        exception_value = exception_keeper_value_147;
        exception_tb = exception_keeper_tb_147;
        exception_lineno = exception_keeper_lineno_147;

        goto try_except_handler_148;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_148:;
        CHECK_OBJECT(outline_48_var___class__);
        Py_DECREF(outline_48_var___class__);
        outline_48_var___class__ = NULL;
        goto outline_result_49;
        // Exception handler code:
        try_except_handler_148:;
        exception_keeper_type_148 = exception_type;
        exception_keeper_value_148 = exception_value;
        exception_keeper_tb_148 = exception_tb;
        exception_keeper_lineno_148 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_148;
        exception_value = exception_keeper_value_148;
        exception_tb = exception_keeper_tb_148;
        exception_lineno = exception_keeper_lineno_148;

        goto outline_exception_49;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_49:;
        exception_lineno = 1572;
        goto try_except_handler_147;
        outline_result_49:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[425], tmp_assign_source_403);
    }
    goto try_end_51;
    // Exception handler code:
    try_except_handler_147:;
    exception_keeper_type_149 = exception_type;
    exception_keeper_value_149 = exception_value;
    exception_keeper_tb_149 = exception_tb;
    exception_keeper_lineno_149 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    Py_XDECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_149;
    exception_value = exception_keeper_value_149;
    exception_tb = exception_keeper_tb_149;
    exception_lineno = exception_keeper_lineno_149;

    goto frame_exception_exit_1;
    // End of try:
    try_end_51:;
    CHECK_OBJECT(tmp_class_creation_49__bases_orig);
    Py_DECREF(tmp_class_creation_49__bases_orig);
    tmp_class_creation_49__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_49__bases);
    Py_DECREF(tmp_class_creation_49__bases);
    tmp_class_creation_49__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_49__class_decl_dict);
    Py_DECREF(tmp_class_creation_49__class_decl_dict);
    tmp_class_creation_49__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_49__metaclass);
    Py_DECREF(tmp_class_creation_49__metaclass);
    tmp_class_creation_49__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_49__prepared);
    Py_DECREF(tmp_class_creation_49__prepared);
    tmp_class_creation_49__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_405;
        PyObject *tmp_tuple_element_195;
        tmp_tuple_element_195 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_195 == NULL)) {
            tmp_tuple_element_195 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_195 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        tmp_assign_source_405 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_405, 0, tmp_tuple_element_195);
        assert(tmp_class_creation_50__bases_orig == NULL);
        tmp_class_creation_50__bases_orig = tmp_assign_source_405;
    }
    {
        PyObject *tmp_assign_source_406;
        PyObject *tmp_dircall_arg1_50;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dircall_arg1_50 = tmp_class_creation_50__bases_orig;
        Py_INCREF(tmp_dircall_arg1_50);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_50};
            tmp_assign_source_406 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_406 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        assert(tmp_class_creation_50__bases == NULL);
        tmp_class_creation_50__bases = tmp_assign_source_406;
    }
    {
        PyObject *tmp_assign_source_407;
        tmp_assign_source_407 = PyDict_New();
        assert(tmp_class_creation_50__class_decl_dict == NULL);
        tmp_class_creation_50__class_decl_dict = tmp_assign_source_407;
    }
    {
        PyObject *tmp_assign_source_408;
        PyObject *tmp_metaclass_value_50;
        bool tmp_condition_result_295;
        PyObject *tmp_key_value_148;
        PyObject *tmp_dict_arg_value_148;
        PyObject *tmp_dict_arg_value_149;
        PyObject *tmp_key_value_149;
        nuitka_bool tmp_condition_result_296;
        int tmp_truth_name_50;
        PyObject *tmp_type_arg_99;
        PyObject *tmp_expression_value_246;
        PyObject *tmp_subscript_value_50;
        PyObject *tmp_bases_value_50;
        tmp_key_value_148 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_148 = tmp_class_creation_50__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_148, tmp_key_value_148);
        assert(!(tmp_res == -1));
        tmp_condition_result_295 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_295 != false) {
            goto condexpr_true_99;
        } else {
            goto condexpr_false_99;
        }
        condexpr_true_99:;
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_149 = tmp_class_creation_50__class_decl_dict;
        tmp_key_value_149 = mod_consts[205];
        tmp_metaclass_value_50 = DICT_GET_ITEM0(tmp_dict_arg_value_149, tmp_key_value_149);
        if (tmp_metaclass_value_50 == NULL) {
            tmp_metaclass_value_50 = Py_None;
        }
        assert(!(tmp_metaclass_value_50 == NULL));
        Py_INCREF(tmp_metaclass_value_50);
        goto condexpr_end_99;
        condexpr_false_99:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_truth_name_50 = CHECK_IF_TRUE(tmp_class_creation_50__bases);
        if (tmp_truth_name_50 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        tmp_condition_result_296 = tmp_truth_name_50 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_296 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_100;
        } else {
            goto condexpr_false_100;
        }
        condexpr_true_100:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_expression_value_246 = tmp_class_creation_50__bases;
        tmp_subscript_value_50 = mod_consts[4];
        tmp_type_arg_99 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_246, tmp_subscript_value_50, 0);
        if (tmp_type_arg_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        tmp_metaclass_value_50 = BUILTIN_TYPE1(tmp_type_arg_99);
        Py_DECREF(tmp_type_arg_99);
        if (tmp_metaclass_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        goto condexpr_end_100;
        condexpr_false_100:;
        tmp_metaclass_value_50 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_50);
        condexpr_end_100:;
        condexpr_end_99:;
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_bases_value_50 = tmp_class_creation_50__bases;
        tmp_assign_source_408 = SELECT_METACLASS(tmp_metaclass_value_50, tmp_bases_value_50);
        Py_DECREF(tmp_metaclass_value_50);
        if (tmp_assign_source_408 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        assert(tmp_class_creation_50__metaclass == NULL);
        tmp_class_creation_50__metaclass = tmp_assign_source_408;
    }
    {
        bool tmp_condition_result_297;
        PyObject *tmp_key_value_150;
        PyObject *tmp_dict_arg_value_150;
        tmp_key_value_150 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_dict_arg_value_150 = tmp_class_creation_50__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_150, tmp_key_value_150);
        assert(!(tmp_res == -1));
        tmp_condition_result_297 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_297 != false) {
            goto branch_yes_197;
        } else {
            goto branch_no_197;
        }
    }
    branch_yes_197:;
    CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_50__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1594;

        goto try_except_handler_150;
    }
    branch_no_197:;
    {
        nuitka_bool tmp_condition_result_298;
        PyObject *tmp_expression_value_247;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_247 = tmp_class_creation_50__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_247, mod_consts[206]);
        tmp_condition_result_298 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_298 == NUITKA_BOOL_TRUE) {
            goto branch_yes_198;
        } else {
            goto branch_no_198;
        }
    }
    branch_yes_198:;
    {
        PyObject *tmp_assign_source_409;
        PyObject *tmp_called_value_99;
        PyObject *tmp_expression_value_248;
        PyObject *tmp_args_value_99;
        PyObject *tmp_tuple_element_196;
        PyObject *tmp_kwargs_value_99;
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_expression_value_248 = tmp_class_creation_50__metaclass;
        tmp_called_value_99 = LOOKUP_ATTRIBUTE(tmp_expression_value_248, mod_consts[206]);
        if (tmp_called_value_99 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        tmp_tuple_element_196 = mod_consts[429];
        tmp_args_value_99 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_99, 0, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_50__bases);
        tmp_tuple_element_196 = tmp_class_creation_50__bases;
        PyTuple_SET_ITEM0(tmp_args_value_99, 1, tmp_tuple_element_196);
        CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
        tmp_kwargs_value_99 = tmp_class_creation_50__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1594;
        tmp_assign_source_409 = CALL_FUNCTION(tmp_called_value_99, tmp_args_value_99, tmp_kwargs_value_99);
        Py_DECREF(tmp_called_value_99);
        Py_DECREF(tmp_args_value_99);
        if (tmp_assign_source_409 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_409;
    }
    {
        bool tmp_condition_result_299;
        PyObject *tmp_operand_value_50;
        PyObject *tmp_expression_value_249;
        CHECK_OBJECT(tmp_class_creation_50__prepared);
        tmp_expression_value_249 = tmp_class_creation_50__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_249, mod_consts[208]);
        tmp_operand_value_50 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_50);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        tmp_condition_result_299 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_299 != false) {
            goto branch_yes_199;
        } else {
            goto branch_no_199;
        }
    }
    branch_yes_199:;
    {
        PyObject *tmp_raise_type_50;
        PyObject *tmp_raise_value_50;
        PyObject *tmp_left_value_50;
        PyObject *tmp_right_value_50;
        PyObject *tmp_tuple_element_197;
        PyObject *tmp_getattr_target_50;
        PyObject *tmp_getattr_attr_50;
        PyObject *tmp_getattr_default_50;
        tmp_raise_type_50 = PyExc_TypeError;
        tmp_left_value_50 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_50__metaclass);
        tmp_getattr_target_50 = tmp_class_creation_50__metaclass;
        tmp_getattr_attr_50 = mod_consts[210];
        tmp_getattr_default_50 = mod_consts[211];
        tmp_tuple_element_197 = BUILTIN_GETATTR(tmp_getattr_target_50, tmp_getattr_attr_50, tmp_getattr_default_50);
        if (tmp_tuple_element_197 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        tmp_right_value_50 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_250;
            PyObject *tmp_type_arg_100;
            PyTuple_SET_ITEM(tmp_right_value_50, 0, tmp_tuple_element_197);
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_type_arg_100 = tmp_class_creation_50__prepared;
            tmp_expression_value_250 = BUILTIN_TYPE1(tmp_type_arg_100);
            assert(!(tmp_expression_value_250 == NULL));
            tmp_tuple_element_197 = LOOKUP_ATTRIBUTE(tmp_expression_value_250, mod_consts[210]);
            Py_DECREF(tmp_expression_value_250);
            if (tmp_tuple_element_197 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1594;

                goto tuple_build_exception_50;
            }
            PyTuple_SET_ITEM(tmp_right_value_50, 1, tmp_tuple_element_197);
        }
        goto tuple_build_noexception_50;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_50:;
        Py_DECREF(tmp_right_value_50);
        goto try_except_handler_150;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_50:;
        tmp_raise_value_50 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_50, tmp_right_value_50);
        Py_DECREF(tmp_right_value_50);
        if (tmp_raise_value_50 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_150;
        }
        exception_type = tmp_raise_type_50;
        Py_INCREF(tmp_raise_type_50);
        exception_value = tmp_raise_value_50;
        exception_lineno = 1594;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_150;
    }
    branch_no_199:;
    goto branch_end_198;
    branch_no_198:;
    {
        PyObject *tmp_assign_source_410;
        tmp_assign_source_410 = PyDict_New();
        assert(tmp_class_creation_50__prepared == NULL);
        tmp_class_creation_50__prepared = tmp_assign_source_410;
    }
    branch_end_198:;
    {
        PyObject *tmp_assign_source_411;
        {
            PyObject *tmp_set_locals_50;
            CHECK_OBJECT(tmp_class_creation_50__prepared);
            tmp_set_locals_50 = tmp_class_creation_50__prepared;
            locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594 = tmp_set_locals_50;
            Py_INCREF(tmp_set_locals_50);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_152;
        }
        tmp_dictset_value = mod_consts[430];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_152;
        }
        tmp_dictset_value = mod_consts[429];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_152;
        }
        if (isFrameUnusable(cache_frame_37446e5a2111d93541316d30618de356_51)) {
            Py_XDECREF(cache_frame_37446e5a2111d93541316d30618de356_51);

#if _DEBUG_REFCOUNTS
            if (cache_frame_37446e5a2111d93541316d30618de356_51 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_37446e5a2111d93541316d30618de356_51 = MAKE_FUNCTION_FRAME(codeobj_37446e5a2111d93541316d30618de356, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_37446e5a2111d93541316d30618de356_51->m_type_description == NULL);
        frame_37446e5a2111d93541316d30618de356_51 = cache_frame_37446e5a2111d93541316d30618de356_51;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_37446e5a2111d93541316d30618de356_51);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_37446e5a2111d93541316d30618de356_51) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[431];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1608;
            type_description_2 = "o";
            goto frame_exception_exit_51;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__63___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1610;
            type_description_2 = "o";
            goto frame_exception_exit_51;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37446e5a2111d93541316d30618de356_51);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_50;

        frame_exception_exit_51:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37446e5a2111d93541316d30618de356_51);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_37446e5a2111d93541316d30618de356_51, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_37446e5a2111d93541316d30618de356_51->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_37446e5a2111d93541316d30618de356_51, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_37446e5a2111d93541316d30618de356_51,
            type_description_2,
            outline_49_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_37446e5a2111d93541316d30618de356_51 == cache_frame_37446e5a2111d93541316d30618de356_51) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_37446e5a2111d93541316d30618de356_51);
            cache_frame_37446e5a2111d93541316d30618de356_51 = NULL;
        }

        assertFrameObject(frame_37446e5a2111d93541316d30618de356_51);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_50;

        frame_no_exception_50:;
        goto skip_nested_handling_50;
        nested_frame_exit_50:;

        goto try_except_handler_152;
        skip_nested_handling_50:;
        {
            nuitka_bool tmp_condition_result_300;
            PyObject *tmp_cmp_expr_left_50;
            PyObject *tmp_cmp_expr_right_50;
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_cmp_expr_left_50 = tmp_class_creation_50__bases;
            CHECK_OBJECT(tmp_class_creation_50__bases_orig);
            tmp_cmp_expr_right_50 = tmp_class_creation_50__bases_orig;
            tmp_condition_result_300 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_50, tmp_cmp_expr_right_50);
            if (tmp_condition_result_300 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1594;

                goto try_except_handler_152;
            }
            if (tmp_condition_result_300 == NUITKA_BOOL_TRUE) {
                goto branch_yes_200;
            } else {
                goto branch_no_200;
            }
            assert(tmp_condition_result_300 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_200:;
        CHECK_OBJECT(tmp_class_creation_50__bases_orig);
        tmp_dictset_value = tmp_class_creation_50__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1594;

            goto try_except_handler_152;
        }
        branch_no_200:;
        {
            PyObject *tmp_assign_source_412;
            PyObject *tmp_called_value_100;
            PyObject *tmp_args_value_100;
            PyObject *tmp_tuple_element_198;
            PyObject *tmp_kwargs_value_100;
            CHECK_OBJECT(tmp_class_creation_50__metaclass);
            tmp_called_value_100 = tmp_class_creation_50__metaclass;
            tmp_tuple_element_198 = mod_consts[429];
            tmp_args_value_100 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_100, 0, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_50__bases);
            tmp_tuple_element_198 = tmp_class_creation_50__bases;
            PyTuple_SET_ITEM0(tmp_args_value_100, 1, tmp_tuple_element_198);
            tmp_tuple_element_198 = locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594;
            PyTuple_SET_ITEM0(tmp_args_value_100, 2, tmp_tuple_element_198);
            CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
            tmp_kwargs_value_100 = tmp_class_creation_50__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1594;
            tmp_assign_source_412 = CALL_FUNCTION(tmp_called_value_100, tmp_args_value_100, tmp_kwargs_value_100);
            Py_DECREF(tmp_args_value_100);
            if (tmp_assign_source_412 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1594;

                goto try_except_handler_152;
            }
            assert(outline_49_var___class__ == NULL);
            outline_49_var___class__ = tmp_assign_source_412;
        }
        CHECK_OBJECT(outline_49_var___class__);
        tmp_assign_source_411 = outline_49_var___class__;
        Py_INCREF(tmp_assign_source_411);
        goto try_return_handler_152;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_152:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594);
        locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594 = NULL;
        goto try_return_handler_151;
        // Exception handler code:
        try_except_handler_152:;
        exception_keeper_type_150 = exception_type;
        exception_keeper_value_150 = exception_value;
        exception_keeper_tb_150 = exception_tb;
        exception_keeper_lineno_150 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594);
        locals_xlwt$BIFFRecords$$$class__50_GutsRecord_1594 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_150;
        exception_value = exception_keeper_value_150;
        exception_tb = exception_keeper_tb_150;
        exception_lineno = exception_keeper_lineno_150;

        goto try_except_handler_151;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_151:;
        CHECK_OBJECT(outline_49_var___class__);
        Py_DECREF(outline_49_var___class__);
        outline_49_var___class__ = NULL;
        goto outline_result_50;
        // Exception handler code:
        try_except_handler_151:;
        exception_keeper_type_151 = exception_type;
        exception_keeper_value_151 = exception_value;
        exception_keeper_tb_151 = exception_tb;
        exception_keeper_lineno_151 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_151;
        exception_value = exception_keeper_value_151;
        exception_tb = exception_keeper_tb_151;
        exception_lineno = exception_keeper_lineno_151;

        goto outline_exception_50;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_50:;
        exception_lineno = 1594;
        goto try_except_handler_150;
        outline_result_50:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[429], tmp_assign_source_411);
    }
    goto try_end_52;
    // Exception handler code:
    try_except_handler_150:;
    exception_keeper_type_152 = exception_type;
    exception_keeper_value_152 = exception_value;
    exception_keeper_tb_152 = exception_tb;
    exception_keeper_lineno_152 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    Py_XDECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_152;
    exception_value = exception_keeper_value_152;
    exception_tb = exception_keeper_tb_152;
    exception_lineno = exception_keeper_lineno_152;

    goto frame_exception_exit_1;
    // End of try:
    try_end_52:;
    CHECK_OBJECT(tmp_class_creation_50__bases_orig);
    Py_DECREF(tmp_class_creation_50__bases_orig);
    tmp_class_creation_50__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_50__bases);
    Py_DECREF(tmp_class_creation_50__bases);
    tmp_class_creation_50__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_50__class_decl_dict);
    Py_DECREF(tmp_class_creation_50__class_decl_dict);
    tmp_class_creation_50__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_50__metaclass);
    Py_DECREF(tmp_class_creation_50__metaclass);
    tmp_class_creation_50__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_50__prepared);
    Py_DECREF(tmp_class_creation_50__prepared);
    tmp_class_creation_50__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_413;
        PyObject *tmp_tuple_element_199;
        tmp_tuple_element_199 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_199 == NULL)) {
            tmp_tuple_element_199 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_199 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        tmp_assign_source_413 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_413, 0, tmp_tuple_element_199);
        assert(tmp_class_creation_51__bases_orig == NULL);
        tmp_class_creation_51__bases_orig = tmp_assign_source_413;
    }
    {
        PyObject *tmp_assign_source_414;
        PyObject *tmp_dircall_arg1_51;
        CHECK_OBJECT(tmp_class_creation_51__bases_orig);
        tmp_dircall_arg1_51 = tmp_class_creation_51__bases_orig;
        Py_INCREF(tmp_dircall_arg1_51);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_51};
            tmp_assign_source_414 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_414 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        assert(tmp_class_creation_51__bases == NULL);
        tmp_class_creation_51__bases = tmp_assign_source_414;
    }
    {
        PyObject *tmp_assign_source_415;
        tmp_assign_source_415 = PyDict_New();
        assert(tmp_class_creation_51__class_decl_dict == NULL);
        tmp_class_creation_51__class_decl_dict = tmp_assign_source_415;
    }
    {
        PyObject *tmp_assign_source_416;
        PyObject *tmp_metaclass_value_51;
        bool tmp_condition_result_301;
        PyObject *tmp_key_value_151;
        PyObject *tmp_dict_arg_value_151;
        PyObject *tmp_dict_arg_value_152;
        PyObject *tmp_key_value_152;
        nuitka_bool tmp_condition_result_302;
        int tmp_truth_name_51;
        PyObject *tmp_type_arg_101;
        PyObject *tmp_expression_value_251;
        PyObject *tmp_subscript_value_51;
        PyObject *tmp_bases_value_51;
        tmp_key_value_151 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_151 = tmp_class_creation_51__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_151, tmp_key_value_151);
        assert(!(tmp_res == -1));
        tmp_condition_result_301 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_301 != false) {
            goto condexpr_true_101;
        } else {
            goto condexpr_false_101;
        }
        condexpr_true_101:;
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_152 = tmp_class_creation_51__class_decl_dict;
        tmp_key_value_152 = mod_consts[205];
        tmp_metaclass_value_51 = DICT_GET_ITEM0(tmp_dict_arg_value_152, tmp_key_value_152);
        if (tmp_metaclass_value_51 == NULL) {
            tmp_metaclass_value_51 = Py_None;
        }
        assert(!(tmp_metaclass_value_51 == NULL));
        Py_INCREF(tmp_metaclass_value_51);
        goto condexpr_end_101;
        condexpr_false_101:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_truth_name_51 = CHECK_IF_TRUE(tmp_class_creation_51__bases);
        if (tmp_truth_name_51 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        tmp_condition_result_302 = tmp_truth_name_51 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_302 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_102;
        } else {
            goto condexpr_false_102;
        }
        condexpr_true_102:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_expression_value_251 = tmp_class_creation_51__bases;
        tmp_subscript_value_51 = mod_consts[4];
        tmp_type_arg_101 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_251, tmp_subscript_value_51, 0);
        if (tmp_type_arg_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        tmp_metaclass_value_51 = BUILTIN_TYPE1(tmp_type_arg_101);
        Py_DECREF(tmp_type_arg_101);
        if (tmp_metaclass_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        goto condexpr_end_102;
        condexpr_false_102:;
        tmp_metaclass_value_51 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_51);
        condexpr_end_102:;
        condexpr_end_101:;
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_bases_value_51 = tmp_class_creation_51__bases;
        tmp_assign_source_416 = SELECT_METACLASS(tmp_metaclass_value_51, tmp_bases_value_51);
        Py_DECREF(tmp_metaclass_value_51);
        if (tmp_assign_source_416 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        assert(tmp_class_creation_51__metaclass == NULL);
        tmp_class_creation_51__metaclass = tmp_assign_source_416;
    }
    {
        bool tmp_condition_result_303;
        PyObject *tmp_key_value_153;
        PyObject *tmp_dict_arg_value_153;
        tmp_key_value_153 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_dict_arg_value_153 = tmp_class_creation_51__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_153, tmp_key_value_153);
        assert(!(tmp_res == -1));
        tmp_condition_result_303 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_303 != false) {
            goto branch_yes_201;
        } else {
            goto branch_no_201;
        }
    }
    branch_yes_201:;
    CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_51__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1613;

        goto try_except_handler_153;
    }
    branch_no_201:;
    {
        nuitka_bool tmp_condition_result_304;
        PyObject *tmp_expression_value_252;
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_expression_value_252 = tmp_class_creation_51__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_252, mod_consts[206]);
        tmp_condition_result_304 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_304 == NUITKA_BOOL_TRUE) {
            goto branch_yes_202;
        } else {
            goto branch_no_202;
        }
    }
    branch_yes_202:;
    {
        PyObject *tmp_assign_source_417;
        PyObject *tmp_called_value_101;
        PyObject *tmp_expression_value_253;
        PyObject *tmp_args_value_101;
        PyObject *tmp_tuple_element_200;
        PyObject *tmp_kwargs_value_101;
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_expression_value_253 = tmp_class_creation_51__metaclass;
        tmp_called_value_101 = LOOKUP_ATTRIBUTE(tmp_expression_value_253, mod_consts[206]);
        if (tmp_called_value_101 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        tmp_tuple_element_200 = mod_consts[433];
        tmp_args_value_101 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_101, 0, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_51__bases);
        tmp_tuple_element_200 = tmp_class_creation_51__bases;
        PyTuple_SET_ITEM0(tmp_args_value_101, 1, tmp_tuple_element_200);
        CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
        tmp_kwargs_value_101 = tmp_class_creation_51__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1613;
        tmp_assign_source_417 = CALL_FUNCTION(tmp_called_value_101, tmp_args_value_101, tmp_kwargs_value_101);
        Py_DECREF(tmp_called_value_101);
        Py_DECREF(tmp_args_value_101);
        if (tmp_assign_source_417 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        assert(tmp_class_creation_51__prepared == NULL);
        tmp_class_creation_51__prepared = tmp_assign_source_417;
    }
    {
        bool tmp_condition_result_305;
        PyObject *tmp_operand_value_51;
        PyObject *tmp_expression_value_254;
        CHECK_OBJECT(tmp_class_creation_51__prepared);
        tmp_expression_value_254 = tmp_class_creation_51__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_254, mod_consts[208]);
        tmp_operand_value_51 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_51);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        tmp_condition_result_305 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_305 != false) {
            goto branch_yes_203;
        } else {
            goto branch_no_203;
        }
    }
    branch_yes_203:;
    {
        PyObject *tmp_raise_type_51;
        PyObject *tmp_raise_value_51;
        PyObject *tmp_left_value_51;
        PyObject *tmp_right_value_51;
        PyObject *tmp_tuple_element_201;
        PyObject *tmp_getattr_target_51;
        PyObject *tmp_getattr_attr_51;
        PyObject *tmp_getattr_default_51;
        tmp_raise_type_51 = PyExc_TypeError;
        tmp_left_value_51 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_51__metaclass);
        tmp_getattr_target_51 = tmp_class_creation_51__metaclass;
        tmp_getattr_attr_51 = mod_consts[210];
        tmp_getattr_default_51 = mod_consts[211];
        tmp_tuple_element_201 = BUILTIN_GETATTR(tmp_getattr_target_51, tmp_getattr_attr_51, tmp_getattr_default_51);
        if (tmp_tuple_element_201 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        tmp_right_value_51 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_255;
            PyObject *tmp_type_arg_102;
            PyTuple_SET_ITEM(tmp_right_value_51, 0, tmp_tuple_element_201);
            CHECK_OBJECT(tmp_class_creation_51__prepared);
            tmp_type_arg_102 = tmp_class_creation_51__prepared;
            tmp_expression_value_255 = BUILTIN_TYPE1(tmp_type_arg_102);
            assert(!(tmp_expression_value_255 == NULL));
            tmp_tuple_element_201 = LOOKUP_ATTRIBUTE(tmp_expression_value_255, mod_consts[210]);
            Py_DECREF(tmp_expression_value_255);
            if (tmp_tuple_element_201 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1613;

                goto tuple_build_exception_51;
            }
            PyTuple_SET_ITEM(tmp_right_value_51, 1, tmp_tuple_element_201);
        }
        goto tuple_build_noexception_51;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_51:;
        Py_DECREF(tmp_right_value_51);
        goto try_except_handler_153;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_51:;
        tmp_raise_value_51 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_51, tmp_right_value_51);
        Py_DECREF(tmp_right_value_51);
        if (tmp_raise_value_51 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_153;
        }
        exception_type = tmp_raise_type_51;
        Py_INCREF(tmp_raise_type_51);
        exception_value = tmp_raise_value_51;
        exception_lineno = 1613;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_153;
    }
    branch_no_203:;
    goto branch_end_202;
    branch_no_202:;
    {
        PyObject *tmp_assign_source_418;
        tmp_assign_source_418 = PyDict_New();
        assert(tmp_class_creation_51__prepared == NULL);
        tmp_class_creation_51__prepared = tmp_assign_source_418;
    }
    branch_end_202:;
    {
        PyObject *tmp_assign_source_419;
        {
            PyObject *tmp_set_locals_51;
            CHECK_OBJECT(tmp_class_creation_51__prepared);
            tmp_set_locals_51 = tmp_class_creation_51__prepared;
            locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613 = tmp_set_locals_51;
            Py_INCREF(tmp_set_locals_51);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_155;
        }
        tmp_dictset_value = mod_consts[434];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_155;
        }
        tmp_dictset_value = mod_consts[433];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_155;
        }
        if (isFrameUnusable(cache_frame_e374c386233b40d6ca51aa04a77e7b89_52)) {
            Py_XDECREF(cache_frame_e374c386233b40d6ca51aa04a77e7b89_52);

#if _DEBUG_REFCOUNTS
            if (cache_frame_e374c386233b40d6ca51aa04a77e7b89_52 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_e374c386233b40d6ca51aa04a77e7b89_52 = MAKE_FUNCTION_FRAME(codeobj_e374c386233b40d6ca51aa04a77e7b89, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_e374c386233b40d6ca51aa04a77e7b89_52->m_type_description == NULL);
        frame_e374c386233b40d6ca51aa04a77e7b89_52 = cache_frame_e374c386233b40d6ca51aa04a77e7b89_52;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_e374c386233b40d6ca51aa04a77e7b89_52);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_e374c386233b40d6ca51aa04a77e7b89_52) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[435];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1652;
            type_description_2 = "o";
            goto frame_exception_exit_52;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__64___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1654;
            type_description_2 = "o";
            goto frame_exception_exit_52;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e374c386233b40d6ca51aa04a77e7b89_52);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_51;

        frame_exception_exit_52:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_e374c386233b40d6ca51aa04a77e7b89_52);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_e374c386233b40d6ca51aa04a77e7b89_52, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_e374c386233b40d6ca51aa04a77e7b89_52->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_e374c386233b40d6ca51aa04a77e7b89_52, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_e374c386233b40d6ca51aa04a77e7b89_52,
            type_description_2,
            outline_50_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_e374c386233b40d6ca51aa04a77e7b89_52 == cache_frame_e374c386233b40d6ca51aa04a77e7b89_52) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_e374c386233b40d6ca51aa04a77e7b89_52);
            cache_frame_e374c386233b40d6ca51aa04a77e7b89_52 = NULL;
        }

        assertFrameObject(frame_e374c386233b40d6ca51aa04a77e7b89_52);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_51;

        frame_no_exception_51:;
        goto skip_nested_handling_51;
        nested_frame_exit_51:;

        goto try_except_handler_155;
        skip_nested_handling_51:;
        {
            nuitka_bool tmp_condition_result_306;
            PyObject *tmp_cmp_expr_left_51;
            PyObject *tmp_cmp_expr_right_51;
            CHECK_OBJECT(tmp_class_creation_51__bases);
            tmp_cmp_expr_left_51 = tmp_class_creation_51__bases;
            CHECK_OBJECT(tmp_class_creation_51__bases_orig);
            tmp_cmp_expr_right_51 = tmp_class_creation_51__bases_orig;
            tmp_condition_result_306 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_51, tmp_cmp_expr_right_51);
            if (tmp_condition_result_306 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1613;

                goto try_except_handler_155;
            }
            if (tmp_condition_result_306 == NUITKA_BOOL_TRUE) {
                goto branch_yes_204;
            } else {
                goto branch_no_204;
            }
            assert(tmp_condition_result_306 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_204:;
        CHECK_OBJECT(tmp_class_creation_51__bases_orig);
        tmp_dictset_value = tmp_class_creation_51__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1613;

            goto try_except_handler_155;
        }
        branch_no_204:;
        {
            PyObject *tmp_assign_source_420;
            PyObject *tmp_called_value_102;
            PyObject *tmp_args_value_102;
            PyObject *tmp_tuple_element_202;
            PyObject *tmp_kwargs_value_102;
            CHECK_OBJECT(tmp_class_creation_51__metaclass);
            tmp_called_value_102 = tmp_class_creation_51__metaclass;
            tmp_tuple_element_202 = mod_consts[433];
            tmp_args_value_102 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_102, 0, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_51__bases);
            tmp_tuple_element_202 = tmp_class_creation_51__bases;
            PyTuple_SET_ITEM0(tmp_args_value_102, 1, tmp_tuple_element_202);
            tmp_tuple_element_202 = locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613;
            PyTuple_SET_ITEM0(tmp_args_value_102, 2, tmp_tuple_element_202);
            CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
            tmp_kwargs_value_102 = tmp_class_creation_51__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1613;
            tmp_assign_source_420 = CALL_FUNCTION(tmp_called_value_102, tmp_args_value_102, tmp_kwargs_value_102);
            Py_DECREF(tmp_args_value_102);
            if (tmp_assign_source_420 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1613;

                goto try_except_handler_155;
            }
            assert(outline_50_var___class__ == NULL);
            outline_50_var___class__ = tmp_assign_source_420;
        }
        CHECK_OBJECT(outline_50_var___class__);
        tmp_assign_source_419 = outline_50_var___class__;
        Py_INCREF(tmp_assign_source_419);
        goto try_return_handler_155;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_155:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613);
        locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613 = NULL;
        goto try_return_handler_154;
        // Exception handler code:
        try_except_handler_155:;
        exception_keeper_type_153 = exception_type;
        exception_keeper_value_153 = exception_value;
        exception_keeper_tb_153 = exception_tb;
        exception_keeper_lineno_153 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613);
        locals_xlwt$BIFFRecords$$$class__51_WSBoolRecord_1613 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_153;
        exception_value = exception_keeper_value_153;
        exception_tb = exception_keeper_tb_153;
        exception_lineno = exception_keeper_lineno_153;

        goto try_except_handler_154;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_154:;
        CHECK_OBJECT(outline_50_var___class__);
        Py_DECREF(outline_50_var___class__);
        outline_50_var___class__ = NULL;
        goto outline_result_51;
        // Exception handler code:
        try_except_handler_154:;
        exception_keeper_type_154 = exception_type;
        exception_keeper_value_154 = exception_value;
        exception_keeper_tb_154 = exception_tb;
        exception_keeper_lineno_154 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_154;
        exception_value = exception_keeper_value_154;
        exception_tb = exception_keeper_tb_154;
        exception_lineno = exception_keeper_lineno_154;

        goto outline_exception_51;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_51:;
        exception_lineno = 1613;
        goto try_except_handler_153;
        outline_result_51:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[433], tmp_assign_source_419);
    }
    goto try_end_53;
    // Exception handler code:
    try_except_handler_153:;
    exception_keeper_type_155 = exception_type;
    exception_keeper_value_155 = exception_value;
    exception_keeper_tb_155 = exception_tb;
    exception_keeper_lineno_155 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_51__bases_orig);
    tmp_class_creation_51__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_51__bases);
    tmp_class_creation_51__bases = NULL;
    Py_XDECREF(tmp_class_creation_51__class_decl_dict);
    tmp_class_creation_51__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_51__metaclass);
    tmp_class_creation_51__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_51__prepared);
    tmp_class_creation_51__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_155;
    exception_value = exception_keeper_value_155;
    exception_tb = exception_keeper_tb_155;
    exception_lineno = exception_keeper_lineno_155;

    goto frame_exception_exit_1;
    // End of try:
    try_end_53:;
    CHECK_OBJECT(tmp_class_creation_51__bases_orig);
    Py_DECREF(tmp_class_creation_51__bases_orig);
    tmp_class_creation_51__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_51__bases);
    Py_DECREF(tmp_class_creation_51__bases);
    tmp_class_creation_51__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_51__class_decl_dict);
    Py_DECREF(tmp_class_creation_51__class_decl_dict);
    tmp_class_creation_51__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_51__metaclass);
    Py_DECREF(tmp_class_creation_51__metaclass);
    tmp_class_creation_51__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_51__prepared);
    Py_DECREF(tmp_class_creation_51__prepared);
    tmp_class_creation_51__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_421;
        PyObject *tmp_tuple_element_203;
        tmp_tuple_element_203 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_203 == NULL)) {
            tmp_tuple_element_203 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_203 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        tmp_assign_source_421 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_421, 0, tmp_tuple_element_203);
        assert(tmp_class_creation_52__bases_orig == NULL);
        tmp_class_creation_52__bases_orig = tmp_assign_source_421;
    }
    {
        PyObject *tmp_assign_source_422;
        PyObject *tmp_dircall_arg1_52;
        CHECK_OBJECT(tmp_class_creation_52__bases_orig);
        tmp_dircall_arg1_52 = tmp_class_creation_52__bases_orig;
        Py_INCREF(tmp_dircall_arg1_52);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_52};
            tmp_assign_source_422 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_422 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        assert(tmp_class_creation_52__bases == NULL);
        tmp_class_creation_52__bases = tmp_assign_source_422;
    }
    {
        PyObject *tmp_assign_source_423;
        tmp_assign_source_423 = PyDict_New();
        assert(tmp_class_creation_52__class_decl_dict == NULL);
        tmp_class_creation_52__class_decl_dict = tmp_assign_source_423;
    }
    {
        PyObject *tmp_assign_source_424;
        PyObject *tmp_metaclass_value_52;
        bool tmp_condition_result_307;
        PyObject *tmp_key_value_154;
        PyObject *tmp_dict_arg_value_154;
        PyObject *tmp_dict_arg_value_155;
        PyObject *tmp_key_value_155;
        nuitka_bool tmp_condition_result_308;
        int tmp_truth_name_52;
        PyObject *tmp_type_arg_103;
        PyObject *tmp_expression_value_256;
        PyObject *tmp_subscript_value_52;
        PyObject *tmp_bases_value_52;
        tmp_key_value_154 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_154 = tmp_class_creation_52__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_154, tmp_key_value_154);
        assert(!(tmp_res == -1));
        tmp_condition_result_307 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_307 != false) {
            goto condexpr_true_103;
        } else {
            goto condexpr_false_103;
        }
        condexpr_true_103:;
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_155 = tmp_class_creation_52__class_decl_dict;
        tmp_key_value_155 = mod_consts[205];
        tmp_metaclass_value_52 = DICT_GET_ITEM0(tmp_dict_arg_value_155, tmp_key_value_155);
        if (tmp_metaclass_value_52 == NULL) {
            tmp_metaclass_value_52 = Py_None;
        }
        assert(!(tmp_metaclass_value_52 == NULL));
        Py_INCREF(tmp_metaclass_value_52);
        goto condexpr_end_103;
        condexpr_false_103:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_truth_name_52 = CHECK_IF_TRUE(tmp_class_creation_52__bases);
        if (tmp_truth_name_52 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        tmp_condition_result_308 = tmp_truth_name_52 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_308 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_104;
        } else {
            goto condexpr_false_104;
        }
        condexpr_true_104:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_expression_value_256 = tmp_class_creation_52__bases;
        tmp_subscript_value_52 = mod_consts[4];
        tmp_type_arg_103 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_256, tmp_subscript_value_52, 0);
        if (tmp_type_arg_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        tmp_metaclass_value_52 = BUILTIN_TYPE1(tmp_type_arg_103);
        Py_DECREF(tmp_type_arg_103);
        if (tmp_metaclass_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        goto condexpr_end_104;
        condexpr_false_104:;
        tmp_metaclass_value_52 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_52);
        condexpr_end_104:;
        condexpr_end_103:;
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_bases_value_52 = tmp_class_creation_52__bases;
        tmp_assign_source_424 = SELECT_METACLASS(tmp_metaclass_value_52, tmp_bases_value_52);
        Py_DECREF(tmp_metaclass_value_52);
        if (tmp_assign_source_424 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        assert(tmp_class_creation_52__metaclass == NULL);
        tmp_class_creation_52__metaclass = tmp_assign_source_424;
    }
    {
        bool tmp_condition_result_309;
        PyObject *tmp_key_value_156;
        PyObject *tmp_dict_arg_value_156;
        tmp_key_value_156 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_dict_arg_value_156 = tmp_class_creation_52__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_156, tmp_key_value_156);
        assert(!(tmp_res == -1));
        tmp_condition_result_309 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_309 != false) {
            goto branch_yes_205;
        } else {
            goto branch_no_205;
        }
    }
    branch_yes_205:;
    CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_52__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1657;

        goto try_except_handler_156;
    }
    branch_no_205:;
    {
        nuitka_bool tmp_condition_result_310;
        PyObject *tmp_expression_value_257;
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_expression_value_257 = tmp_class_creation_52__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_257, mod_consts[206]);
        tmp_condition_result_310 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_310 == NUITKA_BOOL_TRUE) {
            goto branch_yes_206;
        } else {
            goto branch_no_206;
        }
    }
    branch_yes_206:;
    {
        PyObject *tmp_assign_source_425;
        PyObject *tmp_called_value_103;
        PyObject *tmp_expression_value_258;
        PyObject *tmp_args_value_103;
        PyObject *tmp_tuple_element_204;
        PyObject *tmp_kwargs_value_103;
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_expression_value_258 = tmp_class_creation_52__metaclass;
        tmp_called_value_103 = LOOKUP_ATTRIBUTE(tmp_expression_value_258, mod_consts[206]);
        if (tmp_called_value_103 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        tmp_tuple_element_204 = mod_consts[437];
        tmp_args_value_103 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_103, 0, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_52__bases);
        tmp_tuple_element_204 = tmp_class_creation_52__bases;
        PyTuple_SET_ITEM0(tmp_args_value_103, 1, tmp_tuple_element_204);
        CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
        tmp_kwargs_value_103 = tmp_class_creation_52__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1657;
        tmp_assign_source_425 = CALL_FUNCTION(tmp_called_value_103, tmp_args_value_103, tmp_kwargs_value_103);
        Py_DECREF(tmp_called_value_103);
        Py_DECREF(tmp_args_value_103);
        if (tmp_assign_source_425 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        assert(tmp_class_creation_52__prepared == NULL);
        tmp_class_creation_52__prepared = tmp_assign_source_425;
    }
    {
        bool tmp_condition_result_311;
        PyObject *tmp_operand_value_52;
        PyObject *tmp_expression_value_259;
        CHECK_OBJECT(tmp_class_creation_52__prepared);
        tmp_expression_value_259 = tmp_class_creation_52__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_259, mod_consts[208]);
        tmp_operand_value_52 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_52);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        tmp_condition_result_311 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_311 != false) {
            goto branch_yes_207;
        } else {
            goto branch_no_207;
        }
    }
    branch_yes_207:;
    {
        PyObject *tmp_raise_type_52;
        PyObject *tmp_raise_value_52;
        PyObject *tmp_left_value_52;
        PyObject *tmp_right_value_52;
        PyObject *tmp_tuple_element_205;
        PyObject *tmp_getattr_target_52;
        PyObject *tmp_getattr_attr_52;
        PyObject *tmp_getattr_default_52;
        tmp_raise_type_52 = PyExc_TypeError;
        tmp_left_value_52 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_52__metaclass);
        tmp_getattr_target_52 = tmp_class_creation_52__metaclass;
        tmp_getattr_attr_52 = mod_consts[210];
        tmp_getattr_default_52 = mod_consts[211];
        tmp_tuple_element_205 = BUILTIN_GETATTR(tmp_getattr_target_52, tmp_getattr_attr_52, tmp_getattr_default_52);
        if (tmp_tuple_element_205 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        tmp_right_value_52 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_260;
            PyObject *tmp_type_arg_104;
            PyTuple_SET_ITEM(tmp_right_value_52, 0, tmp_tuple_element_205);
            CHECK_OBJECT(tmp_class_creation_52__prepared);
            tmp_type_arg_104 = tmp_class_creation_52__prepared;
            tmp_expression_value_260 = BUILTIN_TYPE1(tmp_type_arg_104);
            assert(!(tmp_expression_value_260 == NULL));
            tmp_tuple_element_205 = LOOKUP_ATTRIBUTE(tmp_expression_value_260, mod_consts[210]);
            Py_DECREF(tmp_expression_value_260);
            if (tmp_tuple_element_205 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1657;

                goto tuple_build_exception_52;
            }
            PyTuple_SET_ITEM(tmp_right_value_52, 1, tmp_tuple_element_205);
        }
        goto tuple_build_noexception_52;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_52:;
        Py_DECREF(tmp_right_value_52);
        goto try_except_handler_156;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_52:;
        tmp_raise_value_52 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_52, tmp_right_value_52);
        Py_DECREF(tmp_right_value_52);
        if (tmp_raise_value_52 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_156;
        }
        exception_type = tmp_raise_type_52;
        Py_INCREF(tmp_raise_type_52);
        exception_value = tmp_raise_value_52;
        exception_lineno = 1657;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_156;
    }
    branch_no_207:;
    goto branch_end_206;
    branch_no_206:;
    {
        PyObject *tmp_assign_source_426;
        tmp_assign_source_426 = PyDict_New();
        assert(tmp_class_creation_52__prepared == NULL);
        tmp_class_creation_52__prepared = tmp_assign_source_426;
    }
    branch_end_206:;
    {
        PyObject *tmp_assign_source_427;
        {
            PyObject *tmp_set_locals_52;
            CHECK_OBJECT(tmp_class_creation_52__prepared);
            tmp_set_locals_52 = tmp_class_creation_52__prepared;
            locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657 = tmp_set_locals_52;
            Py_INCREF(tmp_set_locals_52);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_158;
        }
        tmp_dictset_value = mod_consts[438];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_158;
        }
        tmp_dictset_value = mod_consts[437];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_158;
        }
        if (isFrameUnusable(cache_frame_f9d029bca8c7a917ba89af906edb8305_53)) {
            Py_XDECREF(cache_frame_f9d029bca8c7a917ba89af906edb8305_53);

#if _DEBUG_REFCOUNTS
            if (cache_frame_f9d029bca8c7a917ba89af906edb8305_53 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_f9d029bca8c7a917ba89af906edb8305_53 = MAKE_FUNCTION_FRAME(codeobj_f9d029bca8c7a917ba89af906edb8305, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_f9d029bca8c7a917ba89af906edb8305_53->m_type_description == NULL);
        frame_f9d029bca8c7a917ba89af906edb8305_53 = cache_frame_f9d029bca8c7a917ba89af906edb8305_53;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_f9d029bca8c7a917ba89af906edb8305_53);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_f9d029bca8c7a917ba89af906edb8305_53) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[439];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1686;
            type_description_2 = "o";
            goto frame_exception_exit_53;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__65___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1688;
            type_description_2 = "o";
            goto frame_exception_exit_53;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f9d029bca8c7a917ba89af906edb8305_53);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_52;

        frame_exception_exit_53:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_f9d029bca8c7a917ba89af906edb8305_53);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_f9d029bca8c7a917ba89af906edb8305_53, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_f9d029bca8c7a917ba89af906edb8305_53->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_f9d029bca8c7a917ba89af906edb8305_53, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_f9d029bca8c7a917ba89af906edb8305_53,
            type_description_2,
            outline_51_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_f9d029bca8c7a917ba89af906edb8305_53 == cache_frame_f9d029bca8c7a917ba89af906edb8305_53) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_f9d029bca8c7a917ba89af906edb8305_53);
            cache_frame_f9d029bca8c7a917ba89af906edb8305_53 = NULL;
        }

        assertFrameObject(frame_f9d029bca8c7a917ba89af906edb8305_53);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_52;

        frame_no_exception_52:;
        goto skip_nested_handling_52;
        nested_frame_exit_52:;

        goto try_except_handler_158;
        skip_nested_handling_52:;
        {
            nuitka_bool tmp_condition_result_312;
            PyObject *tmp_cmp_expr_left_52;
            PyObject *tmp_cmp_expr_right_52;
            CHECK_OBJECT(tmp_class_creation_52__bases);
            tmp_cmp_expr_left_52 = tmp_class_creation_52__bases;
            CHECK_OBJECT(tmp_class_creation_52__bases_orig);
            tmp_cmp_expr_right_52 = tmp_class_creation_52__bases_orig;
            tmp_condition_result_312 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_52, tmp_cmp_expr_right_52);
            if (tmp_condition_result_312 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1657;

                goto try_except_handler_158;
            }
            if (tmp_condition_result_312 == NUITKA_BOOL_TRUE) {
                goto branch_yes_208;
            } else {
                goto branch_no_208;
            }
            assert(tmp_condition_result_312 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_208:;
        CHECK_OBJECT(tmp_class_creation_52__bases_orig);
        tmp_dictset_value = tmp_class_creation_52__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1657;

            goto try_except_handler_158;
        }
        branch_no_208:;
        {
            PyObject *tmp_assign_source_428;
            PyObject *tmp_called_value_104;
            PyObject *tmp_args_value_104;
            PyObject *tmp_tuple_element_206;
            PyObject *tmp_kwargs_value_104;
            CHECK_OBJECT(tmp_class_creation_52__metaclass);
            tmp_called_value_104 = tmp_class_creation_52__metaclass;
            tmp_tuple_element_206 = mod_consts[437];
            tmp_args_value_104 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_104, 0, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_52__bases);
            tmp_tuple_element_206 = tmp_class_creation_52__bases;
            PyTuple_SET_ITEM0(tmp_args_value_104, 1, tmp_tuple_element_206);
            tmp_tuple_element_206 = locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657;
            PyTuple_SET_ITEM0(tmp_args_value_104, 2, tmp_tuple_element_206);
            CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
            tmp_kwargs_value_104 = tmp_class_creation_52__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1657;
            tmp_assign_source_428 = CALL_FUNCTION(tmp_called_value_104, tmp_args_value_104, tmp_kwargs_value_104);
            Py_DECREF(tmp_args_value_104);
            if (tmp_assign_source_428 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1657;

                goto try_except_handler_158;
            }
            assert(outline_51_var___class__ == NULL);
            outline_51_var___class__ = tmp_assign_source_428;
        }
        CHECK_OBJECT(outline_51_var___class__);
        tmp_assign_source_427 = outline_51_var___class__;
        Py_INCREF(tmp_assign_source_427);
        goto try_return_handler_158;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_158:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657);
        locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657 = NULL;
        goto try_return_handler_157;
        // Exception handler code:
        try_except_handler_158:;
        exception_keeper_type_156 = exception_type;
        exception_keeper_value_156 = exception_value;
        exception_keeper_tb_156 = exception_tb;
        exception_keeper_lineno_156 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657);
        locals_xlwt$BIFFRecords$$$class__52_ColInfoRecord_1657 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_156;
        exception_value = exception_keeper_value_156;
        exception_tb = exception_keeper_tb_156;
        exception_lineno = exception_keeper_lineno_156;

        goto try_except_handler_157;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_157:;
        CHECK_OBJECT(outline_51_var___class__);
        Py_DECREF(outline_51_var___class__);
        outline_51_var___class__ = NULL;
        goto outline_result_52;
        // Exception handler code:
        try_except_handler_157:;
        exception_keeper_type_157 = exception_type;
        exception_keeper_value_157 = exception_value;
        exception_keeper_tb_157 = exception_tb;
        exception_keeper_lineno_157 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_157;
        exception_value = exception_keeper_value_157;
        exception_tb = exception_keeper_tb_157;
        exception_lineno = exception_keeper_lineno_157;

        goto outline_exception_52;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_52:;
        exception_lineno = 1657;
        goto try_except_handler_156;
        outline_result_52:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[437], tmp_assign_source_427);
    }
    goto try_end_54;
    // Exception handler code:
    try_except_handler_156:;
    exception_keeper_type_158 = exception_type;
    exception_keeper_value_158 = exception_value;
    exception_keeper_tb_158 = exception_tb;
    exception_keeper_lineno_158 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_52__bases_orig);
    tmp_class_creation_52__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_52__bases);
    tmp_class_creation_52__bases = NULL;
    Py_XDECREF(tmp_class_creation_52__class_decl_dict);
    tmp_class_creation_52__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_52__metaclass);
    tmp_class_creation_52__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_52__prepared);
    tmp_class_creation_52__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_158;
    exception_value = exception_keeper_value_158;
    exception_tb = exception_keeper_tb_158;
    exception_lineno = exception_keeper_lineno_158;

    goto frame_exception_exit_1;
    // End of try:
    try_end_54:;
    CHECK_OBJECT(tmp_class_creation_52__bases_orig);
    Py_DECREF(tmp_class_creation_52__bases_orig);
    tmp_class_creation_52__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_52__bases);
    Py_DECREF(tmp_class_creation_52__bases);
    tmp_class_creation_52__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_52__class_decl_dict);
    Py_DECREF(tmp_class_creation_52__class_decl_dict);
    tmp_class_creation_52__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_52__metaclass);
    Py_DECREF(tmp_class_creation_52__metaclass);
    tmp_class_creation_52__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_52__prepared);
    Py_DECREF(tmp_class_creation_52__prepared);
    tmp_class_creation_52__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_429;
        PyObject *tmp_tuple_element_207;
        tmp_tuple_element_207 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_207 == NULL)) {
            tmp_tuple_element_207 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_207 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        tmp_assign_source_429 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_429, 0, tmp_tuple_element_207);
        assert(tmp_class_creation_53__bases_orig == NULL);
        tmp_class_creation_53__bases_orig = tmp_assign_source_429;
    }
    {
        PyObject *tmp_assign_source_430;
        PyObject *tmp_dircall_arg1_53;
        CHECK_OBJECT(tmp_class_creation_53__bases_orig);
        tmp_dircall_arg1_53 = tmp_class_creation_53__bases_orig;
        Py_INCREF(tmp_dircall_arg1_53);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_53};
            tmp_assign_source_430 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_430 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        assert(tmp_class_creation_53__bases == NULL);
        tmp_class_creation_53__bases = tmp_assign_source_430;
    }
    {
        PyObject *tmp_assign_source_431;
        tmp_assign_source_431 = PyDict_New();
        assert(tmp_class_creation_53__class_decl_dict == NULL);
        tmp_class_creation_53__class_decl_dict = tmp_assign_source_431;
    }
    {
        PyObject *tmp_assign_source_432;
        PyObject *tmp_metaclass_value_53;
        bool tmp_condition_result_313;
        PyObject *tmp_key_value_157;
        PyObject *tmp_dict_arg_value_157;
        PyObject *tmp_dict_arg_value_158;
        PyObject *tmp_key_value_158;
        nuitka_bool tmp_condition_result_314;
        int tmp_truth_name_53;
        PyObject *tmp_type_arg_105;
        PyObject *tmp_expression_value_261;
        PyObject *tmp_subscript_value_53;
        PyObject *tmp_bases_value_53;
        tmp_key_value_157 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_157 = tmp_class_creation_53__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_157, tmp_key_value_157);
        assert(!(tmp_res == -1));
        tmp_condition_result_313 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_313 != false) {
            goto condexpr_true_105;
        } else {
            goto condexpr_false_105;
        }
        condexpr_true_105:;
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_158 = tmp_class_creation_53__class_decl_dict;
        tmp_key_value_158 = mod_consts[205];
        tmp_metaclass_value_53 = DICT_GET_ITEM0(tmp_dict_arg_value_158, tmp_key_value_158);
        if (tmp_metaclass_value_53 == NULL) {
            tmp_metaclass_value_53 = Py_None;
        }
        assert(!(tmp_metaclass_value_53 == NULL));
        Py_INCREF(tmp_metaclass_value_53);
        goto condexpr_end_105;
        condexpr_false_105:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_truth_name_53 = CHECK_IF_TRUE(tmp_class_creation_53__bases);
        if (tmp_truth_name_53 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        tmp_condition_result_314 = tmp_truth_name_53 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_314 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_106;
        } else {
            goto condexpr_false_106;
        }
        condexpr_true_106:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_expression_value_261 = tmp_class_creation_53__bases;
        tmp_subscript_value_53 = mod_consts[4];
        tmp_type_arg_105 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_261, tmp_subscript_value_53, 0);
        if (tmp_type_arg_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        tmp_metaclass_value_53 = BUILTIN_TYPE1(tmp_type_arg_105);
        Py_DECREF(tmp_type_arg_105);
        if (tmp_metaclass_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        goto condexpr_end_106;
        condexpr_false_106:;
        tmp_metaclass_value_53 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_53);
        condexpr_end_106:;
        condexpr_end_105:;
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_bases_value_53 = tmp_class_creation_53__bases;
        tmp_assign_source_432 = SELECT_METACLASS(tmp_metaclass_value_53, tmp_bases_value_53);
        Py_DECREF(tmp_metaclass_value_53);
        if (tmp_assign_source_432 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        assert(tmp_class_creation_53__metaclass == NULL);
        tmp_class_creation_53__metaclass = tmp_assign_source_432;
    }
    {
        bool tmp_condition_result_315;
        PyObject *tmp_key_value_159;
        PyObject *tmp_dict_arg_value_159;
        tmp_key_value_159 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_dict_arg_value_159 = tmp_class_creation_53__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_159, tmp_key_value_159);
        assert(!(tmp_res == -1));
        tmp_condition_result_315 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_315 != false) {
            goto branch_yes_209;
        } else {
            goto branch_no_209;
        }
    }
    branch_yes_209:;
    CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_53__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1691;

        goto try_except_handler_159;
    }
    branch_no_209:;
    {
        nuitka_bool tmp_condition_result_316;
        PyObject *tmp_expression_value_262;
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_expression_value_262 = tmp_class_creation_53__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_262, mod_consts[206]);
        tmp_condition_result_316 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_316 == NUITKA_BOOL_TRUE) {
            goto branch_yes_210;
        } else {
            goto branch_no_210;
        }
    }
    branch_yes_210:;
    {
        PyObject *tmp_assign_source_433;
        PyObject *tmp_called_value_105;
        PyObject *tmp_expression_value_263;
        PyObject *tmp_args_value_105;
        PyObject *tmp_tuple_element_208;
        PyObject *tmp_kwargs_value_105;
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_expression_value_263 = tmp_class_creation_53__metaclass;
        tmp_called_value_105 = LOOKUP_ATTRIBUTE(tmp_expression_value_263, mod_consts[206]);
        if (tmp_called_value_105 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        tmp_tuple_element_208 = mod_consts[441];
        tmp_args_value_105 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_105, 0, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_53__bases);
        tmp_tuple_element_208 = tmp_class_creation_53__bases;
        PyTuple_SET_ITEM0(tmp_args_value_105, 1, tmp_tuple_element_208);
        CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
        tmp_kwargs_value_105 = tmp_class_creation_53__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1691;
        tmp_assign_source_433 = CALL_FUNCTION(tmp_called_value_105, tmp_args_value_105, tmp_kwargs_value_105);
        Py_DECREF(tmp_called_value_105);
        Py_DECREF(tmp_args_value_105);
        if (tmp_assign_source_433 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        assert(tmp_class_creation_53__prepared == NULL);
        tmp_class_creation_53__prepared = tmp_assign_source_433;
    }
    {
        bool tmp_condition_result_317;
        PyObject *tmp_operand_value_53;
        PyObject *tmp_expression_value_264;
        CHECK_OBJECT(tmp_class_creation_53__prepared);
        tmp_expression_value_264 = tmp_class_creation_53__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_264, mod_consts[208]);
        tmp_operand_value_53 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_53);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        tmp_condition_result_317 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_317 != false) {
            goto branch_yes_211;
        } else {
            goto branch_no_211;
        }
    }
    branch_yes_211:;
    {
        PyObject *tmp_raise_type_53;
        PyObject *tmp_raise_value_53;
        PyObject *tmp_left_value_53;
        PyObject *tmp_right_value_53;
        PyObject *tmp_tuple_element_209;
        PyObject *tmp_getattr_target_53;
        PyObject *tmp_getattr_attr_53;
        PyObject *tmp_getattr_default_53;
        tmp_raise_type_53 = PyExc_TypeError;
        tmp_left_value_53 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_53__metaclass);
        tmp_getattr_target_53 = tmp_class_creation_53__metaclass;
        tmp_getattr_attr_53 = mod_consts[210];
        tmp_getattr_default_53 = mod_consts[211];
        tmp_tuple_element_209 = BUILTIN_GETATTR(tmp_getattr_target_53, tmp_getattr_attr_53, tmp_getattr_default_53);
        if (tmp_tuple_element_209 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        tmp_right_value_53 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_265;
            PyObject *tmp_type_arg_106;
            PyTuple_SET_ITEM(tmp_right_value_53, 0, tmp_tuple_element_209);
            CHECK_OBJECT(tmp_class_creation_53__prepared);
            tmp_type_arg_106 = tmp_class_creation_53__prepared;
            tmp_expression_value_265 = BUILTIN_TYPE1(tmp_type_arg_106);
            assert(!(tmp_expression_value_265 == NULL));
            tmp_tuple_element_209 = LOOKUP_ATTRIBUTE(tmp_expression_value_265, mod_consts[210]);
            Py_DECREF(tmp_expression_value_265);
            if (tmp_tuple_element_209 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1691;

                goto tuple_build_exception_53;
            }
            PyTuple_SET_ITEM(tmp_right_value_53, 1, tmp_tuple_element_209);
        }
        goto tuple_build_noexception_53;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_53:;
        Py_DECREF(tmp_right_value_53);
        goto try_except_handler_159;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_53:;
        tmp_raise_value_53 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_53, tmp_right_value_53);
        Py_DECREF(tmp_right_value_53);
        if (tmp_raise_value_53 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_159;
        }
        exception_type = tmp_raise_type_53;
        Py_INCREF(tmp_raise_type_53);
        exception_value = tmp_raise_value_53;
        exception_lineno = 1691;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_159;
    }
    branch_no_211:;
    goto branch_end_210;
    branch_no_210:;
    {
        PyObject *tmp_assign_source_434;
        tmp_assign_source_434 = PyDict_New();
        assert(tmp_class_creation_53__prepared == NULL);
        tmp_class_creation_53__prepared = tmp_assign_source_434;
    }
    branch_end_210:;
    {
        PyObject *tmp_assign_source_435;
        {
            PyObject *tmp_set_locals_53;
            CHECK_OBJECT(tmp_class_creation_53__prepared);
            tmp_set_locals_53 = tmp_class_creation_53__prepared;
            locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691 = tmp_set_locals_53;
            Py_INCREF(tmp_set_locals_53);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_161;
        }
        tmp_dictset_value = mod_consts[442];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_161;
        }
        tmp_dictset_value = mod_consts[441];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_161;
        }
        if (isFrameUnusable(cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54)) {
            Py_XDECREF(cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54);

#if _DEBUG_REFCOUNTS
            if (cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54 = MAKE_FUNCTION_FRAME(codeobj_df8d05b1b2ef188f7c8026d8fe4d3254, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54->m_type_description == NULL);
        frame_df8d05b1b2ef188f7c8026d8fe4d3254_54 = cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_df8d05b1b2ef188f7c8026d8fe4d3254_54);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_df8d05b1b2ef188f7c8026d8fe4d3254_54) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[443];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1704;
            type_description_2 = "o";
            goto frame_exception_exit_54;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__66___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1706;
            type_description_2 = "o";
            goto frame_exception_exit_54;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_df8d05b1b2ef188f7c8026d8fe4d3254_54);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_53;

        frame_exception_exit_54:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_df8d05b1b2ef188f7c8026d8fe4d3254_54);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_df8d05b1b2ef188f7c8026d8fe4d3254_54, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_df8d05b1b2ef188f7c8026d8fe4d3254_54->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_df8d05b1b2ef188f7c8026d8fe4d3254_54, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_df8d05b1b2ef188f7c8026d8fe4d3254_54,
            type_description_2,
            outline_52_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_df8d05b1b2ef188f7c8026d8fe4d3254_54 == cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54);
            cache_frame_df8d05b1b2ef188f7c8026d8fe4d3254_54 = NULL;
        }

        assertFrameObject(frame_df8d05b1b2ef188f7c8026d8fe4d3254_54);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_53;

        frame_no_exception_53:;
        goto skip_nested_handling_53;
        nested_frame_exit_53:;

        goto try_except_handler_161;
        skip_nested_handling_53:;
        {
            nuitka_bool tmp_condition_result_318;
            PyObject *tmp_cmp_expr_left_53;
            PyObject *tmp_cmp_expr_right_53;
            CHECK_OBJECT(tmp_class_creation_53__bases);
            tmp_cmp_expr_left_53 = tmp_class_creation_53__bases;
            CHECK_OBJECT(tmp_class_creation_53__bases_orig);
            tmp_cmp_expr_right_53 = tmp_class_creation_53__bases_orig;
            tmp_condition_result_318 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_53, tmp_cmp_expr_right_53);
            if (tmp_condition_result_318 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1691;

                goto try_except_handler_161;
            }
            if (tmp_condition_result_318 == NUITKA_BOOL_TRUE) {
                goto branch_yes_212;
            } else {
                goto branch_no_212;
            }
            assert(tmp_condition_result_318 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_212:;
        CHECK_OBJECT(tmp_class_creation_53__bases_orig);
        tmp_dictset_value = tmp_class_creation_53__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1691;

            goto try_except_handler_161;
        }
        branch_no_212:;
        {
            PyObject *tmp_assign_source_436;
            PyObject *tmp_called_value_106;
            PyObject *tmp_args_value_106;
            PyObject *tmp_tuple_element_210;
            PyObject *tmp_kwargs_value_106;
            CHECK_OBJECT(tmp_class_creation_53__metaclass);
            tmp_called_value_106 = tmp_class_creation_53__metaclass;
            tmp_tuple_element_210 = mod_consts[441];
            tmp_args_value_106 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_106, 0, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_53__bases);
            tmp_tuple_element_210 = tmp_class_creation_53__bases;
            PyTuple_SET_ITEM0(tmp_args_value_106, 1, tmp_tuple_element_210);
            tmp_tuple_element_210 = locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691;
            PyTuple_SET_ITEM0(tmp_args_value_106, 2, tmp_tuple_element_210);
            CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
            tmp_kwargs_value_106 = tmp_class_creation_53__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1691;
            tmp_assign_source_436 = CALL_FUNCTION(tmp_called_value_106, tmp_args_value_106, tmp_kwargs_value_106);
            Py_DECREF(tmp_args_value_106);
            if (tmp_assign_source_436 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1691;

                goto try_except_handler_161;
            }
            assert(outline_52_var___class__ == NULL);
            outline_52_var___class__ = tmp_assign_source_436;
        }
        CHECK_OBJECT(outline_52_var___class__);
        tmp_assign_source_435 = outline_52_var___class__;
        Py_INCREF(tmp_assign_source_435);
        goto try_return_handler_161;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_161:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691);
        locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691 = NULL;
        goto try_return_handler_160;
        // Exception handler code:
        try_except_handler_161:;
        exception_keeper_type_159 = exception_type;
        exception_keeper_value_159 = exception_value;
        exception_keeper_tb_159 = exception_tb;
        exception_keeper_lineno_159 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691);
        locals_xlwt$BIFFRecords$$$class__53_CalcModeRecord_1691 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_159;
        exception_value = exception_keeper_value_159;
        exception_tb = exception_keeper_tb_159;
        exception_lineno = exception_keeper_lineno_159;

        goto try_except_handler_160;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_160:;
        CHECK_OBJECT(outline_52_var___class__);
        Py_DECREF(outline_52_var___class__);
        outline_52_var___class__ = NULL;
        goto outline_result_53;
        // Exception handler code:
        try_except_handler_160:;
        exception_keeper_type_160 = exception_type;
        exception_keeper_value_160 = exception_value;
        exception_keeper_tb_160 = exception_tb;
        exception_keeper_lineno_160 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_160;
        exception_value = exception_keeper_value_160;
        exception_tb = exception_keeper_tb_160;
        exception_lineno = exception_keeper_lineno_160;

        goto outline_exception_53;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_53:;
        exception_lineno = 1691;
        goto try_except_handler_159;
        outline_result_53:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[441], tmp_assign_source_435);
    }
    goto try_end_55;
    // Exception handler code:
    try_except_handler_159:;
    exception_keeper_type_161 = exception_type;
    exception_keeper_value_161 = exception_value;
    exception_keeper_tb_161 = exception_tb;
    exception_keeper_lineno_161 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_53__bases_orig);
    tmp_class_creation_53__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_53__bases);
    tmp_class_creation_53__bases = NULL;
    Py_XDECREF(tmp_class_creation_53__class_decl_dict);
    tmp_class_creation_53__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_53__metaclass);
    tmp_class_creation_53__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_53__prepared);
    tmp_class_creation_53__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_161;
    exception_value = exception_keeper_value_161;
    exception_tb = exception_keeper_tb_161;
    exception_lineno = exception_keeper_lineno_161;

    goto frame_exception_exit_1;
    // End of try:
    try_end_55:;
    CHECK_OBJECT(tmp_class_creation_53__bases_orig);
    Py_DECREF(tmp_class_creation_53__bases_orig);
    tmp_class_creation_53__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_53__bases);
    Py_DECREF(tmp_class_creation_53__bases);
    tmp_class_creation_53__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_53__class_decl_dict);
    Py_DECREF(tmp_class_creation_53__class_decl_dict);
    tmp_class_creation_53__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_53__metaclass);
    Py_DECREF(tmp_class_creation_53__metaclass);
    tmp_class_creation_53__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_53__prepared);
    Py_DECREF(tmp_class_creation_53__prepared);
    tmp_class_creation_53__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_437;
        PyObject *tmp_tuple_element_211;
        tmp_tuple_element_211 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_211 == NULL)) {
            tmp_tuple_element_211 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_211 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        tmp_assign_source_437 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_437, 0, tmp_tuple_element_211);
        assert(tmp_class_creation_54__bases_orig == NULL);
        tmp_class_creation_54__bases_orig = tmp_assign_source_437;
    }
    {
        PyObject *tmp_assign_source_438;
        PyObject *tmp_dircall_arg1_54;
        CHECK_OBJECT(tmp_class_creation_54__bases_orig);
        tmp_dircall_arg1_54 = tmp_class_creation_54__bases_orig;
        Py_INCREF(tmp_dircall_arg1_54);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_54};
            tmp_assign_source_438 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_438 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        assert(tmp_class_creation_54__bases == NULL);
        tmp_class_creation_54__bases = tmp_assign_source_438;
    }
    {
        PyObject *tmp_assign_source_439;
        tmp_assign_source_439 = PyDict_New();
        assert(tmp_class_creation_54__class_decl_dict == NULL);
        tmp_class_creation_54__class_decl_dict = tmp_assign_source_439;
    }
    {
        PyObject *tmp_assign_source_440;
        PyObject *tmp_metaclass_value_54;
        bool tmp_condition_result_319;
        PyObject *tmp_key_value_160;
        PyObject *tmp_dict_arg_value_160;
        PyObject *tmp_dict_arg_value_161;
        PyObject *tmp_key_value_161;
        nuitka_bool tmp_condition_result_320;
        int tmp_truth_name_54;
        PyObject *tmp_type_arg_107;
        PyObject *tmp_expression_value_266;
        PyObject *tmp_subscript_value_54;
        PyObject *tmp_bases_value_54;
        tmp_key_value_160 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_160 = tmp_class_creation_54__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_160, tmp_key_value_160);
        assert(!(tmp_res == -1));
        tmp_condition_result_319 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_319 != false) {
            goto condexpr_true_107;
        } else {
            goto condexpr_false_107;
        }
        condexpr_true_107:;
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_161 = tmp_class_creation_54__class_decl_dict;
        tmp_key_value_161 = mod_consts[205];
        tmp_metaclass_value_54 = DICT_GET_ITEM0(tmp_dict_arg_value_161, tmp_key_value_161);
        if (tmp_metaclass_value_54 == NULL) {
            tmp_metaclass_value_54 = Py_None;
        }
        assert(!(tmp_metaclass_value_54 == NULL));
        Py_INCREF(tmp_metaclass_value_54);
        goto condexpr_end_107;
        condexpr_false_107:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_truth_name_54 = CHECK_IF_TRUE(tmp_class_creation_54__bases);
        if (tmp_truth_name_54 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        tmp_condition_result_320 = tmp_truth_name_54 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_320 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_108;
        } else {
            goto condexpr_false_108;
        }
        condexpr_true_108:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_expression_value_266 = tmp_class_creation_54__bases;
        tmp_subscript_value_54 = mod_consts[4];
        tmp_type_arg_107 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_266, tmp_subscript_value_54, 0);
        if (tmp_type_arg_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        tmp_metaclass_value_54 = BUILTIN_TYPE1(tmp_type_arg_107);
        Py_DECREF(tmp_type_arg_107);
        if (tmp_metaclass_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        goto condexpr_end_108;
        condexpr_false_108:;
        tmp_metaclass_value_54 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_54);
        condexpr_end_108:;
        condexpr_end_107:;
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_bases_value_54 = tmp_class_creation_54__bases;
        tmp_assign_source_440 = SELECT_METACLASS(tmp_metaclass_value_54, tmp_bases_value_54);
        Py_DECREF(tmp_metaclass_value_54);
        if (tmp_assign_source_440 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        assert(tmp_class_creation_54__metaclass == NULL);
        tmp_class_creation_54__metaclass = tmp_assign_source_440;
    }
    {
        bool tmp_condition_result_321;
        PyObject *tmp_key_value_162;
        PyObject *tmp_dict_arg_value_162;
        tmp_key_value_162 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_dict_arg_value_162 = tmp_class_creation_54__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_162, tmp_key_value_162);
        assert(!(tmp_res == -1));
        tmp_condition_result_321 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_321 != false) {
            goto branch_yes_213;
        } else {
            goto branch_no_213;
        }
    }
    branch_yes_213:;
    CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_54__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1710;

        goto try_except_handler_162;
    }
    branch_no_213:;
    {
        nuitka_bool tmp_condition_result_322;
        PyObject *tmp_expression_value_267;
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_expression_value_267 = tmp_class_creation_54__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_267, mod_consts[206]);
        tmp_condition_result_322 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_322 == NUITKA_BOOL_TRUE) {
            goto branch_yes_214;
        } else {
            goto branch_no_214;
        }
    }
    branch_yes_214:;
    {
        PyObject *tmp_assign_source_441;
        PyObject *tmp_called_value_107;
        PyObject *tmp_expression_value_268;
        PyObject *tmp_args_value_107;
        PyObject *tmp_tuple_element_212;
        PyObject *tmp_kwargs_value_107;
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_expression_value_268 = tmp_class_creation_54__metaclass;
        tmp_called_value_107 = LOOKUP_ATTRIBUTE(tmp_expression_value_268, mod_consts[206]);
        if (tmp_called_value_107 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        tmp_tuple_element_212 = mod_consts[445];
        tmp_args_value_107 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_107, 0, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_54__bases);
        tmp_tuple_element_212 = tmp_class_creation_54__bases;
        PyTuple_SET_ITEM0(tmp_args_value_107, 1, tmp_tuple_element_212);
        CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
        tmp_kwargs_value_107 = tmp_class_creation_54__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1710;
        tmp_assign_source_441 = CALL_FUNCTION(tmp_called_value_107, tmp_args_value_107, tmp_kwargs_value_107);
        Py_DECREF(tmp_called_value_107);
        Py_DECREF(tmp_args_value_107);
        if (tmp_assign_source_441 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        assert(tmp_class_creation_54__prepared == NULL);
        tmp_class_creation_54__prepared = tmp_assign_source_441;
    }
    {
        bool tmp_condition_result_323;
        PyObject *tmp_operand_value_54;
        PyObject *tmp_expression_value_269;
        CHECK_OBJECT(tmp_class_creation_54__prepared);
        tmp_expression_value_269 = tmp_class_creation_54__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_269, mod_consts[208]);
        tmp_operand_value_54 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_54);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        tmp_condition_result_323 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_323 != false) {
            goto branch_yes_215;
        } else {
            goto branch_no_215;
        }
    }
    branch_yes_215:;
    {
        PyObject *tmp_raise_type_54;
        PyObject *tmp_raise_value_54;
        PyObject *tmp_left_value_54;
        PyObject *tmp_right_value_54;
        PyObject *tmp_tuple_element_213;
        PyObject *tmp_getattr_target_54;
        PyObject *tmp_getattr_attr_54;
        PyObject *tmp_getattr_default_54;
        tmp_raise_type_54 = PyExc_TypeError;
        tmp_left_value_54 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_54__metaclass);
        tmp_getattr_target_54 = tmp_class_creation_54__metaclass;
        tmp_getattr_attr_54 = mod_consts[210];
        tmp_getattr_default_54 = mod_consts[211];
        tmp_tuple_element_213 = BUILTIN_GETATTR(tmp_getattr_target_54, tmp_getattr_attr_54, tmp_getattr_default_54);
        if (tmp_tuple_element_213 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        tmp_right_value_54 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_270;
            PyObject *tmp_type_arg_108;
            PyTuple_SET_ITEM(tmp_right_value_54, 0, tmp_tuple_element_213);
            CHECK_OBJECT(tmp_class_creation_54__prepared);
            tmp_type_arg_108 = tmp_class_creation_54__prepared;
            tmp_expression_value_270 = BUILTIN_TYPE1(tmp_type_arg_108);
            assert(!(tmp_expression_value_270 == NULL));
            tmp_tuple_element_213 = LOOKUP_ATTRIBUTE(tmp_expression_value_270, mod_consts[210]);
            Py_DECREF(tmp_expression_value_270);
            if (tmp_tuple_element_213 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1710;

                goto tuple_build_exception_54;
            }
            PyTuple_SET_ITEM(tmp_right_value_54, 1, tmp_tuple_element_213);
        }
        goto tuple_build_noexception_54;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_54:;
        Py_DECREF(tmp_right_value_54);
        goto try_except_handler_162;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_54:;
        tmp_raise_value_54 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_54, tmp_right_value_54);
        Py_DECREF(tmp_right_value_54);
        if (tmp_raise_value_54 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_162;
        }
        exception_type = tmp_raise_type_54;
        Py_INCREF(tmp_raise_type_54);
        exception_value = tmp_raise_value_54;
        exception_lineno = 1710;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_162;
    }
    branch_no_215:;
    goto branch_end_214;
    branch_no_214:;
    {
        PyObject *tmp_assign_source_442;
        tmp_assign_source_442 = PyDict_New();
        assert(tmp_class_creation_54__prepared == NULL);
        tmp_class_creation_54__prepared = tmp_assign_source_442;
    }
    branch_end_214:;
    {
        PyObject *tmp_assign_source_443;
        {
            PyObject *tmp_set_locals_54;
            CHECK_OBJECT(tmp_class_creation_54__prepared);
            tmp_set_locals_54 = tmp_class_creation_54__prepared;
            locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710 = tmp_set_locals_54;
            Py_INCREF(tmp_set_locals_54);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_164;
        }
        tmp_dictset_value = mod_consts[446];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_164;
        }
        tmp_dictset_value = mod_consts[445];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_164;
        }
        if (isFrameUnusable(cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55)) {
            Py_XDECREF(cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55 = MAKE_FUNCTION_FRAME(codeobj_c91fc6ae200aa2c49184944ca23ff1cd, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55->m_type_description == NULL);
        frame_c91fc6ae200aa2c49184944ca23ff1cd_55 = cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c91fc6ae200aa2c49184944ca23ff1cd_55);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c91fc6ae200aa2c49184944ca23ff1cd_55) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[122];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1722;
            type_description_2 = "o";
            goto frame_exception_exit_55;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__67___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1724;
            type_description_2 = "o";
            goto frame_exception_exit_55;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c91fc6ae200aa2c49184944ca23ff1cd_55);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_54;

        frame_exception_exit_55:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c91fc6ae200aa2c49184944ca23ff1cd_55);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c91fc6ae200aa2c49184944ca23ff1cd_55, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c91fc6ae200aa2c49184944ca23ff1cd_55->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c91fc6ae200aa2c49184944ca23ff1cd_55, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c91fc6ae200aa2c49184944ca23ff1cd_55,
            type_description_2,
            outline_53_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c91fc6ae200aa2c49184944ca23ff1cd_55 == cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55);
            cache_frame_c91fc6ae200aa2c49184944ca23ff1cd_55 = NULL;
        }

        assertFrameObject(frame_c91fc6ae200aa2c49184944ca23ff1cd_55);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_54;

        frame_no_exception_54:;
        goto skip_nested_handling_54;
        nested_frame_exit_54:;

        goto try_except_handler_164;
        skip_nested_handling_54:;
        {
            nuitka_bool tmp_condition_result_324;
            PyObject *tmp_cmp_expr_left_54;
            PyObject *tmp_cmp_expr_right_54;
            CHECK_OBJECT(tmp_class_creation_54__bases);
            tmp_cmp_expr_left_54 = tmp_class_creation_54__bases;
            CHECK_OBJECT(tmp_class_creation_54__bases_orig);
            tmp_cmp_expr_right_54 = tmp_class_creation_54__bases_orig;
            tmp_condition_result_324 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_54, tmp_cmp_expr_right_54);
            if (tmp_condition_result_324 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1710;

                goto try_except_handler_164;
            }
            if (tmp_condition_result_324 == NUITKA_BOOL_TRUE) {
                goto branch_yes_216;
            } else {
                goto branch_no_216;
            }
            assert(tmp_condition_result_324 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_216:;
        CHECK_OBJECT(tmp_class_creation_54__bases_orig);
        tmp_dictset_value = tmp_class_creation_54__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1710;

            goto try_except_handler_164;
        }
        branch_no_216:;
        {
            PyObject *tmp_assign_source_444;
            PyObject *tmp_called_value_108;
            PyObject *tmp_args_value_108;
            PyObject *tmp_tuple_element_214;
            PyObject *tmp_kwargs_value_108;
            CHECK_OBJECT(tmp_class_creation_54__metaclass);
            tmp_called_value_108 = tmp_class_creation_54__metaclass;
            tmp_tuple_element_214 = mod_consts[445];
            tmp_args_value_108 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_108, 0, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_54__bases);
            tmp_tuple_element_214 = tmp_class_creation_54__bases;
            PyTuple_SET_ITEM0(tmp_args_value_108, 1, tmp_tuple_element_214);
            tmp_tuple_element_214 = locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710;
            PyTuple_SET_ITEM0(tmp_args_value_108, 2, tmp_tuple_element_214);
            CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
            tmp_kwargs_value_108 = tmp_class_creation_54__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1710;
            tmp_assign_source_444 = CALL_FUNCTION(tmp_called_value_108, tmp_args_value_108, tmp_kwargs_value_108);
            Py_DECREF(tmp_args_value_108);
            if (tmp_assign_source_444 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1710;

                goto try_except_handler_164;
            }
            assert(outline_53_var___class__ == NULL);
            outline_53_var___class__ = tmp_assign_source_444;
        }
        CHECK_OBJECT(outline_53_var___class__);
        tmp_assign_source_443 = outline_53_var___class__;
        Py_INCREF(tmp_assign_source_443);
        goto try_return_handler_164;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_164:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710);
        locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710 = NULL;
        goto try_return_handler_163;
        // Exception handler code:
        try_except_handler_164:;
        exception_keeper_type_162 = exception_type;
        exception_keeper_value_162 = exception_value;
        exception_keeper_tb_162 = exception_tb;
        exception_keeper_lineno_162 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710);
        locals_xlwt$BIFFRecords$$$class__54_CalcCountRecord_1710 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_162;
        exception_value = exception_keeper_value_162;
        exception_tb = exception_keeper_tb_162;
        exception_lineno = exception_keeper_lineno_162;

        goto try_except_handler_163;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_163:;
        CHECK_OBJECT(outline_53_var___class__);
        Py_DECREF(outline_53_var___class__);
        outline_53_var___class__ = NULL;
        goto outline_result_54;
        // Exception handler code:
        try_except_handler_163:;
        exception_keeper_type_163 = exception_type;
        exception_keeper_value_163 = exception_value;
        exception_keeper_tb_163 = exception_tb;
        exception_keeper_lineno_163 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_163;
        exception_value = exception_keeper_value_163;
        exception_tb = exception_keeper_tb_163;
        exception_lineno = exception_keeper_lineno_163;

        goto outline_exception_54;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_54:;
        exception_lineno = 1710;
        goto try_except_handler_162;
        outline_result_54:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[445], tmp_assign_source_443);
    }
    goto try_end_56;
    // Exception handler code:
    try_except_handler_162:;
    exception_keeper_type_164 = exception_type;
    exception_keeper_value_164 = exception_value;
    exception_keeper_tb_164 = exception_tb;
    exception_keeper_lineno_164 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_54__bases_orig);
    tmp_class_creation_54__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_54__bases);
    tmp_class_creation_54__bases = NULL;
    Py_XDECREF(tmp_class_creation_54__class_decl_dict);
    tmp_class_creation_54__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_54__metaclass);
    tmp_class_creation_54__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_54__prepared);
    tmp_class_creation_54__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_164;
    exception_value = exception_keeper_value_164;
    exception_tb = exception_keeper_tb_164;
    exception_lineno = exception_keeper_lineno_164;

    goto frame_exception_exit_1;
    // End of try:
    try_end_56:;
    CHECK_OBJECT(tmp_class_creation_54__bases_orig);
    Py_DECREF(tmp_class_creation_54__bases_orig);
    tmp_class_creation_54__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_54__bases);
    Py_DECREF(tmp_class_creation_54__bases);
    tmp_class_creation_54__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_54__class_decl_dict);
    Py_DECREF(tmp_class_creation_54__class_decl_dict);
    tmp_class_creation_54__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_54__metaclass);
    Py_DECREF(tmp_class_creation_54__metaclass);
    tmp_class_creation_54__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_54__prepared);
    Py_DECREF(tmp_class_creation_54__prepared);
    tmp_class_creation_54__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_445;
        PyObject *tmp_tuple_element_215;
        tmp_tuple_element_215 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_215 == NULL)) {
            tmp_tuple_element_215 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_215 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        tmp_assign_source_445 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_445, 0, tmp_tuple_element_215);
        assert(tmp_class_creation_55__bases_orig == NULL);
        tmp_class_creation_55__bases_orig = tmp_assign_source_445;
    }
    {
        PyObject *tmp_assign_source_446;
        PyObject *tmp_dircall_arg1_55;
        CHECK_OBJECT(tmp_class_creation_55__bases_orig);
        tmp_dircall_arg1_55 = tmp_class_creation_55__bases_orig;
        Py_INCREF(tmp_dircall_arg1_55);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_55};
            tmp_assign_source_446 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_446 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        assert(tmp_class_creation_55__bases == NULL);
        tmp_class_creation_55__bases = tmp_assign_source_446;
    }
    {
        PyObject *tmp_assign_source_447;
        tmp_assign_source_447 = PyDict_New();
        assert(tmp_class_creation_55__class_decl_dict == NULL);
        tmp_class_creation_55__class_decl_dict = tmp_assign_source_447;
    }
    {
        PyObject *tmp_assign_source_448;
        PyObject *tmp_metaclass_value_55;
        bool tmp_condition_result_325;
        PyObject *tmp_key_value_163;
        PyObject *tmp_dict_arg_value_163;
        PyObject *tmp_dict_arg_value_164;
        PyObject *tmp_key_value_164;
        nuitka_bool tmp_condition_result_326;
        int tmp_truth_name_55;
        PyObject *tmp_type_arg_109;
        PyObject *tmp_expression_value_271;
        PyObject *tmp_subscript_value_55;
        PyObject *tmp_bases_value_55;
        tmp_key_value_163 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_163 = tmp_class_creation_55__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_163, tmp_key_value_163);
        assert(!(tmp_res == -1));
        tmp_condition_result_325 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_325 != false) {
            goto condexpr_true_109;
        } else {
            goto condexpr_false_109;
        }
        condexpr_true_109:;
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_164 = tmp_class_creation_55__class_decl_dict;
        tmp_key_value_164 = mod_consts[205];
        tmp_metaclass_value_55 = DICT_GET_ITEM0(tmp_dict_arg_value_164, tmp_key_value_164);
        if (tmp_metaclass_value_55 == NULL) {
            tmp_metaclass_value_55 = Py_None;
        }
        assert(!(tmp_metaclass_value_55 == NULL));
        Py_INCREF(tmp_metaclass_value_55);
        goto condexpr_end_109;
        condexpr_false_109:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_truth_name_55 = CHECK_IF_TRUE(tmp_class_creation_55__bases);
        if (tmp_truth_name_55 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        tmp_condition_result_326 = tmp_truth_name_55 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_326 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_110;
        } else {
            goto condexpr_false_110;
        }
        condexpr_true_110:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_expression_value_271 = tmp_class_creation_55__bases;
        tmp_subscript_value_55 = mod_consts[4];
        tmp_type_arg_109 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_271, tmp_subscript_value_55, 0);
        if (tmp_type_arg_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        tmp_metaclass_value_55 = BUILTIN_TYPE1(tmp_type_arg_109);
        Py_DECREF(tmp_type_arg_109);
        if (tmp_metaclass_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        goto condexpr_end_110;
        condexpr_false_110:;
        tmp_metaclass_value_55 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_55);
        condexpr_end_110:;
        condexpr_end_109:;
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_bases_value_55 = tmp_class_creation_55__bases;
        tmp_assign_source_448 = SELECT_METACLASS(tmp_metaclass_value_55, tmp_bases_value_55);
        Py_DECREF(tmp_metaclass_value_55);
        if (tmp_assign_source_448 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        assert(tmp_class_creation_55__metaclass == NULL);
        tmp_class_creation_55__metaclass = tmp_assign_source_448;
    }
    {
        bool tmp_condition_result_327;
        PyObject *tmp_key_value_165;
        PyObject *tmp_dict_arg_value_165;
        tmp_key_value_165 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_dict_arg_value_165 = tmp_class_creation_55__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_165, tmp_key_value_165);
        assert(!(tmp_res == -1));
        tmp_condition_result_327 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_327 != false) {
            goto branch_yes_217;
        } else {
            goto branch_no_217;
        }
    }
    branch_yes_217:;
    CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_55__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1727;

        goto try_except_handler_165;
    }
    branch_no_217:;
    {
        nuitka_bool tmp_condition_result_328;
        PyObject *tmp_expression_value_272;
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_expression_value_272 = tmp_class_creation_55__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_272, mod_consts[206]);
        tmp_condition_result_328 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_328 == NUITKA_BOOL_TRUE) {
            goto branch_yes_218;
        } else {
            goto branch_no_218;
        }
    }
    branch_yes_218:;
    {
        PyObject *tmp_assign_source_449;
        PyObject *tmp_called_value_109;
        PyObject *tmp_expression_value_273;
        PyObject *tmp_args_value_109;
        PyObject *tmp_tuple_element_216;
        PyObject *tmp_kwargs_value_109;
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_expression_value_273 = tmp_class_creation_55__metaclass;
        tmp_called_value_109 = LOOKUP_ATTRIBUTE(tmp_expression_value_273, mod_consts[206]);
        if (tmp_called_value_109 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        tmp_tuple_element_216 = mod_consts[448];
        tmp_args_value_109 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_109, 0, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_55__bases);
        tmp_tuple_element_216 = tmp_class_creation_55__bases;
        PyTuple_SET_ITEM0(tmp_args_value_109, 1, tmp_tuple_element_216);
        CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
        tmp_kwargs_value_109 = tmp_class_creation_55__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1727;
        tmp_assign_source_449 = CALL_FUNCTION(tmp_called_value_109, tmp_args_value_109, tmp_kwargs_value_109);
        Py_DECREF(tmp_called_value_109);
        Py_DECREF(tmp_args_value_109);
        if (tmp_assign_source_449 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        assert(tmp_class_creation_55__prepared == NULL);
        tmp_class_creation_55__prepared = tmp_assign_source_449;
    }
    {
        bool tmp_condition_result_329;
        PyObject *tmp_operand_value_55;
        PyObject *tmp_expression_value_274;
        CHECK_OBJECT(tmp_class_creation_55__prepared);
        tmp_expression_value_274 = tmp_class_creation_55__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_274, mod_consts[208]);
        tmp_operand_value_55 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_55);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        tmp_condition_result_329 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_329 != false) {
            goto branch_yes_219;
        } else {
            goto branch_no_219;
        }
    }
    branch_yes_219:;
    {
        PyObject *tmp_raise_type_55;
        PyObject *tmp_raise_value_55;
        PyObject *tmp_left_value_55;
        PyObject *tmp_right_value_55;
        PyObject *tmp_tuple_element_217;
        PyObject *tmp_getattr_target_55;
        PyObject *tmp_getattr_attr_55;
        PyObject *tmp_getattr_default_55;
        tmp_raise_type_55 = PyExc_TypeError;
        tmp_left_value_55 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_55__metaclass);
        tmp_getattr_target_55 = tmp_class_creation_55__metaclass;
        tmp_getattr_attr_55 = mod_consts[210];
        tmp_getattr_default_55 = mod_consts[211];
        tmp_tuple_element_217 = BUILTIN_GETATTR(tmp_getattr_target_55, tmp_getattr_attr_55, tmp_getattr_default_55);
        if (tmp_tuple_element_217 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        tmp_right_value_55 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_275;
            PyObject *tmp_type_arg_110;
            PyTuple_SET_ITEM(tmp_right_value_55, 0, tmp_tuple_element_217);
            CHECK_OBJECT(tmp_class_creation_55__prepared);
            tmp_type_arg_110 = tmp_class_creation_55__prepared;
            tmp_expression_value_275 = BUILTIN_TYPE1(tmp_type_arg_110);
            assert(!(tmp_expression_value_275 == NULL));
            tmp_tuple_element_217 = LOOKUP_ATTRIBUTE(tmp_expression_value_275, mod_consts[210]);
            Py_DECREF(tmp_expression_value_275);
            if (tmp_tuple_element_217 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1727;

                goto tuple_build_exception_55;
            }
            PyTuple_SET_ITEM(tmp_right_value_55, 1, tmp_tuple_element_217);
        }
        goto tuple_build_noexception_55;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_55:;
        Py_DECREF(tmp_right_value_55);
        goto try_except_handler_165;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_55:;
        tmp_raise_value_55 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_55, tmp_right_value_55);
        Py_DECREF(tmp_right_value_55);
        if (tmp_raise_value_55 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_165;
        }
        exception_type = tmp_raise_type_55;
        Py_INCREF(tmp_raise_type_55);
        exception_value = tmp_raise_value_55;
        exception_lineno = 1727;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_165;
    }
    branch_no_219:;
    goto branch_end_218;
    branch_no_218:;
    {
        PyObject *tmp_assign_source_450;
        tmp_assign_source_450 = PyDict_New();
        assert(tmp_class_creation_55__prepared == NULL);
        tmp_class_creation_55__prepared = tmp_assign_source_450;
    }
    branch_end_218:;
    {
        PyObject *tmp_assign_source_451;
        {
            PyObject *tmp_set_locals_55;
            CHECK_OBJECT(tmp_class_creation_55__prepared);
            tmp_set_locals_55 = tmp_class_creation_55__prepared;
            locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727 = tmp_set_locals_55;
            Py_INCREF(tmp_set_locals_55);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_167;
        }
        tmp_dictset_value = mod_consts[449];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_167;
        }
        tmp_dictset_value = mod_consts[448];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_167;
        }
        if (isFrameUnusable(cache_frame_698264c1f95e7255beac586bba3e4976_56)) {
            Py_XDECREF(cache_frame_698264c1f95e7255beac586bba3e4976_56);

#if _DEBUG_REFCOUNTS
            if (cache_frame_698264c1f95e7255beac586bba3e4976_56 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_698264c1f95e7255beac586bba3e4976_56 = MAKE_FUNCTION_FRAME(codeobj_698264c1f95e7255beac586bba3e4976, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_698264c1f95e7255beac586bba3e4976_56->m_type_description == NULL);
        frame_698264c1f95e7255beac586bba3e4976_56 = cache_frame_698264c1f95e7255beac586bba3e4976_56;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_698264c1f95e7255beac586bba3e4976_56);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_698264c1f95e7255beac586bba3e4976_56) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[82];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1742;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__68___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1744;
            type_description_2 = "o";
            goto frame_exception_exit_56;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_698264c1f95e7255beac586bba3e4976_56);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_55;

        frame_exception_exit_56:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_698264c1f95e7255beac586bba3e4976_56);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_698264c1f95e7255beac586bba3e4976_56, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_698264c1f95e7255beac586bba3e4976_56->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_698264c1f95e7255beac586bba3e4976_56, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_698264c1f95e7255beac586bba3e4976_56,
            type_description_2,
            outline_54_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_698264c1f95e7255beac586bba3e4976_56 == cache_frame_698264c1f95e7255beac586bba3e4976_56) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_698264c1f95e7255beac586bba3e4976_56);
            cache_frame_698264c1f95e7255beac586bba3e4976_56 = NULL;
        }

        assertFrameObject(frame_698264c1f95e7255beac586bba3e4976_56);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_55;

        frame_no_exception_55:;
        goto skip_nested_handling_55;
        nested_frame_exit_55:;

        goto try_except_handler_167;
        skip_nested_handling_55:;
        {
            nuitka_bool tmp_condition_result_330;
            PyObject *tmp_cmp_expr_left_55;
            PyObject *tmp_cmp_expr_right_55;
            CHECK_OBJECT(tmp_class_creation_55__bases);
            tmp_cmp_expr_left_55 = tmp_class_creation_55__bases;
            CHECK_OBJECT(tmp_class_creation_55__bases_orig);
            tmp_cmp_expr_right_55 = tmp_class_creation_55__bases_orig;
            tmp_condition_result_330 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_55, tmp_cmp_expr_right_55);
            if (tmp_condition_result_330 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1727;

                goto try_except_handler_167;
            }
            if (tmp_condition_result_330 == NUITKA_BOOL_TRUE) {
                goto branch_yes_220;
            } else {
                goto branch_no_220;
            }
            assert(tmp_condition_result_330 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_220:;
        CHECK_OBJECT(tmp_class_creation_55__bases_orig);
        tmp_dictset_value = tmp_class_creation_55__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1727;

            goto try_except_handler_167;
        }
        branch_no_220:;
        {
            PyObject *tmp_assign_source_452;
            PyObject *tmp_called_value_110;
            PyObject *tmp_args_value_110;
            PyObject *tmp_tuple_element_218;
            PyObject *tmp_kwargs_value_110;
            CHECK_OBJECT(tmp_class_creation_55__metaclass);
            tmp_called_value_110 = tmp_class_creation_55__metaclass;
            tmp_tuple_element_218 = mod_consts[448];
            tmp_args_value_110 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_110, 0, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_55__bases);
            tmp_tuple_element_218 = tmp_class_creation_55__bases;
            PyTuple_SET_ITEM0(tmp_args_value_110, 1, tmp_tuple_element_218);
            tmp_tuple_element_218 = locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727;
            PyTuple_SET_ITEM0(tmp_args_value_110, 2, tmp_tuple_element_218);
            CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
            tmp_kwargs_value_110 = tmp_class_creation_55__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1727;
            tmp_assign_source_452 = CALL_FUNCTION(tmp_called_value_110, tmp_args_value_110, tmp_kwargs_value_110);
            Py_DECREF(tmp_args_value_110);
            if (tmp_assign_source_452 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1727;

                goto try_except_handler_167;
            }
            assert(outline_54_var___class__ == NULL);
            outline_54_var___class__ = tmp_assign_source_452;
        }
        CHECK_OBJECT(outline_54_var___class__);
        tmp_assign_source_451 = outline_54_var___class__;
        Py_INCREF(tmp_assign_source_451);
        goto try_return_handler_167;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_167:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727);
        locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727 = NULL;
        goto try_return_handler_166;
        // Exception handler code:
        try_except_handler_167:;
        exception_keeper_type_165 = exception_type;
        exception_keeper_value_165 = exception_value;
        exception_keeper_tb_165 = exception_tb;
        exception_keeper_lineno_165 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727);
        locals_xlwt$BIFFRecords$$$class__55_RefModeRecord_1727 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_165;
        exception_value = exception_keeper_value_165;
        exception_tb = exception_keeper_tb_165;
        exception_lineno = exception_keeper_lineno_165;

        goto try_except_handler_166;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_166:;
        CHECK_OBJECT(outline_54_var___class__);
        Py_DECREF(outline_54_var___class__);
        outline_54_var___class__ = NULL;
        goto outline_result_55;
        // Exception handler code:
        try_except_handler_166:;
        exception_keeper_type_166 = exception_type;
        exception_keeper_value_166 = exception_value;
        exception_keeper_tb_166 = exception_tb;
        exception_keeper_lineno_166 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_166;
        exception_value = exception_keeper_value_166;
        exception_tb = exception_keeper_tb_166;
        exception_lineno = exception_keeper_lineno_166;

        goto outline_exception_55;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_55:;
        exception_lineno = 1727;
        goto try_except_handler_165;
        outline_result_55:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[448], tmp_assign_source_451);
    }
    goto try_end_57;
    // Exception handler code:
    try_except_handler_165:;
    exception_keeper_type_167 = exception_type;
    exception_keeper_value_167 = exception_value;
    exception_keeper_tb_167 = exception_tb;
    exception_keeper_lineno_167 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_55__bases_orig);
    tmp_class_creation_55__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_55__bases);
    tmp_class_creation_55__bases = NULL;
    Py_XDECREF(tmp_class_creation_55__class_decl_dict);
    tmp_class_creation_55__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_55__metaclass);
    tmp_class_creation_55__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_55__prepared);
    tmp_class_creation_55__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_167;
    exception_value = exception_keeper_value_167;
    exception_tb = exception_keeper_tb_167;
    exception_lineno = exception_keeper_lineno_167;

    goto frame_exception_exit_1;
    // End of try:
    try_end_57:;
    CHECK_OBJECT(tmp_class_creation_55__bases_orig);
    Py_DECREF(tmp_class_creation_55__bases_orig);
    tmp_class_creation_55__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_55__bases);
    Py_DECREF(tmp_class_creation_55__bases);
    tmp_class_creation_55__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_55__class_decl_dict);
    Py_DECREF(tmp_class_creation_55__class_decl_dict);
    tmp_class_creation_55__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_55__metaclass);
    Py_DECREF(tmp_class_creation_55__metaclass);
    tmp_class_creation_55__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_55__prepared);
    Py_DECREF(tmp_class_creation_55__prepared);
    tmp_class_creation_55__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_453;
        PyObject *tmp_tuple_element_219;
        tmp_tuple_element_219 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_219 == NULL)) {
            tmp_tuple_element_219 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_219 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        tmp_assign_source_453 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_453, 0, tmp_tuple_element_219);
        assert(tmp_class_creation_56__bases_orig == NULL);
        tmp_class_creation_56__bases_orig = tmp_assign_source_453;
    }
    {
        PyObject *tmp_assign_source_454;
        PyObject *tmp_dircall_arg1_56;
        CHECK_OBJECT(tmp_class_creation_56__bases_orig);
        tmp_dircall_arg1_56 = tmp_class_creation_56__bases_orig;
        Py_INCREF(tmp_dircall_arg1_56);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_56};
            tmp_assign_source_454 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_454 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        assert(tmp_class_creation_56__bases == NULL);
        tmp_class_creation_56__bases = tmp_assign_source_454;
    }
    {
        PyObject *tmp_assign_source_455;
        tmp_assign_source_455 = PyDict_New();
        assert(tmp_class_creation_56__class_decl_dict == NULL);
        tmp_class_creation_56__class_decl_dict = tmp_assign_source_455;
    }
    {
        PyObject *tmp_assign_source_456;
        PyObject *tmp_metaclass_value_56;
        bool tmp_condition_result_331;
        PyObject *tmp_key_value_166;
        PyObject *tmp_dict_arg_value_166;
        PyObject *tmp_dict_arg_value_167;
        PyObject *tmp_key_value_167;
        nuitka_bool tmp_condition_result_332;
        int tmp_truth_name_56;
        PyObject *tmp_type_arg_111;
        PyObject *tmp_expression_value_276;
        PyObject *tmp_subscript_value_56;
        PyObject *tmp_bases_value_56;
        tmp_key_value_166 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_166 = tmp_class_creation_56__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_166, tmp_key_value_166);
        assert(!(tmp_res == -1));
        tmp_condition_result_331 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_331 != false) {
            goto condexpr_true_111;
        } else {
            goto condexpr_false_111;
        }
        condexpr_true_111:;
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_167 = tmp_class_creation_56__class_decl_dict;
        tmp_key_value_167 = mod_consts[205];
        tmp_metaclass_value_56 = DICT_GET_ITEM0(tmp_dict_arg_value_167, tmp_key_value_167);
        if (tmp_metaclass_value_56 == NULL) {
            tmp_metaclass_value_56 = Py_None;
        }
        assert(!(tmp_metaclass_value_56 == NULL));
        Py_INCREF(tmp_metaclass_value_56);
        goto condexpr_end_111;
        condexpr_false_111:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_truth_name_56 = CHECK_IF_TRUE(tmp_class_creation_56__bases);
        if (tmp_truth_name_56 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        tmp_condition_result_332 = tmp_truth_name_56 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_332 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_112;
        } else {
            goto condexpr_false_112;
        }
        condexpr_true_112:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_expression_value_276 = tmp_class_creation_56__bases;
        tmp_subscript_value_56 = mod_consts[4];
        tmp_type_arg_111 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_276, tmp_subscript_value_56, 0);
        if (tmp_type_arg_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        tmp_metaclass_value_56 = BUILTIN_TYPE1(tmp_type_arg_111);
        Py_DECREF(tmp_type_arg_111);
        if (tmp_metaclass_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        goto condexpr_end_112;
        condexpr_false_112:;
        tmp_metaclass_value_56 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_56);
        condexpr_end_112:;
        condexpr_end_111:;
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_bases_value_56 = tmp_class_creation_56__bases;
        tmp_assign_source_456 = SELECT_METACLASS(tmp_metaclass_value_56, tmp_bases_value_56);
        Py_DECREF(tmp_metaclass_value_56);
        if (tmp_assign_source_456 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        assert(tmp_class_creation_56__metaclass == NULL);
        tmp_class_creation_56__metaclass = tmp_assign_source_456;
    }
    {
        bool tmp_condition_result_333;
        PyObject *tmp_key_value_168;
        PyObject *tmp_dict_arg_value_168;
        tmp_key_value_168 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_dict_arg_value_168 = tmp_class_creation_56__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_168, tmp_key_value_168);
        assert(!(tmp_res == -1));
        tmp_condition_result_333 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_333 != false) {
            goto branch_yes_221;
        } else {
            goto branch_no_221;
        }
    }
    branch_yes_221:;
    CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_56__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1747;

        goto try_except_handler_168;
    }
    branch_no_221:;
    {
        nuitka_bool tmp_condition_result_334;
        PyObject *tmp_expression_value_277;
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_expression_value_277 = tmp_class_creation_56__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_277, mod_consts[206]);
        tmp_condition_result_334 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_334 == NUITKA_BOOL_TRUE) {
            goto branch_yes_222;
        } else {
            goto branch_no_222;
        }
    }
    branch_yes_222:;
    {
        PyObject *tmp_assign_source_457;
        PyObject *tmp_called_value_111;
        PyObject *tmp_expression_value_278;
        PyObject *tmp_args_value_111;
        PyObject *tmp_tuple_element_220;
        PyObject *tmp_kwargs_value_111;
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_expression_value_278 = tmp_class_creation_56__metaclass;
        tmp_called_value_111 = LOOKUP_ATTRIBUTE(tmp_expression_value_278, mod_consts[206]);
        if (tmp_called_value_111 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        tmp_tuple_element_220 = mod_consts[451];
        tmp_args_value_111 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_111, 0, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_56__bases);
        tmp_tuple_element_220 = tmp_class_creation_56__bases;
        PyTuple_SET_ITEM0(tmp_args_value_111, 1, tmp_tuple_element_220);
        CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
        tmp_kwargs_value_111 = tmp_class_creation_56__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1747;
        tmp_assign_source_457 = CALL_FUNCTION(tmp_called_value_111, tmp_args_value_111, tmp_kwargs_value_111);
        Py_DECREF(tmp_called_value_111);
        Py_DECREF(tmp_args_value_111);
        if (tmp_assign_source_457 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        assert(tmp_class_creation_56__prepared == NULL);
        tmp_class_creation_56__prepared = tmp_assign_source_457;
    }
    {
        bool tmp_condition_result_335;
        PyObject *tmp_operand_value_56;
        PyObject *tmp_expression_value_279;
        CHECK_OBJECT(tmp_class_creation_56__prepared);
        tmp_expression_value_279 = tmp_class_creation_56__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_279, mod_consts[208]);
        tmp_operand_value_56 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_56);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        tmp_condition_result_335 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_335 != false) {
            goto branch_yes_223;
        } else {
            goto branch_no_223;
        }
    }
    branch_yes_223:;
    {
        PyObject *tmp_raise_type_56;
        PyObject *tmp_raise_value_56;
        PyObject *tmp_left_value_56;
        PyObject *tmp_right_value_56;
        PyObject *tmp_tuple_element_221;
        PyObject *tmp_getattr_target_56;
        PyObject *tmp_getattr_attr_56;
        PyObject *tmp_getattr_default_56;
        tmp_raise_type_56 = PyExc_TypeError;
        tmp_left_value_56 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_56__metaclass);
        tmp_getattr_target_56 = tmp_class_creation_56__metaclass;
        tmp_getattr_attr_56 = mod_consts[210];
        tmp_getattr_default_56 = mod_consts[211];
        tmp_tuple_element_221 = BUILTIN_GETATTR(tmp_getattr_target_56, tmp_getattr_attr_56, tmp_getattr_default_56);
        if (tmp_tuple_element_221 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        tmp_right_value_56 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_280;
            PyObject *tmp_type_arg_112;
            PyTuple_SET_ITEM(tmp_right_value_56, 0, tmp_tuple_element_221);
            CHECK_OBJECT(tmp_class_creation_56__prepared);
            tmp_type_arg_112 = tmp_class_creation_56__prepared;
            tmp_expression_value_280 = BUILTIN_TYPE1(tmp_type_arg_112);
            assert(!(tmp_expression_value_280 == NULL));
            tmp_tuple_element_221 = LOOKUP_ATTRIBUTE(tmp_expression_value_280, mod_consts[210]);
            Py_DECREF(tmp_expression_value_280);
            if (tmp_tuple_element_221 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1747;

                goto tuple_build_exception_56;
            }
            PyTuple_SET_ITEM(tmp_right_value_56, 1, tmp_tuple_element_221);
        }
        goto tuple_build_noexception_56;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_56:;
        Py_DECREF(tmp_right_value_56);
        goto try_except_handler_168;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_56:;
        tmp_raise_value_56 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_56, tmp_right_value_56);
        Py_DECREF(tmp_right_value_56);
        if (tmp_raise_value_56 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_168;
        }
        exception_type = tmp_raise_type_56;
        Py_INCREF(tmp_raise_type_56);
        exception_value = tmp_raise_value_56;
        exception_lineno = 1747;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_168;
    }
    branch_no_223:;
    goto branch_end_222;
    branch_no_222:;
    {
        PyObject *tmp_assign_source_458;
        tmp_assign_source_458 = PyDict_New();
        assert(tmp_class_creation_56__prepared == NULL);
        tmp_class_creation_56__prepared = tmp_assign_source_458;
    }
    branch_end_222:;
    {
        PyObject *tmp_assign_source_459;
        {
            PyObject *tmp_set_locals_56;
            CHECK_OBJECT(tmp_class_creation_56__prepared);
            tmp_set_locals_56 = tmp_class_creation_56__prepared;
            locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747 = tmp_set_locals_56;
            Py_INCREF(tmp_set_locals_56);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_170;
        }
        tmp_dictset_value = mod_consts[452];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_170;
        }
        tmp_dictset_value = mod_consts[451];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_170;
        }
        if (isFrameUnusable(cache_frame_8987c5e333df8307c65806c9e7ea5ece_57)) {
            Py_XDECREF(cache_frame_8987c5e333df8307c65806c9e7ea5ece_57);

#if _DEBUG_REFCOUNTS
            if (cache_frame_8987c5e333df8307c65806c9e7ea5ece_57 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_8987c5e333df8307c65806c9e7ea5ece_57 = MAKE_FUNCTION_FRAME(codeobj_8987c5e333df8307c65806c9e7ea5ece, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_8987c5e333df8307c65806c9e7ea5ece_57->m_type_description == NULL);
        frame_8987c5e333df8307c65806c9e7ea5ece_57 = cache_frame_8987c5e333df8307c65806c9e7ea5ece_57;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_8987c5e333df8307c65806c9e7ea5ece_57);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_8987c5e333df8307c65806c9e7ea5ece_57) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[453];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1757;
            type_description_2 = "o";
            goto frame_exception_exit_57;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__69___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1759;
            type_description_2 = "o";
            goto frame_exception_exit_57;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8987c5e333df8307c65806c9e7ea5ece_57);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_56;

        frame_exception_exit_57:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_8987c5e333df8307c65806c9e7ea5ece_57);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_8987c5e333df8307c65806c9e7ea5ece_57, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_8987c5e333df8307c65806c9e7ea5ece_57->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_8987c5e333df8307c65806c9e7ea5ece_57, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_8987c5e333df8307c65806c9e7ea5ece_57,
            type_description_2,
            outline_55_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_8987c5e333df8307c65806c9e7ea5ece_57 == cache_frame_8987c5e333df8307c65806c9e7ea5ece_57) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_8987c5e333df8307c65806c9e7ea5ece_57);
            cache_frame_8987c5e333df8307c65806c9e7ea5ece_57 = NULL;
        }

        assertFrameObject(frame_8987c5e333df8307c65806c9e7ea5ece_57);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_56;

        frame_no_exception_56:;
        goto skip_nested_handling_56;
        nested_frame_exit_56:;

        goto try_except_handler_170;
        skip_nested_handling_56:;
        {
            nuitka_bool tmp_condition_result_336;
            PyObject *tmp_cmp_expr_left_56;
            PyObject *tmp_cmp_expr_right_56;
            CHECK_OBJECT(tmp_class_creation_56__bases);
            tmp_cmp_expr_left_56 = tmp_class_creation_56__bases;
            CHECK_OBJECT(tmp_class_creation_56__bases_orig);
            tmp_cmp_expr_right_56 = tmp_class_creation_56__bases_orig;
            tmp_condition_result_336 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_56, tmp_cmp_expr_right_56);
            if (tmp_condition_result_336 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1747;

                goto try_except_handler_170;
            }
            if (tmp_condition_result_336 == NUITKA_BOOL_TRUE) {
                goto branch_yes_224;
            } else {
                goto branch_no_224;
            }
            assert(tmp_condition_result_336 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_224:;
        CHECK_OBJECT(tmp_class_creation_56__bases_orig);
        tmp_dictset_value = tmp_class_creation_56__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1747;

            goto try_except_handler_170;
        }
        branch_no_224:;
        {
            PyObject *tmp_assign_source_460;
            PyObject *tmp_called_value_112;
            PyObject *tmp_args_value_112;
            PyObject *tmp_tuple_element_222;
            PyObject *tmp_kwargs_value_112;
            CHECK_OBJECT(tmp_class_creation_56__metaclass);
            tmp_called_value_112 = tmp_class_creation_56__metaclass;
            tmp_tuple_element_222 = mod_consts[451];
            tmp_args_value_112 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_112, 0, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_56__bases);
            tmp_tuple_element_222 = tmp_class_creation_56__bases;
            PyTuple_SET_ITEM0(tmp_args_value_112, 1, tmp_tuple_element_222);
            tmp_tuple_element_222 = locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747;
            PyTuple_SET_ITEM0(tmp_args_value_112, 2, tmp_tuple_element_222);
            CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
            tmp_kwargs_value_112 = tmp_class_creation_56__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1747;
            tmp_assign_source_460 = CALL_FUNCTION(tmp_called_value_112, tmp_args_value_112, tmp_kwargs_value_112);
            Py_DECREF(tmp_args_value_112);
            if (tmp_assign_source_460 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1747;

                goto try_except_handler_170;
            }
            assert(outline_55_var___class__ == NULL);
            outline_55_var___class__ = tmp_assign_source_460;
        }
        CHECK_OBJECT(outline_55_var___class__);
        tmp_assign_source_459 = outline_55_var___class__;
        Py_INCREF(tmp_assign_source_459);
        goto try_return_handler_170;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_170:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747);
        locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747 = NULL;
        goto try_return_handler_169;
        // Exception handler code:
        try_except_handler_170:;
        exception_keeper_type_168 = exception_type;
        exception_keeper_value_168 = exception_value;
        exception_keeper_tb_168 = exception_tb;
        exception_keeper_lineno_168 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747);
        locals_xlwt$BIFFRecords$$$class__56_IterationRecord_1747 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_168;
        exception_value = exception_keeper_value_168;
        exception_tb = exception_keeper_tb_168;
        exception_lineno = exception_keeper_lineno_168;

        goto try_except_handler_169;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_169:;
        CHECK_OBJECT(outline_55_var___class__);
        Py_DECREF(outline_55_var___class__);
        outline_55_var___class__ = NULL;
        goto outline_result_56;
        // Exception handler code:
        try_except_handler_169:;
        exception_keeper_type_169 = exception_type;
        exception_keeper_value_169 = exception_value;
        exception_keeper_tb_169 = exception_tb;
        exception_keeper_lineno_169 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_169;
        exception_value = exception_keeper_value_169;
        exception_tb = exception_keeper_tb_169;
        exception_lineno = exception_keeper_lineno_169;

        goto outline_exception_56;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_56:;
        exception_lineno = 1747;
        goto try_except_handler_168;
        outline_result_56:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[451], tmp_assign_source_459);
    }
    goto try_end_58;
    // Exception handler code:
    try_except_handler_168:;
    exception_keeper_type_170 = exception_type;
    exception_keeper_value_170 = exception_value;
    exception_keeper_tb_170 = exception_tb;
    exception_keeper_lineno_170 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_56__bases_orig);
    tmp_class_creation_56__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_56__bases);
    tmp_class_creation_56__bases = NULL;
    Py_XDECREF(tmp_class_creation_56__class_decl_dict);
    tmp_class_creation_56__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_56__metaclass);
    tmp_class_creation_56__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_56__prepared);
    tmp_class_creation_56__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_170;
    exception_value = exception_keeper_value_170;
    exception_tb = exception_keeper_tb_170;
    exception_lineno = exception_keeper_lineno_170;

    goto frame_exception_exit_1;
    // End of try:
    try_end_58:;
    CHECK_OBJECT(tmp_class_creation_56__bases_orig);
    Py_DECREF(tmp_class_creation_56__bases_orig);
    tmp_class_creation_56__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_56__bases);
    Py_DECREF(tmp_class_creation_56__bases);
    tmp_class_creation_56__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_56__class_decl_dict);
    Py_DECREF(tmp_class_creation_56__class_decl_dict);
    tmp_class_creation_56__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_56__metaclass);
    Py_DECREF(tmp_class_creation_56__metaclass);
    tmp_class_creation_56__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_56__prepared);
    Py_DECREF(tmp_class_creation_56__prepared);
    tmp_class_creation_56__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_461;
        PyObject *tmp_tuple_element_223;
        tmp_tuple_element_223 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_223 == NULL)) {
            tmp_tuple_element_223 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_223 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        tmp_assign_source_461 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_461, 0, tmp_tuple_element_223);
        assert(tmp_class_creation_57__bases_orig == NULL);
        tmp_class_creation_57__bases_orig = tmp_assign_source_461;
    }
    {
        PyObject *tmp_assign_source_462;
        PyObject *tmp_dircall_arg1_57;
        CHECK_OBJECT(tmp_class_creation_57__bases_orig);
        tmp_dircall_arg1_57 = tmp_class_creation_57__bases_orig;
        Py_INCREF(tmp_dircall_arg1_57);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_57};
            tmp_assign_source_462 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_462 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        assert(tmp_class_creation_57__bases == NULL);
        tmp_class_creation_57__bases = tmp_assign_source_462;
    }
    {
        PyObject *tmp_assign_source_463;
        tmp_assign_source_463 = PyDict_New();
        assert(tmp_class_creation_57__class_decl_dict == NULL);
        tmp_class_creation_57__class_decl_dict = tmp_assign_source_463;
    }
    {
        PyObject *tmp_assign_source_464;
        PyObject *tmp_metaclass_value_57;
        bool tmp_condition_result_337;
        PyObject *tmp_key_value_169;
        PyObject *tmp_dict_arg_value_169;
        PyObject *tmp_dict_arg_value_170;
        PyObject *tmp_key_value_170;
        nuitka_bool tmp_condition_result_338;
        int tmp_truth_name_57;
        PyObject *tmp_type_arg_113;
        PyObject *tmp_expression_value_281;
        PyObject *tmp_subscript_value_57;
        PyObject *tmp_bases_value_57;
        tmp_key_value_169 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_169 = tmp_class_creation_57__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_169, tmp_key_value_169);
        assert(!(tmp_res == -1));
        tmp_condition_result_337 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_337 != false) {
            goto condexpr_true_113;
        } else {
            goto condexpr_false_113;
        }
        condexpr_true_113:;
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_170 = tmp_class_creation_57__class_decl_dict;
        tmp_key_value_170 = mod_consts[205];
        tmp_metaclass_value_57 = DICT_GET_ITEM0(tmp_dict_arg_value_170, tmp_key_value_170);
        if (tmp_metaclass_value_57 == NULL) {
            tmp_metaclass_value_57 = Py_None;
        }
        assert(!(tmp_metaclass_value_57 == NULL));
        Py_INCREF(tmp_metaclass_value_57);
        goto condexpr_end_113;
        condexpr_false_113:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_truth_name_57 = CHECK_IF_TRUE(tmp_class_creation_57__bases);
        if (tmp_truth_name_57 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        tmp_condition_result_338 = tmp_truth_name_57 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_338 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_114;
        } else {
            goto condexpr_false_114;
        }
        condexpr_true_114:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_expression_value_281 = tmp_class_creation_57__bases;
        tmp_subscript_value_57 = mod_consts[4];
        tmp_type_arg_113 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_281, tmp_subscript_value_57, 0);
        if (tmp_type_arg_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        tmp_metaclass_value_57 = BUILTIN_TYPE1(tmp_type_arg_113);
        Py_DECREF(tmp_type_arg_113);
        if (tmp_metaclass_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        goto condexpr_end_114;
        condexpr_false_114:;
        tmp_metaclass_value_57 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_57);
        condexpr_end_114:;
        condexpr_end_113:;
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_bases_value_57 = tmp_class_creation_57__bases;
        tmp_assign_source_464 = SELECT_METACLASS(tmp_metaclass_value_57, tmp_bases_value_57);
        Py_DECREF(tmp_metaclass_value_57);
        if (tmp_assign_source_464 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        assert(tmp_class_creation_57__metaclass == NULL);
        tmp_class_creation_57__metaclass = tmp_assign_source_464;
    }
    {
        bool tmp_condition_result_339;
        PyObject *tmp_key_value_171;
        PyObject *tmp_dict_arg_value_171;
        tmp_key_value_171 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_dict_arg_value_171 = tmp_class_creation_57__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_171, tmp_key_value_171);
        assert(!(tmp_res == -1));
        tmp_condition_result_339 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_339 != false) {
            goto branch_yes_225;
        } else {
            goto branch_no_225;
        }
    }
    branch_yes_225:;
    CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_57__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1762;

        goto try_except_handler_171;
    }
    branch_no_225:;
    {
        nuitka_bool tmp_condition_result_340;
        PyObject *tmp_expression_value_282;
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_expression_value_282 = tmp_class_creation_57__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_282, mod_consts[206]);
        tmp_condition_result_340 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_340 == NUITKA_BOOL_TRUE) {
            goto branch_yes_226;
        } else {
            goto branch_no_226;
        }
    }
    branch_yes_226:;
    {
        PyObject *tmp_assign_source_465;
        PyObject *tmp_called_value_113;
        PyObject *tmp_expression_value_283;
        PyObject *tmp_args_value_113;
        PyObject *tmp_tuple_element_224;
        PyObject *tmp_kwargs_value_113;
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_expression_value_283 = tmp_class_creation_57__metaclass;
        tmp_called_value_113 = LOOKUP_ATTRIBUTE(tmp_expression_value_283, mod_consts[206]);
        if (tmp_called_value_113 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        tmp_tuple_element_224 = mod_consts[455];
        tmp_args_value_113 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_113, 0, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_57__bases);
        tmp_tuple_element_224 = tmp_class_creation_57__bases;
        PyTuple_SET_ITEM0(tmp_args_value_113, 1, tmp_tuple_element_224);
        CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
        tmp_kwargs_value_113 = tmp_class_creation_57__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1762;
        tmp_assign_source_465 = CALL_FUNCTION(tmp_called_value_113, tmp_args_value_113, tmp_kwargs_value_113);
        Py_DECREF(tmp_called_value_113);
        Py_DECREF(tmp_args_value_113);
        if (tmp_assign_source_465 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        assert(tmp_class_creation_57__prepared == NULL);
        tmp_class_creation_57__prepared = tmp_assign_source_465;
    }
    {
        bool tmp_condition_result_341;
        PyObject *tmp_operand_value_57;
        PyObject *tmp_expression_value_284;
        CHECK_OBJECT(tmp_class_creation_57__prepared);
        tmp_expression_value_284 = tmp_class_creation_57__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_284, mod_consts[208]);
        tmp_operand_value_57 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_57);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        tmp_condition_result_341 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_341 != false) {
            goto branch_yes_227;
        } else {
            goto branch_no_227;
        }
    }
    branch_yes_227:;
    {
        PyObject *tmp_raise_type_57;
        PyObject *tmp_raise_value_57;
        PyObject *tmp_left_value_57;
        PyObject *tmp_right_value_57;
        PyObject *tmp_tuple_element_225;
        PyObject *tmp_getattr_target_57;
        PyObject *tmp_getattr_attr_57;
        PyObject *tmp_getattr_default_57;
        tmp_raise_type_57 = PyExc_TypeError;
        tmp_left_value_57 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_57__metaclass);
        tmp_getattr_target_57 = tmp_class_creation_57__metaclass;
        tmp_getattr_attr_57 = mod_consts[210];
        tmp_getattr_default_57 = mod_consts[211];
        tmp_tuple_element_225 = BUILTIN_GETATTR(tmp_getattr_target_57, tmp_getattr_attr_57, tmp_getattr_default_57);
        if (tmp_tuple_element_225 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        tmp_right_value_57 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_285;
            PyObject *tmp_type_arg_114;
            PyTuple_SET_ITEM(tmp_right_value_57, 0, tmp_tuple_element_225);
            CHECK_OBJECT(tmp_class_creation_57__prepared);
            tmp_type_arg_114 = tmp_class_creation_57__prepared;
            tmp_expression_value_285 = BUILTIN_TYPE1(tmp_type_arg_114);
            assert(!(tmp_expression_value_285 == NULL));
            tmp_tuple_element_225 = LOOKUP_ATTRIBUTE(tmp_expression_value_285, mod_consts[210]);
            Py_DECREF(tmp_expression_value_285);
            if (tmp_tuple_element_225 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1762;

                goto tuple_build_exception_57;
            }
            PyTuple_SET_ITEM(tmp_right_value_57, 1, tmp_tuple_element_225);
        }
        goto tuple_build_noexception_57;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_57:;
        Py_DECREF(tmp_right_value_57);
        goto try_except_handler_171;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_57:;
        tmp_raise_value_57 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_57, tmp_right_value_57);
        Py_DECREF(tmp_right_value_57);
        if (tmp_raise_value_57 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_171;
        }
        exception_type = tmp_raise_type_57;
        Py_INCREF(tmp_raise_type_57);
        exception_value = tmp_raise_value_57;
        exception_lineno = 1762;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_171;
    }
    branch_no_227:;
    goto branch_end_226;
    branch_no_226:;
    {
        PyObject *tmp_assign_source_466;
        tmp_assign_source_466 = PyDict_New();
        assert(tmp_class_creation_57__prepared == NULL);
        tmp_class_creation_57__prepared = tmp_assign_source_466;
    }
    branch_end_226:;
    {
        PyObject *tmp_assign_source_467;
        {
            PyObject *tmp_set_locals_57;
            CHECK_OBJECT(tmp_class_creation_57__prepared);
            tmp_set_locals_57 = tmp_class_creation_57__prepared;
            locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762 = tmp_set_locals_57;
            Py_INCREF(tmp_set_locals_57);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_173;
        }
        tmp_dictset_value = mod_consts[456];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_173;
        }
        tmp_dictset_value = mod_consts[455];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_173;
        }
        if (isFrameUnusable(cache_frame_bee931302d6d7c04ed91e8db13caec43_58)) {
            Py_XDECREF(cache_frame_bee931302d6d7c04ed91e8db13caec43_58);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bee931302d6d7c04ed91e8db13caec43_58 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bee931302d6d7c04ed91e8db13caec43_58 = MAKE_FUNCTION_FRAME(codeobj_bee931302d6d7c04ed91e8db13caec43, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bee931302d6d7c04ed91e8db13caec43_58->m_type_description == NULL);
        frame_bee931302d6d7c04ed91e8db13caec43_58 = cache_frame_bee931302d6d7c04ed91e8db13caec43_58;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bee931302d6d7c04ed91e8db13caec43_58);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bee931302d6d7c04ed91e8db13caec43_58) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[124];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1774;
            type_description_2 = "o";
            goto frame_exception_exit_58;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__70___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1776;
            type_description_2 = "o";
            goto frame_exception_exit_58;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bee931302d6d7c04ed91e8db13caec43_58);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_57;

        frame_exception_exit_58:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bee931302d6d7c04ed91e8db13caec43_58);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bee931302d6d7c04ed91e8db13caec43_58, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bee931302d6d7c04ed91e8db13caec43_58->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bee931302d6d7c04ed91e8db13caec43_58, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bee931302d6d7c04ed91e8db13caec43_58,
            type_description_2,
            outline_56_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bee931302d6d7c04ed91e8db13caec43_58 == cache_frame_bee931302d6d7c04ed91e8db13caec43_58) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bee931302d6d7c04ed91e8db13caec43_58);
            cache_frame_bee931302d6d7c04ed91e8db13caec43_58 = NULL;
        }

        assertFrameObject(frame_bee931302d6d7c04ed91e8db13caec43_58);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_57;

        frame_no_exception_57:;
        goto skip_nested_handling_57;
        nested_frame_exit_57:;

        goto try_except_handler_173;
        skip_nested_handling_57:;
        {
            nuitka_bool tmp_condition_result_342;
            PyObject *tmp_cmp_expr_left_57;
            PyObject *tmp_cmp_expr_right_57;
            CHECK_OBJECT(tmp_class_creation_57__bases);
            tmp_cmp_expr_left_57 = tmp_class_creation_57__bases;
            CHECK_OBJECT(tmp_class_creation_57__bases_orig);
            tmp_cmp_expr_right_57 = tmp_class_creation_57__bases_orig;
            tmp_condition_result_342 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_57, tmp_cmp_expr_right_57);
            if (tmp_condition_result_342 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1762;

                goto try_except_handler_173;
            }
            if (tmp_condition_result_342 == NUITKA_BOOL_TRUE) {
                goto branch_yes_228;
            } else {
                goto branch_no_228;
            }
            assert(tmp_condition_result_342 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_228:;
        CHECK_OBJECT(tmp_class_creation_57__bases_orig);
        tmp_dictset_value = tmp_class_creation_57__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1762;

            goto try_except_handler_173;
        }
        branch_no_228:;
        {
            PyObject *tmp_assign_source_468;
            PyObject *tmp_called_value_114;
            PyObject *tmp_args_value_114;
            PyObject *tmp_tuple_element_226;
            PyObject *tmp_kwargs_value_114;
            CHECK_OBJECT(tmp_class_creation_57__metaclass);
            tmp_called_value_114 = tmp_class_creation_57__metaclass;
            tmp_tuple_element_226 = mod_consts[455];
            tmp_args_value_114 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_114, 0, tmp_tuple_element_226);
            CHECK_OBJECT(tmp_class_creation_57__bases);
            tmp_tuple_element_226 = tmp_class_creation_57__bases;
            PyTuple_SET_ITEM0(tmp_args_value_114, 1, tmp_tuple_element_226);
            tmp_tuple_element_226 = locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762;
            PyTuple_SET_ITEM0(tmp_args_value_114, 2, tmp_tuple_element_226);
            CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
            tmp_kwargs_value_114 = tmp_class_creation_57__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1762;
            tmp_assign_source_468 = CALL_FUNCTION(tmp_called_value_114, tmp_args_value_114, tmp_kwargs_value_114);
            Py_DECREF(tmp_args_value_114);
            if (tmp_assign_source_468 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1762;

                goto try_except_handler_173;
            }
            assert(outline_56_var___class__ == NULL);
            outline_56_var___class__ = tmp_assign_source_468;
        }
        CHECK_OBJECT(outline_56_var___class__);
        tmp_assign_source_467 = outline_56_var___class__;
        Py_INCREF(tmp_assign_source_467);
        goto try_return_handler_173;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_173:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762);
        locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762 = NULL;
        goto try_return_handler_172;
        // Exception handler code:
        try_except_handler_173:;
        exception_keeper_type_171 = exception_type;
        exception_keeper_value_171 = exception_value;
        exception_keeper_tb_171 = exception_tb;
        exception_keeper_lineno_171 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762);
        locals_xlwt$BIFFRecords$$$class__57_DeltaRecord_1762 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_171;
        exception_value = exception_keeper_value_171;
        exception_tb = exception_keeper_tb_171;
        exception_lineno = exception_keeper_lineno_171;

        goto try_except_handler_172;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_172:;
        CHECK_OBJECT(outline_56_var___class__);
        Py_DECREF(outline_56_var___class__);
        outline_56_var___class__ = NULL;
        goto outline_result_57;
        // Exception handler code:
        try_except_handler_172:;
        exception_keeper_type_172 = exception_type;
        exception_keeper_value_172 = exception_value;
        exception_keeper_tb_172 = exception_tb;
        exception_keeper_lineno_172 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_172;
        exception_value = exception_keeper_value_172;
        exception_tb = exception_keeper_tb_172;
        exception_lineno = exception_keeper_lineno_172;

        goto outline_exception_57;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_57:;
        exception_lineno = 1762;
        goto try_except_handler_171;
        outline_result_57:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[455], tmp_assign_source_467);
    }
    goto try_end_59;
    // Exception handler code:
    try_except_handler_171:;
    exception_keeper_type_173 = exception_type;
    exception_keeper_value_173 = exception_value;
    exception_keeper_tb_173 = exception_tb;
    exception_keeper_lineno_173 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_57__bases_orig);
    tmp_class_creation_57__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_57__bases);
    tmp_class_creation_57__bases = NULL;
    Py_XDECREF(tmp_class_creation_57__class_decl_dict);
    tmp_class_creation_57__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_57__metaclass);
    tmp_class_creation_57__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_57__prepared);
    tmp_class_creation_57__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_173;
    exception_value = exception_keeper_value_173;
    exception_tb = exception_keeper_tb_173;
    exception_lineno = exception_keeper_lineno_173;

    goto frame_exception_exit_1;
    // End of try:
    try_end_59:;
    CHECK_OBJECT(tmp_class_creation_57__bases_orig);
    Py_DECREF(tmp_class_creation_57__bases_orig);
    tmp_class_creation_57__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_57__bases);
    Py_DECREF(tmp_class_creation_57__bases);
    tmp_class_creation_57__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_57__class_decl_dict);
    Py_DECREF(tmp_class_creation_57__class_decl_dict);
    tmp_class_creation_57__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_57__metaclass);
    Py_DECREF(tmp_class_creation_57__metaclass);
    tmp_class_creation_57__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_57__prepared);
    Py_DECREF(tmp_class_creation_57__prepared);
    tmp_class_creation_57__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_469;
        PyObject *tmp_tuple_element_227;
        tmp_tuple_element_227 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_227 == NULL)) {
            tmp_tuple_element_227 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_227 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        tmp_assign_source_469 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_469, 0, tmp_tuple_element_227);
        assert(tmp_class_creation_58__bases_orig == NULL);
        tmp_class_creation_58__bases_orig = tmp_assign_source_469;
    }
    {
        PyObject *tmp_assign_source_470;
        PyObject *tmp_dircall_arg1_58;
        CHECK_OBJECT(tmp_class_creation_58__bases_orig);
        tmp_dircall_arg1_58 = tmp_class_creation_58__bases_orig;
        Py_INCREF(tmp_dircall_arg1_58);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_58};
            tmp_assign_source_470 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_470 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        assert(tmp_class_creation_58__bases == NULL);
        tmp_class_creation_58__bases = tmp_assign_source_470;
    }
    {
        PyObject *tmp_assign_source_471;
        tmp_assign_source_471 = PyDict_New();
        assert(tmp_class_creation_58__class_decl_dict == NULL);
        tmp_class_creation_58__class_decl_dict = tmp_assign_source_471;
    }
    {
        PyObject *tmp_assign_source_472;
        PyObject *tmp_metaclass_value_58;
        bool tmp_condition_result_343;
        PyObject *tmp_key_value_172;
        PyObject *tmp_dict_arg_value_172;
        PyObject *tmp_dict_arg_value_173;
        PyObject *tmp_key_value_173;
        nuitka_bool tmp_condition_result_344;
        int tmp_truth_name_58;
        PyObject *tmp_type_arg_115;
        PyObject *tmp_expression_value_286;
        PyObject *tmp_subscript_value_58;
        PyObject *tmp_bases_value_58;
        tmp_key_value_172 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_172 = tmp_class_creation_58__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_172, tmp_key_value_172);
        assert(!(tmp_res == -1));
        tmp_condition_result_343 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_343 != false) {
            goto condexpr_true_115;
        } else {
            goto condexpr_false_115;
        }
        condexpr_true_115:;
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_173 = tmp_class_creation_58__class_decl_dict;
        tmp_key_value_173 = mod_consts[205];
        tmp_metaclass_value_58 = DICT_GET_ITEM0(tmp_dict_arg_value_173, tmp_key_value_173);
        if (tmp_metaclass_value_58 == NULL) {
            tmp_metaclass_value_58 = Py_None;
        }
        assert(!(tmp_metaclass_value_58 == NULL));
        Py_INCREF(tmp_metaclass_value_58);
        goto condexpr_end_115;
        condexpr_false_115:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_truth_name_58 = CHECK_IF_TRUE(tmp_class_creation_58__bases);
        if (tmp_truth_name_58 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        tmp_condition_result_344 = tmp_truth_name_58 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_344 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_116;
        } else {
            goto condexpr_false_116;
        }
        condexpr_true_116:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_expression_value_286 = tmp_class_creation_58__bases;
        tmp_subscript_value_58 = mod_consts[4];
        tmp_type_arg_115 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_286, tmp_subscript_value_58, 0);
        if (tmp_type_arg_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        tmp_metaclass_value_58 = BUILTIN_TYPE1(tmp_type_arg_115);
        Py_DECREF(tmp_type_arg_115);
        if (tmp_metaclass_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        goto condexpr_end_116;
        condexpr_false_116:;
        tmp_metaclass_value_58 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_58);
        condexpr_end_116:;
        condexpr_end_115:;
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_bases_value_58 = tmp_class_creation_58__bases;
        tmp_assign_source_472 = SELECT_METACLASS(tmp_metaclass_value_58, tmp_bases_value_58);
        Py_DECREF(tmp_metaclass_value_58);
        if (tmp_assign_source_472 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        assert(tmp_class_creation_58__metaclass == NULL);
        tmp_class_creation_58__metaclass = tmp_assign_source_472;
    }
    {
        bool tmp_condition_result_345;
        PyObject *tmp_key_value_174;
        PyObject *tmp_dict_arg_value_174;
        tmp_key_value_174 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_dict_arg_value_174 = tmp_class_creation_58__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_174, tmp_key_value_174);
        assert(!(tmp_res == -1));
        tmp_condition_result_345 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_345 != false) {
            goto branch_yes_229;
        } else {
            goto branch_no_229;
        }
    }
    branch_yes_229:;
    CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_58__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1779;

        goto try_except_handler_174;
    }
    branch_no_229:;
    {
        nuitka_bool tmp_condition_result_346;
        PyObject *tmp_expression_value_287;
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_expression_value_287 = tmp_class_creation_58__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_287, mod_consts[206]);
        tmp_condition_result_346 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_346 == NUITKA_BOOL_TRUE) {
            goto branch_yes_230;
        } else {
            goto branch_no_230;
        }
    }
    branch_yes_230:;
    {
        PyObject *tmp_assign_source_473;
        PyObject *tmp_called_value_115;
        PyObject *tmp_expression_value_288;
        PyObject *tmp_args_value_115;
        PyObject *tmp_tuple_element_228;
        PyObject *tmp_kwargs_value_115;
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_expression_value_288 = tmp_class_creation_58__metaclass;
        tmp_called_value_115 = LOOKUP_ATTRIBUTE(tmp_expression_value_288, mod_consts[206]);
        if (tmp_called_value_115 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        tmp_tuple_element_228 = mod_consts[458];
        tmp_args_value_115 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_115, 0, tmp_tuple_element_228);
        CHECK_OBJECT(tmp_class_creation_58__bases);
        tmp_tuple_element_228 = tmp_class_creation_58__bases;
        PyTuple_SET_ITEM0(tmp_args_value_115, 1, tmp_tuple_element_228);
        CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
        tmp_kwargs_value_115 = tmp_class_creation_58__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1779;
        tmp_assign_source_473 = CALL_FUNCTION(tmp_called_value_115, tmp_args_value_115, tmp_kwargs_value_115);
        Py_DECREF(tmp_called_value_115);
        Py_DECREF(tmp_args_value_115);
        if (tmp_assign_source_473 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        assert(tmp_class_creation_58__prepared == NULL);
        tmp_class_creation_58__prepared = tmp_assign_source_473;
    }
    {
        bool tmp_condition_result_347;
        PyObject *tmp_operand_value_58;
        PyObject *tmp_expression_value_289;
        CHECK_OBJECT(tmp_class_creation_58__prepared);
        tmp_expression_value_289 = tmp_class_creation_58__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_289, mod_consts[208]);
        tmp_operand_value_58 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_58);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        tmp_condition_result_347 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_347 != false) {
            goto branch_yes_231;
        } else {
            goto branch_no_231;
        }
    }
    branch_yes_231:;
    {
        PyObject *tmp_raise_type_58;
        PyObject *tmp_raise_value_58;
        PyObject *tmp_left_value_58;
        PyObject *tmp_right_value_58;
        PyObject *tmp_tuple_element_229;
        PyObject *tmp_getattr_target_58;
        PyObject *tmp_getattr_attr_58;
        PyObject *tmp_getattr_default_58;
        tmp_raise_type_58 = PyExc_TypeError;
        tmp_left_value_58 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_58__metaclass);
        tmp_getattr_target_58 = tmp_class_creation_58__metaclass;
        tmp_getattr_attr_58 = mod_consts[210];
        tmp_getattr_default_58 = mod_consts[211];
        tmp_tuple_element_229 = BUILTIN_GETATTR(tmp_getattr_target_58, tmp_getattr_attr_58, tmp_getattr_default_58);
        if (tmp_tuple_element_229 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        tmp_right_value_58 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_290;
            PyObject *tmp_type_arg_116;
            PyTuple_SET_ITEM(tmp_right_value_58, 0, tmp_tuple_element_229);
            CHECK_OBJECT(tmp_class_creation_58__prepared);
            tmp_type_arg_116 = tmp_class_creation_58__prepared;
            tmp_expression_value_290 = BUILTIN_TYPE1(tmp_type_arg_116);
            assert(!(tmp_expression_value_290 == NULL));
            tmp_tuple_element_229 = LOOKUP_ATTRIBUTE(tmp_expression_value_290, mod_consts[210]);
            Py_DECREF(tmp_expression_value_290);
            if (tmp_tuple_element_229 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1779;

                goto tuple_build_exception_58;
            }
            PyTuple_SET_ITEM(tmp_right_value_58, 1, tmp_tuple_element_229);
        }
        goto tuple_build_noexception_58;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_58:;
        Py_DECREF(tmp_right_value_58);
        goto try_except_handler_174;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_58:;
        tmp_raise_value_58 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_58, tmp_right_value_58);
        Py_DECREF(tmp_right_value_58);
        if (tmp_raise_value_58 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_174;
        }
        exception_type = tmp_raise_type_58;
        Py_INCREF(tmp_raise_type_58);
        exception_value = tmp_raise_value_58;
        exception_lineno = 1779;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_174;
    }
    branch_no_231:;
    goto branch_end_230;
    branch_no_230:;
    {
        PyObject *tmp_assign_source_474;
        tmp_assign_source_474 = PyDict_New();
        assert(tmp_class_creation_58__prepared == NULL);
        tmp_class_creation_58__prepared = tmp_assign_source_474;
    }
    branch_end_230:;
    {
        PyObject *tmp_assign_source_475;
        {
            PyObject *tmp_set_locals_58;
            CHECK_OBJECT(tmp_class_creation_58__prepared);
            tmp_set_locals_58 = tmp_class_creation_58__prepared;
            locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779 = tmp_set_locals_58;
            Py_INCREF(tmp_set_locals_58);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_176;
        }
        tmp_dictset_value = mod_consts[459];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_176;
        }
        tmp_dictset_value = mod_consts[458];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_176;
        }
        if (isFrameUnusable(cache_frame_834022953fc71d0d186819157ff38c61_59)) {
            Py_XDECREF(cache_frame_834022953fc71d0d186819157ff38c61_59);

#if _DEBUG_REFCOUNTS
            if (cache_frame_834022953fc71d0d186819157ff38c61_59 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_834022953fc71d0d186819157ff38c61_59 = MAKE_FUNCTION_FRAME(codeobj_834022953fc71d0d186819157ff38c61, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_834022953fc71d0d186819157ff38c61_59->m_type_description == NULL);
        frame_834022953fc71d0d186819157ff38c61_59 = cache_frame_834022953fc71d0d186819157ff38c61_59;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_834022953fc71d0d186819157ff38c61_59);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_834022953fc71d0d186819157ff38c61_59) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[460];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1792;
            type_description_2 = "o";
            goto frame_exception_exit_59;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__71___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1794;
            type_description_2 = "o";
            goto frame_exception_exit_59;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_834022953fc71d0d186819157ff38c61_59);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_58;

        frame_exception_exit_59:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_834022953fc71d0d186819157ff38c61_59);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_834022953fc71d0d186819157ff38c61_59, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_834022953fc71d0d186819157ff38c61_59->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_834022953fc71d0d186819157ff38c61_59, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_834022953fc71d0d186819157ff38c61_59,
            type_description_2,
            outline_57_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_834022953fc71d0d186819157ff38c61_59 == cache_frame_834022953fc71d0d186819157ff38c61_59) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_834022953fc71d0d186819157ff38c61_59);
            cache_frame_834022953fc71d0d186819157ff38c61_59 = NULL;
        }

        assertFrameObject(frame_834022953fc71d0d186819157ff38c61_59);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_58;

        frame_no_exception_58:;
        goto skip_nested_handling_58;
        nested_frame_exit_58:;

        goto try_except_handler_176;
        skip_nested_handling_58:;
        {
            nuitka_bool tmp_condition_result_348;
            PyObject *tmp_cmp_expr_left_58;
            PyObject *tmp_cmp_expr_right_58;
            CHECK_OBJECT(tmp_class_creation_58__bases);
            tmp_cmp_expr_left_58 = tmp_class_creation_58__bases;
            CHECK_OBJECT(tmp_class_creation_58__bases_orig);
            tmp_cmp_expr_right_58 = tmp_class_creation_58__bases_orig;
            tmp_condition_result_348 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_58, tmp_cmp_expr_right_58);
            if (tmp_condition_result_348 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1779;

                goto try_except_handler_176;
            }
            if (tmp_condition_result_348 == NUITKA_BOOL_TRUE) {
                goto branch_yes_232;
            } else {
                goto branch_no_232;
            }
            assert(tmp_condition_result_348 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_232:;
        CHECK_OBJECT(tmp_class_creation_58__bases_orig);
        tmp_dictset_value = tmp_class_creation_58__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1779;

            goto try_except_handler_176;
        }
        branch_no_232:;
        {
            PyObject *tmp_assign_source_476;
            PyObject *tmp_called_value_116;
            PyObject *tmp_args_value_116;
            PyObject *tmp_tuple_element_230;
            PyObject *tmp_kwargs_value_116;
            CHECK_OBJECT(tmp_class_creation_58__metaclass);
            tmp_called_value_116 = tmp_class_creation_58__metaclass;
            tmp_tuple_element_230 = mod_consts[458];
            tmp_args_value_116 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_116, 0, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_58__bases);
            tmp_tuple_element_230 = tmp_class_creation_58__bases;
            PyTuple_SET_ITEM0(tmp_args_value_116, 1, tmp_tuple_element_230);
            tmp_tuple_element_230 = locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779;
            PyTuple_SET_ITEM0(tmp_args_value_116, 2, tmp_tuple_element_230);
            CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
            tmp_kwargs_value_116 = tmp_class_creation_58__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1779;
            tmp_assign_source_476 = CALL_FUNCTION(tmp_called_value_116, tmp_args_value_116, tmp_kwargs_value_116);
            Py_DECREF(tmp_args_value_116);
            if (tmp_assign_source_476 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1779;

                goto try_except_handler_176;
            }
            assert(outline_57_var___class__ == NULL);
            outline_57_var___class__ = tmp_assign_source_476;
        }
        CHECK_OBJECT(outline_57_var___class__);
        tmp_assign_source_475 = outline_57_var___class__;
        Py_INCREF(tmp_assign_source_475);
        goto try_return_handler_176;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_176:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779);
        locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779 = NULL;
        goto try_return_handler_175;
        // Exception handler code:
        try_except_handler_176:;
        exception_keeper_type_174 = exception_type;
        exception_keeper_value_174 = exception_value;
        exception_keeper_tb_174 = exception_tb;
        exception_keeper_lineno_174 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779);
        locals_xlwt$BIFFRecords$$$class__58_SaveRecalcRecord_1779 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_174;
        exception_value = exception_keeper_value_174;
        exception_tb = exception_keeper_tb_174;
        exception_lineno = exception_keeper_lineno_174;

        goto try_except_handler_175;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_175:;
        CHECK_OBJECT(outline_57_var___class__);
        Py_DECREF(outline_57_var___class__);
        outline_57_var___class__ = NULL;
        goto outline_result_58;
        // Exception handler code:
        try_except_handler_175:;
        exception_keeper_type_175 = exception_type;
        exception_keeper_value_175 = exception_value;
        exception_keeper_tb_175 = exception_tb;
        exception_keeper_lineno_175 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_175;
        exception_value = exception_keeper_value_175;
        exception_tb = exception_keeper_tb_175;
        exception_lineno = exception_keeper_lineno_175;

        goto outline_exception_58;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_58:;
        exception_lineno = 1779;
        goto try_except_handler_174;
        outline_result_58:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[458], tmp_assign_source_475);
    }
    goto try_end_60;
    // Exception handler code:
    try_except_handler_174:;
    exception_keeper_type_176 = exception_type;
    exception_keeper_value_176 = exception_value;
    exception_keeper_tb_176 = exception_tb;
    exception_keeper_lineno_176 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_58__bases_orig);
    tmp_class_creation_58__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_58__bases);
    tmp_class_creation_58__bases = NULL;
    Py_XDECREF(tmp_class_creation_58__class_decl_dict);
    tmp_class_creation_58__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_58__metaclass);
    tmp_class_creation_58__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_58__prepared);
    tmp_class_creation_58__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_176;
    exception_value = exception_keeper_value_176;
    exception_tb = exception_keeper_tb_176;
    exception_lineno = exception_keeper_lineno_176;

    goto frame_exception_exit_1;
    // End of try:
    try_end_60:;
    CHECK_OBJECT(tmp_class_creation_58__bases_orig);
    Py_DECREF(tmp_class_creation_58__bases_orig);
    tmp_class_creation_58__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_58__bases);
    Py_DECREF(tmp_class_creation_58__bases);
    tmp_class_creation_58__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_58__class_decl_dict);
    Py_DECREF(tmp_class_creation_58__class_decl_dict);
    tmp_class_creation_58__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_58__metaclass);
    Py_DECREF(tmp_class_creation_58__metaclass);
    tmp_class_creation_58__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_58__prepared);
    Py_DECREF(tmp_class_creation_58__prepared);
    tmp_class_creation_58__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_477;
        PyObject *tmp_tuple_element_231;
        tmp_tuple_element_231 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_231 == NULL)) {
            tmp_tuple_element_231 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_231 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        tmp_assign_source_477 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_477, 0, tmp_tuple_element_231);
        assert(tmp_class_creation_59__bases_orig == NULL);
        tmp_class_creation_59__bases_orig = tmp_assign_source_477;
    }
    {
        PyObject *tmp_assign_source_478;
        PyObject *tmp_dircall_arg1_59;
        CHECK_OBJECT(tmp_class_creation_59__bases_orig);
        tmp_dircall_arg1_59 = tmp_class_creation_59__bases_orig;
        Py_INCREF(tmp_dircall_arg1_59);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_59};
            tmp_assign_source_478 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_478 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        assert(tmp_class_creation_59__bases == NULL);
        tmp_class_creation_59__bases = tmp_assign_source_478;
    }
    {
        PyObject *tmp_assign_source_479;
        tmp_assign_source_479 = PyDict_New();
        assert(tmp_class_creation_59__class_decl_dict == NULL);
        tmp_class_creation_59__class_decl_dict = tmp_assign_source_479;
    }
    {
        PyObject *tmp_assign_source_480;
        PyObject *tmp_metaclass_value_59;
        bool tmp_condition_result_349;
        PyObject *tmp_key_value_175;
        PyObject *tmp_dict_arg_value_175;
        PyObject *tmp_dict_arg_value_176;
        PyObject *tmp_key_value_176;
        nuitka_bool tmp_condition_result_350;
        int tmp_truth_name_59;
        PyObject *tmp_type_arg_117;
        PyObject *tmp_expression_value_291;
        PyObject *tmp_subscript_value_59;
        PyObject *tmp_bases_value_59;
        tmp_key_value_175 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_dict_arg_value_175 = tmp_class_creation_59__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_175, tmp_key_value_175);
        assert(!(tmp_res == -1));
        tmp_condition_result_349 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_349 != false) {
            goto condexpr_true_117;
        } else {
            goto condexpr_false_117;
        }
        condexpr_true_117:;
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_dict_arg_value_176 = tmp_class_creation_59__class_decl_dict;
        tmp_key_value_176 = mod_consts[205];
        tmp_metaclass_value_59 = DICT_GET_ITEM0(tmp_dict_arg_value_176, tmp_key_value_176);
        if (tmp_metaclass_value_59 == NULL) {
            tmp_metaclass_value_59 = Py_None;
        }
        assert(!(tmp_metaclass_value_59 == NULL));
        Py_INCREF(tmp_metaclass_value_59);
        goto condexpr_end_117;
        condexpr_false_117:;
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_truth_name_59 = CHECK_IF_TRUE(tmp_class_creation_59__bases);
        if (tmp_truth_name_59 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        tmp_condition_result_350 = tmp_truth_name_59 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_350 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_118;
        } else {
            goto condexpr_false_118;
        }
        condexpr_true_118:;
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_expression_value_291 = tmp_class_creation_59__bases;
        tmp_subscript_value_59 = mod_consts[4];
        tmp_type_arg_117 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_291, tmp_subscript_value_59, 0);
        if (tmp_type_arg_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        tmp_metaclass_value_59 = BUILTIN_TYPE1(tmp_type_arg_117);
        Py_DECREF(tmp_type_arg_117);
        if (tmp_metaclass_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        goto condexpr_end_118;
        condexpr_false_118:;
        tmp_metaclass_value_59 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_59);
        condexpr_end_118:;
        condexpr_end_117:;
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_bases_value_59 = tmp_class_creation_59__bases;
        tmp_assign_source_480 = SELECT_METACLASS(tmp_metaclass_value_59, tmp_bases_value_59);
        Py_DECREF(tmp_metaclass_value_59);
        if (tmp_assign_source_480 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        assert(tmp_class_creation_59__metaclass == NULL);
        tmp_class_creation_59__metaclass = tmp_assign_source_480;
    }
    {
        bool tmp_condition_result_351;
        PyObject *tmp_key_value_177;
        PyObject *tmp_dict_arg_value_177;
        tmp_key_value_177 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_dict_arg_value_177 = tmp_class_creation_59__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_177, tmp_key_value_177);
        assert(!(tmp_res == -1));
        tmp_condition_result_351 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_351 != false) {
            goto branch_yes_233;
        } else {
            goto branch_no_233;
        }
    }
    branch_yes_233:;
    CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_59__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1797;

        goto try_except_handler_177;
    }
    branch_no_233:;
    {
        nuitka_bool tmp_condition_result_352;
        PyObject *tmp_expression_value_292;
        CHECK_OBJECT(tmp_class_creation_59__metaclass);
        tmp_expression_value_292 = tmp_class_creation_59__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_292, mod_consts[206]);
        tmp_condition_result_352 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_352 == NUITKA_BOOL_TRUE) {
            goto branch_yes_234;
        } else {
            goto branch_no_234;
        }
    }
    branch_yes_234:;
    {
        PyObject *tmp_assign_source_481;
        PyObject *tmp_called_value_117;
        PyObject *tmp_expression_value_293;
        PyObject *tmp_args_value_117;
        PyObject *tmp_tuple_element_232;
        PyObject *tmp_kwargs_value_117;
        CHECK_OBJECT(tmp_class_creation_59__metaclass);
        tmp_expression_value_293 = tmp_class_creation_59__metaclass;
        tmp_called_value_117 = LOOKUP_ATTRIBUTE(tmp_expression_value_293, mod_consts[206]);
        if (tmp_called_value_117 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        tmp_tuple_element_232 = mod_consts[462];
        tmp_args_value_117 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_117, 0, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_59__bases);
        tmp_tuple_element_232 = tmp_class_creation_59__bases;
        PyTuple_SET_ITEM0(tmp_args_value_117, 1, tmp_tuple_element_232);
        CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
        tmp_kwargs_value_117 = tmp_class_creation_59__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1797;
        tmp_assign_source_481 = CALL_FUNCTION(tmp_called_value_117, tmp_args_value_117, tmp_kwargs_value_117);
        Py_DECREF(tmp_called_value_117);
        Py_DECREF(tmp_args_value_117);
        if (tmp_assign_source_481 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        assert(tmp_class_creation_59__prepared == NULL);
        tmp_class_creation_59__prepared = tmp_assign_source_481;
    }
    {
        bool tmp_condition_result_353;
        PyObject *tmp_operand_value_59;
        PyObject *tmp_expression_value_294;
        CHECK_OBJECT(tmp_class_creation_59__prepared);
        tmp_expression_value_294 = tmp_class_creation_59__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_294, mod_consts[208]);
        tmp_operand_value_59 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_59);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        tmp_condition_result_353 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_353 != false) {
            goto branch_yes_235;
        } else {
            goto branch_no_235;
        }
    }
    branch_yes_235:;
    {
        PyObject *tmp_raise_type_59;
        PyObject *tmp_raise_value_59;
        PyObject *tmp_left_value_59;
        PyObject *tmp_right_value_59;
        PyObject *tmp_tuple_element_233;
        PyObject *tmp_getattr_target_59;
        PyObject *tmp_getattr_attr_59;
        PyObject *tmp_getattr_default_59;
        tmp_raise_type_59 = PyExc_TypeError;
        tmp_left_value_59 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_59__metaclass);
        tmp_getattr_target_59 = tmp_class_creation_59__metaclass;
        tmp_getattr_attr_59 = mod_consts[210];
        tmp_getattr_default_59 = mod_consts[211];
        tmp_tuple_element_233 = BUILTIN_GETATTR(tmp_getattr_target_59, tmp_getattr_attr_59, tmp_getattr_default_59);
        if (tmp_tuple_element_233 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        tmp_right_value_59 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_295;
            PyObject *tmp_type_arg_118;
            PyTuple_SET_ITEM(tmp_right_value_59, 0, tmp_tuple_element_233);
            CHECK_OBJECT(tmp_class_creation_59__prepared);
            tmp_type_arg_118 = tmp_class_creation_59__prepared;
            tmp_expression_value_295 = BUILTIN_TYPE1(tmp_type_arg_118);
            assert(!(tmp_expression_value_295 == NULL));
            tmp_tuple_element_233 = LOOKUP_ATTRIBUTE(tmp_expression_value_295, mod_consts[210]);
            Py_DECREF(tmp_expression_value_295);
            if (tmp_tuple_element_233 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1797;

                goto tuple_build_exception_59;
            }
            PyTuple_SET_ITEM(tmp_right_value_59, 1, tmp_tuple_element_233);
        }
        goto tuple_build_noexception_59;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_59:;
        Py_DECREF(tmp_right_value_59);
        goto try_except_handler_177;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_59:;
        tmp_raise_value_59 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_59, tmp_right_value_59);
        Py_DECREF(tmp_right_value_59);
        if (tmp_raise_value_59 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_177;
        }
        exception_type = tmp_raise_type_59;
        Py_INCREF(tmp_raise_type_59);
        exception_value = tmp_raise_value_59;
        exception_lineno = 1797;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_177;
    }
    branch_no_235:;
    goto branch_end_234;
    branch_no_234:;
    {
        PyObject *tmp_assign_source_482;
        tmp_assign_source_482 = PyDict_New();
        assert(tmp_class_creation_59__prepared == NULL);
        tmp_class_creation_59__prepared = tmp_assign_source_482;
    }
    branch_end_234:;
    {
        PyObject *tmp_assign_source_483;
        {
            PyObject *tmp_set_locals_59;
            CHECK_OBJECT(tmp_class_creation_59__prepared);
            tmp_set_locals_59 = tmp_class_creation_59__prepared;
            locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797 = tmp_set_locals_59;
            Py_INCREF(tmp_set_locals_59);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_179;
        }
        tmp_dictset_value = mod_consts[463];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_179;
        }
        tmp_dictset_value = mod_consts[462];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_179;
        }
        if (isFrameUnusable(cache_frame_9bf27a23d2621973323203e1e5e4c776_60)) {
            Py_XDECREF(cache_frame_9bf27a23d2621973323203e1e5e4c776_60);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9bf27a23d2621973323203e1e5e4c776_60 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9bf27a23d2621973323203e1e5e4c776_60 = MAKE_FUNCTION_FRAME(codeobj_9bf27a23d2621973323203e1e5e4c776, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9bf27a23d2621973323203e1e5e4c776_60->m_type_description == NULL);
        frame_9bf27a23d2621973323203e1e5e4c776_60 = cache_frame_9bf27a23d2621973323203e1e5e4c776_60;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9bf27a23d2621973323203e1e5e4c776_60);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9bf27a23d2621973323203e1e5e4c776_60) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[464];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1808;
            type_description_2 = "o";
            goto frame_exception_exit_60;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__72___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1810;
            type_description_2 = "o";
            goto frame_exception_exit_60;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9bf27a23d2621973323203e1e5e4c776_60);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_59;

        frame_exception_exit_60:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9bf27a23d2621973323203e1e5e4c776_60);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9bf27a23d2621973323203e1e5e4c776_60, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9bf27a23d2621973323203e1e5e4c776_60->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9bf27a23d2621973323203e1e5e4c776_60, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9bf27a23d2621973323203e1e5e4c776_60,
            type_description_2,
            outline_58_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_9bf27a23d2621973323203e1e5e4c776_60 == cache_frame_9bf27a23d2621973323203e1e5e4c776_60) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9bf27a23d2621973323203e1e5e4c776_60);
            cache_frame_9bf27a23d2621973323203e1e5e4c776_60 = NULL;
        }

        assertFrameObject(frame_9bf27a23d2621973323203e1e5e4c776_60);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_59;

        frame_no_exception_59:;
        goto skip_nested_handling_59;
        nested_frame_exit_59:;

        goto try_except_handler_179;
        skip_nested_handling_59:;
        {
            nuitka_bool tmp_condition_result_354;
            PyObject *tmp_cmp_expr_left_59;
            PyObject *tmp_cmp_expr_right_59;
            CHECK_OBJECT(tmp_class_creation_59__bases);
            tmp_cmp_expr_left_59 = tmp_class_creation_59__bases;
            CHECK_OBJECT(tmp_class_creation_59__bases_orig);
            tmp_cmp_expr_right_59 = tmp_class_creation_59__bases_orig;
            tmp_condition_result_354 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_59, tmp_cmp_expr_right_59);
            if (tmp_condition_result_354 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1797;

                goto try_except_handler_179;
            }
            if (tmp_condition_result_354 == NUITKA_BOOL_TRUE) {
                goto branch_yes_236;
            } else {
                goto branch_no_236;
            }
            assert(tmp_condition_result_354 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_236:;
        CHECK_OBJECT(tmp_class_creation_59__bases_orig);
        tmp_dictset_value = tmp_class_creation_59__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1797;

            goto try_except_handler_179;
        }
        branch_no_236:;
        {
            PyObject *tmp_assign_source_484;
            PyObject *tmp_called_value_118;
            PyObject *tmp_args_value_118;
            PyObject *tmp_tuple_element_234;
            PyObject *tmp_kwargs_value_118;
            CHECK_OBJECT(tmp_class_creation_59__metaclass);
            tmp_called_value_118 = tmp_class_creation_59__metaclass;
            tmp_tuple_element_234 = mod_consts[462];
            tmp_args_value_118 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_118, 0, tmp_tuple_element_234);
            CHECK_OBJECT(tmp_class_creation_59__bases);
            tmp_tuple_element_234 = tmp_class_creation_59__bases;
            PyTuple_SET_ITEM0(tmp_args_value_118, 1, tmp_tuple_element_234);
            tmp_tuple_element_234 = locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797;
            PyTuple_SET_ITEM0(tmp_args_value_118, 2, tmp_tuple_element_234);
            CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
            tmp_kwargs_value_118 = tmp_class_creation_59__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1797;
            tmp_assign_source_484 = CALL_FUNCTION(tmp_called_value_118, tmp_args_value_118, tmp_kwargs_value_118);
            Py_DECREF(tmp_args_value_118);
            if (tmp_assign_source_484 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1797;

                goto try_except_handler_179;
            }
            assert(outline_58_var___class__ == NULL);
            outline_58_var___class__ = tmp_assign_source_484;
        }
        CHECK_OBJECT(outline_58_var___class__);
        tmp_assign_source_483 = outline_58_var___class__;
        Py_INCREF(tmp_assign_source_483);
        goto try_return_handler_179;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_179:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797);
        locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797 = NULL;
        goto try_return_handler_178;
        // Exception handler code:
        try_except_handler_179:;
        exception_keeper_type_177 = exception_type;
        exception_keeper_value_177 = exception_value;
        exception_keeper_tb_177 = exception_tb;
        exception_keeper_lineno_177 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797);
        locals_xlwt$BIFFRecords$$$class__59_PrintHeadersRecord_1797 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_177;
        exception_value = exception_keeper_value_177;
        exception_tb = exception_keeper_tb_177;
        exception_lineno = exception_keeper_lineno_177;

        goto try_except_handler_178;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_178:;
        CHECK_OBJECT(outline_58_var___class__);
        Py_DECREF(outline_58_var___class__);
        outline_58_var___class__ = NULL;
        goto outline_result_59;
        // Exception handler code:
        try_except_handler_178:;
        exception_keeper_type_178 = exception_type;
        exception_keeper_value_178 = exception_value;
        exception_keeper_tb_178 = exception_tb;
        exception_keeper_lineno_178 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_178;
        exception_value = exception_keeper_value_178;
        exception_tb = exception_keeper_tb_178;
        exception_lineno = exception_keeper_lineno_178;

        goto outline_exception_59;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_59:;
        exception_lineno = 1797;
        goto try_except_handler_177;
        outline_result_59:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[462], tmp_assign_source_483);
    }
    goto try_end_61;
    // Exception handler code:
    try_except_handler_177:;
    exception_keeper_type_179 = exception_type;
    exception_keeper_value_179 = exception_value;
    exception_keeper_tb_179 = exception_tb;
    exception_keeper_lineno_179 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_59__bases_orig);
    tmp_class_creation_59__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_59__bases);
    tmp_class_creation_59__bases = NULL;
    Py_XDECREF(tmp_class_creation_59__class_decl_dict);
    tmp_class_creation_59__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_59__metaclass);
    tmp_class_creation_59__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_59__prepared);
    tmp_class_creation_59__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_179;
    exception_value = exception_keeper_value_179;
    exception_tb = exception_keeper_tb_179;
    exception_lineno = exception_keeper_lineno_179;

    goto frame_exception_exit_1;
    // End of try:
    try_end_61:;
    CHECK_OBJECT(tmp_class_creation_59__bases_orig);
    Py_DECREF(tmp_class_creation_59__bases_orig);
    tmp_class_creation_59__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_59__bases);
    Py_DECREF(tmp_class_creation_59__bases);
    tmp_class_creation_59__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_59__class_decl_dict);
    Py_DECREF(tmp_class_creation_59__class_decl_dict);
    tmp_class_creation_59__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_59__metaclass);
    Py_DECREF(tmp_class_creation_59__metaclass);
    tmp_class_creation_59__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_59__prepared);
    Py_DECREF(tmp_class_creation_59__prepared);
    tmp_class_creation_59__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_485;
        PyObject *tmp_tuple_element_235;
        tmp_tuple_element_235 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_235 == NULL)) {
            tmp_tuple_element_235 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_235 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        tmp_assign_source_485 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_485, 0, tmp_tuple_element_235);
        assert(tmp_class_creation_60__bases_orig == NULL);
        tmp_class_creation_60__bases_orig = tmp_assign_source_485;
    }
    {
        PyObject *tmp_assign_source_486;
        PyObject *tmp_dircall_arg1_60;
        CHECK_OBJECT(tmp_class_creation_60__bases_orig);
        tmp_dircall_arg1_60 = tmp_class_creation_60__bases_orig;
        Py_INCREF(tmp_dircall_arg1_60);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_60};
            tmp_assign_source_486 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_486 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        assert(tmp_class_creation_60__bases == NULL);
        tmp_class_creation_60__bases = tmp_assign_source_486;
    }
    {
        PyObject *tmp_assign_source_487;
        tmp_assign_source_487 = PyDict_New();
        assert(tmp_class_creation_60__class_decl_dict == NULL);
        tmp_class_creation_60__class_decl_dict = tmp_assign_source_487;
    }
    {
        PyObject *tmp_assign_source_488;
        PyObject *tmp_metaclass_value_60;
        bool tmp_condition_result_355;
        PyObject *tmp_key_value_178;
        PyObject *tmp_dict_arg_value_178;
        PyObject *tmp_dict_arg_value_179;
        PyObject *tmp_key_value_179;
        nuitka_bool tmp_condition_result_356;
        int tmp_truth_name_60;
        PyObject *tmp_type_arg_119;
        PyObject *tmp_expression_value_296;
        PyObject *tmp_subscript_value_60;
        PyObject *tmp_bases_value_60;
        tmp_key_value_178 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_dict_arg_value_178 = tmp_class_creation_60__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_178, tmp_key_value_178);
        assert(!(tmp_res == -1));
        tmp_condition_result_355 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_355 != false) {
            goto condexpr_true_119;
        } else {
            goto condexpr_false_119;
        }
        condexpr_true_119:;
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_dict_arg_value_179 = tmp_class_creation_60__class_decl_dict;
        tmp_key_value_179 = mod_consts[205];
        tmp_metaclass_value_60 = DICT_GET_ITEM0(tmp_dict_arg_value_179, tmp_key_value_179);
        if (tmp_metaclass_value_60 == NULL) {
            tmp_metaclass_value_60 = Py_None;
        }
        assert(!(tmp_metaclass_value_60 == NULL));
        Py_INCREF(tmp_metaclass_value_60);
        goto condexpr_end_119;
        condexpr_false_119:;
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_truth_name_60 = CHECK_IF_TRUE(tmp_class_creation_60__bases);
        if (tmp_truth_name_60 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        tmp_condition_result_356 = tmp_truth_name_60 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_356 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_120;
        } else {
            goto condexpr_false_120;
        }
        condexpr_true_120:;
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_expression_value_296 = tmp_class_creation_60__bases;
        tmp_subscript_value_60 = mod_consts[4];
        tmp_type_arg_119 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_296, tmp_subscript_value_60, 0);
        if (tmp_type_arg_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        tmp_metaclass_value_60 = BUILTIN_TYPE1(tmp_type_arg_119);
        Py_DECREF(tmp_type_arg_119);
        if (tmp_metaclass_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        goto condexpr_end_120;
        condexpr_false_120:;
        tmp_metaclass_value_60 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_60);
        condexpr_end_120:;
        condexpr_end_119:;
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_bases_value_60 = tmp_class_creation_60__bases;
        tmp_assign_source_488 = SELECT_METACLASS(tmp_metaclass_value_60, tmp_bases_value_60);
        Py_DECREF(tmp_metaclass_value_60);
        if (tmp_assign_source_488 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        assert(tmp_class_creation_60__metaclass == NULL);
        tmp_class_creation_60__metaclass = tmp_assign_source_488;
    }
    {
        bool tmp_condition_result_357;
        PyObject *tmp_key_value_180;
        PyObject *tmp_dict_arg_value_180;
        tmp_key_value_180 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_dict_arg_value_180 = tmp_class_creation_60__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_180, tmp_key_value_180);
        assert(!(tmp_res == -1));
        tmp_condition_result_357 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_357 != false) {
            goto branch_yes_237;
        } else {
            goto branch_no_237;
        }
    }
    branch_yes_237:;
    CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_60__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1814;

        goto try_except_handler_180;
    }
    branch_no_237:;
    {
        nuitka_bool tmp_condition_result_358;
        PyObject *tmp_expression_value_297;
        CHECK_OBJECT(tmp_class_creation_60__metaclass);
        tmp_expression_value_297 = tmp_class_creation_60__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_297, mod_consts[206]);
        tmp_condition_result_358 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_358 == NUITKA_BOOL_TRUE) {
            goto branch_yes_238;
        } else {
            goto branch_no_238;
        }
    }
    branch_yes_238:;
    {
        PyObject *tmp_assign_source_489;
        PyObject *tmp_called_value_119;
        PyObject *tmp_expression_value_298;
        PyObject *tmp_args_value_119;
        PyObject *tmp_tuple_element_236;
        PyObject *tmp_kwargs_value_119;
        CHECK_OBJECT(tmp_class_creation_60__metaclass);
        tmp_expression_value_298 = tmp_class_creation_60__metaclass;
        tmp_called_value_119 = LOOKUP_ATTRIBUTE(tmp_expression_value_298, mod_consts[206]);
        if (tmp_called_value_119 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        tmp_tuple_element_236 = mod_consts[466];
        tmp_args_value_119 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_119, 0, tmp_tuple_element_236);
        CHECK_OBJECT(tmp_class_creation_60__bases);
        tmp_tuple_element_236 = tmp_class_creation_60__bases;
        PyTuple_SET_ITEM0(tmp_args_value_119, 1, tmp_tuple_element_236);
        CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
        tmp_kwargs_value_119 = tmp_class_creation_60__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1814;
        tmp_assign_source_489 = CALL_FUNCTION(tmp_called_value_119, tmp_args_value_119, tmp_kwargs_value_119);
        Py_DECREF(tmp_called_value_119);
        Py_DECREF(tmp_args_value_119);
        if (tmp_assign_source_489 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        assert(tmp_class_creation_60__prepared == NULL);
        tmp_class_creation_60__prepared = tmp_assign_source_489;
    }
    {
        bool tmp_condition_result_359;
        PyObject *tmp_operand_value_60;
        PyObject *tmp_expression_value_299;
        CHECK_OBJECT(tmp_class_creation_60__prepared);
        tmp_expression_value_299 = tmp_class_creation_60__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_299, mod_consts[208]);
        tmp_operand_value_60 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_60);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        tmp_condition_result_359 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_359 != false) {
            goto branch_yes_239;
        } else {
            goto branch_no_239;
        }
    }
    branch_yes_239:;
    {
        PyObject *tmp_raise_type_60;
        PyObject *tmp_raise_value_60;
        PyObject *tmp_left_value_60;
        PyObject *tmp_right_value_60;
        PyObject *tmp_tuple_element_237;
        PyObject *tmp_getattr_target_60;
        PyObject *tmp_getattr_attr_60;
        PyObject *tmp_getattr_default_60;
        tmp_raise_type_60 = PyExc_TypeError;
        tmp_left_value_60 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_60__metaclass);
        tmp_getattr_target_60 = tmp_class_creation_60__metaclass;
        tmp_getattr_attr_60 = mod_consts[210];
        tmp_getattr_default_60 = mod_consts[211];
        tmp_tuple_element_237 = BUILTIN_GETATTR(tmp_getattr_target_60, tmp_getattr_attr_60, tmp_getattr_default_60);
        if (tmp_tuple_element_237 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        tmp_right_value_60 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_300;
            PyObject *tmp_type_arg_120;
            PyTuple_SET_ITEM(tmp_right_value_60, 0, tmp_tuple_element_237);
            CHECK_OBJECT(tmp_class_creation_60__prepared);
            tmp_type_arg_120 = tmp_class_creation_60__prepared;
            tmp_expression_value_300 = BUILTIN_TYPE1(tmp_type_arg_120);
            assert(!(tmp_expression_value_300 == NULL));
            tmp_tuple_element_237 = LOOKUP_ATTRIBUTE(tmp_expression_value_300, mod_consts[210]);
            Py_DECREF(tmp_expression_value_300);
            if (tmp_tuple_element_237 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1814;

                goto tuple_build_exception_60;
            }
            PyTuple_SET_ITEM(tmp_right_value_60, 1, tmp_tuple_element_237);
        }
        goto tuple_build_noexception_60;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_60:;
        Py_DECREF(tmp_right_value_60);
        goto try_except_handler_180;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_60:;
        tmp_raise_value_60 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_60, tmp_right_value_60);
        Py_DECREF(tmp_right_value_60);
        if (tmp_raise_value_60 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_180;
        }
        exception_type = tmp_raise_type_60;
        Py_INCREF(tmp_raise_type_60);
        exception_value = tmp_raise_value_60;
        exception_lineno = 1814;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_180;
    }
    branch_no_239:;
    goto branch_end_238;
    branch_no_238:;
    {
        PyObject *tmp_assign_source_490;
        tmp_assign_source_490 = PyDict_New();
        assert(tmp_class_creation_60__prepared == NULL);
        tmp_class_creation_60__prepared = tmp_assign_source_490;
    }
    branch_end_238:;
    {
        PyObject *tmp_assign_source_491;
        {
            PyObject *tmp_set_locals_60;
            CHECK_OBJECT(tmp_class_creation_60__prepared);
            tmp_set_locals_60 = tmp_class_creation_60__prepared;
            locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814 = tmp_set_locals_60;
            Py_INCREF(tmp_set_locals_60);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_182;
        }
        tmp_dictset_value = mod_consts[467];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_182;
        }
        tmp_dictset_value = mod_consts[466];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_182;
        }
        if (isFrameUnusable(cache_frame_915114ef9d3450c26095aa1c64f5cff8_61)) {
            Py_XDECREF(cache_frame_915114ef9d3450c26095aa1c64f5cff8_61);

#if _DEBUG_REFCOUNTS
            if (cache_frame_915114ef9d3450c26095aa1c64f5cff8_61 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_915114ef9d3450c26095aa1c64f5cff8_61 = MAKE_FUNCTION_FRAME(codeobj_915114ef9d3450c26095aa1c64f5cff8, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_915114ef9d3450c26095aa1c64f5cff8_61->m_type_description == NULL);
        frame_915114ef9d3450c26095aa1c64f5cff8_61 = cache_frame_915114ef9d3450c26095aa1c64f5cff8_61;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_915114ef9d3450c26095aa1c64f5cff8_61);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_915114ef9d3450c26095aa1c64f5cff8_61) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[468];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1825;
            type_description_2 = "o";
            goto frame_exception_exit_61;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__73___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1827;
            type_description_2 = "o";
            goto frame_exception_exit_61;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_915114ef9d3450c26095aa1c64f5cff8_61);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_60;

        frame_exception_exit_61:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_915114ef9d3450c26095aa1c64f5cff8_61);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_915114ef9d3450c26095aa1c64f5cff8_61, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_915114ef9d3450c26095aa1c64f5cff8_61->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_915114ef9d3450c26095aa1c64f5cff8_61, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_915114ef9d3450c26095aa1c64f5cff8_61,
            type_description_2,
            outline_59_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_915114ef9d3450c26095aa1c64f5cff8_61 == cache_frame_915114ef9d3450c26095aa1c64f5cff8_61) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_915114ef9d3450c26095aa1c64f5cff8_61);
            cache_frame_915114ef9d3450c26095aa1c64f5cff8_61 = NULL;
        }

        assertFrameObject(frame_915114ef9d3450c26095aa1c64f5cff8_61);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_60;

        frame_no_exception_60:;
        goto skip_nested_handling_60;
        nested_frame_exit_60:;

        goto try_except_handler_182;
        skip_nested_handling_60:;
        {
            nuitka_bool tmp_condition_result_360;
            PyObject *tmp_cmp_expr_left_60;
            PyObject *tmp_cmp_expr_right_60;
            CHECK_OBJECT(tmp_class_creation_60__bases);
            tmp_cmp_expr_left_60 = tmp_class_creation_60__bases;
            CHECK_OBJECT(tmp_class_creation_60__bases_orig);
            tmp_cmp_expr_right_60 = tmp_class_creation_60__bases_orig;
            tmp_condition_result_360 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_60, tmp_cmp_expr_right_60);
            if (tmp_condition_result_360 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1814;

                goto try_except_handler_182;
            }
            if (tmp_condition_result_360 == NUITKA_BOOL_TRUE) {
                goto branch_yes_240;
            } else {
                goto branch_no_240;
            }
            assert(tmp_condition_result_360 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_240:;
        CHECK_OBJECT(tmp_class_creation_60__bases_orig);
        tmp_dictset_value = tmp_class_creation_60__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1814;

            goto try_except_handler_182;
        }
        branch_no_240:;
        {
            PyObject *tmp_assign_source_492;
            PyObject *tmp_called_value_120;
            PyObject *tmp_args_value_120;
            PyObject *tmp_tuple_element_238;
            PyObject *tmp_kwargs_value_120;
            CHECK_OBJECT(tmp_class_creation_60__metaclass);
            tmp_called_value_120 = tmp_class_creation_60__metaclass;
            tmp_tuple_element_238 = mod_consts[466];
            tmp_args_value_120 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_120, 0, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_60__bases);
            tmp_tuple_element_238 = tmp_class_creation_60__bases;
            PyTuple_SET_ITEM0(tmp_args_value_120, 1, tmp_tuple_element_238);
            tmp_tuple_element_238 = locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814;
            PyTuple_SET_ITEM0(tmp_args_value_120, 2, tmp_tuple_element_238);
            CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
            tmp_kwargs_value_120 = tmp_class_creation_60__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1814;
            tmp_assign_source_492 = CALL_FUNCTION(tmp_called_value_120, tmp_args_value_120, tmp_kwargs_value_120);
            Py_DECREF(tmp_args_value_120);
            if (tmp_assign_source_492 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1814;

                goto try_except_handler_182;
            }
            assert(outline_59_var___class__ == NULL);
            outline_59_var___class__ = tmp_assign_source_492;
        }
        CHECK_OBJECT(outline_59_var___class__);
        tmp_assign_source_491 = outline_59_var___class__;
        Py_INCREF(tmp_assign_source_491);
        goto try_return_handler_182;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_182:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814);
        locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814 = NULL;
        goto try_return_handler_181;
        // Exception handler code:
        try_except_handler_182:;
        exception_keeper_type_180 = exception_type;
        exception_keeper_value_180 = exception_value;
        exception_keeper_tb_180 = exception_tb;
        exception_keeper_lineno_180 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814);
        locals_xlwt$BIFFRecords$$$class__60_PrintGridLinesRecord_1814 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_180;
        exception_value = exception_keeper_value_180;
        exception_tb = exception_keeper_tb_180;
        exception_lineno = exception_keeper_lineno_180;

        goto try_except_handler_181;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_181:;
        CHECK_OBJECT(outline_59_var___class__);
        Py_DECREF(outline_59_var___class__);
        outline_59_var___class__ = NULL;
        goto outline_result_60;
        // Exception handler code:
        try_except_handler_181:;
        exception_keeper_type_181 = exception_type;
        exception_keeper_value_181 = exception_value;
        exception_keeper_tb_181 = exception_tb;
        exception_keeper_lineno_181 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_181;
        exception_value = exception_keeper_value_181;
        exception_tb = exception_keeper_tb_181;
        exception_lineno = exception_keeper_lineno_181;

        goto outline_exception_60;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_60:;
        exception_lineno = 1814;
        goto try_except_handler_180;
        outline_result_60:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[466], tmp_assign_source_491);
    }
    goto try_end_62;
    // Exception handler code:
    try_except_handler_180:;
    exception_keeper_type_182 = exception_type;
    exception_keeper_value_182 = exception_value;
    exception_keeper_tb_182 = exception_tb;
    exception_keeper_lineno_182 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_60__bases_orig);
    tmp_class_creation_60__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_60__bases);
    tmp_class_creation_60__bases = NULL;
    Py_XDECREF(tmp_class_creation_60__class_decl_dict);
    tmp_class_creation_60__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_60__metaclass);
    tmp_class_creation_60__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_60__prepared);
    tmp_class_creation_60__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_182;
    exception_value = exception_keeper_value_182;
    exception_tb = exception_keeper_tb_182;
    exception_lineno = exception_keeper_lineno_182;

    goto frame_exception_exit_1;
    // End of try:
    try_end_62:;
    CHECK_OBJECT(tmp_class_creation_60__bases_orig);
    Py_DECREF(tmp_class_creation_60__bases_orig);
    tmp_class_creation_60__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_60__bases);
    Py_DECREF(tmp_class_creation_60__bases);
    tmp_class_creation_60__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_60__class_decl_dict);
    Py_DECREF(tmp_class_creation_60__class_decl_dict);
    tmp_class_creation_60__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_60__metaclass);
    Py_DECREF(tmp_class_creation_60__metaclass);
    tmp_class_creation_60__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_60__prepared);
    Py_DECREF(tmp_class_creation_60__prepared);
    tmp_class_creation_60__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_493;
        PyObject *tmp_tuple_element_239;
        tmp_tuple_element_239 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_239 == NULL)) {
            tmp_tuple_element_239 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_239 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        tmp_assign_source_493 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_493, 0, tmp_tuple_element_239);
        assert(tmp_class_creation_61__bases_orig == NULL);
        tmp_class_creation_61__bases_orig = tmp_assign_source_493;
    }
    {
        PyObject *tmp_assign_source_494;
        PyObject *tmp_dircall_arg1_61;
        CHECK_OBJECT(tmp_class_creation_61__bases_orig);
        tmp_dircall_arg1_61 = tmp_class_creation_61__bases_orig;
        Py_INCREF(tmp_dircall_arg1_61);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_61};
            tmp_assign_source_494 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_494 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        assert(tmp_class_creation_61__bases == NULL);
        tmp_class_creation_61__bases = tmp_assign_source_494;
    }
    {
        PyObject *tmp_assign_source_495;
        tmp_assign_source_495 = PyDict_New();
        assert(tmp_class_creation_61__class_decl_dict == NULL);
        tmp_class_creation_61__class_decl_dict = tmp_assign_source_495;
    }
    {
        PyObject *tmp_assign_source_496;
        PyObject *tmp_metaclass_value_61;
        bool tmp_condition_result_361;
        PyObject *tmp_key_value_181;
        PyObject *tmp_dict_arg_value_181;
        PyObject *tmp_dict_arg_value_182;
        PyObject *tmp_key_value_182;
        nuitka_bool tmp_condition_result_362;
        int tmp_truth_name_61;
        PyObject *tmp_type_arg_121;
        PyObject *tmp_expression_value_301;
        PyObject *tmp_subscript_value_61;
        PyObject *tmp_bases_value_61;
        tmp_key_value_181 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_dict_arg_value_181 = tmp_class_creation_61__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_181, tmp_key_value_181);
        assert(!(tmp_res == -1));
        tmp_condition_result_361 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_361 != false) {
            goto condexpr_true_121;
        } else {
            goto condexpr_false_121;
        }
        condexpr_true_121:;
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_dict_arg_value_182 = tmp_class_creation_61__class_decl_dict;
        tmp_key_value_182 = mod_consts[205];
        tmp_metaclass_value_61 = DICT_GET_ITEM0(tmp_dict_arg_value_182, tmp_key_value_182);
        if (tmp_metaclass_value_61 == NULL) {
            tmp_metaclass_value_61 = Py_None;
        }
        assert(!(tmp_metaclass_value_61 == NULL));
        Py_INCREF(tmp_metaclass_value_61);
        goto condexpr_end_121;
        condexpr_false_121:;
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_truth_name_61 = CHECK_IF_TRUE(tmp_class_creation_61__bases);
        if (tmp_truth_name_61 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        tmp_condition_result_362 = tmp_truth_name_61 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_362 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_122;
        } else {
            goto condexpr_false_122;
        }
        condexpr_true_122:;
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_expression_value_301 = tmp_class_creation_61__bases;
        tmp_subscript_value_61 = mod_consts[4];
        tmp_type_arg_121 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_301, tmp_subscript_value_61, 0);
        if (tmp_type_arg_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        tmp_metaclass_value_61 = BUILTIN_TYPE1(tmp_type_arg_121);
        Py_DECREF(tmp_type_arg_121);
        if (tmp_metaclass_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        goto condexpr_end_122;
        condexpr_false_122:;
        tmp_metaclass_value_61 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_61);
        condexpr_end_122:;
        condexpr_end_121:;
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_bases_value_61 = tmp_class_creation_61__bases;
        tmp_assign_source_496 = SELECT_METACLASS(tmp_metaclass_value_61, tmp_bases_value_61);
        Py_DECREF(tmp_metaclass_value_61);
        if (tmp_assign_source_496 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        assert(tmp_class_creation_61__metaclass == NULL);
        tmp_class_creation_61__metaclass = tmp_assign_source_496;
    }
    {
        bool tmp_condition_result_363;
        PyObject *tmp_key_value_183;
        PyObject *tmp_dict_arg_value_183;
        tmp_key_value_183 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_dict_arg_value_183 = tmp_class_creation_61__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_183, tmp_key_value_183);
        assert(!(tmp_res == -1));
        tmp_condition_result_363 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_363 != false) {
            goto branch_yes_241;
        } else {
            goto branch_no_241;
        }
    }
    branch_yes_241:;
    CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_61__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1831;

        goto try_except_handler_183;
    }
    branch_no_241:;
    {
        nuitka_bool tmp_condition_result_364;
        PyObject *tmp_expression_value_302;
        CHECK_OBJECT(tmp_class_creation_61__metaclass);
        tmp_expression_value_302 = tmp_class_creation_61__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_302, mod_consts[206]);
        tmp_condition_result_364 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_364 == NUITKA_BOOL_TRUE) {
            goto branch_yes_242;
        } else {
            goto branch_no_242;
        }
    }
    branch_yes_242:;
    {
        PyObject *tmp_assign_source_497;
        PyObject *tmp_called_value_121;
        PyObject *tmp_expression_value_303;
        PyObject *tmp_args_value_121;
        PyObject *tmp_tuple_element_240;
        PyObject *tmp_kwargs_value_121;
        CHECK_OBJECT(tmp_class_creation_61__metaclass);
        tmp_expression_value_303 = tmp_class_creation_61__metaclass;
        tmp_called_value_121 = LOOKUP_ATTRIBUTE(tmp_expression_value_303, mod_consts[206]);
        if (tmp_called_value_121 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        tmp_tuple_element_240 = mod_consts[470];
        tmp_args_value_121 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_121, 0, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_61__bases);
        tmp_tuple_element_240 = tmp_class_creation_61__bases;
        PyTuple_SET_ITEM0(tmp_args_value_121, 1, tmp_tuple_element_240);
        CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
        tmp_kwargs_value_121 = tmp_class_creation_61__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1831;
        tmp_assign_source_497 = CALL_FUNCTION(tmp_called_value_121, tmp_args_value_121, tmp_kwargs_value_121);
        Py_DECREF(tmp_called_value_121);
        Py_DECREF(tmp_args_value_121);
        if (tmp_assign_source_497 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        assert(tmp_class_creation_61__prepared == NULL);
        tmp_class_creation_61__prepared = tmp_assign_source_497;
    }
    {
        bool tmp_condition_result_365;
        PyObject *tmp_operand_value_61;
        PyObject *tmp_expression_value_304;
        CHECK_OBJECT(tmp_class_creation_61__prepared);
        tmp_expression_value_304 = tmp_class_creation_61__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_304, mod_consts[208]);
        tmp_operand_value_61 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_61);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        tmp_condition_result_365 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_365 != false) {
            goto branch_yes_243;
        } else {
            goto branch_no_243;
        }
    }
    branch_yes_243:;
    {
        PyObject *tmp_raise_type_61;
        PyObject *tmp_raise_value_61;
        PyObject *tmp_left_value_61;
        PyObject *tmp_right_value_61;
        PyObject *tmp_tuple_element_241;
        PyObject *tmp_getattr_target_61;
        PyObject *tmp_getattr_attr_61;
        PyObject *tmp_getattr_default_61;
        tmp_raise_type_61 = PyExc_TypeError;
        tmp_left_value_61 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_61__metaclass);
        tmp_getattr_target_61 = tmp_class_creation_61__metaclass;
        tmp_getattr_attr_61 = mod_consts[210];
        tmp_getattr_default_61 = mod_consts[211];
        tmp_tuple_element_241 = BUILTIN_GETATTR(tmp_getattr_target_61, tmp_getattr_attr_61, tmp_getattr_default_61);
        if (tmp_tuple_element_241 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        tmp_right_value_61 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_305;
            PyObject *tmp_type_arg_122;
            PyTuple_SET_ITEM(tmp_right_value_61, 0, tmp_tuple_element_241);
            CHECK_OBJECT(tmp_class_creation_61__prepared);
            tmp_type_arg_122 = tmp_class_creation_61__prepared;
            tmp_expression_value_305 = BUILTIN_TYPE1(tmp_type_arg_122);
            assert(!(tmp_expression_value_305 == NULL));
            tmp_tuple_element_241 = LOOKUP_ATTRIBUTE(tmp_expression_value_305, mod_consts[210]);
            Py_DECREF(tmp_expression_value_305);
            if (tmp_tuple_element_241 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1831;

                goto tuple_build_exception_61;
            }
            PyTuple_SET_ITEM(tmp_right_value_61, 1, tmp_tuple_element_241);
        }
        goto tuple_build_noexception_61;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_61:;
        Py_DECREF(tmp_right_value_61);
        goto try_except_handler_183;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_61:;
        tmp_raise_value_61 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_61, tmp_right_value_61);
        Py_DECREF(tmp_right_value_61);
        if (tmp_raise_value_61 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_183;
        }
        exception_type = tmp_raise_type_61;
        Py_INCREF(tmp_raise_type_61);
        exception_value = tmp_raise_value_61;
        exception_lineno = 1831;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_183;
    }
    branch_no_243:;
    goto branch_end_242;
    branch_no_242:;
    {
        PyObject *tmp_assign_source_498;
        tmp_assign_source_498 = PyDict_New();
        assert(tmp_class_creation_61__prepared == NULL);
        tmp_class_creation_61__prepared = tmp_assign_source_498;
    }
    branch_end_242:;
    {
        PyObject *tmp_assign_source_499;
        {
            PyObject *tmp_set_locals_61;
            CHECK_OBJECT(tmp_class_creation_61__prepared);
            tmp_set_locals_61 = tmp_class_creation_61__prepared;
            locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831 = tmp_set_locals_61;
            Py_INCREF(tmp_set_locals_61);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_185;
        }
        tmp_dictset_value = mod_consts[471];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_185;
        }
        tmp_dictset_value = mod_consts[470];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_185;
        }
        if (isFrameUnusable(cache_frame_05e77e612c40531fa5a2e138b677bf86_62)) {
            Py_XDECREF(cache_frame_05e77e612c40531fa5a2e138b677bf86_62);

#if _DEBUG_REFCOUNTS
            if (cache_frame_05e77e612c40531fa5a2e138b677bf86_62 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_05e77e612c40531fa5a2e138b677bf86_62 = MAKE_FUNCTION_FRAME(codeobj_05e77e612c40531fa5a2e138b677bf86, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_05e77e612c40531fa5a2e138b677bf86_62->m_type_description == NULL);
        frame_05e77e612c40531fa5a2e138b677bf86_62 = cache_frame_05e77e612c40531fa5a2e138b677bf86_62;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_05e77e612c40531fa5a2e138b677bf86_62);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_05e77e612c40531fa5a2e138b677bf86_62) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[472];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1842;
            type_description_2 = "o";
            goto frame_exception_exit_62;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__74___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1844;
            type_description_2 = "o";
            goto frame_exception_exit_62;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_05e77e612c40531fa5a2e138b677bf86_62);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_61;

        frame_exception_exit_62:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_05e77e612c40531fa5a2e138b677bf86_62);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_05e77e612c40531fa5a2e138b677bf86_62, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_05e77e612c40531fa5a2e138b677bf86_62->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_05e77e612c40531fa5a2e138b677bf86_62, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_05e77e612c40531fa5a2e138b677bf86_62,
            type_description_2,
            outline_60_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_05e77e612c40531fa5a2e138b677bf86_62 == cache_frame_05e77e612c40531fa5a2e138b677bf86_62) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_05e77e612c40531fa5a2e138b677bf86_62);
            cache_frame_05e77e612c40531fa5a2e138b677bf86_62 = NULL;
        }

        assertFrameObject(frame_05e77e612c40531fa5a2e138b677bf86_62);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_61;

        frame_no_exception_61:;
        goto skip_nested_handling_61;
        nested_frame_exit_61:;

        goto try_except_handler_185;
        skip_nested_handling_61:;
        {
            nuitka_bool tmp_condition_result_366;
            PyObject *tmp_cmp_expr_left_61;
            PyObject *tmp_cmp_expr_right_61;
            CHECK_OBJECT(tmp_class_creation_61__bases);
            tmp_cmp_expr_left_61 = tmp_class_creation_61__bases;
            CHECK_OBJECT(tmp_class_creation_61__bases_orig);
            tmp_cmp_expr_right_61 = tmp_class_creation_61__bases_orig;
            tmp_condition_result_366 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_61, tmp_cmp_expr_right_61);
            if (tmp_condition_result_366 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1831;

                goto try_except_handler_185;
            }
            if (tmp_condition_result_366 == NUITKA_BOOL_TRUE) {
                goto branch_yes_244;
            } else {
                goto branch_no_244;
            }
            assert(tmp_condition_result_366 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_244:;
        CHECK_OBJECT(tmp_class_creation_61__bases_orig);
        tmp_dictset_value = tmp_class_creation_61__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1831;

            goto try_except_handler_185;
        }
        branch_no_244:;
        {
            PyObject *tmp_assign_source_500;
            PyObject *tmp_called_value_122;
            PyObject *tmp_args_value_122;
            PyObject *tmp_tuple_element_242;
            PyObject *tmp_kwargs_value_122;
            CHECK_OBJECT(tmp_class_creation_61__metaclass);
            tmp_called_value_122 = tmp_class_creation_61__metaclass;
            tmp_tuple_element_242 = mod_consts[470];
            tmp_args_value_122 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_122, 0, tmp_tuple_element_242);
            CHECK_OBJECT(tmp_class_creation_61__bases);
            tmp_tuple_element_242 = tmp_class_creation_61__bases;
            PyTuple_SET_ITEM0(tmp_args_value_122, 1, tmp_tuple_element_242);
            tmp_tuple_element_242 = locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831;
            PyTuple_SET_ITEM0(tmp_args_value_122, 2, tmp_tuple_element_242);
            CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
            tmp_kwargs_value_122 = tmp_class_creation_61__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1831;
            tmp_assign_source_500 = CALL_FUNCTION(tmp_called_value_122, tmp_args_value_122, tmp_kwargs_value_122);
            Py_DECREF(tmp_args_value_122);
            if (tmp_assign_source_500 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1831;

                goto try_except_handler_185;
            }
            assert(outline_60_var___class__ == NULL);
            outline_60_var___class__ = tmp_assign_source_500;
        }
        CHECK_OBJECT(outline_60_var___class__);
        tmp_assign_source_499 = outline_60_var___class__;
        Py_INCREF(tmp_assign_source_499);
        goto try_return_handler_185;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_185:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831);
        locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831 = NULL;
        goto try_return_handler_184;
        // Exception handler code:
        try_except_handler_185:;
        exception_keeper_type_183 = exception_type;
        exception_keeper_value_183 = exception_value;
        exception_keeper_tb_183 = exception_tb;
        exception_keeper_lineno_183 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831);
        locals_xlwt$BIFFRecords$$$class__61_GridSetRecord_1831 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_183;
        exception_value = exception_keeper_value_183;
        exception_tb = exception_keeper_tb_183;
        exception_lineno = exception_keeper_lineno_183;

        goto try_except_handler_184;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_184:;
        CHECK_OBJECT(outline_60_var___class__);
        Py_DECREF(outline_60_var___class__);
        outline_60_var___class__ = NULL;
        goto outline_result_61;
        // Exception handler code:
        try_except_handler_184:;
        exception_keeper_type_184 = exception_type;
        exception_keeper_value_184 = exception_value;
        exception_keeper_tb_184 = exception_tb;
        exception_keeper_lineno_184 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_184;
        exception_value = exception_keeper_value_184;
        exception_tb = exception_keeper_tb_184;
        exception_lineno = exception_keeper_lineno_184;

        goto outline_exception_61;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_61:;
        exception_lineno = 1831;
        goto try_except_handler_183;
        outline_result_61:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[470], tmp_assign_source_499);
    }
    goto try_end_63;
    // Exception handler code:
    try_except_handler_183:;
    exception_keeper_type_185 = exception_type;
    exception_keeper_value_185 = exception_value;
    exception_keeper_tb_185 = exception_tb;
    exception_keeper_lineno_185 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_61__bases_orig);
    tmp_class_creation_61__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_61__bases);
    tmp_class_creation_61__bases = NULL;
    Py_XDECREF(tmp_class_creation_61__class_decl_dict);
    tmp_class_creation_61__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_61__metaclass);
    tmp_class_creation_61__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_61__prepared);
    tmp_class_creation_61__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_185;
    exception_value = exception_keeper_value_185;
    exception_tb = exception_keeper_tb_185;
    exception_lineno = exception_keeper_lineno_185;

    goto frame_exception_exit_1;
    // End of try:
    try_end_63:;
    CHECK_OBJECT(tmp_class_creation_61__bases_orig);
    Py_DECREF(tmp_class_creation_61__bases_orig);
    tmp_class_creation_61__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_61__bases);
    Py_DECREF(tmp_class_creation_61__bases);
    tmp_class_creation_61__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_61__class_decl_dict);
    Py_DECREF(tmp_class_creation_61__class_decl_dict);
    tmp_class_creation_61__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_61__metaclass);
    Py_DECREF(tmp_class_creation_61__metaclass);
    tmp_class_creation_61__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_61__prepared);
    Py_DECREF(tmp_class_creation_61__prepared);
    tmp_class_creation_61__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_501;
        PyObject *tmp_tuple_element_243;
        tmp_tuple_element_243 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_243 == NULL)) {
            tmp_tuple_element_243 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_243 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        tmp_assign_source_501 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_501, 0, tmp_tuple_element_243);
        assert(tmp_class_creation_62__bases_orig == NULL);
        tmp_class_creation_62__bases_orig = tmp_assign_source_501;
    }
    {
        PyObject *tmp_assign_source_502;
        PyObject *tmp_dircall_arg1_62;
        CHECK_OBJECT(tmp_class_creation_62__bases_orig);
        tmp_dircall_arg1_62 = tmp_class_creation_62__bases_orig;
        Py_INCREF(tmp_dircall_arg1_62);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_62};
            tmp_assign_source_502 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_502 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        assert(tmp_class_creation_62__bases == NULL);
        tmp_class_creation_62__bases = tmp_assign_source_502;
    }
    {
        PyObject *tmp_assign_source_503;
        tmp_assign_source_503 = PyDict_New();
        assert(tmp_class_creation_62__class_decl_dict == NULL);
        tmp_class_creation_62__class_decl_dict = tmp_assign_source_503;
    }
    {
        PyObject *tmp_assign_source_504;
        PyObject *tmp_metaclass_value_62;
        bool tmp_condition_result_367;
        PyObject *tmp_key_value_184;
        PyObject *tmp_dict_arg_value_184;
        PyObject *tmp_dict_arg_value_185;
        PyObject *tmp_key_value_185;
        nuitka_bool tmp_condition_result_368;
        int tmp_truth_name_62;
        PyObject *tmp_type_arg_123;
        PyObject *tmp_expression_value_306;
        PyObject *tmp_subscript_value_62;
        PyObject *tmp_bases_value_62;
        tmp_key_value_184 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_dict_arg_value_184 = tmp_class_creation_62__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_184, tmp_key_value_184);
        assert(!(tmp_res == -1));
        tmp_condition_result_367 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_367 != false) {
            goto condexpr_true_123;
        } else {
            goto condexpr_false_123;
        }
        condexpr_true_123:;
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_dict_arg_value_185 = tmp_class_creation_62__class_decl_dict;
        tmp_key_value_185 = mod_consts[205];
        tmp_metaclass_value_62 = DICT_GET_ITEM0(tmp_dict_arg_value_185, tmp_key_value_185);
        if (tmp_metaclass_value_62 == NULL) {
            tmp_metaclass_value_62 = Py_None;
        }
        assert(!(tmp_metaclass_value_62 == NULL));
        Py_INCREF(tmp_metaclass_value_62);
        goto condexpr_end_123;
        condexpr_false_123:;
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_truth_name_62 = CHECK_IF_TRUE(tmp_class_creation_62__bases);
        if (tmp_truth_name_62 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        tmp_condition_result_368 = tmp_truth_name_62 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_368 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_124;
        } else {
            goto condexpr_false_124;
        }
        condexpr_true_124:;
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_expression_value_306 = tmp_class_creation_62__bases;
        tmp_subscript_value_62 = mod_consts[4];
        tmp_type_arg_123 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_306, tmp_subscript_value_62, 0);
        if (tmp_type_arg_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        tmp_metaclass_value_62 = BUILTIN_TYPE1(tmp_type_arg_123);
        Py_DECREF(tmp_type_arg_123);
        if (tmp_metaclass_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        goto condexpr_end_124;
        condexpr_false_124:;
        tmp_metaclass_value_62 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_62);
        condexpr_end_124:;
        condexpr_end_123:;
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_bases_value_62 = tmp_class_creation_62__bases;
        tmp_assign_source_504 = SELECT_METACLASS(tmp_metaclass_value_62, tmp_bases_value_62);
        Py_DECREF(tmp_metaclass_value_62);
        if (tmp_assign_source_504 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        assert(tmp_class_creation_62__metaclass == NULL);
        tmp_class_creation_62__metaclass = tmp_assign_source_504;
    }
    {
        bool tmp_condition_result_369;
        PyObject *tmp_key_value_186;
        PyObject *tmp_dict_arg_value_186;
        tmp_key_value_186 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_dict_arg_value_186 = tmp_class_creation_62__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_186, tmp_key_value_186);
        assert(!(tmp_res == -1));
        tmp_condition_result_369 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_369 != false) {
            goto branch_yes_245;
        } else {
            goto branch_no_245;
        }
    }
    branch_yes_245:;
    CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_62__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1848;

        goto try_except_handler_186;
    }
    branch_no_245:;
    {
        nuitka_bool tmp_condition_result_370;
        PyObject *tmp_expression_value_307;
        CHECK_OBJECT(tmp_class_creation_62__metaclass);
        tmp_expression_value_307 = tmp_class_creation_62__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_307, mod_consts[206]);
        tmp_condition_result_370 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_370 == NUITKA_BOOL_TRUE) {
            goto branch_yes_246;
        } else {
            goto branch_no_246;
        }
    }
    branch_yes_246:;
    {
        PyObject *tmp_assign_source_505;
        PyObject *tmp_called_value_123;
        PyObject *tmp_expression_value_308;
        PyObject *tmp_args_value_123;
        PyObject *tmp_tuple_element_244;
        PyObject *tmp_kwargs_value_123;
        CHECK_OBJECT(tmp_class_creation_62__metaclass);
        tmp_expression_value_308 = tmp_class_creation_62__metaclass;
        tmp_called_value_123 = LOOKUP_ATTRIBUTE(tmp_expression_value_308, mod_consts[206]);
        if (tmp_called_value_123 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        tmp_tuple_element_244 = mod_consts[474];
        tmp_args_value_123 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_123, 0, tmp_tuple_element_244);
        CHECK_OBJECT(tmp_class_creation_62__bases);
        tmp_tuple_element_244 = tmp_class_creation_62__bases;
        PyTuple_SET_ITEM0(tmp_args_value_123, 1, tmp_tuple_element_244);
        CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
        tmp_kwargs_value_123 = tmp_class_creation_62__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1848;
        tmp_assign_source_505 = CALL_FUNCTION(tmp_called_value_123, tmp_args_value_123, tmp_kwargs_value_123);
        Py_DECREF(tmp_called_value_123);
        Py_DECREF(tmp_args_value_123);
        if (tmp_assign_source_505 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        assert(tmp_class_creation_62__prepared == NULL);
        tmp_class_creation_62__prepared = tmp_assign_source_505;
    }
    {
        bool tmp_condition_result_371;
        PyObject *tmp_operand_value_62;
        PyObject *tmp_expression_value_309;
        CHECK_OBJECT(tmp_class_creation_62__prepared);
        tmp_expression_value_309 = tmp_class_creation_62__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_309, mod_consts[208]);
        tmp_operand_value_62 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_62);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        tmp_condition_result_371 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_371 != false) {
            goto branch_yes_247;
        } else {
            goto branch_no_247;
        }
    }
    branch_yes_247:;
    {
        PyObject *tmp_raise_type_62;
        PyObject *tmp_raise_value_62;
        PyObject *tmp_left_value_62;
        PyObject *tmp_right_value_62;
        PyObject *tmp_tuple_element_245;
        PyObject *tmp_getattr_target_62;
        PyObject *tmp_getattr_attr_62;
        PyObject *tmp_getattr_default_62;
        tmp_raise_type_62 = PyExc_TypeError;
        tmp_left_value_62 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_62__metaclass);
        tmp_getattr_target_62 = tmp_class_creation_62__metaclass;
        tmp_getattr_attr_62 = mod_consts[210];
        tmp_getattr_default_62 = mod_consts[211];
        tmp_tuple_element_245 = BUILTIN_GETATTR(tmp_getattr_target_62, tmp_getattr_attr_62, tmp_getattr_default_62);
        if (tmp_tuple_element_245 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        tmp_right_value_62 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_310;
            PyObject *tmp_type_arg_124;
            PyTuple_SET_ITEM(tmp_right_value_62, 0, tmp_tuple_element_245);
            CHECK_OBJECT(tmp_class_creation_62__prepared);
            tmp_type_arg_124 = tmp_class_creation_62__prepared;
            tmp_expression_value_310 = BUILTIN_TYPE1(tmp_type_arg_124);
            assert(!(tmp_expression_value_310 == NULL));
            tmp_tuple_element_245 = LOOKUP_ATTRIBUTE(tmp_expression_value_310, mod_consts[210]);
            Py_DECREF(tmp_expression_value_310);
            if (tmp_tuple_element_245 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1848;

                goto tuple_build_exception_62;
            }
            PyTuple_SET_ITEM(tmp_right_value_62, 1, tmp_tuple_element_245);
        }
        goto tuple_build_noexception_62;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_62:;
        Py_DECREF(tmp_right_value_62);
        goto try_except_handler_186;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_62:;
        tmp_raise_value_62 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_62, tmp_right_value_62);
        Py_DECREF(tmp_right_value_62);
        if (tmp_raise_value_62 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_186;
        }
        exception_type = tmp_raise_type_62;
        Py_INCREF(tmp_raise_type_62);
        exception_value = tmp_raise_value_62;
        exception_lineno = 1848;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_186;
    }
    branch_no_247:;
    goto branch_end_246;
    branch_no_246:;
    {
        PyObject *tmp_assign_source_506;
        tmp_assign_source_506 = PyDict_New();
        assert(tmp_class_creation_62__prepared == NULL);
        tmp_class_creation_62__prepared = tmp_assign_source_506;
    }
    branch_end_246:;
    {
        PyObject *tmp_assign_source_507;
        {
            PyObject *tmp_set_locals_62;
            CHECK_OBJECT(tmp_class_creation_62__prepared);
            tmp_set_locals_62 = tmp_class_creation_62__prepared;
            locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848 = tmp_set_locals_62;
            Py_INCREF(tmp_set_locals_62);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_188;
        }
        tmp_dictset_value = mod_consts[475];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_188;
        }
        tmp_dictset_value = mod_consts[474];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_188;
        }
        if (isFrameUnusable(cache_frame_3308b9c1b29985c42c72dff729bd22e2_63)) {
            Py_XDECREF(cache_frame_3308b9c1b29985c42c72dff729bd22e2_63);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3308b9c1b29985c42c72dff729bd22e2_63 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3308b9c1b29985c42c72dff729bd22e2_63 = MAKE_FUNCTION_FRAME(codeobj_3308b9c1b29985c42c72dff729bd22e2, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3308b9c1b29985c42c72dff729bd22e2_63->m_type_description == NULL);
        frame_3308b9c1b29985c42c72dff729bd22e2_63 = cache_frame_3308b9c1b29985c42c72dff729bd22e2_63;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3308b9c1b29985c42c72dff729bd22e2_63);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3308b9c1b29985c42c72dff729bd22e2_63) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[476];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1865;
            type_description_2 = "o";
            goto frame_exception_exit_63;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__75___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1867;
            type_description_2 = "o";
            goto frame_exception_exit_63;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3308b9c1b29985c42c72dff729bd22e2_63);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_62;

        frame_exception_exit_63:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3308b9c1b29985c42c72dff729bd22e2_63);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3308b9c1b29985c42c72dff729bd22e2_63, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3308b9c1b29985c42c72dff729bd22e2_63->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3308b9c1b29985c42c72dff729bd22e2_63, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3308b9c1b29985c42c72dff729bd22e2_63,
            type_description_2,
            outline_61_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3308b9c1b29985c42c72dff729bd22e2_63 == cache_frame_3308b9c1b29985c42c72dff729bd22e2_63) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3308b9c1b29985c42c72dff729bd22e2_63);
            cache_frame_3308b9c1b29985c42c72dff729bd22e2_63 = NULL;
        }

        assertFrameObject(frame_3308b9c1b29985c42c72dff729bd22e2_63);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_62;

        frame_no_exception_62:;
        goto skip_nested_handling_62;
        nested_frame_exit_62:;

        goto try_except_handler_188;
        skip_nested_handling_62:;
        {
            nuitka_bool tmp_condition_result_372;
            PyObject *tmp_cmp_expr_left_62;
            PyObject *tmp_cmp_expr_right_62;
            CHECK_OBJECT(tmp_class_creation_62__bases);
            tmp_cmp_expr_left_62 = tmp_class_creation_62__bases;
            CHECK_OBJECT(tmp_class_creation_62__bases_orig);
            tmp_cmp_expr_right_62 = tmp_class_creation_62__bases_orig;
            tmp_condition_result_372 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_62, tmp_cmp_expr_right_62);
            if (tmp_condition_result_372 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1848;

                goto try_except_handler_188;
            }
            if (tmp_condition_result_372 == NUITKA_BOOL_TRUE) {
                goto branch_yes_248;
            } else {
                goto branch_no_248;
            }
            assert(tmp_condition_result_372 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_248:;
        CHECK_OBJECT(tmp_class_creation_62__bases_orig);
        tmp_dictset_value = tmp_class_creation_62__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1848;

            goto try_except_handler_188;
        }
        branch_no_248:;
        {
            PyObject *tmp_assign_source_508;
            PyObject *tmp_called_value_124;
            PyObject *tmp_args_value_124;
            PyObject *tmp_tuple_element_246;
            PyObject *tmp_kwargs_value_124;
            CHECK_OBJECT(tmp_class_creation_62__metaclass);
            tmp_called_value_124 = tmp_class_creation_62__metaclass;
            tmp_tuple_element_246 = mod_consts[474];
            tmp_args_value_124 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_124, 0, tmp_tuple_element_246);
            CHECK_OBJECT(tmp_class_creation_62__bases);
            tmp_tuple_element_246 = tmp_class_creation_62__bases;
            PyTuple_SET_ITEM0(tmp_args_value_124, 1, tmp_tuple_element_246);
            tmp_tuple_element_246 = locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848;
            PyTuple_SET_ITEM0(tmp_args_value_124, 2, tmp_tuple_element_246);
            CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
            tmp_kwargs_value_124 = tmp_class_creation_62__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1848;
            tmp_assign_source_508 = CALL_FUNCTION(tmp_called_value_124, tmp_args_value_124, tmp_kwargs_value_124);
            Py_DECREF(tmp_args_value_124);
            if (tmp_assign_source_508 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1848;

                goto try_except_handler_188;
            }
            assert(outline_61_var___class__ == NULL);
            outline_61_var___class__ = tmp_assign_source_508;
        }
        CHECK_OBJECT(outline_61_var___class__);
        tmp_assign_source_507 = outline_61_var___class__;
        Py_INCREF(tmp_assign_source_507);
        goto try_return_handler_188;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_188:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848);
        locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848 = NULL;
        goto try_return_handler_187;
        // Exception handler code:
        try_except_handler_188:;
        exception_keeper_type_186 = exception_type;
        exception_keeper_value_186 = exception_value;
        exception_keeper_tb_186 = exception_tb;
        exception_keeper_lineno_186 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848);
        locals_xlwt$BIFFRecords$$$class__62_DefaultRowHeightRecord_1848 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_186;
        exception_value = exception_keeper_value_186;
        exception_tb = exception_keeper_tb_186;
        exception_lineno = exception_keeper_lineno_186;

        goto try_except_handler_187;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_187:;
        CHECK_OBJECT(outline_61_var___class__);
        Py_DECREF(outline_61_var___class__);
        outline_61_var___class__ = NULL;
        goto outline_result_62;
        // Exception handler code:
        try_except_handler_187:;
        exception_keeper_type_187 = exception_type;
        exception_keeper_value_187 = exception_value;
        exception_keeper_tb_187 = exception_tb;
        exception_keeper_lineno_187 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_187;
        exception_value = exception_keeper_value_187;
        exception_tb = exception_keeper_tb_187;
        exception_lineno = exception_keeper_lineno_187;

        goto outline_exception_62;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_62:;
        exception_lineno = 1848;
        goto try_except_handler_186;
        outline_result_62:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[474], tmp_assign_source_507);
    }
    goto try_end_64;
    // Exception handler code:
    try_except_handler_186:;
    exception_keeper_type_188 = exception_type;
    exception_keeper_value_188 = exception_value;
    exception_keeper_tb_188 = exception_tb;
    exception_keeper_lineno_188 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_62__bases_orig);
    tmp_class_creation_62__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_62__bases);
    tmp_class_creation_62__bases = NULL;
    Py_XDECREF(tmp_class_creation_62__class_decl_dict);
    tmp_class_creation_62__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_62__metaclass);
    tmp_class_creation_62__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_62__prepared);
    tmp_class_creation_62__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_188;
    exception_value = exception_keeper_value_188;
    exception_tb = exception_keeper_tb_188;
    exception_lineno = exception_keeper_lineno_188;

    goto frame_exception_exit_1;
    // End of try:
    try_end_64:;
    CHECK_OBJECT(tmp_class_creation_62__bases_orig);
    Py_DECREF(tmp_class_creation_62__bases_orig);
    tmp_class_creation_62__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_62__bases);
    Py_DECREF(tmp_class_creation_62__bases);
    tmp_class_creation_62__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_62__class_decl_dict);
    Py_DECREF(tmp_class_creation_62__class_decl_dict);
    tmp_class_creation_62__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_62__metaclass);
    Py_DECREF(tmp_class_creation_62__metaclass);
    tmp_class_creation_62__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_62__prepared);
    Py_DECREF(tmp_class_creation_62__prepared);
    tmp_class_creation_62__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_509;
        PyObject *tmp_tuple_element_247;
        tmp_tuple_element_247 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_247 == NULL)) {
            tmp_tuple_element_247 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_247 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        tmp_assign_source_509 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_509, 0, tmp_tuple_element_247);
        assert(tmp_class_creation_63__bases_orig == NULL);
        tmp_class_creation_63__bases_orig = tmp_assign_source_509;
    }
    {
        PyObject *tmp_assign_source_510;
        PyObject *tmp_dircall_arg1_63;
        CHECK_OBJECT(tmp_class_creation_63__bases_orig);
        tmp_dircall_arg1_63 = tmp_class_creation_63__bases_orig;
        Py_INCREF(tmp_dircall_arg1_63);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_63};
            tmp_assign_source_510 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_510 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        assert(tmp_class_creation_63__bases == NULL);
        tmp_class_creation_63__bases = tmp_assign_source_510;
    }
    {
        PyObject *tmp_assign_source_511;
        tmp_assign_source_511 = PyDict_New();
        assert(tmp_class_creation_63__class_decl_dict == NULL);
        tmp_class_creation_63__class_decl_dict = tmp_assign_source_511;
    }
    {
        PyObject *tmp_assign_source_512;
        PyObject *tmp_metaclass_value_63;
        bool tmp_condition_result_373;
        PyObject *tmp_key_value_187;
        PyObject *tmp_dict_arg_value_187;
        PyObject *tmp_dict_arg_value_188;
        PyObject *tmp_key_value_188;
        nuitka_bool tmp_condition_result_374;
        int tmp_truth_name_63;
        PyObject *tmp_type_arg_125;
        PyObject *tmp_expression_value_311;
        PyObject *tmp_subscript_value_63;
        PyObject *tmp_bases_value_63;
        tmp_key_value_187 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_dict_arg_value_187 = tmp_class_creation_63__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_187, tmp_key_value_187);
        assert(!(tmp_res == -1));
        tmp_condition_result_373 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_373 != false) {
            goto condexpr_true_125;
        } else {
            goto condexpr_false_125;
        }
        condexpr_true_125:;
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_dict_arg_value_188 = tmp_class_creation_63__class_decl_dict;
        tmp_key_value_188 = mod_consts[205];
        tmp_metaclass_value_63 = DICT_GET_ITEM0(tmp_dict_arg_value_188, tmp_key_value_188);
        if (tmp_metaclass_value_63 == NULL) {
            tmp_metaclass_value_63 = Py_None;
        }
        assert(!(tmp_metaclass_value_63 == NULL));
        Py_INCREF(tmp_metaclass_value_63);
        goto condexpr_end_125;
        condexpr_false_125:;
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_truth_name_63 = CHECK_IF_TRUE(tmp_class_creation_63__bases);
        if (tmp_truth_name_63 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        tmp_condition_result_374 = tmp_truth_name_63 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_374 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_126;
        } else {
            goto condexpr_false_126;
        }
        condexpr_true_126:;
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_expression_value_311 = tmp_class_creation_63__bases;
        tmp_subscript_value_63 = mod_consts[4];
        tmp_type_arg_125 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_311, tmp_subscript_value_63, 0);
        if (tmp_type_arg_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        tmp_metaclass_value_63 = BUILTIN_TYPE1(tmp_type_arg_125);
        Py_DECREF(tmp_type_arg_125);
        if (tmp_metaclass_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        goto condexpr_end_126;
        condexpr_false_126:;
        tmp_metaclass_value_63 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_63);
        condexpr_end_126:;
        condexpr_end_125:;
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_bases_value_63 = tmp_class_creation_63__bases;
        tmp_assign_source_512 = SELECT_METACLASS(tmp_metaclass_value_63, tmp_bases_value_63);
        Py_DECREF(tmp_metaclass_value_63);
        if (tmp_assign_source_512 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        assert(tmp_class_creation_63__metaclass == NULL);
        tmp_class_creation_63__metaclass = tmp_assign_source_512;
    }
    {
        bool tmp_condition_result_375;
        PyObject *tmp_key_value_189;
        PyObject *tmp_dict_arg_value_189;
        tmp_key_value_189 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_dict_arg_value_189 = tmp_class_creation_63__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_189, tmp_key_value_189);
        assert(!(tmp_res == -1));
        tmp_condition_result_375 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_375 != false) {
            goto branch_yes_249;
        } else {
            goto branch_no_249;
        }
    }
    branch_yes_249:;
    CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_63__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1871;

        goto try_except_handler_189;
    }
    branch_no_249:;
    {
        nuitka_bool tmp_condition_result_376;
        PyObject *tmp_expression_value_312;
        CHECK_OBJECT(tmp_class_creation_63__metaclass);
        tmp_expression_value_312 = tmp_class_creation_63__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_312, mod_consts[206]);
        tmp_condition_result_376 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_376 == NUITKA_BOOL_TRUE) {
            goto branch_yes_250;
        } else {
            goto branch_no_250;
        }
    }
    branch_yes_250:;
    {
        PyObject *tmp_assign_source_513;
        PyObject *tmp_called_value_125;
        PyObject *tmp_expression_value_313;
        PyObject *tmp_args_value_125;
        PyObject *tmp_tuple_element_248;
        PyObject *tmp_kwargs_value_125;
        CHECK_OBJECT(tmp_class_creation_63__metaclass);
        tmp_expression_value_313 = tmp_class_creation_63__metaclass;
        tmp_called_value_125 = LOOKUP_ATTRIBUTE(tmp_expression_value_313, mod_consts[206]);
        if (tmp_called_value_125 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        tmp_tuple_element_248 = mod_consts[478];
        tmp_args_value_125 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_125, 0, tmp_tuple_element_248);
        CHECK_OBJECT(tmp_class_creation_63__bases);
        tmp_tuple_element_248 = tmp_class_creation_63__bases;
        PyTuple_SET_ITEM0(tmp_args_value_125, 1, tmp_tuple_element_248);
        CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
        tmp_kwargs_value_125 = tmp_class_creation_63__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1871;
        tmp_assign_source_513 = CALL_FUNCTION(tmp_called_value_125, tmp_args_value_125, tmp_kwargs_value_125);
        Py_DECREF(tmp_called_value_125);
        Py_DECREF(tmp_args_value_125);
        if (tmp_assign_source_513 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        assert(tmp_class_creation_63__prepared == NULL);
        tmp_class_creation_63__prepared = tmp_assign_source_513;
    }
    {
        bool tmp_condition_result_377;
        PyObject *tmp_operand_value_63;
        PyObject *tmp_expression_value_314;
        CHECK_OBJECT(tmp_class_creation_63__prepared);
        tmp_expression_value_314 = tmp_class_creation_63__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_314, mod_consts[208]);
        tmp_operand_value_63 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_63);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        tmp_condition_result_377 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_377 != false) {
            goto branch_yes_251;
        } else {
            goto branch_no_251;
        }
    }
    branch_yes_251:;
    {
        PyObject *tmp_raise_type_63;
        PyObject *tmp_raise_value_63;
        PyObject *tmp_left_value_63;
        PyObject *tmp_right_value_63;
        PyObject *tmp_tuple_element_249;
        PyObject *tmp_getattr_target_63;
        PyObject *tmp_getattr_attr_63;
        PyObject *tmp_getattr_default_63;
        tmp_raise_type_63 = PyExc_TypeError;
        tmp_left_value_63 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_63__metaclass);
        tmp_getattr_target_63 = tmp_class_creation_63__metaclass;
        tmp_getattr_attr_63 = mod_consts[210];
        tmp_getattr_default_63 = mod_consts[211];
        tmp_tuple_element_249 = BUILTIN_GETATTR(tmp_getattr_target_63, tmp_getattr_attr_63, tmp_getattr_default_63);
        if (tmp_tuple_element_249 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        tmp_right_value_63 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_315;
            PyObject *tmp_type_arg_126;
            PyTuple_SET_ITEM(tmp_right_value_63, 0, tmp_tuple_element_249);
            CHECK_OBJECT(tmp_class_creation_63__prepared);
            tmp_type_arg_126 = tmp_class_creation_63__prepared;
            tmp_expression_value_315 = BUILTIN_TYPE1(tmp_type_arg_126);
            assert(!(tmp_expression_value_315 == NULL));
            tmp_tuple_element_249 = LOOKUP_ATTRIBUTE(tmp_expression_value_315, mod_consts[210]);
            Py_DECREF(tmp_expression_value_315);
            if (tmp_tuple_element_249 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1871;

                goto tuple_build_exception_63;
            }
            PyTuple_SET_ITEM(tmp_right_value_63, 1, tmp_tuple_element_249);
        }
        goto tuple_build_noexception_63;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_63:;
        Py_DECREF(tmp_right_value_63);
        goto try_except_handler_189;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_63:;
        tmp_raise_value_63 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_63, tmp_right_value_63);
        Py_DECREF(tmp_right_value_63);
        if (tmp_raise_value_63 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_189;
        }
        exception_type = tmp_raise_type_63;
        Py_INCREF(tmp_raise_type_63);
        exception_value = tmp_raise_value_63;
        exception_lineno = 1871;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_189;
    }
    branch_no_251:;
    goto branch_end_250;
    branch_no_250:;
    {
        PyObject *tmp_assign_source_514;
        tmp_assign_source_514 = PyDict_New();
        assert(tmp_class_creation_63__prepared == NULL);
        tmp_class_creation_63__prepared = tmp_assign_source_514;
    }
    branch_end_250:;
    {
        PyObject *tmp_assign_source_515;
        {
            PyObject *tmp_set_locals_63;
            CHECK_OBJECT(tmp_class_creation_63__prepared);
            tmp_set_locals_63 = tmp_class_creation_63__prepared;
            locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871 = tmp_set_locals_63;
            Py_INCREF(tmp_set_locals_63);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_191;
        }
        tmp_dictset_value = mod_consts[479];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_191;
        }
        tmp_dictset_value = mod_consts[478];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_191;
        }
        if (isFrameUnusable(cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64)) {
            Py_XDECREF(cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64);

#if _DEBUG_REFCOUNTS
            if (cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64 = MAKE_FUNCTION_FRAME(codeobj_bb4461a74cd64b13c71a398ee47bf2dd, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64->m_type_description == NULL);
        frame_bb4461a74cd64b13c71a398ee47bf2dd_64 = cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_bb4461a74cd64b13c71a398ee47bf2dd_64);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_bb4461a74cd64b13c71a398ee47bf2dd_64) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[480];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1883;
            type_description_2 = "o";
            goto frame_exception_exit_64;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__76___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1885;
            type_description_2 = "o";
            goto frame_exception_exit_64;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bb4461a74cd64b13c71a398ee47bf2dd_64);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_63;

        frame_exception_exit_64:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_bb4461a74cd64b13c71a398ee47bf2dd_64);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_bb4461a74cd64b13c71a398ee47bf2dd_64, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_bb4461a74cd64b13c71a398ee47bf2dd_64->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_bb4461a74cd64b13c71a398ee47bf2dd_64, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_bb4461a74cd64b13c71a398ee47bf2dd_64,
            type_description_2,
            outline_62_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_bb4461a74cd64b13c71a398ee47bf2dd_64 == cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64);
            cache_frame_bb4461a74cd64b13c71a398ee47bf2dd_64 = NULL;
        }

        assertFrameObject(frame_bb4461a74cd64b13c71a398ee47bf2dd_64);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_63;

        frame_no_exception_63:;
        goto skip_nested_handling_63;
        nested_frame_exit_63:;

        goto try_except_handler_191;
        skip_nested_handling_63:;
        {
            nuitka_bool tmp_condition_result_378;
            PyObject *tmp_cmp_expr_left_63;
            PyObject *tmp_cmp_expr_right_63;
            CHECK_OBJECT(tmp_class_creation_63__bases);
            tmp_cmp_expr_left_63 = tmp_class_creation_63__bases;
            CHECK_OBJECT(tmp_class_creation_63__bases_orig);
            tmp_cmp_expr_right_63 = tmp_class_creation_63__bases_orig;
            tmp_condition_result_378 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_63, tmp_cmp_expr_right_63);
            if (tmp_condition_result_378 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1871;

                goto try_except_handler_191;
            }
            if (tmp_condition_result_378 == NUITKA_BOOL_TRUE) {
                goto branch_yes_252;
            } else {
                goto branch_no_252;
            }
            assert(tmp_condition_result_378 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_252:;
        CHECK_OBJECT(tmp_class_creation_63__bases_orig);
        tmp_dictset_value = tmp_class_creation_63__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1871;

            goto try_except_handler_191;
        }
        branch_no_252:;
        {
            PyObject *tmp_assign_source_516;
            PyObject *tmp_called_value_126;
            PyObject *tmp_args_value_126;
            PyObject *tmp_tuple_element_250;
            PyObject *tmp_kwargs_value_126;
            CHECK_OBJECT(tmp_class_creation_63__metaclass);
            tmp_called_value_126 = tmp_class_creation_63__metaclass;
            tmp_tuple_element_250 = mod_consts[478];
            tmp_args_value_126 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_126, 0, tmp_tuple_element_250);
            CHECK_OBJECT(tmp_class_creation_63__bases);
            tmp_tuple_element_250 = tmp_class_creation_63__bases;
            PyTuple_SET_ITEM0(tmp_args_value_126, 1, tmp_tuple_element_250);
            tmp_tuple_element_250 = locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871;
            PyTuple_SET_ITEM0(tmp_args_value_126, 2, tmp_tuple_element_250);
            CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
            tmp_kwargs_value_126 = tmp_class_creation_63__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1871;
            tmp_assign_source_516 = CALL_FUNCTION(tmp_called_value_126, tmp_args_value_126, tmp_kwargs_value_126);
            Py_DECREF(tmp_args_value_126);
            if (tmp_assign_source_516 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1871;

                goto try_except_handler_191;
            }
            assert(outline_62_var___class__ == NULL);
            outline_62_var___class__ = tmp_assign_source_516;
        }
        CHECK_OBJECT(outline_62_var___class__);
        tmp_assign_source_515 = outline_62_var___class__;
        Py_INCREF(tmp_assign_source_515);
        goto try_return_handler_191;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_191:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871);
        locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871 = NULL;
        goto try_return_handler_190;
        // Exception handler code:
        try_except_handler_191:;
        exception_keeper_type_189 = exception_type;
        exception_keeper_value_189 = exception_value;
        exception_keeper_tb_189 = exception_tb;
        exception_keeper_lineno_189 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871);
        locals_xlwt$BIFFRecords$$$class__63_DefColWidthRecord_1871 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_189;
        exception_value = exception_keeper_value_189;
        exception_tb = exception_keeper_tb_189;
        exception_lineno = exception_keeper_lineno_189;

        goto try_except_handler_190;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_190:;
        CHECK_OBJECT(outline_62_var___class__);
        Py_DECREF(outline_62_var___class__);
        outline_62_var___class__ = NULL;
        goto outline_result_63;
        // Exception handler code:
        try_except_handler_190:;
        exception_keeper_type_190 = exception_type;
        exception_keeper_value_190 = exception_value;
        exception_keeper_tb_190 = exception_tb;
        exception_keeper_lineno_190 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_190;
        exception_value = exception_keeper_value_190;
        exception_tb = exception_keeper_tb_190;
        exception_lineno = exception_keeper_lineno_190;

        goto outline_exception_63;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_63:;
        exception_lineno = 1871;
        goto try_except_handler_189;
        outline_result_63:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[478], tmp_assign_source_515);
    }
    goto try_end_65;
    // Exception handler code:
    try_except_handler_189:;
    exception_keeper_type_191 = exception_type;
    exception_keeper_value_191 = exception_value;
    exception_keeper_tb_191 = exception_tb;
    exception_keeper_lineno_191 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_63__bases_orig);
    tmp_class_creation_63__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_63__bases);
    tmp_class_creation_63__bases = NULL;
    Py_XDECREF(tmp_class_creation_63__class_decl_dict);
    tmp_class_creation_63__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_63__metaclass);
    tmp_class_creation_63__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_63__prepared);
    tmp_class_creation_63__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_191;
    exception_value = exception_keeper_value_191;
    exception_tb = exception_keeper_tb_191;
    exception_lineno = exception_keeper_lineno_191;

    goto frame_exception_exit_1;
    // End of try:
    try_end_65:;
    CHECK_OBJECT(tmp_class_creation_63__bases_orig);
    Py_DECREF(tmp_class_creation_63__bases_orig);
    tmp_class_creation_63__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_63__bases);
    Py_DECREF(tmp_class_creation_63__bases);
    tmp_class_creation_63__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_63__class_decl_dict);
    Py_DECREF(tmp_class_creation_63__class_decl_dict);
    tmp_class_creation_63__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_63__metaclass);
    Py_DECREF(tmp_class_creation_63__metaclass);
    tmp_class_creation_63__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_63__prepared);
    Py_DECREF(tmp_class_creation_63__prepared);
    tmp_class_creation_63__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_517;
        PyObject *tmp_tuple_element_251;
        tmp_tuple_element_251 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_251 == NULL)) {
            tmp_tuple_element_251 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_251 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        tmp_assign_source_517 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_517, 0, tmp_tuple_element_251);
        assert(tmp_class_creation_64__bases_orig == NULL);
        tmp_class_creation_64__bases_orig = tmp_assign_source_517;
    }
    {
        PyObject *tmp_assign_source_518;
        PyObject *tmp_dircall_arg1_64;
        CHECK_OBJECT(tmp_class_creation_64__bases_orig);
        tmp_dircall_arg1_64 = tmp_class_creation_64__bases_orig;
        Py_INCREF(tmp_dircall_arg1_64);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_64};
            tmp_assign_source_518 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_518 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        assert(tmp_class_creation_64__bases == NULL);
        tmp_class_creation_64__bases = tmp_assign_source_518;
    }
    {
        PyObject *tmp_assign_source_519;
        tmp_assign_source_519 = PyDict_New();
        assert(tmp_class_creation_64__class_decl_dict == NULL);
        tmp_class_creation_64__class_decl_dict = tmp_assign_source_519;
    }
    {
        PyObject *tmp_assign_source_520;
        PyObject *tmp_metaclass_value_64;
        bool tmp_condition_result_379;
        PyObject *tmp_key_value_190;
        PyObject *tmp_dict_arg_value_190;
        PyObject *tmp_dict_arg_value_191;
        PyObject *tmp_key_value_191;
        nuitka_bool tmp_condition_result_380;
        int tmp_truth_name_64;
        PyObject *tmp_type_arg_127;
        PyObject *tmp_expression_value_316;
        PyObject *tmp_subscript_value_64;
        PyObject *tmp_bases_value_64;
        tmp_key_value_190 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_dict_arg_value_190 = tmp_class_creation_64__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_190, tmp_key_value_190);
        assert(!(tmp_res == -1));
        tmp_condition_result_379 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_379 != false) {
            goto condexpr_true_127;
        } else {
            goto condexpr_false_127;
        }
        condexpr_true_127:;
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_dict_arg_value_191 = tmp_class_creation_64__class_decl_dict;
        tmp_key_value_191 = mod_consts[205];
        tmp_metaclass_value_64 = DICT_GET_ITEM0(tmp_dict_arg_value_191, tmp_key_value_191);
        if (tmp_metaclass_value_64 == NULL) {
            tmp_metaclass_value_64 = Py_None;
        }
        assert(!(tmp_metaclass_value_64 == NULL));
        Py_INCREF(tmp_metaclass_value_64);
        goto condexpr_end_127;
        condexpr_false_127:;
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_truth_name_64 = CHECK_IF_TRUE(tmp_class_creation_64__bases);
        if (tmp_truth_name_64 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        tmp_condition_result_380 = tmp_truth_name_64 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_380 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_128;
        } else {
            goto condexpr_false_128;
        }
        condexpr_true_128:;
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_expression_value_316 = tmp_class_creation_64__bases;
        tmp_subscript_value_64 = mod_consts[4];
        tmp_type_arg_127 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_316, tmp_subscript_value_64, 0);
        if (tmp_type_arg_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        tmp_metaclass_value_64 = BUILTIN_TYPE1(tmp_type_arg_127);
        Py_DECREF(tmp_type_arg_127);
        if (tmp_metaclass_value_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        goto condexpr_end_128;
        condexpr_false_128:;
        tmp_metaclass_value_64 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_64);
        condexpr_end_128:;
        condexpr_end_127:;
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_bases_value_64 = tmp_class_creation_64__bases;
        tmp_assign_source_520 = SELECT_METACLASS(tmp_metaclass_value_64, tmp_bases_value_64);
        Py_DECREF(tmp_metaclass_value_64);
        if (tmp_assign_source_520 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        assert(tmp_class_creation_64__metaclass == NULL);
        tmp_class_creation_64__metaclass = tmp_assign_source_520;
    }
    {
        bool tmp_condition_result_381;
        PyObject *tmp_key_value_192;
        PyObject *tmp_dict_arg_value_192;
        tmp_key_value_192 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_dict_arg_value_192 = tmp_class_creation_64__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_192, tmp_key_value_192);
        assert(!(tmp_res == -1));
        tmp_condition_result_381 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_381 != false) {
            goto branch_yes_253;
        } else {
            goto branch_no_253;
        }
    }
    branch_yes_253:;
    CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_64__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1888;

        goto try_except_handler_192;
    }
    branch_no_253:;
    {
        nuitka_bool tmp_condition_result_382;
        PyObject *tmp_expression_value_317;
        CHECK_OBJECT(tmp_class_creation_64__metaclass);
        tmp_expression_value_317 = tmp_class_creation_64__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_317, mod_consts[206]);
        tmp_condition_result_382 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_382 == NUITKA_BOOL_TRUE) {
            goto branch_yes_254;
        } else {
            goto branch_no_254;
        }
    }
    branch_yes_254:;
    {
        PyObject *tmp_assign_source_521;
        PyObject *tmp_called_value_127;
        PyObject *tmp_expression_value_318;
        PyObject *tmp_args_value_127;
        PyObject *tmp_tuple_element_252;
        PyObject *tmp_kwargs_value_127;
        CHECK_OBJECT(tmp_class_creation_64__metaclass);
        tmp_expression_value_318 = tmp_class_creation_64__metaclass;
        tmp_called_value_127 = LOOKUP_ATTRIBUTE(tmp_expression_value_318, mod_consts[206]);
        if (tmp_called_value_127 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        tmp_tuple_element_252 = mod_consts[482];
        tmp_args_value_127 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_127, 0, tmp_tuple_element_252);
        CHECK_OBJECT(tmp_class_creation_64__bases);
        tmp_tuple_element_252 = tmp_class_creation_64__bases;
        PyTuple_SET_ITEM0(tmp_args_value_127, 1, tmp_tuple_element_252);
        CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
        tmp_kwargs_value_127 = tmp_class_creation_64__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1888;
        tmp_assign_source_521 = CALL_FUNCTION(tmp_called_value_127, tmp_args_value_127, tmp_kwargs_value_127);
        Py_DECREF(tmp_called_value_127);
        Py_DECREF(tmp_args_value_127);
        if (tmp_assign_source_521 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        assert(tmp_class_creation_64__prepared == NULL);
        tmp_class_creation_64__prepared = tmp_assign_source_521;
    }
    {
        bool tmp_condition_result_383;
        PyObject *tmp_operand_value_64;
        PyObject *tmp_expression_value_319;
        CHECK_OBJECT(tmp_class_creation_64__prepared);
        tmp_expression_value_319 = tmp_class_creation_64__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_319, mod_consts[208]);
        tmp_operand_value_64 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_64);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        tmp_condition_result_383 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_383 != false) {
            goto branch_yes_255;
        } else {
            goto branch_no_255;
        }
    }
    branch_yes_255:;
    {
        PyObject *tmp_raise_type_64;
        PyObject *tmp_raise_value_64;
        PyObject *tmp_left_value_64;
        PyObject *tmp_right_value_64;
        PyObject *tmp_tuple_element_253;
        PyObject *tmp_getattr_target_64;
        PyObject *tmp_getattr_attr_64;
        PyObject *tmp_getattr_default_64;
        tmp_raise_type_64 = PyExc_TypeError;
        tmp_left_value_64 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_64__metaclass);
        tmp_getattr_target_64 = tmp_class_creation_64__metaclass;
        tmp_getattr_attr_64 = mod_consts[210];
        tmp_getattr_default_64 = mod_consts[211];
        tmp_tuple_element_253 = BUILTIN_GETATTR(tmp_getattr_target_64, tmp_getattr_attr_64, tmp_getattr_default_64);
        if (tmp_tuple_element_253 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        tmp_right_value_64 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_320;
            PyObject *tmp_type_arg_128;
            PyTuple_SET_ITEM(tmp_right_value_64, 0, tmp_tuple_element_253);
            CHECK_OBJECT(tmp_class_creation_64__prepared);
            tmp_type_arg_128 = tmp_class_creation_64__prepared;
            tmp_expression_value_320 = BUILTIN_TYPE1(tmp_type_arg_128);
            assert(!(tmp_expression_value_320 == NULL));
            tmp_tuple_element_253 = LOOKUP_ATTRIBUTE(tmp_expression_value_320, mod_consts[210]);
            Py_DECREF(tmp_expression_value_320);
            if (tmp_tuple_element_253 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1888;

                goto tuple_build_exception_64;
            }
            PyTuple_SET_ITEM(tmp_right_value_64, 1, tmp_tuple_element_253);
        }
        goto tuple_build_noexception_64;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_64:;
        Py_DECREF(tmp_right_value_64);
        goto try_except_handler_192;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_64:;
        tmp_raise_value_64 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_64, tmp_right_value_64);
        Py_DECREF(tmp_right_value_64);
        if (tmp_raise_value_64 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_192;
        }
        exception_type = tmp_raise_type_64;
        Py_INCREF(tmp_raise_type_64);
        exception_value = tmp_raise_value_64;
        exception_lineno = 1888;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_192;
    }
    branch_no_255:;
    goto branch_end_254;
    branch_no_254:;
    {
        PyObject *tmp_assign_source_522;
        tmp_assign_source_522 = PyDict_New();
        assert(tmp_class_creation_64__prepared == NULL);
        tmp_class_creation_64__prepared = tmp_assign_source_522;
    }
    branch_end_254:;
    {
        PyObject *tmp_assign_source_523;
        {
            PyObject *tmp_set_locals_64;
            CHECK_OBJECT(tmp_class_creation_64__prepared);
            tmp_set_locals_64 = tmp_class_creation_64__prepared;
            locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888 = tmp_set_locals_64;
            Py_INCREF(tmp_set_locals_64);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_194;
        }
        tmp_dictset_value = mod_consts[483];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_194;
        }
        tmp_dictset_value = mod_consts[482];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_194;
        }
        if (isFrameUnusable(cache_frame_3e04e45c250346b1dc880d5576b2b21c_65)) {
            Py_XDECREF(cache_frame_3e04e45c250346b1dc880d5576b2b21c_65);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3e04e45c250346b1dc880d5576b2b21c_65 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3e04e45c250346b1dc880d5576b2b21c_65 = MAKE_FUNCTION_FRAME(codeobj_3e04e45c250346b1dc880d5576b2b21c, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3e04e45c250346b1dc880d5576b2b21c_65->m_type_description == NULL);
        frame_3e04e45c250346b1dc880d5576b2b21c_65 = cache_frame_3e04e45c250346b1dc880d5576b2b21c_65;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3e04e45c250346b1dc880d5576b2b21c_65);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3e04e45c250346b1dc880d5576b2b21c_65) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[484];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1907;
            type_description_2 = "o";
            goto frame_exception_exit_65;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__77___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1909;
            type_description_2 = "o";
            goto frame_exception_exit_65;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3e04e45c250346b1dc880d5576b2b21c_65);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_64;

        frame_exception_exit_65:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3e04e45c250346b1dc880d5576b2b21c_65);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3e04e45c250346b1dc880d5576b2b21c_65, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3e04e45c250346b1dc880d5576b2b21c_65->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3e04e45c250346b1dc880d5576b2b21c_65, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3e04e45c250346b1dc880d5576b2b21c_65,
            type_description_2,
            outline_63_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3e04e45c250346b1dc880d5576b2b21c_65 == cache_frame_3e04e45c250346b1dc880d5576b2b21c_65) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3e04e45c250346b1dc880d5576b2b21c_65);
            cache_frame_3e04e45c250346b1dc880d5576b2b21c_65 = NULL;
        }

        assertFrameObject(frame_3e04e45c250346b1dc880d5576b2b21c_65);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_64;

        frame_no_exception_64:;
        goto skip_nested_handling_64;
        nested_frame_exit_64:;

        goto try_except_handler_194;
        skip_nested_handling_64:;
        {
            nuitka_bool tmp_condition_result_384;
            PyObject *tmp_cmp_expr_left_64;
            PyObject *tmp_cmp_expr_right_64;
            CHECK_OBJECT(tmp_class_creation_64__bases);
            tmp_cmp_expr_left_64 = tmp_class_creation_64__bases;
            CHECK_OBJECT(tmp_class_creation_64__bases_orig);
            tmp_cmp_expr_right_64 = tmp_class_creation_64__bases_orig;
            tmp_condition_result_384 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_64, tmp_cmp_expr_right_64);
            if (tmp_condition_result_384 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1888;

                goto try_except_handler_194;
            }
            if (tmp_condition_result_384 == NUITKA_BOOL_TRUE) {
                goto branch_yes_256;
            } else {
                goto branch_no_256;
            }
            assert(tmp_condition_result_384 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_256:;
        CHECK_OBJECT(tmp_class_creation_64__bases_orig);
        tmp_dictset_value = tmp_class_creation_64__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1888;

            goto try_except_handler_194;
        }
        branch_no_256:;
        {
            PyObject *tmp_assign_source_524;
            PyObject *tmp_called_value_128;
            PyObject *tmp_args_value_128;
            PyObject *tmp_tuple_element_254;
            PyObject *tmp_kwargs_value_128;
            CHECK_OBJECT(tmp_class_creation_64__metaclass);
            tmp_called_value_128 = tmp_class_creation_64__metaclass;
            tmp_tuple_element_254 = mod_consts[482];
            tmp_args_value_128 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_128, 0, tmp_tuple_element_254);
            CHECK_OBJECT(tmp_class_creation_64__bases);
            tmp_tuple_element_254 = tmp_class_creation_64__bases;
            PyTuple_SET_ITEM0(tmp_args_value_128, 1, tmp_tuple_element_254);
            tmp_tuple_element_254 = locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888;
            PyTuple_SET_ITEM0(tmp_args_value_128, 2, tmp_tuple_element_254);
            CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
            tmp_kwargs_value_128 = tmp_class_creation_64__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1888;
            tmp_assign_source_524 = CALL_FUNCTION(tmp_called_value_128, tmp_args_value_128, tmp_kwargs_value_128);
            Py_DECREF(tmp_args_value_128);
            if (tmp_assign_source_524 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1888;

                goto try_except_handler_194;
            }
            assert(outline_63_var___class__ == NULL);
            outline_63_var___class__ = tmp_assign_source_524;
        }
        CHECK_OBJECT(outline_63_var___class__);
        tmp_assign_source_523 = outline_63_var___class__;
        Py_INCREF(tmp_assign_source_523);
        goto try_return_handler_194;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_194:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888);
        locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888 = NULL;
        goto try_return_handler_193;
        // Exception handler code:
        try_except_handler_194:;
        exception_keeper_type_192 = exception_type;
        exception_keeper_value_192 = exception_value;
        exception_keeper_tb_192 = exception_tb;
        exception_keeper_lineno_192 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888);
        locals_xlwt$BIFFRecords$$$class__64_HorizontalPageBreaksRecord_1888 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_192;
        exception_value = exception_keeper_value_192;
        exception_tb = exception_keeper_tb_192;
        exception_lineno = exception_keeper_lineno_192;

        goto try_except_handler_193;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_193:;
        CHECK_OBJECT(outline_63_var___class__);
        Py_DECREF(outline_63_var___class__);
        outline_63_var___class__ = NULL;
        goto outline_result_64;
        // Exception handler code:
        try_except_handler_193:;
        exception_keeper_type_193 = exception_type;
        exception_keeper_value_193 = exception_value;
        exception_keeper_tb_193 = exception_tb;
        exception_keeper_lineno_193 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_193;
        exception_value = exception_keeper_value_193;
        exception_tb = exception_keeper_tb_193;
        exception_lineno = exception_keeper_lineno_193;

        goto outline_exception_64;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_64:;
        exception_lineno = 1888;
        goto try_except_handler_192;
        outline_result_64:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[482], tmp_assign_source_523);
    }
    goto try_end_66;
    // Exception handler code:
    try_except_handler_192:;
    exception_keeper_type_194 = exception_type;
    exception_keeper_value_194 = exception_value;
    exception_keeper_tb_194 = exception_tb;
    exception_keeper_lineno_194 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_64__bases_orig);
    tmp_class_creation_64__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_64__bases);
    tmp_class_creation_64__bases = NULL;
    Py_XDECREF(tmp_class_creation_64__class_decl_dict);
    tmp_class_creation_64__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_64__metaclass);
    tmp_class_creation_64__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_64__prepared);
    tmp_class_creation_64__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_194;
    exception_value = exception_keeper_value_194;
    exception_tb = exception_keeper_tb_194;
    exception_lineno = exception_keeper_lineno_194;

    goto frame_exception_exit_1;
    // End of try:
    try_end_66:;
    CHECK_OBJECT(tmp_class_creation_64__bases_orig);
    Py_DECREF(tmp_class_creation_64__bases_orig);
    tmp_class_creation_64__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_64__bases);
    Py_DECREF(tmp_class_creation_64__bases);
    tmp_class_creation_64__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_64__class_decl_dict);
    Py_DECREF(tmp_class_creation_64__class_decl_dict);
    tmp_class_creation_64__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_64__metaclass);
    Py_DECREF(tmp_class_creation_64__metaclass);
    tmp_class_creation_64__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_64__prepared);
    Py_DECREF(tmp_class_creation_64__prepared);
    tmp_class_creation_64__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_525;
        PyObject *tmp_tuple_element_255;
        tmp_tuple_element_255 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_255 == NULL)) {
            tmp_tuple_element_255 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_255 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        tmp_assign_source_525 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_525, 0, tmp_tuple_element_255);
        assert(tmp_class_creation_65__bases_orig == NULL);
        tmp_class_creation_65__bases_orig = tmp_assign_source_525;
    }
    {
        PyObject *tmp_assign_source_526;
        PyObject *tmp_dircall_arg1_65;
        CHECK_OBJECT(tmp_class_creation_65__bases_orig);
        tmp_dircall_arg1_65 = tmp_class_creation_65__bases_orig;
        Py_INCREF(tmp_dircall_arg1_65);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_65};
            tmp_assign_source_526 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_526 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        assert(tmp_class_creation_65__bases == NULL);
        tmp_class_creation_65__bases = tmp_assign_source_526;
    }
    {
        PyObject *tmp_assign_source_527;
        tmp_assign_source_527 = PyDict_New();
        assert(tmp_class_creation_65__class_decl_dict == NULL);
        tmp_class_creation_65__class_decl_dict = tmp_assign_source_527;
    }
    {
        PyObject *tmp_assign_source_528;
        PyObject *tmp_metaclass_value_65;
        bool tmp_condition_result_385;
        PyObject *tmp_key_value_193;
        PyObject *tmp_dict_arg_value_193;
        PyObject *tmp_dict_arg_value_194;
        PyObject *tmp_key_value_194;
        nuitka_bool tmp_condition_result_386;
        int tmp_truth_name_65;
        PyObject *tmp_type_arg_129;
        PyObject *tmp_expression_value_321;
        PyObject *tmp_subscript_value_65;
        PyObject *tmp_bases_value_65;
        tmp_key_value_193 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_dict_arg_value_193 = tmp_class_creation_65__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_193, tmp_key_value_193);
        assert(!(tmp_res == -1));
        tmp_condition_result_385 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_385 != false) {
            goto condexpr_true_129;
        } else {
            goto condexpr_false_129;
        }
        condexpr_true_129:;
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_dict_arg_value_194 = tmp_class_creation_65__class_decl_dict;
        tmp_key_value_194 = mod_consts[205];
        tmp_metaclass_value_65 = DICT_GET_ITEM0(tmp_dict_arg_value_194, tmp_key_value_194);
        if (tmp_metaclass_value_65 == NULL) {
            tmp_metaclass_value_65 = Py_None;
        }
        assert(!(tmp_metaclass_value_65 == NULL));
        Py_INCREF(tmp_metaclass_value_65);
        goto condexpr_end_129;
        condexpr_false_129:;
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_truth_name_65 = CHECK_IF_TRUE(tmp_class_creation_65__bases);
        if (tmp_truth_name_65 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        tmp_condition_result_386 = tmp_truth_name_65 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_386 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_130;
        } else {
            goto condexpr_false_130;
        }
        condexpr_true_130:;
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_expression_value_321 = tmp_class_creation_65__bases;
        tmp_subscript_value_65 = mod_consts[4];
        tmp_type_arg_129 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_321, tmp_subscript_value_65, 0);
        if (tmp_type_arg_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        tmp_metaclass_value_65 = BUILTIN_TYPE1(tmp_type_arg_129);
        Py_DECREF(tmp_type_arg_129);
        if (tmp_metaclass_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        goto condexpr_end_130;
        condexpr_false_130:;
        tmp_metaclass_value_65 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_65);
        condexpr_end_130:;
        condexpr_end_129:;
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_bases_value_65 = tmp_class_creation_65__bases;
        tmp_assign_source_528 = SELECT_METACLASS(tmp_metaclass_value_65, tmp_bases_value_65);
        Py_DECREF(tmp_metaclass_value_65);
        if (tmp_assign_source_528 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        assert(tmp_class_creation_65__metaclass == NULL);
        tmp_class_creation_65__metaclass = tmp_assign_source_528;
    }
    {
        bool tmp_condition_result_387;
        PyObject *tmp_key_value_195;
        PyObject *tmp_dict_arg_value_195;
        tmp_key_value_195 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_dict_arg_value_195 = tmp_class_creation_65__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_195, tmp_key_value_195);
        assert(!(tmp_res == -1));
        tmp_condition_result_387 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_387 != false) {
            goto branch_yes_257;
        } else {
            goto branch_no_257;
        }
    }
    branch_yes_257:;
    CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_65__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1914;

        goto try_except_handler_195;
    }
    branch_no_257:;
    {
        nuitka_bool tmp_condition_result_388;
        PyObject *tmp_expression_value_322;
        CHECK_OBJECT(tmp_class_creation_65__metaclass);
        tmp_expression_value_322 = tmp_class_creation_65__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_322, mod_consts[206]);
        tmp_condition_result_388 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_388 == NUITKA_BOOL_TRUE) {
            goto branch_yes_258;
        } else {
            goto branch_no_258;
        }
    }
    branch_yes_258:;
    {
        PyObject *tmp_assign_source_529;
        PyObject *tmp_called_value_129;
        PyObject *tmp_expression_value_323;
        PyObject *tmp_args_value_129;
        PyObject *tmp_tuple_element_256;
        PyObject *tmp_kwargs_value_129;
        CHECK_OBJECT(tmp_class_creation_65__metaclass);
        tmp_expression_value_323 = tmp_class_creation_65__metaclass;
        tmp_called_value_129 = LOOKUP_ATTRIBUTE(tmp_expression_value_323, mod_consts[206]);
        if (tmp_called_value_129 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        tmp_tuple_element_256 = mod_consts[486];
        tmp_args_value_129 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_129, 0, tmp_tuple_element_256);
        CHECK_OBJECT(tmp_class_creation_65__bases);
        tmp_tuple_element_256 = tmp_class_creation_65__bases;
        PyTuple_SET_ITEM0(tmp_args_value_129, 1, tmp_tuple_element_256);
        CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
        tmp_kwargs_value_129 = tmp_class_creation_65__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1914;
        tmp_assign_source_529 = CALL_FUNCTION(tmp_called_value_129, tmp_args_value_129, tmp_kwargs_value_129);
        Py_DECREF(tmp_called_value_129);
        Py_DECREF(tmp_args_value_129);
        if (tmp_assign_source_529 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        assert(tmp_class_creation_65__prepared == NULL);
        tmp_class_creation_65__prepared = tmp_assign_source_529;
    }
    {
        bool tmp_condition_result_389;
        PyObject *tmp_operand_value_65;
        PyObject *tmp_expression_value_324;
        CHECK_OBJECT(tmp_class_creation_65__prepared);
        tmp_expression_value_324 = tmp_class_creation_65__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_324, mod_consts[208]);
        tmp_operand_value_65 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_65);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        tmp_condition_result_389 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_389 != false) {
            goto branch_yes_259;
        } else {
            goto branch_no_259;
        }
    }
    branch_yes_259:;
    {
        PyObject *tmp_raise_type_65;
        PyObject *tmp_raise_value_65;
        PyObject *tmp_left_value_65;
        PyObject *tmp_right_value_65;
        PyObject *tmp_tuple_element_257;
        PyObject *tmp_getattr_target_65;
        PyObject *tmp_getattr_attr_65;
        PyObject *tmp_getattr_default_65;
        tmp_raise_type_65 = PyExc_TypeError;
        tmp_left_value_65 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_65__metaclass);
        tmp_getattr_target_65 = tmp_class_creation_65__metaclass;
        tmp_getattr_attr_65 = mod_consts[210];
        tmp_getattr_default_65 = mod_consts[211];
        tmp_tuple_element_257 = BUILTIN_GETATTR(tmp_getattr_target_65, tmp_getattr_attr_65, tmp_getattr_default_65);
        if (tmp_tuple_element_257 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        tmp_right_value_65 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_325;
            PyObject *tmp_type_arg_130;
            PyTuple_SET_ITEM(tmp_right_value_65, 0, tmp_tuple_element_257);
            CHECK_OBJECT(tmp_class_creation_65__prepared);
            tmp_type_arg_130 = tmp_class_creation_65__prepared;
            tmp_expression_value_325 = BUILTIN_TYPE1(tmp_type_arg_130);
            assert(!(tmp_expression_value_325 == NULL));
            tmp_tuple_element_257 = LOOKUP_ATTRIBUTE(tmp_expression_value_325, mod_consts[210]);
            Py_DECREF(tmp_expression_value_325);
            if (tmp_tuple_element_257 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1914;

                goto tuple_build_exception_65;
            }
            PyTuple_SET_ITEM(tmp_right_value_65, 1, tmp_tuple_element_257);
        }
        goto tuple_build_noexception_65;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_65:;
        Py_DECREF(tmp_right_value_65);
        goto try_except_handler_195;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_65:;
        tmp_raise_value_65 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_65, tmp_right_value_65);
        Py_DECREF(tmp_right_value_65);
        if (tmp_raise_value_65 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_195;
        }
        exception_type = tmp_raise_type_65;
        Py_INCREF(tmp_raise_type_65);
        exception_value = tmp_raise_value_65;
        exception_lineno = 1914;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_195;
    }
    branch_no_259:;
    goto branch_end_258;
    branch_no_258:;
    {
        PyObject *tmp_assign_source_530;
        tmp_assign_source_530 = PyDict_New();
        assert(tmp_class_creation_65__prepared == NULL);
        tmp_class_creation_65__prepared = tmp_assign_source_530;
    }
    branch_end_258:;
    {
        PyObject *tmp_assign_source_531;
        {
            PyObject *tmp_set_locals_65;
            CHECK_OBJECT(tmp_class_creation_65__prepared);
            tmp_set_locals_65 = tmp_class_creation_65__prepared;
            locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914 = tmp_set_locals_65;
            Py_INCREF(tmp_set_locals_65);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_197;
        }
        tmp_dictset_value = mod_consts[487];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_197;
        }
        tmp_dictset_value = mod_consts[486];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_197;
        }
        if (isFrameUnusable(cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66)) {
            Py_XDECREF(cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66);

#if _DEBUG_REFCOUNTS
            if (cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66 = MAKE_FUNCTION_FRAME(codeobj_420c74893f5ac550a2780b8b6f23f4e1, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66->m_type_description == NULL);
        frame_420c74893f5ac550a2780b8b6f23f4e1_66 = cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_420c74893f5ac550a2780b8b6f23f4e1_66);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_420c74893f5ac550a2780b8b6f23f4e1_66) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[134];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1934;
            type_description_2 = "o";
            goto frame_exception_exit_66;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__78___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1936;
            type_description_2 = "o";
            goto frame_exception_exit_66;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_420c74893f5ac550a2780b8b6f23f4e1_66);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_65;

        frame_exception_exit_66:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_420c74893f5ac550a2780b8b6f23f4e1_66);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_420c74893f5ac550a2780b8b6f23f4e1_66, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_420c74893f5ac550a2780b8b6f23f4e1_66->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_420c74893f5ac550a2780b8b6f23f4e1_66, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_420c74893f5ac550a2780b8b6f23f4e1_66,
            type_description_2,
            outline_64_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_420c74893f5ac550a2780b8b6f23f4e1_66 == cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66);
            cache_frame_420c74893f5ac550a2780b8b6f23f4e1_66 = NULL;
        }

        assertFrameObject(frame_420c74893f5ac550a2780b8b6f23f4e1_66);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_65;

        frame_no_exception_65:;
        goto skip_nested_handling_65;
        nested_frame_exit_65:;

        goto try_except_handler_197;
        skip_nested_handling_65:;
        {
            nuitka_bool tmp_condition_result_390;
            PyObject *tmp_cmp_expr_left_65;
            PyObject *tmp_cmp_expr_right_65;
            CHECK_OBJECT(tmp_class_creation_65__bases);
            tmp_cmp_expr_left_65 = tmp_class_creation_65__bases;
            CHECK_OBJECT(tmp_class_creation_65__bases_orig);
            tmp_cmp_expr_right_65 = tmp_class_creation_65__bases_orig;
            tmp_condition_result_390 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_65, tmp_cmp_expr_right_65);
            if (tmp_condition_result_390 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1914;

                goto try_except_handler_197;
            }
            if (tmp_condition_result_390 == NUITKA_BOOL_TRUE) {
                goto branch_yes_260;
            } else {
                goto branch_no_260;
            }
            assert(tmp_condition_result_390 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_260:;
        CHECK_OBJECT(tmp_class_creation_65__bases_orig);
        tmp_dictset_value = tmp_class_creation_65__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1914;

            goto try_except_handler_197;
        }
        branch_no_260:;
        {
            PyObject *tmp_assign_source_532;
            PyObject *tmp_called_value_130;
            PyObject *tmp_args_value_130;
            PyObject *tmp_tuple_element_258;
            PyObject *tmp_kwargs_value_130;
            CHECK_OBJECT(tmp_class_creation_65__metaclass);
            tmp_called_value_130 = tmp_class_creation_65__metaclass;
            tmp_tuple_element_258 = mod_consts[486];
            tmp_args_value_130 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_130, 0, tmp_tuple_element_258);
            CHECK_OBJECT(tmp_class_creation_65__bases);
            tmp_tuple_element_258 = tmp_class_creation_65__bases;
            PyTuple_SET_ITEM0(tmp_args_value_130, 1, tmp_tuple_element_258);
            tmp_tuple_element_258 = locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914;
            PyTuple_SET_ITEM0(tmp_args_value_130, 2, tmp_tuple_element_258);
            CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
            tmp_kwargs_value_130 = tmp_class_creation_65__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1914;
            tmp_assign_source_532 = CALL_FUNCTION(tmp_called_value_130, tmp_args_value_130, tmp_kwargs_value_130);
            Py_DECREF(tmp_args_value_130);
            if (tmp_assign_source_532 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1914;

                goto try_except_handler_197;
            }
            assert(outline_64_var___class__ == NULL);
            outline_64_var___class__ = tmp_assign_source_532;
        }
        CHECK_OBJECT(outline_64_var___class__);
        tmp_assign_source_531 = outline_64_var___class__;
        Py_INCREF(tmp_assign_source_531);
        goto try_return_handler_197;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_197:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914);
        locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914 = NULL;
        goto try_return_handler_196;
        // Exception handler code:
        try_except_handler_197:;
        exception_keeper_type_195 = exception_type;
        exception_keeper_value_195 = exception_value;
        exception_keeper_tb_195 = exception_tb;
        exception_keeper_lineno_195 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914);
        locals_xlwt$BIFFRecords$$$class__65_VerticalPageBreaksRecord_1914 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_195;
        exception_value = exception_keeper_value_195;
        exception_tb = exception_keeper_tb_195;
        exception_lineno = exception_keeper_lineno_195;

        goto try_except_handler_196;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_196:;
        CHECK_OBJECT(outline_64_var___class__);
        Py_DECREF(outline_64_var___class__);
        outline_64_var___class__ = NULL;
        goto outline_result_65;
        // Exception handler code:
        try_except_handler_196:;
        exception_keeper_type_196 = exception_type;
        exception_keeper_value_196 = exception_value;
        exception_keeper_tb_196 = exception_tb;
        exception_keeper_lineno_196 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_196;
        exception_value = exception_keeper_value_196;
        exception_tb = exception_keeper_tb_196;
        exception_lineno = exception_keeper_lineno_196;

        goto outline_exception_65;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_65:;
        exception_lineno = 1914;
        goto try_except_handler_195;
        outline_result_65:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[486], tmp_assign_source_531);
    }
    goto try_end_67;
    // Exception handler code:
    try_except_handler_195:;
    exception_keeper_type_197 = exception_type;
    exception_keeper_value_197 = exception_value;
    exception_keeper_tb_197 = exception_tb;
    exception_keeper_lineno_197 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_65__bases_orig);
    tmp_class_creation_65__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_65__bases);
    tmp_class_creation_65__bases = NULL;
    Py_XDECREF(tmp_class_creation_65__class_decl_dict);
    tmp_class_creation_65__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_65__metaclass);
    tmp_class_creation_65__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_65__prepared);
    tmp_class_creation_65__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_197;
    exception_value = exception_keeper_value_197;
    exception_tb = exception_keeper_tb_197;
    exception_lineno = exception_keeper_lineno_197;

    goto frame_exception_exit_1;
    // End of try:
    try_end_67:;
    CHECK_OBJECT(tmp_class_creation_65__bases_orig);
    Py_DECREF(tmp_class_creation_65__bases_orig);
    tmp_class_creation_65__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_65__bases);
    Py_DECREF(tmp_class_creation_65__bases);
    tmp_class_creation_65__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_65__class_decl_dict);
    Py_DECREF(tmp_class_creation_65__class_decl_dict);
    tmp_class_creation_65__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_65__metaclass);
    Py_DECREF(tmp_class_creation_65__metaclass);
    tmp_class_creation_65__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_65__prepared);
    Py_DECREF(tmp_class_creation_65__prepared);
    tmp_class_creation_65__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_533;
        PyObject *tmp_tuple_element_259;
        tmp_tuple_element_259 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_259 == NULL)) {
            tmp_tuple_element_259 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_259 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        tmp_assign_source_533 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_533, 0, tmp_tuple_element_259);
        assert(tmp_class_creation_66__bases_orig == NULL);
        tmp_class_creation_66__bases_orig = tmp_assign_source_533;
    }
    {
        PyObject *tmp_assign_source_534;
        PyObject *tmp_dircall_arg1_66;
        CHECK_OBJECT(tmp_class_creation_66__bases_orig);
        tmp_dircall_arg1_66 = tmp_class_creation_66__bases_orig;
        Py_INCREF(tmp_dircall_arg1_66);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_66};
            tmp_assign_source_534 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_534 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        assert(tmp_class_creation_66__bases == NULL);
        tmp_class_creation_66__bases = tmp_assign_source_534;
    }
    {
        PyObject *tmp_assign_source_535;
        tmp_assign_source_535 = PyDict_New();
        assert(tmp_class_creation_66__class_decl_dict == NULL);
        tmp_class_creation_66__class_decl_dict = tmp_assign_source_535;
    }
    {
        PyObject *tmp_assign_source_536;
        PyObject *tmp_metaclass_value_66;
        bool tmp_condition_result_391;
        PyObject *tmp_key_value_196;
        PyObject *tmp_dict_arg_value_196;
        PyObject *tmp_dict_arg_value_197;
        PyObject *tmp_key_value_197;
        nuitka_bool tmp_condition_result_392;
        int tmp_truth_name_66;
        PyObject *tmp_type_arg_131;
        PyObject *tmp_expression_value_326;
        PyObject *tmp_subscript_value_66;
        PyObject *tmp_bases_value_66;
        tmp_key_value_196 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_dict_arg_value_196 = tmp_class_creation_66__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_196, tmp_key_value_196);
        assert(!(tmp_res == -1));
        tmp_condition_result_391 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_391 != false) {
            goto condexpr_true_131;
        } else {
            goto condexpr_false_131;
        }
        condexpr_true_131:;
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_dict_arg_value_197 = tmp_class_creation_66__class_decl_dict;
        tmp_key_value_197 = mod_consts[205];
        tmp_metaclass_value_66 = DICT_GET_ITEM0(tmp_dict_arg_value_197, tmp_key_value_197);
        if (tmp_metaclass_value_66 == NULL) {
            tmp_metaclass_value_66 = Py_None;
        }
        assert(!(tmp_metaclass_value_66 == NULL));
        Py_INCREF(tmp_metaclass_value_66);
        goto condexpr_end_131;
        condexpr_false_131:;
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_truth_name_66 = CHECK_IF_TRUE(tmp_class_creation_66__bases);
        if (tmp_truth_name_66 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        tmp_condition_result_392 = tmp_truth_name_66 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_392 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_132;
        } else {
            goto condexpr_false_132;
        }
        condexpr_true_132:;
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_expression_value_326 = tmp_class_creation_66__bases;
        tmp_subscript_value_66 = mod_consts[4];
        tmp_type_arg_131 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_326, tmp_subscript_value_66, 0);
        if (tmp_type_arg_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        tmp_metaclass_value_66 = BUILTIN_TYPE1(tmp_type_arg_131);
        Py_DECREF(tmp_type_arg_131);
        if (tmp_metaclass_value_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        goto condexpr_end_132;
        condexpr_false_132:;
        tmp_metaclass_value_66 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_66);
        condexpr_end_132:;
        condexpr_end_131:;
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_bases_value_66 = tmp_class_creation_66__bases;
        tmp_assign_source_536 = SELECT_METACLASS(tmp_metaclass_value_66, tmp_bases_value_66);
        Py_DECREF(tmp_metaclass_value_66);
        if (tmp_assign_source_536 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        assert(tmp_class_creation_66__metaclass == NULL);
        tmp_class_creation_66__metaclass = tmp_assign_source_536;
    }
    {
        bool tmp_condition_result_393;
        PyObject *tmp_key_value_198;
        PyObject *tmp_dict_arg_value_198;
        tmp_key_value_198 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_dict_arg_value_198 = tmp_class_creation_66__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_198, tmp_key_value_198);
        assert(!(tmp_res == -1));
        tmp_condition_result_393 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_393 != false) {
            goto branch_yes_261;
        } else {
            goto branch_no_261;
        }
    }
    branch_yes_261:;
    CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_66__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 1941;

        goto try_except_handler_198;
    }
    branch_no_261:;
    {
        nuitka_bool tmp_condition_result_394;
        PyObject *tmp_expression_value_327;
        CHECK_OBJECT(tmp_class_creation_66__metaclass);
        tmp_expression_value_327 = tmp_class_creation_66__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_327, mod_consts[206]);
        tmp_condition_result_394 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_394 == NUITKA_BOOL_TRUE) {
            goto branch_yes_262;
        } else {
            goto branch_no_262;
        }
    }
    branch_yes_262:;
    {
        PyObject *tmp_assign_source_537;
        PyObject *tmp_called_value_131;
        PyObject *tmp_expression_value_328;
        PyObject *tmp_args_value_131;
        PyObject *tmp_tuple_element_260;
        PyObject *tmp_kwargs_value_131;
        CHECK_OBJECT(tmp_class_creation_66__metaclass);
        tmp_expression_value_328 = tmp_class_creation_66__metaclass;
        tmp_called_value_131 = LOOKUP_ATTRIBUTE(tmp_expression_value_328, mod_consts[206]);
        if (tmp_called_value_131 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        tmp_tuple_element_260 = mod_consts[489];
        tmp_args_value_131 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_131, 0, tmp_tuple_element_260);
        CHECK_OBJECT(tmp_class_creation_66__bases);
        tmp_tuple_element_260 = tmp_class_creation_66__bases;
        PyTuple_SET_ITEM0(tmp_args_value_131, 1, tmp_tuple_element_260);
        CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
        tmp_kwargs_value_131 = tmp_class_creation_66__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1941;
        tmp_assign_source_537 = CALL_FUNCTION(tmp_called_value_131, tmp_args_value_131, tmp_kwargs_value_131);
        Py_DECREF(tmp_called_value_131);
        Py_DECREF(tmp_args_value_131);
        if (tmp_assign_source_537 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        assert(tmp_class_creation_66__prepared == NULL);
        tmp_class_creation_66__prepared = tmp_assign_source_537;
    }
    {
        bool tmp_condition_result_395;
        PyObject *tmp_operand_value_66;
        PyObject *tmp_expression_value_329;
        CHECK_OBJECT(tmp_class_creation_66__prepared);
        tmp_expression_value_329 = tmp_class_creation_66__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_329, mod_consts[208]);
        tmp_operand_value_66 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_66);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        tmp_condition_result_395 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_395 != false) {
            goto branch_yes_263;
        } else {
            goto branch_no_263;
        }
    }
    branch_yes_263:;
    {
        PyObject *tmp_raise_type_66;
        PyObject *tmp_raise_value_66;
        PyObject *tmp_left_value_66;
        PyObject *tmp_right_value_66;
        PyObject *tmp_tuple_element_261;
        PyObject *tmp_getattr_target_66;
        PyObject *tmp_getattr_attr_66;
        PyObject *tmp_getattr_default_66;
        tmp_raise_type_66 = PyExc_TypeError;
        tmp_left_value_66 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_66__metaclass);
        tmp_getattr_target_66 = tmp_class_creation_66__metaclass;
        tmp_getattr_attr_66 = mod_consts[210];
        tmp_getattr_default_66 = mod_consts[211];
        tmp_tuple_element_261 = BUILTIN_GETATTR(tmp_getattr_target_66, tmp_getattr_attr_66, tmp_getattr_default_66);
        if (tmp_tuple_element_261 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        tmp_right_value_66 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_330;
            PyObject *tmp_type_arg_132;
            PyTuple_SET_ITEM(tmp_right_value_66, 0, tmp_tuple_element_261);
            CHECK_OBJECT(tmp_class_creation_66__prepared);
            tmp_type_arg_132 = tmp_class_creation_66__prepared;
            tmp_expression_value_330 = BUILTIN_TYPE1(tmp_type_arg_132);
            assert(!(tmp_expression_value_330 == NULL));
            tmp_tuple_element_261 = LOOKUP_ATTRIBUTE(tmp_expression_value_330, mod_consts[210]);
            Py_DECREF(tmp_expression_value_330);
            if (tmp_tuple_element_261 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1941;

                goto tuple_build_exception_66;
            }
            PyTuple_SET_ITEM(tmp_right_value_66, 1, tmp_tuple_element_261);
        }
        goto tuple_build_noexception_66;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_66:;
        Py_DECREF(tmp_right_value_66);
        goto try_except_handler_198;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_66:;
        tmp_raise_value_66 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_66, tmp_right_value_66);
        Py_DECREF(tmp_right_value_66);
        if (tmp_raise_value_66 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_198;
        }
        exception_type = tmp_raise_type_66;
        Py_INCREF(tmp_raise_type_66);
        exception_value = tmp_raise_value_66;
        exception_lineno = 1941;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_198;
    }
    branch_no_263:;
    goto branch_end_262;
    branch_no_262:;
    {
        PyObject *tmp_assign_source_538;
        tmp_assign_source_538 = PyDict_New();
        assert(tmp_class_creation_66__prepared == NULL);
        tmp_class_creation_66__prepared = tmp_assign_source_538;
    }
    branch_end_262:;
    {
        PyObject *tmp_assign_source_539;
        {
            PyObject *tmp_set_locals_66;
            CHECK_OBJECT(tmp_class_creation_66__prepared);
            tmp_set_locals_66 = tmp_class_creation_66__prepared;
            locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941 = tmp_set_locals_66;
            Py_INCREF(tmp_set_locals_66);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_200;
        }
        tmp_dictset_value = mod_consts[490];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_200;
        }
        tmp_dictset_value = mod_consts[489];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_200;
        }
        if (isFrameUnusable(cache_frame_3f229872e1d9b508ea65b444089c9772_67)) {
            Py_XDECREF(cache_frame_3f229872e1d9b508ea65b444089c9772_67);

#if _DEBUG_REFCOUNTS
            if (cache_frame_3f229872e1d9b508ea65b444089c9772_67 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_3f229872e1d9b508ea65b444089c9772_67 = MAKE_FUNCTION_FRAME(codeobj_3f229872e1d9b508ea65b444089c9772, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_3f229872e1d9b508ea65b444089c9772_67->m_type_description == NULL);
        frame_3f229872e1d9b508ea65b444089c9772_67 = cache_frame_3f229872e1d9b508ea65b444089c9772_67;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_3f229872e1d9b508ea65b444089c9772_67);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_3f229872e1d9b508ea65b444089c9772_67) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[491];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2002;
            type_description_2 = "o";
            goto frame_exception_exit_67;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__79___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2004;
            type_description_2 = "o";
            goto frame_exception_exit_67;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f229872e1d9b508ea65b444089c9772_67);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_66;

        frame_exception_exit_67:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_3f229872e1d9b508ea65b444089c9772_67);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_3f229872e1d9b508ea65b444089c9772_67, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_3f229872e1d9b508ea65b444089c9772_67->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_3f229872e1d9b508ea65b444089c9772_67, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_3f229872e1d9b508ea65b444089c9772_67,
            type_description_2,
            outline_65_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_3f229872e1d9b508ea65b444089c9772_67 == cache_frame_3f229872e1d9b508ea65b444089c9772_67) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_3f229872e1d9b508ea65b444089c9772_67);
            cache_frame_3f229872e1d9b508ea65b444089c9772_67 = NULL;
        }

        assertFrameObject(frame_3f229872e1d9b508ea65b444089c9772_67);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_66;

        frame_no_exception_66:;
        goto skip_nested_handling_66;
        nested_frame_exit_66:;

        goto try_except_handler_200;
        skip_nested_handling_66:;
        {
            nuitka_bool tmp_condition_result_396;
            PyObject *tmp_cmp_expr_left_66;
            PyObject *tmp_cmp_expr_right_66;
            CHECK_OBJECT(tmp_class_creation_66__bases);
            tmp_cmp_expr_left_66 = tmp_class_creation_66__bases;
            CHECK_OBJECT(tmp_class_creation_66__bases_orig);
            tmp_cmp_expr_right_66 = tmp_class_creation_66__bases_orig;
            tmp_condition_result_396 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_66, tmp_cmp_expr_right_66);
            if (tmp_condition_result_396 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1941;

                goto try_except_handler_200;
            }
            if (tmp_condition_result_396 == NUITKA_BOOL_TRUE) {
                goto branch_yes_264;
            } else {
                goto branch_no_264;
            }
            assert(tmp_condition_result_396 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_264:;
        CHECK_OBJECT(tmp_class_creation_66__bases_orig);
        tmp_dictset_value = tmp_class_creation_66__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 1941;

            goto try_except_handler_200;
        }
        branch_no_264:;
        {
            PyObject *tmp_assign_source_540;
            PyObject *tmp_called_value_132;
            PyObject *tmp_args_value_132;
            PyObject *tmp_tuple_element_262;
            PyObject *tmp_kwargs_value_132;
            CHECK_OBJECT(tmp_class_creation_66__metaclass);
            tmp_called_value_132 = tmp_class_creation_66__metaclass;
            tmp_tuple_element_262 = mod_consts[489];
            tmp_args_value_132 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_132, 0, tmp_tuple_element_262);
            CHECK_OBJECT(tmp_class_creation_66__bases);
            tmp_tuple_element_262 = tmp_class_creation_66__bases;
            PyTuple_SET_ITEM0(tmp_args_value_132, 1, tmp_tuple_element_262);
            tmp_tuple_element_262 = locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941;
            PyTuple_SET_ITEM0(tmp_args_value_132, 2, tmp_tuple_element_262);
            CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
            tmp_kwargs_value_132 = tmp_class_creation_66__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 1941;
            tmp_assign_source_540 = CALL_FUNCTION(tmp_called_value_132, tmp_args_value_132, tmp_kwargs_value_132);
            Py_DECREF(tmp_args_value_132);
            if (tmp_assign_source_540 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 1941;

                goto try_except_handler_200;
            }
            assert(outline_65_var___class__ == NULL);
            outline_65_var___class__ = tmp_assign_source_540;
        }
        CHECK_OBJECT(outline_65_var___class__);
        tmp_assign_source_539 = outline_65_var___class__;
        Py_INCREF(tmp_assign_source_539);
        goto try_return_handler_200;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_200:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941);
        locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941 = NULL;
        goto try_return_handler_199;
        // Exception handler code:
        try_except_handler_200:;
        exception_keeper_type_198 = exception_type;
        exception_keeper_value_198 = exception_value;
        exception_keeper_tb_198 = exception_tb;
        exception_keeper_lineno_198 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941);
        locals_xlwt$BIFFRecords$$$class__66_HeaderRecord_1941 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_198;
        exception_value = exception_keeper_value_198;
        exception_tb = exception_keeper_tb_198;
        exception_lineno = exception_keeper_lineno_198;

        goto try_except_handler_199;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_199:;
        CHECK_OBJECT(outline_65_var___class__);
        Py_DECREF(outline_65_var___class__);
        outline_65_var___class__ = NULL;
        goto outline_result_66;
        // Exception handler code:
        try_except_handler_199:;
        exception_keeper_type_199 = exception_type;
        exception_keeper_value_199 = exception_value;
        exception_keeper_tb_199 = exception_tb;
        exception_keeper_lineno_199 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_199;
        exception_value = exception_keeper_value_199;
        exception_tb = exception_keeper_tb_199;
        exception_lineno = exception_keeper_lineno_199;

        goto outline_exception_66;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_66:;
        exception_lineno = 1941;
        goto try_except_handler_198;
        outline_result_66:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[489], tmp_assign_source_539);
    }
    goto try_end_68;
    // Exception handler code:
    try_except_handler_198:;
    exception_keeper_type_200 = exception_type;
    exception_keeper_value_200 = exception_value;
    exception_keeper_tb_200 = exception_tb;
    exception_keeper_lineno_200 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_66__bases_orig);
    tmp_class_creation_66__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_66__bases);
    tmp_class_creation_66__bases = NULL;
    Py_XDECREF(tmp_class_creation_66__class_decl_dict);
    tmp_class_creation_66__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_66__metaclass);
    tmp_class_creation_66__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_66__prepared);
    tmp_class_creation_66__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_200;
    exception_value = exception_keeper_value_200;
    exception_tb = exception_keeper_tb_200;
    exception_lineno = exception_keeper_lineno_200;

    goto frame_exception_exit_1;
    // End of try:
    try_end_68:;
    CHECK_OBJECT(tmp_class_creation_66__bases_orig);
    Py_DECREF(tmp_class_creation_66__bases_orig);
    tmp_class_creation_66__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_66__bases);
    Py_DECREF(tmp_class_creation_66__bases);
    tmp_class_creation_66__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_66__class_decl_dict);
    Py_DECREF(tmp_class_creation_66__class_decl_dict);
    tmp_class_creation_66__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_66__metaclass);
    Py_DECREF(tmp_class_creation_66__metaclass);
    tmp_class_creation_66__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_66__prepared);
    Py_DECREF(tmp_class_creation_66__prepared);
    tmp_class_creation_66__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_541;
        PyObject *tmp_tuple_element_263;
        tmp_tuple_element_263 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_263 == NULL)) {
            tmp_tuple_element_263 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_263 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        tmp_assign_source_541 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_541, 0, tmp_tuple_element_263);
        assert(tmp_class_creation_67__bases_orig == NULL);
        tmp_class_creation_67__bases_orig = tmp_assign_source_541;
    }
    {
        PyObject *tmp_assign_source_542;
        PyObject *tmp_dircall_arg1_67;
        CHECK_OBJECT(tmp_class_creation_67__bases_orig);
        tmp_dircall_arg1_67 = tmp_class_creation_67__bases_orig;
        Py_INCREF(tmp_dircall_arg1_67);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_67};
            tmp_assign_source_542 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_542 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        assert(tmp_class_creation_67__bases == NULL);
        tmp_class_creation_67__bases = tmp_assign_source_542;
    }
    {
        PyObject *tmp_assign_source_543;
        tmp_assign_source_543 = PyDict_New();
        assert(tmp_class_creation_67__class_decl_dict == NULL);
        tmp_class_creation_67__class_decl_dict = tmp_assign_source_543;
    }
    {
        PyObject *tmp_assign_source_544;
        PyObject *tmp_metaclass_value_67;
        bool tmp_condition_result_397;
        PyObject *tmp_key_value_199;
        PyObject *tmp_dict_arg_value_199;
        PyObject *tmp_dict_arg_value_200;
        PyObject *tmp_key_value_200;
        nuitka_bool tmp_condition_result_398;
        int tmp_truth_name_67;
        PyObject *tmp_type_arg_133;
        PyObject *tmp_expression_value_331;
        PyObject *tmp_subscript_value_67;
        PyObject *tmp_bases_value_67;
        tmp_key_value_199 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_dict_arg_value_199 = tmp_class_creation_67__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_199, tmp_key_value_199);
        assert(!(tmp_res == -1));
        tmp_condition_result_397 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_397 != false) {
            goto condexpr_true_133;
        } else {
            goto condexpr_false_133;
        }
        condexpr_true_133:;
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_dict_arg_value_200 = tmp_class_creation_67__class_decl_dict;
        tmp_key_value_200 = mod_consts[205];
        tmp_metaclass_value_67 = DICT_GET_ITEM0(tmp_dict_arg_value_200, tmp_key_value_200);
        if (tmp_metaclass_value_67 == NULL) {
            tmp_metaclass_value_67 = Py_None;
        }
        assert(!(tmp_metaclass_value_67 == NULL));
        Py_INCREF(tmp_metaclass_value_67);
        goto condexpr_end_133;
        condexpr_false_133:;
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_truth_name_67 = CHECK_IF_TRUE(tmp_class_creation_67__bases);
        if (tmp_truth_name_67 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        tmp_condition_result_398 = tmp_truth_name_67 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_398 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_134;
        } else {
            goto condexpr_false_134;
        }
        condexpr_true_134:;
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_expression_value_331 = tmp_class_creation_67__bases;
        tmp_subscript_value_67 = mod_consts[4];
        tmp_type_arg_133 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_331, tmp_subscript_value_67, 0);
        if (tmp_type_arg_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        tmp_metaclass_value_67 = BUILTIN_TYPE1(tmp_type_arg_133);
        Py_DECREF(tmp_type_arg_133);
        if (tmp_metaclass_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        goto condexpr_end_134;
        condexpr_false_134:;
        tmp_metaclass_value_67 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_67);
        condexpr_end_134:;
        condexpr_end_133:;
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_bases_value_67 = tmp_class_creation_67__bases;
        tmp_assign_source_544 = SELECT_METACLASS(tmp_metaclass_value_67, tmp_bases_value_67);
        Py_DECREF(tmp_metaclass_value_67);
        if (tmp_assign_source_544 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        assert(tmp_class_creation_67__metaclass == NULL);
        tmp_class_creation_67__metaclass = tmp_assign_source_544;
    }
    {
        bool tmp_condition_result_399;
        PyObject *tmp_key_value_201;
        PyObject *tmp_dict_arg_value_201;
        tmp_key_value_201 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_dict_arg_value_201 = tmp_class_creation_67__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_201, tmp_key_value_201);
        assert(!(tmp_res == -1));
        tmp_condition_result_399 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_399 != false) {
            goto branch_yes_265;
        } else {
            goto branch_no_265;
        }
    }
    branch_yes_265:;
    CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_67__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2007;

        goto try_except_handler_201;
    }
    branch_no_265:;
    {
        nuitka_bool tmp_condition_result_400;
        PyObject *tmp_expression_value_332;
        CHECK_OBJECT(tmp_class_creation_67__metaclass);
        tmp_expression_value_332 = tmp_class_creation_67__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_332, mod_consts[206]);
        tmp_condition_result_400 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_400 == NUITKA_BOOL_TRUE) {
            goto branch_yes_266;
        } else {
            goto branch_no_266;
        }
    }
    branch_yes_266:;
    {
        PyObject *tmp_assign_source_545;
        PyObject *tmp_called_value_133;
        PyObject *tmp_expression_value_333;
        PyObject *tmp_args_value_133;
        PyObject *tmp_tuple_element_264;
        PyObject *tmp_kwargs_value_133;
        CHECK_OBJECT(tmp_class_creation_67__metaclass);
        tmp_expression_value_333 = tmp_class_creation_67__metaclass;
        tmp_called_value_133 = LOOKUP_ATTRIBUTE(tmp_expression_value_333, mod_consts[206]);
        if (tmp_called_value_133 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        tmp_tuple_element_264 = mod_consts[493];
        tmp_args_value_133 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_133, 0, tmp_tuple_element_264);
        CHECK_OBJECT(tmp_class_creation_67__bases);
        tmp_tuple_element_264 = tmp_class_creation_67__bases;
        PyTuple_SET_ITEM0(tmp_args_value_133, 1, tmp_tuple_element_264);
        CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
        tmp_kwargs_value_133 = tmp_class_creation_67__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2007;
        tmp_assign_source_545 = CALL_FUNCTION(tmp_called_value_133, tmp_args_value_133, tmp_kwargs_value_133);
        Py_DECREF(tmp_called_value_133);
        Py_DECREF(tmp_args_value_133);
        if (tmp_assign_source_545 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        assert(tmp_class_creation_67__prepared == NULL);
        tmp_class_creation_67__prepared = tmp_assign_source_545;
    }
    {
        bool tmp_condition_result_401;
        PyObject *tmp_operand_value_67;
        PyObject *tmp_expression_value_334;
        CHECK_OBJECT(tmp_class_creation_67__prepared);
        tmp_expression_value_334 = tmp_class_creation_67__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_334, mod_consts[208]);
        tmp_operand_value_67 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_67);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        tmp_condition_result_401 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_401 != false) {
            goto branch_yes_267;
        } else {
            goto branch_no_267;
        }
    }
    branch_yes_267:;
    {
        PyObject *tmp_raise_type_67;
        PyObject *tmp_raise_value_67;
        PyObject *tmp_left_value_67;
        PyObject *tmp_right_value_67;
        PyObject *tmp_tuple_element_265;
        PyObject *tmp_getattr_target_67;
        PyObject *tmp_getattr_attr_67;
        PyObject *tmp_getattr_default_67;
        tmp_raise_type_67 = PyExc_TypeError;
        tmp_left_value_67 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_67__metaclass);
        tmp_getattr_target_67 = tmp_class_creation_67__metaclass;
        tmp_getattr_attr_67 = mod_consts[210];
        tmp_getattr_default_67 = mod_consts[211];
        tmp_tuple_element_265 = BUILTIN_GETATTR(tmp_getattr_target_67, tmp_getattr_attr_67, tmp_getattr_default_67);
        if (tmp_tuple_element_265 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        tmp_right_value_67 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_335;
            PyObject *tmp_type_arg_134;
            PyTuple_SET_ITEM(tmp_right_value_67, 0, tmp_tuple_element_265);
            CHECK_OBJECT(tmp_class_creation_67__prepared);
            tmp_type_arg_134 = tmp_class_creation_67__prepared;
            tmp_expression_value_335 = BUILTIN_TYPE1(tmp_type_arg_134);
            assert(!(tmp_expression_value_335 == NULL));
            tmp_tuple_element_265 = LOOKUP_ATTRIBUTE(tmp_expression_value_335, mod_consts[210]);
            Py_DECREF(tmp_expression_value_335);
            if (tmp_tuple_element_265 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2007;

                goto tuple_build_exception_67;
            }
            PyTuple_SET_ITEM(tmp_right_value_67, 1, tmp_tuple_element_265);
        }
        goto tuple_build_noexception_67;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_67:;
        Py_DECREF(tmp_right_value_67);
        goto try_except_handler_201;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_67:;
        tmp_raise_value_67 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_67, tmp_right_value_67);
        Py_DECREF(tmp_right_value_67);
        if (tmp_raise_value_67 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_201;
        }
        exception_type = tmp_raise_type_67;
        Py_INCREF(tmp_raise_type_67);
        exception_value = tmp_raise_value_67;
        exception_lineno = 2007;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_201;
    }
    branch_no_267:;
    goto branch_end_266;
    branch_no_266:;
    {
        PyObject *tmp_assign_source_546;
        tmp_assign_source_546 = PyDict_New();
        assert(tmp_class_creation_67__prepared == NULL);
        tmp_class_creation_67__prepared = tmp_assign_source_546;
    }
    branch_end_266:;
    {
        PyObject *tmp_assign_source_547;
        {
            PyObject *tmp_set_locals_67;
            CHECK_OBJECT(tmp_class_creation_67__prepared);
            tmp_set_locals_67 = tmp_class_creation_67__prepared;
            locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007 = tmp_set_locals_67;
            Py_INCREF(tmp_set_locals_67);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_203;
        }
        tmp_dictset_value = mod_consts[494];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_203;
        }
        tmp_dictset_value = mod_consts[493];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_203;
        }
        if (isFrameUnusable(cache_frame_428cc430c5cebac713e1ec07decdff67_68)) {
            Py_XDECREF(cache_frame_428cc430c5cebac713e1ec07decdff67_68);

#if _DEBUG_REFCOUNTS
            if (cache_frame_428cc430c5cebac713e1ec07decdff67_68 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_428cc430c5cebac713e1ec07decdff67_68 = MAKE_FUNCTION_FRAME(codeobj_428cc430c5cebac713e1ec07decdff67, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_428cc430c5cebac713e1ec07decdff67_68->m_type_description == NULL);
        frame_428cc430c5cebac713e1ec07decdff67_68 = cache_frame_428cc430c5cebac713e1ec07decdff67_68;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_428cc430c5cebac713e1ec07decdff67_68);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_428cc430c5cebac713e1ec07decdff67_68) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[131];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2011;
            type_description_2 = "o";
            goto frame_exception_exit_68;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__80___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2013;
            type_description_2 = "o";
            goto frame_exception_exit_68;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_428cc430c5cebac713e1ec07decdff67_68);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_67;

        frame_exception_exit_68:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_428cc430c5cebac713e1ec07decdff67_68);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_428cc430c5cebac713e1ec07decdff67_68, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_428cc430c5cebac713e1ec07decdff67_68->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_428cc430c5cebac713e1ec07decdff67_68, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_428cc430c5cebac713e1ec07decdff67_68,
            type_description_2,
            outline_66_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_428cc430c5cebac713e1ec07decdff67_68 == cache_frame_428cc430c5cebac713e1ec07decdff67_68) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_428cc430c5cebac713e1ec07decdff67_68);
            cache_frame_428cc430c5cebac713e1ec07decdff67_68 = NULL;
        }

        assertFrameObject(frame_428cc430c5cebac713e1ec07decdff67_68);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_67;

        frame_no_exception_67:;
        goto skip_nested_handling_67;
        nested_frame_exit_67:;

        goto try_except_handler_203;
        skip_nested_handling_67:;
        {
            nuitka_bool tmp_condition_result_402;
            PyObject *tmp_cmp_expr_left_67;
            PyObject *tmp_cmp_expr_right_67;
            CHECK_OBJECT(tmp_class_creation_67__bases);
            tmp_cmp_expr_left_67 = tmp_class_creation_67__bases;
            CHECK_OBJECT(tmp_class_creation_67__bases_orig);
            tmp_cmp_expr_right_67 = tmp_class_creation_67__bases_orig;
            tmp_condition_result_402 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_67, tmp_cmp_expr_right_67);
            if (tmp_condition_result_402 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2007;

                goto try_except_handler_203;
            }
            if (tmp_condition_result_402 == NUITKA_BOOL_TRUE) {
                goto branch_yes_268;
            } else {
                goto branch_no_268;
            }
            assert(tmp_condition_result_402 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_268:;
        CHECK_OBJECT(tmp_class_creation_67__bases_orig);
        tmp_dictset_value = tmp_class_creation_67__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2007;

            goto try_except_handler_203;
        }
        branch_no_268:;
        {
            PyObject *tmp_assign_source_548;
            PyObject *tmp_called_value_134;
            PyObject *tmp_args_value_134;
            PyObject *tmp_tuple_element_266;
            PyObject *tmp_kwargs_value_134;
            CHECK_OBJECT(tmp_class_creation_67__metaclass);
            tmp_called_value_134 = tmp_class_creation_67__metaclass;
            tmp_tuple_element_266 = mod_consts[493];
            tmp_args_value_134 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_134, 0, tmp_tuple_element_266);
            CHECK_OBJECT(tmp_class_creation_67__bases);
            tmp_tuple_element_266 = tmp_class_creation_67__bases;
            PyTuple_SET_ITEM0(tmp_args_value_134, 1, tmp_tuple_element_266);
            tmp_tuple_element_266 = locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007;
            PyTuple_SET_ITEM0(tmp_args_value_134, 2, tmp_tuple_element_266);
            CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
            tmp_kwargs_value_134 = tmp_class_creation_67__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2007;
            tmp_assign_source_548 = CALL_FUNCTION(tmp_called_value_134, tmp_args_value_134, tmp_kwargs_value_134);
            Py_DECREF(tmp_args_value_134);
            if (tmp_assign_source_548 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2007;

                goto try_except_handler_203;
            }
            assert(outline_66_var___class__ == NULL);
            outline_66_var___class__ = tmp_assign_source_548;
        }
        CHECK_OBJECT(outline_66_var___class__);
        tmp_assign_source_547 = outline_66_var___class__;
        Py_INCREF(tmp_assign_source_547);
        goto try_return_handler_203;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_203:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007);
        locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007 = NULL;
        goto try_return_handler_202;
        // Exception handler code:
        try_except_handler_203:;
        exception_keeper_type_201 = exception_type;
        exception_keeper_value_201 = exception_value;
        exception_keeper_tb_201 = exception_tb;
        exception_keeper_lineno_201 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007);
        locals_xlwt$BIFFRecords$$$class__67_FooterRecord_2007 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_201;
        exception_value = exception_keeper_value_201;
        exception_tb = exception_keeper_tb_201;
        exception_lineno = exception_keeper_lineno_201;

        goto try_except_handler_202;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_202:;
        CHECK_OBJECT(outline_66_var___class__);
        Py_DECREF(outline_66_var___class__);
        outline_66_var___class__ = NULL;
        goto outline_result_67;
        // Exception handler code:
        try_except_handler_202:;
        exception_keeper_type_202 = exception_type;
        exception_keeper_value_202 = exception_value;
        exception_keeper_tb_202 = exception_tb;
        exception_keeper_lineno_202 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_202;
        exception_value = exception_keeper_value_202;
        exception_tb = exception_keeper_tb_202;
        exception_lineno = exception_keeper_lineno_202;

        goto outline_exception_67;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_67:;
        exception_lineno = 2007;
        goto try_except_handler_201;
        outline_result_67:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[493], tmp_assign_source_547);
    }
    goto try_end_69;
    // Exception handler code:
    try_except_handler_201:;
    exception_keeper_type_203 = exception_type;
    exception_keeper_value_203 = exception_value;
    exception_keeper_tb_203 = exception_tb;
    exception_keeper_lineno_203 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_67__bases_orig);
    tmp_class_creation_67__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_67__bases);
    tmp_class_creation_67__bases = NULL;
    Py_XDECREF(tmp_class_creation_67__class_decl_dict);
    tmp_class_creation_67__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_67__metaclass);
    tmp_class_creation_67__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_67__prepared);
    tmp_class_creation_67__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_203;
    exception_value = exception_keeper_value_203;
    exception_tb = exception_keeper_tb_203;
    exception_lineno = exception_keeper_lineno_203;

    goto frame_exception_exit_1;
    // End of try:
    try_end_69:;
    CHECK_OBJECT(tmp_class_creation_67__bases_orig);
    Py_DECREF(tmp_class_creation_67__bases_orig);
    tmp_class_creation_67__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_67__bases);
    Py_DECREF(tmp_class_creation_67__bases);
    tmp_class_creation_67__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_67__class_decl_dict);
    Py_DECREF(tmp_class_creation_67__class_decl_dict);
    tmp_class_creation_67__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_67__metaclass);
    Py_DECREF(tmp_class_creation_67__metaclass);
    tmp_class_creation_67__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_67__prepared);
    Py_DECREF(tmp_class_creation_67__prepared);
    tmp_class_creation_67__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_549;
        PyObject *tmp_tuple_element_267;
        tmp_tuple_element_267 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_267 == NULL)) {
            tmp_tuple_element_267 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_267 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        tmp_assign_source_549 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_549, 0, tmp_tuple_element_267);
        assert(tmp_class_creation_68__bases_orig == NULL);
        tmp_class_creation_68__bases_orig = tmp_assign_source_549;
    }
    {
        PyObject *tmp_assign_source_550;
        PyObject *tmp_dircall_arg1_68;
        CHECK_OBJECT(tmp_class_creation_68__bases_orig);
        tmp_dircall_arg1_68 = tmp_class_creation_68__bases_orig;
        Py_INCREF(tmp_dircall_arg1_68);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_68};
            tmp_assign_source_550 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_550 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        assert(tmp_class_creation_68__bases == NULL);
        tmp_class_creation_68__bases = tmp_assign_source_550;
    }
    {
        PyObject *tmp_assign_source_551;
        tmp_assign_source_551 = PyDict_New();
        assert(tmp_class_creation_68__class_decl_dict == NULL);
        tmp_class_creation_68__class_decl_dict = tmp_assign_source_551;
    }
    {
        PyObject *tmp_assign_source_552;
        PyObject *tmp_metaclass_value_68;
        bool tmp_condition_result_403;
        PyObject *tmp_key_value_202;
        PyObject *tmp_dict_arg_value_202;
        PyObject *tmp_dict_arg_value_203;
        PyObject *tmp_key_value_203;
        nuitka_bool tmp_condition_result_404;
        int tmp_truth_name_68;
        PyObject *tmp_type_arg_135;
        PyObject *tmp_expression_value_336;
        PyObject *tmp_subscript_value_68;
        PyObject *tmp_bases_value_68;
        tmp_key_value_202 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_dict_arg_value_202 = tmp_class_creation_68__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_202, tmp_key_value_202);
        assert(!(tmp_res == -1));
        tmp_condition_result_403 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_403 != false) {
            goto condexpr_true_135;
        } else {
            goto condexpr_false_135;
        }
        condexpr_true_135:;
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_dict_arg_value_203 = tmp_class_creation_68__class_decl_dict;
        tmp_key_value_203 = mod_consts[205];
        tmp_metaclass_value_68 = DICT_GET_ITEM0(tmp_dict_arg_value_203, tmp_key_value_203);
        if (tmp_metaclass_value_68 == NULL) {
            tmp_metaclass_value_68 = Py_None;
        }
        assert(!(tmp_metaclass_value_68 == NULL));
        Py_INCREF(tmp_metaclass_value_68);
        goto condexpr_end_135;
        condexpr_false_135:;
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_truth_name_68 = CHECK_IF_TRUE(tmp_class_creation_68__bases);
        if (tmp_truth_name_68 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        tmp_condition_result_404 = tmp_truth_name_68 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_404 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_136;
        } else {
            goto condexpr_false_136;
        }
        condexpr_true_136:;
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_expression_value_336 = tmp_class_creation_68__bases;
        tmp_subscript_value_68 = mod_consts[4];
        tmp_type_arg_135 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_336, tmp_subscript_value_68, 0);
        if (tmp_type_arg_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        tmp_metaclass_value_68 = BUILTIN_TYPE1(tmp_type_arg_135);
        Py_DECREF(tmp_type_arg_135);
        if (tmp_metaclass_value_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        goto condexpr_end_136;
        condexpr_false_136:;
        tmp_metaclass_value_68 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_68);
        condexpr_end_136:;
        condexpr_end_135:;
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_bases_value_68 = tmp_class_creation_68__bases;
        tmp_assign_source_552 = SELECT_METACLASS(tmp_metaclass_value_68, tmp_bases_value_68);
        Py_DECREF(tmp_metaclass_value_68);
        if (tmp_assign_source_552 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        assert(tmp_class_creation_68__metaclass == NULL);
        tmp_class_creation_68__metaclass = tmp_assign_source_552;
    }
    {
        bool tmp_condition_result_405;
        PyObject *tmp_key_value_204;
        PyObject *tmp_dict_arg_value_204;
        tmp_key_value_204 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_dict_arg_value_204 = tmp_class_creation_68__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_204, tmp_key_value_204);
        assert(!(tmp_res == -1));
        tmp_condition_result_405 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_405 != false) {
            goto branch_yes_269;
        } else {
            goto branch_no_269;
        }
    }
    branch_yes_269:;
    CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_68__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2017;

        goto try_except_handler_204;
    }
    branch_no_269:;
    {
        nuitka_bool tmp_condition_result_406;
        PyObject *tmp_expression_value_337;
        CHECK_OBJECT(tmp_class_creation_68__metaclass);
        tmp_expression_value_337 = tmp_class_creation_68__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_337, mod_consts[206]);
        tmp_condition_result_406 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_406 == NUITKA_BOOL_TRUE) {
            goto branch_yes_270;
        } else {
            goto branch_no_270;
        }
    }
    branch_yes_270:;
    {
        PyObject *tmp_assign_source_553;
        PyObject *tmp_called_value_135;
        PyObject *tmp_expression_value_338;
        PyObject *tmp_args_value_135;
        PyObject *tmp_tuple_element_268;
        PyObject *tmp_kwargs_value_135;
        CHECK_OBJECT(tmp_class_creation_68__metaclass);
        tmp_expression_value_338 = tmp_class_creation_68__metaclass;
        tmp_called_value_135 = LOOKUP_ATTRIBUTE(tmp_expression_value_338, mod_consts[206]);
        if (tmp_called_value_135 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        tmp_tuple_element_268 = mod_consts[496];
        tmp_args_value_135 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_135, 0, tmp_tuple_element_268);
        CHECK_OBJECT(tmp_class_creation_68__bases);
        tmp_tuple_element_268 = tmp_class_creation_68__bases;
        PyTuple_SET_ITEM0(tmp_args_value_135, 1, tmp_tuple_element_268);
        CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
        tmp_kwargs_value_135 = tmp_class_creation_68__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2017;
        tmp_assign_source_553 = CALL_FUNCTION(tmp_called_value_135, tmp_args_value_135, tmp_kwargs_value_135);
        Py_DECREF(tmp_called_value_135);
        Py_DECREF(tmp_args_value_135);
        if (tmp_assign_source_553 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        assert(tmp_class_creation_68__prepared == NULL);
        tmp_class_creation_68__prepared = tmp_assign_source_553;
    }
    {
        bool tmp_condition_result_407;
        PyObject *tmp_operand_value_68;
        PyObject *tmp_expression_value_339;
        CHECK_OBJECT(tmp_class_creation_68__prepared);
        tmp_expression_value_339 = tmp_class_creation_68__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_339, mod_consts[208]);
        tmp_operand_value_68 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_68);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        tmp_condition_result_407 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_407 != false) {
            goto branch_yes_271;
        } else {
            goto branch_no_271;
        }
    }
    branch_yes_271:;
    {
        PyObject *tmp_raise_type_68;
        PyObject *tmp_raise_value_68;
        PyObject *tmp_left_value_68;
        PyObject *tmp_right_value_68;
        PyObject *tmp_tuple_element_269;
        PyObject *tmp_getattr_target_68;
        PyObject *tmp_getattr_attr_68;
        PyObject *tmp_getattr_default_68;
        tmp_raise_type_68 = PyExc_TypeError;
        tmp_left_value_68 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_68__metaclass);
        tmp_getattr_target_68 = tmp_class_creation_68__metaclass;
        tmp_getattr_attr_68 = mod_consts[210];
        tmp_getattr_default_68 = mod_consts[211];
        tmp_tuple_element_269 = BUILTIN_GETATTR(tmp_getattr_target_68, tmp_getattr_attr_68, tmp_getattr_default_68);
        if (tmp_tuple_element_269 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        tmp_right_value_68 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_340;
            PyObject *tmp_type_arg_136;
            PyTuple_SET_ITEM(tmp_right_value_68, 0, tmp_tuple_element_269);
            CHECK_OBJECT(tmp_class_creation_68__prepared);
            tmp_type_arg_136 = tmp_class_creation_68__prepared;
            tmp_expression_value_340 = BUILTIN_TYPE1(tmp_type_arg_136);
            assert(!(tmp_expression_value_340 == NULL));
            tmp_tuple_element_269 = LOOKUP_ATTRIBUTE(tmp_expression_value_340, mod_consts[210]);
            Py_DECREF(tmp_expression_value_340);
            if (tmp_tuple_element_269 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2017;

                goto tuple_build_exception_68;
            }
            PyTuple_SET_ITEM(tmp_right_value_68, 1, tmp_tuple_element_269);
        }
        goto tuple_build_noexception_68;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_68:;
        Py_DECREF(tmp_right_value_68);
        goto try_except_handler_204;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_68:;
        tmp_raise_value_68 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_68, tmp_right_value_68);
        Py_DECREF(tmp_right_value_68);
        if (tmp_raise_value_68 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_204;
        }
        exception_type = tmp_raise_type_68;
        Py_INCREF(tmp_raise_type_68);
        exception_value = tmp_raise_value_68;
        exception_lineno = 2017;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_204;
    }
    branch_no_271:;
    goto branch_end_270;
    branch_no_270:;
    {
        PyObject *tmp_assign_source_554;
        tmp_assign_source_554 = PyDict_New();
        assert(tmp_class_creation_68__prepared == NULL);
        tmp_class_creation_68__prepared = tmp_assign_source_554;
    }
    branch_end_270:;
    {
        PyObject *tmp_assign_source_555;
        {
            PyObject *tmp_set_locals_68;
            CHECK_OBJECT(tmp_class_creation_68__prepared);
            tmp_set_locals_68 = tmp_class_creation_68__prepared;
            locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017 = tmp_set_locals_68;
            Py_INCREF(tmp_set_locals_68);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_206;
        }
        tmp_dictset_value = mod_consts[497];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_206;
        }
        tmp_dictset_value = mod_consts[496];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_206;
        }
        if (isFrameUnusable(cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69)) {
            Py_XDECREF(cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69);

#if _DEBUG_REFCOUNTS
            if (cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69 = MAKE_FUNCTION_FRAME(codeobj_68f83b44ca6b4cb18b6a5eaa399e0ea1, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69->m_type_description == NULL);
        frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69 = cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[498];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2029;
            type_description_2 = "o";
            goto frame_exception_exit_69;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__81___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2031;
            type_description_2 = "o";
            goto frame_exception_exit_69;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_68;

        frame_exception_exit_69:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69,
            type_description_2,
            outline_67_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69 == cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69);
            cache_frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69 = NULL;
        }

        assertFrameObject(frame_68f83b44ca6b4cb18b6a5eaa399e0ea1_69);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_68;

        frame_no_exception_68:;
        goto skip_nested_handling_68;
        nested_frame_exit_68:;

        goto try_except_handler_206;
        skip_nested_handling_68:;
        {
            nuitka_bool tmp_condition_result_408;
            PyObject *tmp_cmp_expr_left_68;
            PyObject *tmp_cmp_expr_right_68;
            CHECK_OBJECT(tmp_class_creation_68__bases);
            tmp_cmp_expr_left_68 = tmp_class_creation_68__bases;
            CHECK_OBJECT(tmp_class_creation_68__bases_orig);
            tmp_cmp_expr_right_68 = tmp_class_creation_68__bases_orig;
            tmp_condition_result_408 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_68, tmp_cmp_expr_right_68);
            if (tmp_condition_result_408 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2017;

                goto try_except_handler_206;
            }
            if (tmp_condition_result_408 == NUITKA_BOOL_TRUE) {
                goto branch_yes_272;
            } else {
                goto branch_no_272;
            }
            assert(tmp_condition_result_408 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_272:;
        CHECK_OBJECT(tmp_class_creation_68__bases_orig);
        tmp_dictset_value = tmp_class_creation_68__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2017;

            goto try_except_handler_206;
        }
        branch_no_272:;
        {
            PyObject *tmp_assign_source_556;
            PyObject *tmp_called_value_136;
            PyObject *tmp_args_value_136;
            PyObject *tmp_tuple_element_270;
            PyObject *tmp_kwargs_value_136;
            CHECK_OBJECT(tmp_class_creation_68__metaclass);
            tmp_called_value_136 = tmp_class_creation_68__metaclass;
            tmp_tuple_element_270 = mod_consts[496];
            tmp_args_value_136 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_136, 0, tmp_tuple_element_270);
            CHECK_OBJECT(tmp_class_creation_68__bases);
            tmp_tuple_element_270 = tmp_class_creation_68__bases;
            PyTuple_SET_ITEM0(tmp_args_value_136, 1, tmp_tuple_element_270);
            tmp_tuple_element_270 = locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017;
            PyTuple_SET_ITEM0(tmp_args_value_136, 2, tmp_tuple_element_270);
            CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
            tmp_kwargs_value_136 = tmp_class_creation_68__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2017;
            tmp_assign_source_556 = CALL_FUNCTION(tmp_called_value_136, tmp_args_value_136, tmp_kwargs_value_136);
            Py_DECREF(tmp_args_value_136);
            if (tmp_assign_source_556 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2017;

                goto try_except_handler_206;
            }
            assert(outline_67_var___class__ == NULL);
            outline_67_var___class__ = tmp_assign_source_556;
        }
        CHECK_OBJECT(outline_67_var___class__);
        tmp_assign_source_555 = outline_67_var___class__;
        Py_INCREF(tmp_assign_source_555);
        goto try_return_handler_206;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_206:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017);
        locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017 = NULL;
        goto try_return_handler_205;
        // Exception handler code:
        try_except_handler_206:;
        exception_keeper_type_204 = exception_type;
        exception_keeper_value_204 = exception_value;
        exception_keeper_tb_204 = exception_tb;
        exception_keeper_lineno_204 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017);
        locals_xlwt$BIFFRecords$$$class__68_HCenterRecord_2017 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_204;
        exception_value = exception_keeper_value_204;
        exception_tb = exception_keeper_tb_204;
        exception_lineno = exception_keeper_lineno_204;

        goto try_except_handler_205;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_205:;
        CHECK_OBJECT(outline_67_var___class__);
        Py_DECREF(outline_67_var___class__);
        outline_67_var___class__ = NULL;
        goto outline_result_68;
        // Exception handler code:
        try_except_handler_205:;
        exception_keeper_type_205 = exception_type;
        exception_keeper_value_205 = exception_value;
        exception_keeper_tb_205 = exception_tb;
        exception_keeper_lineno_205 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_205;
        exception_value = exception_keeper_value_205;
        exception_tb = exception_keeper_tb_205;
        exception_lineno = exception_keeper_lineno_205;

        goto outline_exception_68;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_68:;
        exception_lineno = 2017;
        goto try_except_handler_204;
        outline_result_68:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[496], tmp_assign_source_555);
    }
    goto try_end_70;
    // Exception handler code:
    try_except_handler_204:;
    exception_keeper_type_206 = exception_type;
    exception_keeper_value_206 = exception_value;
    exception_keeper_tb_206 = exception_tb;
    exception_keeper_lineno_206 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_68__bases_orig);
    tmp_class_creation_68__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_68__bases);
    tmp_class_creation_68__bases = NULL;
    Py_XDECREF(tmp_class_creation_68__class_decl_dict);
    tmp_class_creation_68__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_68__metaclass);
    tmp_class_creation_68__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_68__prepared);
    tmp_class_creation_68__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_206;
    exception_value = exception_keeper_value_206;
    exception_tb = exception_keeper_tb_206;
    exception_lineno = exception_keeper_lineno_206;

    goto frame_exception_exit_1;
    // End of try:
    try_end_70:;
    CHECK_OBJECT(tmp_class_creation_68__bases_orig);
    Py_DECREF(tmp_class_creation_68__bases_orig);
    tmp_class_creation_68__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_68__bases);
    Py_DECREF(tmp_class_creation_68__bases);
    tmp_class_creation_68__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_68__class_decl_dict);
    Py_DECREF(tmp_class_creation_68__class_decl_dict);
    tmp_class_creation_68__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_68__metaclass);
    Py_DECREF(tmp_class_creation_68__metaclass);
    tmp_class_creation_68__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_68__prepared);
    Py_DECREF(tmp_class_creation_68__prepared);
    tmp_class_creation_68__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_557;
        PyObject *tmp_tuple_element_271;
        tmp_tuple_element_271 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_271 == NULL)) {
            tmp_tuple_element_271 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_271 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        tmp_assign_source_557 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_557, 0, tmp_tuple_element_271);
        assert(tmp_class_creation_69__bases_orig == NULL);
        tmp_class_creation_69__bases_orig = tmp_assign_source_557;
    }
    {
        PyObject *tmp_assign_source_558;
        PyObject *tmp_dircall_arg1_69;
        CHECK_OBJECT(tmp_class_creation_69__bases_orig);
        tmp_dircall_arg1_69 = tmp_class_creation_69__bases_orig;
        Py_INCREF(tmp_dircall_arg1_69);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_69};
            tmp_assign_source_558 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_558 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        assert(tmp_class_creation_69__bases == NULL);
        tmp_class_creation_69__bases = tmp_assign_source_558;
    }
    {
        PyObject *tmp_assign_source_559;
        tmp_assign_source_559 = PyDict_New();
        assert(tmp_class_creation_69__class_decl_dict == NULL);
        tmp_class_creation_69__class_decl_dict = tmp_assign_source_559;
    }
    {
        PyObject *tmp_assign_source_560;
        PyObject *tmp_metaclass_value_69;
        bool tmp_condition_result_409;
        PyObject *tmp_key_value_205;
        PyObject *tmp_dict_arg_value_205;
        PyObject *tmp_dict_arg_value_206;
        PyObject *tmp_key_value_206;
        nuitka_bool tmp_condition_result_410;
        int tmp_truth_name_69;
        PyObject *tmp_type_arg_137;
        PyObject *tmp_expression_value_341;
        PyObject *tmp_subscript_value_69;
        PyObject *tmp_bases_value_69;
        tmp_key_value_205 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_dict_arg_value_205 = tmp_class_creation_69__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_205, tmp_key_value_205);
        assert(!(tmp_res == -1));
        tmp_condition_result_409 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_409 != false) {
            goto condexpr_true_137;
        } else {
            goto condexpr_false_137;
        }
        condexpr_true_137:;
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_dict_arg_value_206 = tmp_class_creation_69__class_decl_dict;
        tmp_key_value_206 = mod_consts[205];
        tmp_metaclass_value_69 = DICT_GET_ITEM0(tmp_dict_arg_value_206, tmp_key_value_206);
        if (tmp_metaclass_value_69 == NULL) {
            tmp_metaclass_value_69 = Py_None;
        }
        assert(!(tmp_metaclass_value_69 == NULL));
        Py_INCREF(tmp_metaclass_value_69);
        goto condexpr_end_137;
        condexpr_false_137:;
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_truth_name_69 = CHECK_IF_TRUE(tmp_class_creation_69__bases);
        if (tmp_truth_name_69 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        tmp_condition_result_410 = tmp_truth_name_69 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_410 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_138;
        } else {
            goto condexpr_false_138;
        }
        condexpr_true_138:;
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_expression_value_341 = tmp_class_creation_69__bases;
        tmp_subscript_value_69 = mod_consts[4];
        tmp_type_arg_137 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_341, tmp_subscript_value_69, 0);
        if (tmp_type_arg_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        tmp_metaclass_value_69 = BUILTIN_TYPE1(tmp_type_arg_137);
        Py_DECREF(tmp_type_arg_137);
        if (tmp_metaclass_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        goto condexpr_end_138;
        condexpr_false_138:;
        tmp_metaclass_value_69 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_69);
        condexpr_end_138:;
        condexpr_end_137:;
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_bases_value_69 = tmp_class_creation_69__bases;
        tmp_assign_source_560 = SELECT_METACLASS(tmp_metaclass_value_69, tmp_bases_value_69);
        Py_DECREF(tmp_metaclass_value_69);
        if (tmp_assign_source_560 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        assert(tmp_class_creation_69__metaclass == NULL);
        tmp_class_creation_69__metaclass = tmp_assign_source_560;
    }
    {
        bool tmp_condition_result_411;
        PyObject *tmp_key_value_207;
        PyObject *tmp_dict_arg_value_207;
        tmp_key_value_207 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_dict_arg_value_207 = tmp_class_creation_69__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_207, tmp_key_value_207);
        assert(!(tmp_res == -1));
        tmp_condition_result_411 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_411 != false) {
            goto branch_yes_273;
        } else {
            goto branch_no_273;
        }
    }
    branch_yes_273:;
    CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_69__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2035;

        goto try_except_handler_207;
    }
    branch_no_273:;
    {
        nuitka_bool tmp_condition_result_412;
        PyObject *tmp_expression_value_342;
        CHECK_OBJECT(tmp_class_creation_69__metaclass);
        tmp_expression_value_342 = tmp_class_creation_69__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_342, mod_consts[206]);
        tmp_condition_result_412 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_412 == NUITKA_BOOL_TRUE) {
            goto branch_yes_274;
        } else {
            goto branch_no_274;
        }
    }
    branch_yes_274:;
    {
        PyObject *tmp_assign_source_561;
        PyObject *tmp_called_value_137;
        PyObject *tmp_expression_value_343;
        PyObject *tmp_args_value_137;
        PyObject *tmp_tuple_element_272;
        PyObject *tmp_kwargs_value_137;
        CHECK_OBJECT(tmp_class_creation_69__metaclass);
        tmp_expression_value_343 = tmp_class_creation_69__metaclass;
        tmp_called_value_137 = LOOKUP_ATTRIBUTE(tmp_expression_value_343, mod_consts[206]);
        if (tmp_called_value_137 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        tmp_tuple_element_272 = mod_consts[500];
        tmp_args_value_137 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_137, 0, tmp_tuple_element_272);
        CHECK_OBJECT(tmp_class_creation_69__bases);
        tmp_tuple_element_272 = tmp_class_creation_69__bases;
        PyTuple_SET_ITEM0(tmp_args_value_137, 1, tmp_tuple_element_272);
        CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
        tmp_kwargs_value_137 = tmp_class_creation_69__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2035;
        tmp_assign_source_561 = CALL_FUNCTION(tmp_called_value_137, tmp_args_value_137, tmp_kwargs_value_137);
        Py_DECREF(tmp_called_value_137);
        Py_DECREF(tmp_args_value_137);
        if (tmp_assign_source_561 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        assert(tmp_class_creation_69__prepared == NULL);
        tmp_class_creation_69__prepared = tmp_assign_source_561;
    }
    {
        bool tmp_condition_result_413;
        PyObject *tmp_operand_value_69;
        PyObject *tmp_expression_value_344;
        CHECK_OBJECT(tmp_class_creation_69__prepared);
        tmp_expression_value_344 = tmp_class_creation_69__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_344, mod_consts[208]);
        tmp_operand_value_69 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_69);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        tmp_condition_result_413 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_413 != false) {
            goto branch_yes_275;
        } else {
            goto branch_no_275;
        }
    }
    branch_yes_275:;
    {
        PyObject *tmp_raise_type_69;
        PyObject *tmp_raise_value_69;
        PyObject *tmp_left_value_69;
        PyObject *tmp_right_value_69;
        PyObject *tmp_tuple_element_273;
        PyObject *tmp_getattr_target_69;
        PyObject *tmp_getattr_attr_69;
        PyObject *tmp_getattr_default_69;
        tmp_raise_type_69 = PyExc_TypeError;
        tmp_left_value_69 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_69__metaclass);
        tmp_getattr_target_69 = tmp_class_creation_69__metaclass;
        tmp_getattr_attr_69 = mod_consts[210];
        tmp_getattr_default_69 = mod_consts[211];
        tmp_tuple_element_273 = BUILTIN_GETATTR(tmp_getattr_target_69, tmp_getattr_attr_69, tmp_getattr_default_69);
        if (tmp_tuple_element_273 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        tmp_right_value_69 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_345;
            PyObject *tmp_type_arg_138;
            PyTuple_SET_ITEM(tmp_right_value_69, 0, tmp_tuple_element_273);
            CHECK_OBJECT(tmp_class_creation_69__prepared);
            tmp_type_arg_138 = tmp_class_creation_69__prepared;
            tmp_expression_value_345 = BUILTIN_TYPE1(tmp_type_arg_138);
            assert(!(tmp_expression_value_345 == NULL));
            tmp_tuple_element_273 = LOOKUP_ATTRIBUTE(tmp_expression_value_345, mod_consts[210]);
            Py_DECREF(tmp_expression_value_345);
            if (tmp_tuple_element_273 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2035;

                goto tuple_build_exception_69;
            }
            PyTuple_SET_ITEM(tmp_right_value_69, 1, tmp_tuple_element_273);
        }
        goto tuple_build_noexception_69;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_69:;
        Py_DECREF(tmp_right_value_69);
        goto try_except_handler_207;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_69:;
        tmp_raise_value_69 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_69, tmp_right_value_69);
        Py_DECREF(tmp_right_value_69);
        if (tmp_raise_value_69 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_207;
        }
        exception_type = tmp_raise_type_69;
        Py_INCREF(tmp_raise_type_69);
        exception_value = tmp_raise_value_69;
        exception_lineno = 2035;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_207;
    }
    branch_no_275:;
    goto branch_end_274;
    branch_no_274:;
    {
        PyObject *tmp_assign_source_562;
        tmp_assign_source_562 = PyDict_New();
        assert(tmp_class_creation_69__prepared == NULL);
        tmp_class_creation_69__prepared = tmp_assign_source_562;
    }
    branch_end_274:;
    {
        PyObject *tmp_assign_source_563;
        {
            PyObject *tmp_set_locals_69;
            CHECK_OBJECT(tmp_class_creation_69__prepared);
            tmp_set_locals_69 = tmp_class_creation_69__prepared;
            locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035 = tmp_set_locals_69;
            Py_INCREF(tmp_set_locals_69);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_209;
        }
        tmp_dictset_value = mod_consts[501];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_209;
        }
        tmp_dictset_value = mod_consts[500];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_209;
        }
        if (isFrameUnusable(cache_frame_37535882bc8300a848a9f37e914f83db_70)) {
            Py_XDECREF(cache_frame_37535882bc8300a848a9f37e914f83db_70);

#if _DEBUG_REFCOUNTS
            if (cache_frame_37535882bc8300a848a9f37e914f83db_70 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_37535882bc8300a848a9f37e914f83db_70 = MAKE_FUNCTION_FRAME(codeobj_37535882bc8300a848a9f37e914f83db, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_37535882bc8300a848a9f37e914f83db_70->m_type_description == NULL);
        frame_37535882bc8300a848a9f37e914f83db_70 = cache_frame_37535882bc8300a848a9f37e914f83db_70;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_37535882bc8300a848a9f37e914f83db_70);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_37535882bc8300a848a9f37e914f83db_70) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[502];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2047;
            type_description_2 = "o";
            goto frame_exception_exit_70;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__82___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2049;
            type_description_2 = "o";
            goto frame_exception_exit_70;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37535882bc8300a848a9f37e914f83db_70);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_69;

        frame_exception_exit_70:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_37535882bc8300a848a9f37e914f83db_70);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_37535882bc8300a848a9f37e914f83db_70, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_37535882bc8300a848a9f37e914f83db_70->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_37535882bc8300a848a9f37e914f83db_70, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_37535882bc8300a848a9f37e914f83db_70,
            type_description_2,
            outline_68_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_37535882bc8300a848a9f37e914f83db_70 == cache_frame_37535882bc8300a848a9f37e914f83db_70) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_37535882bc8300a848a9f37e914f83db_70);
            cache_frame_37535882bc8300a848a9f37e914f83db_70 = NULL;
        }

        assertFrameObject(frame_37535882bc8300a848a9f37e914f83db_70);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_69;

        frame_no_exception_69:;
        goto skip_nested_handling_69;
        nested_frame_exit_69:;

        goto try_except_handler_209;
        skip_nested_handling_69:;
        {
            nuitka_bool tmp_condition_result_414;
            PyObject *tmp_cmp_expr_left_69;
            PyObject *tmp_cmp_expr_right_69;
            CHECK_OBJECT(tmp_class_creation_69__bases);
            tmp_cmp_expr_left_69 = tmp_class_creation_69__bases;
            CHECK_OBJECT(tmp_class_creation_69__bases_orig);
            tmp_cmp_expr_right_69 = tmp_class_creation_69__bases_orig;
            tmp_condition_result_414 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_69, tmp_cmp_expr_right_69);
            if (tmp_condition_result_414 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2035;

                goto try_except_handler_209;
            }
            if (tmp_condition_result_414 == NUITKA_BOOL_TRUE) {
                goto branch_yes_276;
            } else {
                goto branch_no_276;
            }
            assert(tmp_condition_result_414 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_276:;
        CHECK_OBJECT(tmp_class_creation_69__bases_orig);
        tmp_dictset_value = tmp_class_creation_69__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2035;

            goto try_except_handler_209;
        }
        branch_no_276:;
        {
            PyObject *tmp_assign_source_564;
            PyObject *tmp_called_value_138;
            PyObject *tmp_args_value_138;
            PyObject *tmp_tuple_element_274;
            PyObject *tmp_kwargs_value_138;
            CHECK_OBJECT(tmp_class_creation_69__metaclass);
            tmp_called_value_138 = tmp_class_creation_69__metaclass;
            tmp_tuple_element_274 = mod_consts[500];
            tmp_args_value_138 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_138, 0, tmp_tuple_element_274);
            CHECK_OBJECT(tmp_class_creation_69__bases);
            tmp_tuple_element_274 = tmp_class_creation_69__bases;
            PyTuple_SET_ITEM0(tmp_args_value_138, 1, tmp_tuple_element_274);
            tmp_tuple_element_274 = locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035;
            PyTuple_SET_ITEM0(tmp_args_value_138, 2, tmp_tuple_element_274);
            CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
            tmp_kwargs_value_138 = tmp_class_creation_69__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2035;
            tmp_assign_source_564 = CALL_FUNCTION(tmp_called_value_138, tmp_args_value_138, tmp_kwargs_value_138);
            Py_DECREF(tmp_args_value_138);
            if (tmp_assign_source_564 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2035;

                goto try_except_handler_209;
            }
            assert(outline_68_var___class__ == NULL);
            outline_68_var___class__ = tmp_assign_source_564;
        }
        CHECK_OBJECT(outline_68_var___class__);
        tmp_assign_source_563 = outline_68_var___class__;
        Py_INCREF(tmp_assign_source_563);
        goto try_return_handler_209;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_209:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035);
        locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035 = NULL;
        goto try_return_handler_208;
        // Exception handler code:
        try_except_handler_209:;
        exception_keeper_type_207 = exception_type;
        exception_keeper_value_207 = exception_value;
        exception_keeper_tb_207 = exception_tb;
        exception_keeper_lineno_207 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035);
        locals_xlwt$BIFFRecords$$$class__69_VCenterRecord_2035 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_207;
        exception_value = exception_keeper_value_207;
        exception_tb = exception_keeper_tb_207;
        exception_lineno = exception_keeper_lineno_207;

        goto try_except_handler_208;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_208:;
        CHECK_OBJECT(outline_68_var___class__);
        Py_DECREF(outline_68_var___class__);
        outline_68_var___class__ = NULL;
        goto outline_result_69;
        // Exception handler code:
        try_except_handler_208:;
        exception_keeper_type_208 = exception_type;
        exception_keeper_value_208 = exception_value;
        exception_keeper_tb_208 = exception_tb;
        exception_keeper_lineno_208 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_208;
        exception_value = exception_keeper_value_208;
        exception_tb = exception_keeper_tb_208;
        exception_lineno = exception_keeper_lineno_208;

        goto outline_exception_69;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_69:;
        exception_lineno = 2035;
        goto try_except_handler_207;
        outline_result_69:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[500], tmp_assign_source_563);
    }
    goto try_end_71;
    // Exception handler code:
    try_except_handler_207:;
    exception_keeper_type_209 = exception_type;
    exception_keeper_value_209 = exception_value;
    exception_keeper_tb_209 = exception_tb;
    exception_keeper_lineno_209 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_69__bases_orig);
    tmp_class_creation_69__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_69__bases);
    tmp_class_creation_69__bases = NULL;
    Py_XDECREF(tmp_class_creation_69__class_decl_dict);
    tmp_class_creation_69__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_69__metaclass);
    tmp_class_creation_69__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_69__prepared);
    tmp_class_creation_69__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_209;
    exception_value = exception_keeper_value_209;
    exception_tb = exception_keeper_tb_209;
    exception_lineno = exception_keeper_lineno_209;

    goto frame_exception_exit_1;
    // End of try:
    try_end_71:;
    CHECK_OBJECT(tmp_class_creation_69__bases_orig);
    Py_DECREF(tmp_class_creation_69__bases_orig);
    tmp_class_creation_69__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_69__bases);
    Py_DECREF(tmp_class_creation_69__bases);
    tmp_class_creation_69__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_69__class_decl_dict);
    Py_DECREF(tmp_class_creation_69__class_decl_dict);
    tmp_class_creation_69__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_69__metaclass);
    Py_DECREF(tmp_class_creation_69__metaclass);
    tmp_class_creation_69__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_69__prepared);
    Py_DECREF(tmp_class_creation_69__prepared);
    tmp_class_creation_69__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_565;
        PyObject *tmp_tuple_element_275;
        tmp_tuple_element_275 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_275 == NULL)) {
            tmp_tuple_element_275 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_275 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        tmp_assign_source_565 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_565, 0, tmp_tuple_element_275);
        assert(tmp_class_creation_70__bases_orig == NULL);
        tmp_class_creation_70__bases_orig = tmp_assign_source_565;
    }
    {
        PyObject *tmp_assign_source_566;
        PyObject *tmp_dircall_arg1_70;
        CHECK_OBJECT(tmp_class_creation_70__bases_orig);
        tmp_dircall_arg1_70 = tmp_class_creation_70__bases_orig;
        Py_INCREF(tmp_dircall_arg1_70);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_70};
            tmp_assign_source_566 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_566 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        assert(tmp_class_creation_70__bases == NULL);
        tmp_class_creation_70__bases = tmp_assign_source_566;
    }
    {
        PyObject *tmp_assign_source_567;
        tmp_assign_source_567 = PyDict_New();
        assert(tmp_class_creation_70__class_decl_dict == NULL);
        tmp_class_creation_70__class_decl_dict = tmp_assign_source_567;
    }
    {
        PyObject *tmp_assign_source_568;
        PyObject *tmp_metaclass_value_70;
        bool tmp_condition_result_415;
        PyObject *tmp_key_value_208;
        PyObject *tmp_dict_arg_value_208;
        PyObject *tmp_dict_arg_value_209;
        PyObject *tmp_key_value_209;
        nuitka_bool tmp_condition_result_416;
        int tmp_truth_name_70;
        PyObject *tmp_type_arg_139;
        PyObject *tmp_expression_value_346;
        PyObject *tmp_subscript_value_70;
        PyObject *tmp_bases_value_70;
        tmp_key_value_208 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_dict_arg_value_208 = tmp_class_creation_70__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_208, tmp_key_value_208);
        assert(!(tmp_res == -1));
        tmp_condition_result_415 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_415 != false) {
            goto condexpr_true_139;
        } else {
            goto condexpr_false_139;
        }
        condexpr_true_139:;
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_dict_arg_value_209 = tmp_class_creation_70__class_decl_dict;
        tmp_key_value_209 = mod_consts[205];
        tmp_metaclass_value_70 = DICT_GET_ITEM0(tmp_dict_arg_value_209, tmp_key_value_209);
        if (tmp_metaclass_value_70 == NULL) {
            tmp_metaclass_value_70 = Py_None;
        }
        assert(!(tmp_metaclass_value_70 == NULL));
        Py_INCREF(tmp_metaclass_value_70);
        goto condexpr_end_139;
        condexpr_false_139:;
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_truth_name_70 = CHECK_IF_TRUE(tmp_class_creation_70__bases);
        if (tmp_truth_name_70 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        tmp_condition_result_416 = tmp_truth_name_70 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_416 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_140;
        } else {
            goto condexpr_false_140;
        }
        condexpr_true_140:;
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_expression_value_346 = tmp_class_creation_70__bases;
        tmp_subscript_value_70 = mod_consts[4];
        tmp_type_arg_139 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_346, tmp_subscript_value_70, 0);
        if (tmp_type_arg_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        tmp_metaclass_value_70 = BUILTIN_TYPE1(tmp_type_arg_139);
        Py_DECREF(tmp_type_arg_139);
        if (tmp_metaclass_value_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        goto condexpr_end_140;
        condexpr_false_140:;
        tmp_metaclass_value_70 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_70);
        condexpr_end_140:;
        condexpr_end_139:;
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_bases_value_70 = tmp_class_creation_70__bases;
        tmp_assign_source_568 = SELECT_METACLASS(tmp_metaclass_value_70, tmp_bases_value_70);
        Py_DECREF(tmp_metaclass_value_70);
        if (tmp_assign_source_568 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        assert(tmp_class_creation_70__metaclass == NULL);
        tmp_class_creation_70__metaclass = tmp_assign_source_568;
    }
    {
        bool tmp_condition_result_417;
        PyObject *tmp_key_value_210;
        PyObject *tmp_dict_arg_value_210;
        tmp_key_value_210 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_dict_arg_value_210 = tmp_class_creation_70__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_210, tmp_key_value_210);
        assert(!(tmp_res == -1));
        tmp_condition_result_417 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_417 != false) {
            goto branch_yes_277;
        } else {
            goto branch_no_277;
        }
    }
    branch_yes_277:;
    CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_70__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2053;

        goto try_except_handler_210;
    }
    branch_no_277:;
    {
        nuitka_bool tmp_condition_result_418;
        PyObject *tmp_expression_value_347;
        CHECK_OBJECT(tmp_class_creation_70__metaclass);
        tmp_expression_value_347 = tmp_class_creation_70__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_347, mod_consts[206]);
        tmp_condition_result_418 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_418 == NUITKA_BOOL_TRUE) {
            goto branch_yes_278;
        } else {
            goto branch_no_278;
        }
    }
    branch_yes_278:;
    {
        PyObject *tmp_assign_source_569;
        PyObject *tmp_called_value_139;
        PyObject *tmp_expression_value_348;
        PyObject *tmp_args_value_139;
        PyObject *tmp_tuple_element_276;
        PyObject *tmp_kwargs_value_139;
        CHECK_OBJECT(tmp_class_creation_70__metaclass);
        tmp_expression_value_348 = tmp_class_creation_70__metaclass;
        tmp_called_value_139 = LOOKUP_ATTRIBUTE(tmp_expression_value_348, mod_consts[206]);
        if (tmp_called_value_139 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        tmp_tuple_element_276 = mod_consts[504];
        tmp_args_value_139 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_139, 0, tmp_tuple_element_276);
        CHECK_OBJECT(tmp_class_creation_70__bases);
        tmp_tuple_element_276 = tmp_class_creation_70__bases;
        PyTuple_SET_ITEM0(tmp_args_value_139, 1, tmp_tuple_element_276);
        CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
        tmp_kwargs_value_139 = tmp_class_creation_70__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2053;
        tmp_assign_source_569 = CALL_FUNCTION(tmp_called_value_139, tmp_args_value_139, tmp_kwargs_value_139);
        Py_DECREF(tmp_called_value_139);
        Py_DECREF(tmp_args_value_139);
        if (tmp_assign_source_569 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        assert(tmp_class_creation_70__prepared == NULL);
        tmp_class_creation_70__prepared = tmp_assign_source_569;
    }
    {
        bool tmp_condition_result_419;
        PyObject *tmp_operand_value_70;
        PyObject *tmp_expression_value_349;
        CHECK_OBJECT(tmp_class_creation_70__prepared);
        tmp_expression_value_349 = tmp_class_creation_70__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_349, mod_consts[208]);
        tmp_operand_value_70 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_70);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        tmp_condition_result_419 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_419 != false) {
            goto branch_yes_279;
        } else {
            goto branch_no_279;
        }
    }
    branch_yes_279:;
    {
        PyObject *tmp_raise_type_70;
        PyObject *tmp_raise_value_70;
        PyObject *tmp_left_value_70;
        PyObject *tmp_right_value_70;
        PyObject *tmp_tuple_element_277;
        PyObject *tmp_getattr_target_70;
        PyObject *tmp_getattr_attr_70;
        PyObject *tmp_getattr_default_70;
        tmp_raise_type_70 = PyExc_TypeError;
        tmp_left_value_70 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_70__metaclass);
        tmp_getattr_target_70 = tmp_class_creation_70__metaclass;
        tmp_getattr_attr_70 = mod_consts[210];
        tmp_getattr_default_70 = mod_consts[211];
        tmp_tuple_element_277 = BUILTIN_GETATTR(tmp_getattr_target_70, tmp_getattr_attr_70, tmp_getattr_default_70);
        if (tmp_tuple_element_277 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        tmp_right_value_70 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_350;
            PyObject *tmp_type_arg_140;
            PyTuple_SET_ITEM(tmp_right_value_70, 0, tmp_tuple_element_277);
            CHECK_OBJECT(tmp_class_creation_70__prepared);
            tmp_type_arg_140 = tmp_class_creation_70__prepared;
            tmp_expression_value_350 = BUILTIN_TYPE1(tmp_type_arg_140);
            assert(!(tmp_expression_value_350 == NULL));
            tmp_tuple_element_277 = LOOKUP_ATTRIBUTE(tmp_expression_value_350, mod_consts[210]);
            Py_DECREF(tmp_expression_value_350);
            if (tmp_tuple_element_277 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2053;

                goto tuple_build_exception_70;
            }
            PyTuple_SET_ITEM(tmp_right_value_70, 1, tmp_tuple_element_277);
        }
        goto tuple_build_noexception_70;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_70:;
        Py_DECREF(tmp_right_value_70);
        goto try_except_handler_210;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_70:;
        tmp_raise_value_70 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_70, tmp_right_value_70);
        Py_DECREF(tmp_right_value_70);
        if (tmp_raise_value_70 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_210;
        }
        exception_type = tmp_raise_type_70;
        Py_INCREF(tmp_raise_type_70);
        exception_value = tmp_raise_value_70;
        exception_lineno = 2053;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_210;
    }
    branch_no_279:;
    goto branch_end_278;
    branch_no_278:;
    {
        PyObject *tmp_assign_source_570;
        tmp_assign_source_570 = PyDict_New();
        assert(tmp_class_creation_70__prepared == NULL);
        tmp_class_creation_70__prepared = tmp_assign_source_570;
    }
    branch_end_278:;
    {
        PyObject *tmp_assign_source_571;
        {
            PyObject *tmp_set_locals_70;
            CHECK_OBJECT(tmp_class_creation_70__prepared);
            tmp_set_locals_70 = tmp_class_creation_70__prepared;
            locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053 = tmp_set_locals_70;
            Py_INCREF(tmp_set_locals_70);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_212;
        }
        tmp_dictset_value = mod_consts[505];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_212;
        }
        tmp_dictset_value = mod_consts[504];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_212;
        }
        if (isFrameUnusable(cache_frame_9110c19c45fe954399b4d74c6b87570c_71)) {
            Py_XDECREF(cache_frame_9110c19c45fe954399b4d74c6b87570c_71);

#if _DEBUG_REFCOUNTS
            if (cache_frame_9110c19c45fe954399b4d74c6b87570c_71 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_9110c19c45fe954399b4d74c6b87570c_71 = MAKE_FUNCTION_FRAME(codeobj_9110c19c45fe954399b4d74c6b87570c, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_9110c19c45fe954399b4d74c6b87570c_71->m_type_description == NULL);
        frame_9110c19c45fe954399b4d74c6b87570c_71 = cache_frame_9110c19c45fe954399b4d74c6b87570c_71;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_9110c19c45fe954399b4d74c6b87570c_71);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_9110c19c45fe954399b4d74c6b87570c_71) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[506];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2065;
            type_description_2 = "o";
            goto frame_exception_exit_71;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__83___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2067;
            type_description_2 = "o";
            goto frame_exception_exit_71;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9110c19c45fe954399b4d74c6b87570c_71);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_70;

        frame_exception_exit_71:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_9110c19c45fe954399b4d74c6b87570c_71);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_9110c19c45fe954399b4d74c6b87570c_71, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_9110c19c45fe954399b4d74c6b87570c_71->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_9110c19c45fe954399b4d74c6b87570c_71, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_9110c19c45fe954399b4d74c6b87570c_71,
            type_description_2,
            outline_69_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_9110c19c45fe954399b4d74c6b87570c_71 == cache_frame_9110c19c45fe954399b4d74c6b87570c_71) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_9110c19c45fe954399b4d74c6b87570c_71);
            cache_frame_9110c19c45fe954399b4d74c6b87570c_71 = NULL;
        }

        assertFrameObject(frame_9110c19c45fe954399b4d74c6b87570c_71);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_70;

        frame_no_exception_70:;
        goto skip_nested_handling_70;
        nested_frame_exit_70:;

        goto try_except_handler_212;
        skip_nested_handling_70:;
        {
            nuitka_bool tmp_condition_result_420;
            PyObject *tmp_cmp_expr_left_70;
            PyObject *tmp_cmp_expr_right_70;
            CHECK_OBJECT(tmp_class_creation_70__bases);
            tmp_cmp_expr_left_70 = tmp_class_creation_70__bases;
            CHECK_OBJECT(tmp_class_creation_70__bases_orig);
            tmp_cmp_expr_right_70 = tmp_class_creation_70__bases_orig;
            tmp_condition_result_420 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_70, tmp_cmp_expr_right_70);
            if (tmp_condition_result_420 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2053;

                goto try_except_handler_212;
            }
            if (tmp_condition_result_420 == NUITKA_BOOL_TRUE) {
                goto branch_yes_280;
            } else {
                goto branch_no_280;
            }
            assert(tmp_condition_result_420 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_280:;
        CHECK_OBJECT(tmp_class_creation_70__bases_orig);
        tmp_dictset_value = tmp_class_creation_70__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2053;

            goto try_except_handler_212;
        }
        branch_no_280:;
        {
            PyObject *tmp_assign_source_572;
            PyObject *tmp_called_value_140;
            PyObject *tmp_args_value_140;
            PyObject *tmp_tuple_element_278;
            PyObject *tmp_kwargs_value_140;
            CHECK_OBJECT(tmp_class_creation_70__metaclass);
            tmp_called_value_140 = tmp_class_creation_70__metaclass;
            tmp_tuple_element_278 = mod_consts[504];
            tmp_args_value_140 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_140, 0, tmp_tuple_element_278);
            CHECK_OBJECT(tmp_class_creation_70__bases);
            tmp_tuple_element_278 = tmp_class_creation_70__bases;
            PyTuple_SET_ITEM0(tmp_args_value_140, 1, tmp_tuple_element_278);
            tmp_tuple_element_278 = locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053;
            PyTuple_SET_ITEM0(tmp_args_value_140, 2, tmp_tuple_element_278);
            CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
            tmp_kwargs_value_140 = tmp_class_creation_70__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2053;
            tmp_assign_source_572 = CALL_FUNCTION(tmp_called_value_140, tmp_args_value_140, tmp_kwargs_value_140);
            Py_DECREF(tmp_args_value_140);
            if (tmp_assign_source_572 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2053;

                goto try_except_handler_212;
            }
            assert(outline_69_var___class__ == NULL);
            outline_69_var___class__ = tmp_assign_source_572;
        }
        CHECK_OBJECT(outline_69_var___class__);
        tmp_assign_source_571 = outline_69_var___class__;
        Py_INCREF(tmp_assign_source_571);
        goto try_return_handler_212;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_212:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053);
        locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053 = NULL;
        goto try_return_handler_211;
        // Exception handler code:
        try_except_handler_212:;
        exception_keeper_type_210 = exception_type;
        exception_keeper_value_210 = exception_value;
        exception_keeper_tb_210 = exception_tb;
        exception_keeper_lineno_210 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053);
        locals_xlwt$BIFFRecords$$$class__70_LeftMarginRecord_2053 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_210;
        exception_value = exception_keeper_value_210;
        exception_tb = exception_keeper_tb_210;
        exception_lineno = exception_keeper_lineno_210;

        goto try_except_handler_211;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_211:;
        CHECK_OBJECT(outline_69_var___class__);
        Py_DECREF(outline_69_var___class__);
        outline_69_var___class__ = NULL;
        goto outline_result_70;
        // Exception handler code:
        try_except_handler_211:;
        exception_keeper_type_211 = exception_type;
        exception_keeper_value_211 = exception_value;
        exception_keeper_tb_211 = exception_tb;
        exception_keeper_lineno_211 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_211;
        exception_value = exception_keeper_value_211;
        exception_tb = exception_keeper_tb_211;
        exception_lineno = exception_keeper_lineno_211;

        goto outline_exception_70;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_70:;
        exception_lineno = 2053;
        goto try_except_handler_210;
        outline_result_70:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[504], tmp_assign_source_571);
    }
    goto try_end_72;
    // Exception handler code:
    try_except_handler_210:;
    exception_keeper_type_212 = exception_type;
    exception_keeper_value_212 = exception_value;
    exception_keeper_tb_212 = exception_tb;
    exception_keeper_lineno_212 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_70__bases_orig);
    tmp_class_creation_70__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_70__bases);
    tmp_class_creation_70__bases = NULL;
    Py_XDECREF(tmp_class_creation_70__class_decl_dict);
    tmp_class_creation_70__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_70__metaclass);
    tmp_class_creation_70__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_70__prepared);
    tmp_class_creation_70__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_212;
    exception_value = exception_keeper_value_212;
    exception_tb = exception_keeper_tb_212;
    exception_lineno = exception_keeper_lineno_212;

    goto frame_exception_exit_1;
    // End of try:
    try_end_72:;
    CHECK_OBJECT(tmp_class_creation_70__bases_orig);
    Py_DECREF(tmp_class_creation_70__bases_orig);
    tmp_class_creation_70__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_70__bases);
    Py_DECREF(tmp_class_creation_70__bases);
    tmp_class_creation_70__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_70__class_decl_dict);
    Py_DECREF(tmp_class_creation_70__class_decl_dict);
    tmp_class_creation_70__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_70__metaclass);
    Py_DECREF(tmp_class_creation_70__metaclass);
    tmp_class_creation_70__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_70__prepared);
    Py_DECREF(tmp_class_creation_70__prepared);
    tmp_class_creation_70__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_573;
        PyObject *tmp_tuple_element_279;
        tmp_tuple_element_279 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_279 == NULL)) {
            tmp_tuple_element_279 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_279 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        tmp_assign_source_573 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_573, 0, tmp_tuple_element_279);
        assert(tmp_class_creation_71__bases_orig == NULL);
        tmp_class_creation_71__bases_orig = tmp_assign_source_573;
    }
    {
        PyObject *tmp_assign_source_574;
        PyObject *tmp_dircall_arg1_71;
        CHECK_OBJECT(tmp_class_creation_71__bases_orig);
        tmp_dircall_arg1_71 = tmp_class_creation_71__bases_orig;
        Py_INCREF(tmp_dircall_arg1_71);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_71};
            tmp_assign_source_574 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_574 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        assert(tmp_class_creation_71__bases == NULL);
        tmp_class_creation_71__bases = tmp_assign_source_574;
    }
    {
        PyObject *tmp_assign_source_575;
        tmp_assign_source_575 = PyDict_New();
        assert(tmp_class_creation_71__class_decl_dict == NULL);
        tmp_class_creation_71__class_decl_dict = tmp_assign_source_575;
    }
    {
        PyObject *tmp_assign_source_576;
        PyObject *tmp_metaclass_value_71;
        bool tmp_condition_result_421;
        PyObject *tmp_key_value_211;
        PyObject *tmp_dict_arg_value_211;
        PyObject *tmp_dict_arg_value_212;
        PyObject *tmp_key_value_212;
        nuitka_bool tmp_condition_result_422;
        int tmp_truth_name_71;
        PyObject *tmp_type_arg_141;
        PyObject *tmp_expression_value_351;
        PyObject *tmp_subscript_value_71;
        PyObject *tmp_bases_value_71;
        tmp_key_value_211 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_dict_arg_value_211 = tmp_class_creation_71__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_211, tmp_key_value_211);
        assert(!(tmp_res == -1));
        tmp_condition_result_421 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_421 != false) {
            goto condexpr_true_141;
        } else {
            goto condexpr_false_141;
        }
        condexpr_true_141:;
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_dict_arg_value_212 = tmp_class_creation_71__class_decl_dict;
        tmp_key_value_212 = mod_consts[205];
        tmp_metaclass_value_71 = DICT_GET_ITEM0(tmp_dict_arg_value_212, tmp_key_value_212);
        if (tmp_metaclass_value_71 == NULL) {
            tmp_metaclass_value_71 = Py_None;
        }
        assert(!(tmp_metaclass_value_71 == NULL));
        Py_INCREF(tmp_metaclass_value_71);
        goto condexpr_end_141;
        condexpr_false_141:;
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_truth_name_71 = CHECK_IF_TRUE(tmp_class_creation_71__bases);
        if (tmp_truth_name_71 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        tmp_condition_result_422 = tmp_truth_name_71 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_422 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_142;
        } else {
            goto condexpr_false_142;
        }
        condexpr_true_142:;
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_expression_value_351 = tmp_class_creation_71__bases;
        tmp_subscript_value_71 = mod_consts[4];
        tmp_type_arg_141 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_351, tmp_subscript_value_71, 0);
        if (tmp_type_arg_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        tmp_metaclass_value_71 = BUILTIN_TYPE1(tmp_type_arg_141);
        Py_DECREF(tmp_type_arg_141);
        if (tmp_metaclass_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        goto condexpr_end_142;
        condexpr_false_142:;
        tmp_metaclass_value_71 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_71);
        condexpr_end_142:;
        condexpr_end_141:;
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_bases_value_71 = tmp_class_creation_71__bases;
        tmp_assign_source_576 = SELECT_METACLASS(tmp_metaclass_value_71, tmp_bases_value_71);
        Py_DECREF(tmp_metaclass_value_71);
        if (tmp_assign_source_576 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        assert(tmp_class_creation_71__metaclass == NULL);
        tmp_class_creation_71__metaclass = tmp_assign_source_576;
    }
    {
        bool tmp_condition_result_423;
        PyObject *tmp_key_value_213;
        PyObject *tmp_dict_arg_value_213;
        tmp_key_value_213 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_dict_arg_value_213 = tmp_class_creation_71__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_213, tmp_key_value_213);
        assert(!(tmp_res == -1));
        tmp_condition_result_423 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_423 != false) {
            goto branch_yes_281;
        } else {
            goto branch_no_281;
        }
    }
    branch_yes_281:;
    CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_71__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2071;

        goto try_except_handler_213;
    }
    branch_no_281:;
    {
        nuitka_bool tmp_condition_result_424;
        PyObject *tmp_expression_value_352;
        CHECK_OBJECT(tmp_class_creation_71__metaclass);
        tmp_expression_value_352 = tmp_class_creation_71__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_352, mod_consts[206]);
        tmp_condition_result_424 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_424 == NUITKA_BOOL_TRUE) {
            goto branch_yes_282;
        } else {
            goto branch_no_282;
        }
    }
    branch_yes_282:;
    {
        PyObject *tmp_assign_source_577;
        PyObject *tmp_called_value_141;
        PyObject *tmp_expression_value_353;
        PyObject *tmp_args_value_141;
        PyObject *tmp_tuple_element_280;
        PyObject *tmp_kwargs_value_141;
        CHECK_OBJECT(tmp_class_creation_71__metaclass);
        tmp_expression_value_353 = tmp_class_creation_71__metaclass;
        tmp_called_value_141 = LOOKUP_ATTRIBUTE(tmp_expression_value_353, mod_consts[206]);
        if (tmp_called_value_141 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        tmp_tuple_element_280 = mod_consts[508];
        tmp_args_value_141 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_141, 0, tmp_tuple_element_280);
        CHECK_OBJECT(tmp_class_creation_71__bases);
        tmp_tuple_element_280 = tmp_class_creation_71__bases;
        PyTuple_SET_ITEM0(tmp_args_value_141, 1, tmp_tuple_element_280);
        CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
        tmp_kwargs_value_141 = tmp_class_creation_71__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2071;
        tmp_assign_source_577 = CALL_FUNCTION(tmp_called_value_141, tmp_args_value_141, tmp_kwargs_value_141);
        Py_DECREF(tmp_called_value_141);
        Py_DECREF(tmp_args_value_141);
        if (tmp_assign_source_577 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        assert(tmp_class_creation_71__prepared == NULL);
        tmp_class_creation_71__prepared = tmp_assign_source_577;
    }
    {
        bool tmp_condition_result_425;
        PyObject *tmp_operand_value_71;
        PyObject *tmp_expression_value_354;
        CHECK_OBJECT(tmp_class_creation_71__prepared);
        tmp_expression_value_354 = tmp_class_creation_71__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_354, mod_consts[208]);
        tmp_operand_value_71 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_71);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        tmp_condition_result_425 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_425 != false) {
            goto branch_yes_283;
        } else {
            goto branch_no_283;
        }
    }
    branch_yes_283:;
    {
        PyObject *tmp_raise_type_71;
        PyObject *tmp_raise_value_71;
        PyObject *tmp_left_value_71;
        PyObject *tmp_right_value_71;
        PyObject *tmp_tuple_element_281;
        PyObject *tmp_getattr_target_71;
        PyObject *tmp_getattr_attr_71;
        PyObject *tmp_getattr_default_71;
        tmp_raise_type_71 = PyExc_TypeError;
        tmp_left_value_71 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_71__metaclass);
        tmp_getattr_target_71 = tmp_class_creation_71__metaclass;
        tmp_getattr_attr_71 = mod_consts[210];
        tmp_getattr_default_71 = mod_consts[211];
        tmp_tuple_element_281 = BUILTIN_GETATTR(tmp_getattr_target_71, tmp_getattr_attr_71, tmp_getattr_default_71);
        if (tmp_tuple_element_281 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        tmp_right_value_71 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_355;
            PyObject *tmp_type_arg_142;
            PyTuple_SET_ITEM(tmp_right_value_71, 0, tmp_tuple_element_281);
            CHECK_OBJECT(tmp_class_creation_71__prepared);
            tmp_type_arg_142 = tmp_class_creation_71__prepared;
            tmp_expression_value_355 = BUILTIN_TYPE1(tmp_type_arg_142);
            assert(!(tmp_expression_value_355 == NULL));
            tmp_tuple_element_281 = LOOKUP_ATTRIBUTE(tmp_expression_value_355, mod_consts[210]);
            Py_DECREF(tmp_expression_value_355);
            if (tmp_tuple_element_281 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2071;

                goto tuple_build_exception_71;
            }
            PyTuple_SET_ITEM(tmp_right_value_71, 1, tmp_tuple_element_281);
        }
        goto tuple_build_noexception_71;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_71:;
        Py_DECREF(tmp_right_value_71);
        goto try_except_handler_213;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_71:;
        tmp_raise_value_71 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_71, tmp_right_value_71);
        Py_DECREF(tmp_right_value_71);
        if (tmp_raise_value_71 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_213;
        }
        exception_type = tmp_raise_type_71;
        Py_INCREF(tmp_raise_type_71);
        exception_value = tmp_raise_value_71;
        exception_lineno = 2071;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_213;
    }
    branch_no_283:;
    goto branch_end_282;
    branch_no_282:;
    {
        PyObject *tmp_assign_source_578;
        tmp_assign_source_578 = PyDict_New();
        assert(tmp_class_creation_71__prepared == NULL);
        tmp_class_creation_71__prepared = tmp_assign_source_578;
    }
    branch_end_282:;
    {
        PyObject *tmp_assign_source_579;
        {
            PyObject *tmp_set_locals_71;
            CHECK_OBJECT(tmp_class_creation_71__prepared);
            tmp_set_locals_71 = tmp_class_creation_71__prepared;
            locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071 = tmp_set_locals_71;
            Py_INCREF(tmp_set_locals_71);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_215;
        }
        tmp_dictset_value = mod_consts[509];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_215;
        }
        tmp_dictset_value = mod_consts[508];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_215;
        }
        if (isFrameUnusable(cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72)) {
            Py_XDECREF(cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72);

#if _DEBUG_REFCOUNTS
            if (cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72 = MAKE_FUNCTION_FRAME(codeobj_6e69627053d2bb3ad4e9a976fbe6a0e0, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72->m_type_description == NULL);
        frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72 = cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[510];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2081;
            type_description_2 = "o";
            goto frame_exception_exit_72;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__84___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2083;
            type_description_2 = "o";
            goto frame_exception_exit_72;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_71;

        frame_exception_exit_72:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72,
            type_description_2,
            outline_70_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72 == cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72);
            cache_frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72 = NULL;
        }

        assertFrameObject(frame_6e69627053d2bb3ad4e9a976fbe6a0e0_72);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_71;

        frame_no_exception_71:;
        goto skip_nested_handling_71;
        nested_frame_exit_71:;

        goto try_except_handler_215;
        skip_nested_handling_71:;
        {
            nuitka_bool tmp_condition_result_426;
            PyObject *tmp_cmp_expr_left_71;
            PyObject *tmp_cmp_expr_right_71;
            CHECK_OBJECT(tmp_class_creation_71__bases);
            tmp_cmp_expr_left_71 = tmp_class_creation_71__bases;
            CHECK_OBJECT(tmp_class_creation_71__bases_orig);
            tmp_cmp_expr_right_71 = tmp_class_creation_71__bases_orig;
            tmp_condition_result_426 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_71, tmp_cmp_expr_right_71);
            if (tmp_condition_result_426 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2071;

                goto try_except_handler_215;
            }
            if (tmp_condition_result_426 == NUITKA_BOOL_TRUE) {
                goto branch_yes_284;
            } else {
                goto branch_no_284;
            }
            assert(tmp_condition_result_426 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_284:;
        CHECK_OBJECT(tmp_class_creation_71__bases_orig);
        tmp_dictset_value = tmp_class_creation_71__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2071;

            goto try_except_handler_215;
        }
        branch_no_284:;
        {
            PyObject *tmp_assign_source_580;
            PyObject *tmp_called_value_142;
            PyObject *tmp_args_value_142;
            PyObject *tmp_tuple_element_282;
            PyObject *tmp_kwargs_value_142;
            CHECK_OBJECT(tmp_class_creation_71__metaclass);
            tmp_called_value_142 = tmp_class_creation_71__metaclass;
            tmp_tuple_element_282 = mod_consts[508];
            tmp_args_value_142 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_142, 0, tmp_tuple_element_282);
            CHECK_OBJECT(tmp_class_creation_71__bases);
            tmp_tuple_element_282 = tmp_class_creation_71__bases;
            PyTuple_SET_ITEM0(tmp_args_value_142, 1, tmp_tuple_element_282);
            tmp_tuple_element_282 = locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071;
            PyTuple_SET_ITEM0(tmp_args_value_142, 2, tmp_tuple_element_282);
            CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
            tmp_kwargs_value_142 = tmp_class_creation_71__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2071;
            tmp_assign_source_580 = CALL_FUNCTION(tmp_called_value_142, tmp_args_value_142, tmp_kwargs_value_142);
            Py_DECREF(tmp_args_value_142);
            if (tmp_assign_source_580 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2071;

                goto try_except_handler_215;
            }
            assert(outline_70_var___class__ == NULL);
            outline_70_var___class__ = tmp_assign_source_580;
        }
        CHECK_OBJECT(outline_70_var___class__);
        tmp_assign_source_579 = outline_70_var___class__;
        Py_INCREF(tmp_assign_source_579);
        goto try_return_handler_215;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_215:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071);
        locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071 = NULL;
        goto try_return_handler_214;
        // Exception handler code:
        try_except_handler_215:;
        exception_keeper_type_213 = exception_type;
        exception_keeper_value_213 = exception_value;
        exception_keeper_tb_213 = exception_tb;
        exception_keeper_lineno_213 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071);
        locals_xlwt$BIFFRecords$$$class__71_RightMarginRecord_2071 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_213;
        exception_value = exception_keeper_value_213;
        exception_tb = exception_keeper_tb_213;
        exception_lineno = exception_keeper_lineno_213;

        goto try_except_handler_214;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_214:;
        CHECK_OBJECT(outline_70_var___class__);
        Py_DECREF(outline_70_var___class__);
        outline_70_var___class__ = NULL;
        goto outline_result_71;
        // Exception handler code:
        try_except_handler_214:;
        exception_keeper_type_214 = exception_type;
        exception_keeper_value_214 = exception_value;
        exception_keeper_tb_214 = exception_tb;
        exception_keeper_lineno_214 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_214;
        exception_value = exception_keeper_value_214;
        exception_tb = exception_keeper_tb_214;
        exception_lineno = exception_keeper_lineno_214;

        goto outline_exception_71;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_71:;
        exception_lineno = 2071;
        goto try_except_handler_213;
        outline_result_71:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[508], tmp_assign_source_579);
    }
    goto try_end_73;
    // Exception handler code:
    try_except_handler_213:;
    exception_keeper_type_215 = exception_type;
    exception_keeper_value_215 = exception_value;
    exception_keeper_tb_215 = exception_tb;
    exception_keeper_lineno_215 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_71__bases_orig);
    tmp_class_creation_71__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_71__bases);
    tmp_class_creation_71__bases = NULL;
    Py_XDECREF(tmp_class_creation_71__class_decl_dict);
    tmp_class_creation_71__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_71__metaclass);
    tmp_class_creation_71__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_71__prepared);
    tmp_class_creation_71__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_215;
    exception_value = exception_keeper_value_215;
    exception_tb = exception_keeper_tb_215;
    exception_lineno = exception_keeper_lineno_215;

    goto frame_exception_exit_1;
    // End of try:
    try_end_73:;
    CHECK_OBJECT(tmp_class_creation_71__bases_orig);
    Py_DECREF(tmp_class_creation_71__bases_orig);
    tmp_class_creation_71__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_71__bases);
    Py_DECREF(tmp_class_creation_71__bases);
    tmp_class_creation_71__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_71__class_decl_dict);
    Py_DECREF(tmp_class_creation_71__class_decl_dict);
    tmp_class_creation_71__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_71__metaclass);
    Py_DECREF(tmp_class_creation_71__metaclass);
    tmp_class_creation_71__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_71__prepared);
    Py_DECREF(tmp_class_creation_71__prepared);
    tmp_class_creation_71__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_581;
        PyObject *tmp_tuple_element_283;
        tmp_tuple_element_283 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_283 == NULL)) {
            tmp_tuple_element_283 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_283 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        tmp_assign_source_581 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_581, 0, tmp_tuple_element_283);
        assert(tmp_class_creation_72__bases_orig == NULL);
        tmp_class_creation_72__bases_orig = tmp_assign_source_581;
    }
    {
        PyObject *tmp_assign_source_582;
        PyObject *tmp_dircall_arg1_72;
        CHECK_OBJECT(tmp_class_creation_72__bases_orig);
        tmp_dircall_arg1_72 = tmp_class_creation_72__bases_orig;
        Py_INCREF(tmp_dircall_arg1_72);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_72};
            tmp_assign_source_582 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_582 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        assert(tmp_class_creation_72__bases == NULL);
        tmp_class_creation_72__bases = tmp_assign_source_582;
    }
    {
        PyObject *tmp_assign_source_583;
        tmp_assign_source_583 = PyDict_New();
        assert(tmp_class_creation_72__class_decl_dict == NULL);
        tmp_class_creation_72__class_decl_dict = tmp_assign_source_583;
    }
    {
        PyObject *tmp_assign_source_584;
        PyObject *tmp_metaclass_value_72;
        bool tmp_condition_result_427;
        PyObject *tmp_key_value_214;
        PyObject *tmp_dict_arg_value_214;
        PyObject *tmp_dict_arg_value_215;
        PyObject *tmp_key_value_215;
        nuitka_bool tmp_condition_result_428;
        int tmp_truth_name_72;
        PyObject *tmp_type_arg_143;
        PyObject *tmp_expression_value_356;
        PyObject *tmp_subscript_value_72;
        PyObject *tmp_bases_value_72;
        tmp_key_value_214 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_dict_arg_value_214 = tmp_class_creation_72__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_214, tmp_key_value_214);
        assert(!(tmp_res == -1));
        tmp_condition_result_427 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_427 != false) {
            goto condexpr_true_143;
        } else {
            goto condexpr_false_143;
        }
        condexpr_true_143:;
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_dict_arg_value_215 = tmp_class_creation_72__class_decl_dict;
        tmp_key_value_215 = mod_consts[205];
        tmp_metaclass_value_72 = DICT_GET_ITEM0(tmp_dict_arg_value_215, tmp_key_value_215);
        if (tmp_metaclass_value_72 == NULL) {
            tmp_metaclass_value_72 = Py_None;
        }
        assert(!(tmp_metaclass_value_72 == NULL));
        Py_INCREF(tmp_metaclass_value_72);
        goto condexpr_end_143;
        condexpr_false_143:;
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_truth_name_72 = CHECK_IF_TRUE(tmp_class_creation_72__bases);
        if (tmp_truth_name_72 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        tmp_condition_result_428 = tmp_truth_name_72 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_428 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_144;
        } else {
            goto condexpr_false_144;
        }
        condexpr_true_144:;
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_expression_value_356 = tmp_class_creation_72__bases;
        tmp_subscript_value_72 = mod_consts[4];
        tmp_type_arg_143 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_356, tmp_subscript_value_72, 0);
        if (tmp_type_arg_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        tmp_metaclass_value_72 = BUILTIN_TYPE1(tmp_type_arg_143);
        Py_DECREF(tmp_type_arg_143);
        if (tmp_metaclass_value_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        goto condexpr_end_144;
        condexpr_false_144:;
        tmp_metaclass_value_72 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_72);
        condexpr_end_144:;
        condexpr_end_143:;
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_bases_value_72 = tmp_class_creation_72__bases;
        tmp_assign_source_584 = SELECT_METACLASS(tmp_metaclass_value_72, tmp_bases_value_72);
        Py_DECREF(tmp_metaclass_value_72);
        if (tmp_assign_source_584 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        assert(tmp_class_creation_72__metaclass == NULL);
        tmp_class_creation_72__metaclass = tmp_assign_source_584;
    }
    {
        bool tmp_condition_result_429;
        PyObject *tmp_key_value_216;
        PyObject *tmp_dict_arg_value_216;
        tmp_key_value_216 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_dict_arg_value_216 = tmp_class_creation_72__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_216, tmp_key_value_216);
        assert(!(tmp_res == -1));
        tmp_condition_result_429 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_429 != false) {
            goto branch_yes_285;
        } else {
            goto branch_no_285;
        }
    }
    branch_yes_285:;
    CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_72__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2086;

        goto try_except_handler_216;
    }
    branch_no_285:;
    {
        nuitka_bool tmp_condition_result_430;
        PyObject *tmp_expression_value_357;
        CHECK_OBJECT(tmp_class_creation_72__metaclass);
        tmp_expression_value_357 = tmp_class_creation_72__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_357, mod_consts[206]);
        tmp_condition_result_430 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_430 == NUITKA_BOOL_TRUE) {
            goto branch_yes_286;
        } else {
            goto branch_no_286;
        }
    }
    branch_yes_286:;
    {
        PyObject *tmp_assign_source_585;
        PyObject *tmp_called_value_143;
        PyObject *tmp_expression_value_358;
        PyObject *tmp_args_value_143;
        PyObject *tmp_tuple_element_284;
        PyObject *tmp_kwargs_value_143;
        CHECK_OBJECT(tmp_class_creation_72__metaclass);
        tmp_expression_value_358 = tmp_class_creation_72__metaclass;
        tmp_called_value_143 = LOOKUP_ATTRIBUTE(tmp_expression_value_358, mod_consts[206]);
        if (tmp_called_value_143 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        tmp_tuple_element_284 = mod_consts[512];
        tmp_args_value_143 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_143, 0, tmp_tuple_element_284);
        CHECK_OBJECT(tmp_class_creation_72__bases);
        tmp_tuple_element_284 = tmp_class_creation_72__bases;
        PyTuple_SET_ITEM0(tmp_args_value_143, 1, tmp_tuple_element_284);
        CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
        tmp_kwargs_value_143 = tmp_class_creation_72__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2086;
        tmp_assign_source_585 = CALL_FUNCTION(tmp_called_value_143, tmp_args_value_143, tmp_kwargs_value_143);
        Py_DECREF(tmp_called_value_143);
        Py_DECREF(tmp_args_value_143);
        if (tmp_assign_source_585 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        assert(tmp_class_creation_72__prepared == NULL);
        tmp_class_creation_72__prepared = tmp_assign_source_585;
    }
    {
        bool tmp_condition_result_431;
        PyObject *tmp_operand_value_72;
        PyObject *tmp_expression_value_359;
        CHECK_OBJECT(tmp_class_creation_72__prepared);
        tmp_expression_value_359 = tmp_class_creation_72__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_359, mod_consts[208]);
        tmp_operand_value_72 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_72);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        tmp_condition_result_431 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_431 != false) {
            goto branch_yes_287;
        } else {
            goto branch_no_287;
        }
    }
    branch_yes_287:;
    {
        PyObject *tmp_raise_type_72;
        PyObject *tmp_raise_value_72;
        PyObject *tmp_left_value_72;
        PyObject *tmp_right_value_72;
        PyObject *tmp_tuple_element_285;
        PyObject *tmp_getattr_target_72;
        PyObject *tmp_getattr_attr_72;
        PyObject *tmp_getattr_default_72;
        tmp_raise_type_72 = PyExc_TypeError;
        tmp_left_value_72 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_72__metaclass);
        tmp_getattr_target_72 = tmp_class_creation_72__metaclass;
        tmp_getattr_attr_72 = mod_consts[210];
        tmp_getattr_default_72 = mod_consts[211];
        tmp_tuple_element_285 = BUILTIN_GETATTR(tmp_getattr_target_72, tmp_getattr_attr_72, tmp_getattr_default_72);
        if (tmp_tuple_element_285 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        tmp_right_value_72 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_360;
            PyObject *tmp_type_arg_144;
            PyTuple_SET_ITEM(tmp_right_value_72, 0, tmp_tuple_element_285);
            CHECK_OBJECT(tmp_class_creation_72__prepared);
            tmp_type_arg_144 = tmp_class_creation_72__prepared;
            tmp_expression_value_360 = BUILTIN_TYPE1(tmp_type_arg_144);
            assert(!(tmp_expression_value_360 == NULL));
            tmp_tuple_element_285 = LOOKUP_ATTRIBUTE(tmp_expression_value_360, mod_consts[210]);
            Py_DECREF(tmp_expression_value_360);
            if (tmp_tuple_element_285 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2086;

                goto tuple_build_exception_72;
            }
            PyTuple_SET_ITEM(tmp_right_value_72, 1, tmp_tuple_element_285);
        }
        goto tuple_build_noexception_72;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_72:;
        Py_DECREF(tmp_right_value_72);
        goto try_except_handler_216;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_72:;
        tmp_raise_value_72 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_72, tmp_right_value_72);
        Py_DECREF(tmp_right_value_72);
        if (tmp_raise_value_72 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_216;
        }
        exception_type = tmp_raise_type_72;
        Py_INCREF(tmp_raise_type_72);
        exception_value = tmp_raise_value_72;
        exception_lineno = 2086;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_216;
    }
    branch_no_287:;
    goto branch_end_286;
    branch_no_286:;
    {
        PyObject *tmp_assign_source_586;
        tmp_assign_source_586 = PyDict_New();
        assert(tmp_class_creation_72__prepared == NULL);
        tmp_class_creation_72__prepared = tmp_assign_source_586;
    }
    branch_end_286:;
    {
        PyObject *tmp_assign_source_587;
        {
            PyObject *tmp_set_locals_72;
            CHECK_OBJECT(tmp_class_creation_72__prepared);
            tmp_set_locals_72 = tmp_class_creation_72__prepared;
            locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086 = tmp_set_locals_72;
            Py_INCREF(tmp_set_locals_72);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_218;
        }
        tmp_dictset_value = mod_consts[513];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_218;
        }
        tmp_dictset_value = mod_consts[512];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_218;
        }
        if (isFrameUnusable(cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73)) {
            Py_XDECREF(cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73);

#if _DEBUG_REFCOUNTS
            if (cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73 = MAKE_FUNCTION_FRAME(codeobj_2444ccdaada2cc63083cc0ad74fe2f85, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73->m_type_description == NULL);
        frame_2444ccdaada2cc63083cc0ad74fe2f85_73 = cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_2444ccdaada2cc63083cc0ad74fe2f85_73);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_2444ccdaada2cc63083cc0ad74fe2f85_73) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[514];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2096;
            type_description_2 = "o";
            goto frame_exception_exit_73;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__85___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2098;
            type_description_2 = "o";
            goto frame_exception_exit_73;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2444ccdaada2cc63083cc0ad74fe2f85_73);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_72;

        frame_exception_exit_73:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_2444ccdaada2cc63083cc0ad74fe2f85_73);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_2444ccdaada2cc63083cc0ad74fe2f85_73, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_2444ccdaada2cc63083cc0ad74fe2f85_73->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_2444ccdaada2cc63083cc0ad74fe2f85_73, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_2444ccdaada2cc63083cc0ad74fe2f85_73,
            type_description_2,
            outline_71_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_2444ccdaada2cc63083cc0ad74fe2f85_73 == cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73);
            cache_frame_2444ccdaada2cc63083cc0ad74fe2f85_73 = NULL;
        }

        assertFrameObject(frame_2444ccdaada2cc63083cc0ad74fe2f85_73);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_72;

        frame_no_exception_72:;
        goto skip_nested_handling_72;
        nested_frame_exit_72:;

        goto try_except_handler_218;
        skip_nested_handling_72:;
        {
            nuitka_bool tmp_condition_result_432;
            PyObject *tmp_cmp_expr_left_72;
            PyObject *tmp_cmp_expr_right_72;
            CHECK_OBJECT(tmp_class_creation_72__bases);
            tmp_cmp_expr_left_72 = tmp_class_creation_72__bases;
            CHECK_OBJECT(tmp_class_creation_72__bases_orig);
            tmp_cmp_expr_right_72 = tmp_class_creation_72__bases_orig;
            tmp_condition_result_432 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_72, tmp_cmp_expr_right_72);
            if (tmp_condition_result_432 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2086;

                goto try_except_handler_218;
            }
            if (tmp_condition_result_432 == NUITKA_BOOL_TRUE) {
                goto branch_yes_288;
            } else {
                goto branch_no_288;
            }
            assert(tmp_condition_result_432 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_288:;
        CHECK_OBJECT(tmp_class_creation_72__bases_orig);
        tmp_dictset_value = tmp_class_creation_72__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2086;

            goto try_except_handler_218;
        }
        branch_no_288:;
        {
            PyObject *tmp_assign_source_588;
            PyObject *tmp_called_value_144;
            PyObject *tmp_args_value_144;
            PyObject *tmp_tuple_element_286;
            PyObject *tmp_kwargs_value_144;
            CHECK_OBJECT(tmp_class_creation_72__metaclass);
            tmp_called_value_144 = tmp_class_creation_72__metaclass;
            tmp_tuple_element_286 = mod_consts[512];
            tmp_args_value_144 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_144, 0, tmp_tuple_element_286);
            CHECK_OBJECT(tmp_class_creation_72__bases);
            tmp_tuple_element_286 = tmp_class_creation_72__bases;
            PyTuple_SET_ITEM0(tmp_args_value_144, 1, tmp_tuple_element_286);
            tmp_tuple_element_286 = locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086;
            PyTuple_SET_ITEM0(tmp_args_value_144, 2, tmp_tuple_element_286);
            CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
            tmp_kwargs_value_144 = tmp_class_creation_72__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2086;
            tmp_assign_source_588 = CALL_FUNCTION(tmp_called_value_144, tmp_args_value_144, tmp_kwargs_value_144);
            Py_DECREF(tmp_args_value_144);
            if (tmp_assign_source_588 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2086;

                goto try_except_handler_218;
            }
            assert(outline_71_var___class__ == NULL);
            outline_71_var___class__ = tmp_assign_source_588;
        }
        CHECK_OBJECT(outline_71_var___class__);
        tmp_assign_source_587 = outline_71_var___class__;
        Py_INCREF(tmp_assign_source_587);
        goto try_return_handler_218;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_218:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086);
        locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086 = NULL;
        goto try_return_handler_217;
        // Exception handler code:
        try_except_handler_218:;
        exception_keeper_type_216 = exception_type;
        exception_keeper_value_216 = exception_value;
        exception_keeper_tb_216 = exception_tb;
        exception_keeper_lineno_216 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086);
        locals_xlwt$BIFFRecords$$$class__72_TopMarginRecord_2086 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_216;
        exception_value = exception_keeper_value_216;
        exception_tb = exception_keeper_tb_216;
        exception_lineno = exception_keeper_lineno_216;

        goto try_except_handler_217;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_217:;
        CHECK_OBJECT(outline_71_var___class__);
        Py_DECREF(outline_71_var___class__);
        outline_71_var___class__ = NULL;
        goto outline_result_72;
        // Exception handler code:
        try_except_handler_217:;
        exception_keeper_type_217 = exception_type;
        exception_keeper_value_217 = exception_value;
        exception_keeper_tb_217 = exception_tb;
        exception_keeper_lineno_217 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_217;
        exception_value = exception_keeper_value_217;
        exception_tb = exception_keeper_tb_217;
        exception_lineno = exception_keeper_lineno_217;

        goto outline_exception_72;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_72:;
        exception_lineno = 2086;
        goto try_except_handler_216;
        outline_result_72:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[512], tmp_assign_source_587);
    }
    goto try_end_74;
    // Exception handler code:
    try_except_handler_216:;
    exception_keeper_type_218 = exception_type;
    exception_keeper_value_218 = exception_value;
    exception_keeper_tb_218 = exception_tb;
    exception_keeper_lineno_218 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_72__bases_orig);
    tmp_class_creation_72__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_72__bases);
    tmp_class_creation_72__bases = NULL;
    Py_XDECREF(tmp_class_creation_72__class_decl_dict);
    tmp_class_creation_72__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_72__metaclass);
    tmp_class_creation_72__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_72__prepared);
    tmp_class_creation_72__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_218;
    exception_value = exception_keeper_value_218;
    exception_tb = exception_keeper_tb_218;
    exception_lineno = exception_keeper_lineno_218;

    goto frame_exception_exit_1;
    // End of try:
    try_end_74:;
    CHECK_OBJECT(tmp_class_creation_72__bases_orig);
    Py_DECREF(tmp_class_creation_72__bases_orig);
    tmp_class_creation_72__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_72__bases);
    Py_DECREF(tmp_class_creation_72__bases);
    tmp_class_creation_72__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_72__class_decl_dict);
    Py_DECREF(tmp_class_creation_72__class_decl_dict);
    tmp_class_creation_72__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_72__metaclass);
    Py_DECREF(tmp_class_creation_72__metaclass);
    tmp_class_creation_72__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_72__prepared);
    Py_DECREF(tmp_class_creation_72__prepared);
    tmp_class_creation_72__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_589;
        PyObject *tmp_tuple_element_287;
        tmp_tuple_element_287 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_287 == NULL)) {
            tmp_tuple_element_287 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_287 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        tmp_assign_source_589 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_589, 0, tmp_tuple_element_287);
        assert(tmp_class_creation_73__bases_orig == NULL);
        tmp_class_creation_73__bases_orig = tmp_assign_source_589;
    }
    {
        PyObject *tmp_assign_source_590;
        PyObject *tmp_dircall_arg1_73;
        CHECK_OBJECT(tmp_class_creation_73__bases_orig);
        tmp_dircall_arg1_73 = tmp_class_creation_73__bases_orig;
        Py_INCREF(tmp_dircall_arg1_73);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_73};
            tmp_assign_source_590 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_590 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        assert(tmp_class_creation_73__bases == NULL);
        tmp_class_creation_73__bases = tmp_assign_source_590;
    }
    {
        PyObject *tmp_assign_source_591;
        tmp_assign_source_591 = PyDict_New();
        assert(tmp_class_creation_73__class_decl_dict == NULL);
        tmp_class_creation_73__class_decl_dict = tmp_assign_source_591;
    }
    {
        PyObject *tmp_assign_source_592;
        PyObject *tmp_metaclass_value_73;
        bool tmp_condition_result_433;
        PyObject *tmp_key_value_217;
        PyObject *tmp_dict_arg_value_217;
        PyObject *tmp_dict_arg_value_218;
        PyObject *tmp_key_value_218;
        nuitka_bool tmp_condition_result_434;
        int tmp_truth_name_73;
        PyObject *tmp_type_arg_145;
        PyObject *tmp_expression_value_361;
        PyObject *tmp_subscript_value_73;
        PyObject *tmp_bases_value_73;
        tmp_key_value_217 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_dict_arg_value_217 = tmp_class_creation_73__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_217, tmp_key_value_217);
        assert(!(tmp_res == -1));
        tmp_condition_result_433 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_433 != false) {
            goto condexpr_true_145;
        } else {
            goto condexpr_false_145;
        }
        condexpr_true_145:;
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_dict_arg_value_218 = tmp_class_creation_73__class_decl_dict;
        tmp_key_value_218 = mod_consts[205];
        tmp_metaclass_value_73 = DICT_GET_ITEM0(tmp_dict_arg_value_218, tmp_key_value_218);
        if (tmp_metaclass_value_73 == NULL) {
            tmp_metaclass_value_73 = Py_None;
        }
        assert(!(tmp_metaclass_value_73 == NULL));
        Py_INCREF(tmp_metaclass_value_73);
        goto condexpr_end_145;
        condexpr_false_145:;
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_truth_name_73 = CHECK_IF_TRUE(tmp_class_creation_73__bases);
        if (tmp_truth_name_73 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        tmp_condition_result_434 = tmp_truth_name_73 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_434 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_146;
        } else {
            goto condexpr_false_146;
        }
        condexpr_true_146:;
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_expression_value_361 = tmp_class_creation_73__bases;
        tmp_subscript_value_73 = mod_consts[4];
        tmp_type_arg_145 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_361, tmp_subscript_value_73, 0);
        if (tmp_type_arg_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        tmp_metaclass_value_73 = BUILTIN_TYPE1(tmp_type_arg_145);
        Py_DECREF(tmp_type_arg_145);
        if (tmp_metaclass_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        goto condexpr_end_146;
        condexpr_false_146:;
        tmp_metaclass_value_73 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_73);
        condexpr_end_146:;
        condexpr_end_145:;
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_bases_value_73 = tmp_class_creation_73__bases;
        tmp_assign_source_592 = SELECT_METACLASS(tmp_metaclass_value_73, tmp_bases_value_73);
        Py_DECREF(tmp_metaclass_value_73);
        if (tmp_assign_source_592 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        assert(tmp_class_creation_73__metaclass == NULL);
        tmp_class_creation_73__metaclass = tmp_assign_source_592;
    }
    {
        bool tmp_condition_result_435;
        PyObject *tmp_key_value_219;
        PyObject *tmp_dict_arg_value_219;
        tmp_key_value_219 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_dict_arg_value_219 = tmp_class_creation_73__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_219, tmp_key_value_219);
        assert(!(tmp_res == -1));
        tmp_condition_result_435 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_435 != false) {
            goto branch_yes_289;
        } else {
            goto branch_no_289;
        }
    }
    branch_yes_289:;
    CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_73__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2102;

        goto try_except_handler_219;
    }
    branch_no_289:;
    {
        nuitka_bool tmp_condition_result_436;
        PyObject *tmp_expression_value_362;
        CHECK_OBJECT(tmp_class_creation_73__metaclass);
        tmp_expression_value_362 = tmp_class_creation_73__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_362, mod_consts[206]);
        tmp_condition_result_436 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_436 == NUITKA_BOOL_TRUE) {
            goto branch_yes_290;
        } else {
            goto branch_no_290;
        }
    }
    branch_yes_290:;
    {
        PyObject *tmp_assign_source_593;
        PyObject *tmp_called_value_145;
        PyObject *tmp_expression_value_363;
        PyObject *tmp_args_value_145;
        PyObject *tmp_tuple_element_288;
        PyObject *tmp_kwargs_value_145;
        CHECK_OBJECT(tmp_class_creation_73__metaclass);
        tmp_expression_value_363 = tmp_class_creation_73__metaclass;
        tmp_called_value_145 = LOOKUP_ATTRIBUTE(tmp_expression_value_363, mod_consts[206]);
        if (tmp_called_value_145 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        tmp_tuple_element_288 = mod_consts[516];
        tmp_args_value_145 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_145, 0, tmp_tuple_element_288);
        CHECK_OBJECT(tmp_class_creation_73__bases);
        tmp_tuple_element_288 = tmp_class_creation_73__bases;
        PyTuple_SET_ITEM0(tmp_args_value_145, 1, tmp_tuple_element_288);
        CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
        tmp_kwargs_value_145 = tmp_class_creation_73__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2102;
        tmp_assign_source_593 = CALL_FUNCTION(tmp_called_value_145, tmp_args_value_145, tmp_kwargs_value_145);
        Py_DECREF(tmp_called_value_145);
        Py_DECREF(tmp_args_value_145);
        if (tmp_assign_source_593 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        assert(tmp_class_creation_73__prepared == NULL);
        tmp_class_creation_73__prepared = tmp_assign_source_593;
    }
    {
        bool tmp_condition_result_437;
        PyObject *tmp_operand_value_73;
        PyObject *tmp_expression_value_364;
        CHECK_OBJECT(tmp_class_creation_73__prepared);
        tmp_expression_value_364 = tmp_class_creation_73__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_364, mod_consts[208]);
        tmp_operand_value_73 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_73);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        tmp_condition_result_437 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_437 != false) {
            goto branch_yes_291;
        } else {
            goto branch_no_291;
        }
    }
    branch_yes_291:;
    {
        PyObject *tmp_raise_type_73;
        PyObject *tmp_raise_value_73;
        PyObject *tmp_left_value_73;
        PyObject *tmp_right_value_73;
        PyObject *tmp_tuple_element_289;
        PyObject *tmp_getattr_target_73;
        PyObject *tmp_getattr_attr_73;
        PyObject *tmp_getattr_default_73;
        tmp_raise_type_73 = PyExc_TypeError;
        tmp_left_value_73 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_73__metaclass);
        tmp_getattr_target_73 = tmp_class_creation_73__metaclass;
        tmp_getattr_attr_73 = mod_consts[210];
        tmp_getattr_default_73 = mod_consts[211];
        tmp_tuple_element_289 = BUILTIN_GETATTR(tmp_getattr_target_73, tmp_getattr_attr_73, tmp_getattr_default_73);
        if (tmp_tuple_element_289 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        tmp_right_value_73 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_365;
            PyObject *tmp_type_arg_146;
            PyTuple_SET_ITEM(tmp_right_value_73, 0, tmp_tuple_element_289);
            CHECK_OBJECT(tmp_class_creation_73__prepared);
            tmp_type_arg_146 = tmp_class_creation_73__prepared;
            tmp_expression_value_365 = BUILTIN_TYPE1(tmp_type_arg_146);
            assert(!(tmp_expression_value_365 == NULL));
            tmp_tuple_element_289 = LOOKUP_ATTRIBUTE(tmp_expression_value_365, mod_consts[210]);
            Py_DECREF(tmp_expression_value_365);
            if (tmp_tuple_element_289 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2102;

                goto tuple_build_exception_73;
            }
            PyTuple_SET_ITEM(tmp_right_value_73, 1, tmp_tuple_element_289);
        }
        goto tuple_build_noexception_73;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_73:;
        Py_DECREF(tmp_right_value_73);
        goto try_except_handler_219;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_73:;
        tmp_raise_value_73 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_73, tmp_right_value_73);
        Py_DECREF(tmp_right_value_73);
        if (tmp_raise_value_73 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_219;
        }
        exception_type = tmp_raise_type_73;
        Py_INCREF(tmp_raise_type_73);
        exception_value = tmp_raise_value_73;
        exception_lineno = 2102;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_219;
    }
    branch_no_291:;
    goto branch_end_290;
    branch_no_290:;
    {
        PyObject *tmp_assign_source_594;
        tmp_assign_source_594 = PyDict_New();
        assert(tmp_class_creation_73__prepared == NULL);
        tmp_class_creation_73__prepared = tmp_assign_source_594;
    }
    branch_end_290:;
    {
        PyObject *tmp_assign_source_595;
        {
            PyObject *tmp_set_locals_73;
            CHECK_OBJECT(tmp_class_creation_73__prepared);
            tmp_set_locals_73 = tmp_class_creation_73__prepared;
            locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102 = tmp_set_locals_73;
            Py_INCREF(tmp_set_locals_73);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_221;
        }
        tmp_dictset_value = mod_consts[517];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_221;
        }
        tmp_dictset_value = mod_consts[516];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_221;
        }
        if (isFrameUnusable(cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74)) {
            Py_XDECREF(cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74);

#if _DEBUG_REFCOUNTS
            if (cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74 = MAKE_FUNCTION_FRAME(codeobj_034ad0af446622c3ecd8ba9adc3a33cc, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74->m_type_description == NULL);
        frame_034ad0af446622c3ecd8ba9adc3a33cc_74 = cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_034ad0af446622c3ecd8ba9adc3a33cc_74);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_034ad0af446622c3ecd8ba9adc3a33cc_74) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[518];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2112;
            type_description_2 = "o";
            goto frame_exception_exit_74;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__86___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2114;
            type_description_2 = "o";
            goto frame_exception_exit_74;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_034ad0af446622c3ecd8ba9adc3a33cc_74);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_73;

        frame_exception_exit_74:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_034ad0af446622c3ecd8ba9adc3a33cc_74);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_034ad0af446622c3ecd8ba9adc3a33cc_74, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_034ad0af446622c3ecd8ba9adc3a33cc_74->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_034ad0af446622c3ecd8ba9adc3a33cc_74, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_034ad0af446622c3ecd8ba9adc3a33cc_74,
            type_description_2,
            outline_72_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_034ad0af446622c3ecd8ba9adc3a33cc_74 == cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74);
            cache_frame_034ad0af446622c3ecd8ba9adc3a33cc_74 = NULL;
        }

        assertFrameObject(frame_034ad0af446622c3ecd8ba9adc3a33cc_74);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_73;

        frame_no_exception_73:;
        goto skip_nested_handling_73;
        nested_frame_exit_73:;

        goto try_except_handler_221;
        skip_nested_handling_73:;
        {
            nuitka_bool tmp_condition_result_438;
            PyObject *tmp_cmp_expr_left_73;
            PyObject *tmp_cmp_expr_right_73;
            CHECK_OBJECT(tmp_class_creation_73__bases);
            tmp_cmp_expr_left_73 = tmp_class_creation_73__bases;
            CHECK_OBJECT(tmp_class_creation_73__bases_orig);
            tmp_cmp_expr_right_73 = tmp_class_creation_73__bases_orig;
            tmp_condition_result_438 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_73, tmp_cmp_expr_right_73);
            if (tmp_condition_result_438 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2102;

                goto try_except_handler_221;
            }
            if (tmp_condition_result_438 == NUITKA_BOOL_TRUE) {
                goto branch_yes_292;
            } else {
                goto branch_no_292;
            }
            assert(tmp_condition_result_438 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_292:;
        CHECK_OBJECT(tmp_class_creation_73__bases_orig);
        tmp_dictset_value = tmp_class_creation_73__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2102;

            goto try_except_handler_221;
        }
        branch_no_292:;
        {
            PyObject *tmp_assign_source_596;
            PyObject *tmp_called_value_146;
            PyObject *tmp_args_value_146;
            PyObject *tmp_tuple_element_290;
            PyObject *tmp_kwargs_value_146;
            CHECK_OBJECT(tmp_class_creation_73__metaclass);
            tmp_called_value_146 = tmp_class_creation_73__metaclass;
            tmp_tuple_element_290 = mod_consts[516];
            tmp_args_value_146 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_146, 0, tmp_tuple_element_290);
            CHECK_OBJECT(tmp_class_creation_73__bases);
            tmp_tuple_element_290 = tmp_class_creation_73__bases;
            PyTuple_SET_ITEM0(tmp_args_value_146, 1, tmp_tuple_element_290);
            tmp_tuple_element_290 = locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102;
            PyTuple_SET_ITEM0(tmp_args_value_146, 2, tmp_tuple_element_290);
            CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
            tmp_kwargs_value_146 = tmp_class_creation_73__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2102;
            tmp_assign_source_596 = CALL_FUNCTION(tmp_called_value_146, tmp_args_value_146, tmp_kwargs_value_146);
            Py_DECREF(tmp_args_value_146);
            if (tmp_assign_source_596 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2102;

                goto try_except_handler_221;
            }
            assert(outline_72_var___class__ == NULL);
            outline_72_var___class__ = tmp_assign_source_596;
        }
        CHECK_OBJECT(outline_72_var___class__);
        tmp_assign_source_595 = outline_72_var___class__;
        Py_INCREF(tmp_assign_source_595);
        goto try_return_handler_221;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_221:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102);
        locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102 = NULL;
        goto try_return_handler_220;
        // Exception handler code:
        try_except_handler_221:;
        exception_keeper_type_219 = exception_type;
        exception_keeper_value_219 = exception_value;
        exception_keeper_tb_219 = exception_tb;
        exception_keeper_lineno_219 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102);
        locals_xlwt$BIFFRecords$$$class__73_BottomMarginRecord_2102 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_219;
        exception_value = exception_keeper_value_219;
        exception_tb = exception_keeper_tb_219;
        exception_lineno = exception_keeper_lineno_219;

        goto try_except_handler_220;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_220:;
        CHECK_OBJECT(outline_72_var___class__);
        Py_DECREF(outline_72_var___class__);
        outline_72_var___class__ = NULL;
        goto outline_result_73;
        // Exception handler code:
        try_except_handler_220:;
        exception_keeper_type_220 = exception_type;
        exception_keeper_value_220 = exception_value;
        exception_keeper_tb_220 = exception_tb;
        exception_keeper_lineno_220 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_220;
        exception_value = exception_keeper_value_220;
        exception_tb = exception_keeper_tb_220;
        exception_lineno = exception_keeper_lineno_220;

        goto outline_exception_73;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_73:;
        exception_lineno = 2102;
        goto try_except_handler_219;
        outline_result_73:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[516], tmp_assign_source_595);
    }
    goto try_end_75;
    // Exception handler code:
    try_except_handler_219:;
    exception_keeper_type_221 = exception_type;
    exception_keeper_value_221 = exception_value;
    exception_keeper_tb_221 = exception_tb;
    exception_keeper_lineno_221 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_73__bases_orig);
    tmp_class_creation_73__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_73__bases);
    tmp_class_creation_73__bases = NULL;
    Py_XDECREF(tmp_class_creation_73__class_decl_dict);
    tmp_class_creation_73__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_73__metaclass);
    tmp_class_creation_73__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_73__prepared);
    tmp_class_creation_73__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_221;
    exception_value = exception_keeper_value_221;
    exception_tb = exception_keeper_tb_221;
    exception_lineno = exception_keeper_lineno_221;

    goto frame_exception_exit_1;
    // End of try:
    try_end_75:;
    CHECK_OBJECT(tmp_class_creation_73__bases_orig);
    Py_DECREF(tmp_class_creation_73__bases_orig);
    tmp_class_creation_73__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_73__bases);
    Py_DECREF(tmp_class_creation_73__bases);
    tmp_class_creation_73__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_73__class_decl_dict);
    Py_DECREF(tmp_class_creation_73__class_decl_dict);
    tmp_class_creation_73__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_73__metaclass);
    Py_DECREF(tmp_class_creation_73__metaclass);
    tmp_class_creation_73__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_73__prepared);
    Py_DECREF(tmp_class_creation_73__prepared);
    tmp_class_creation_73__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_597;
        PyObject *tmp_tuple_element_291;
        tmp_tuple_element_291 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_291 == NULL)) {
            tmp_tuple_element_291 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_291 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        tmp_assign_source_597 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_597, 0, tmp_tuple_element_291);
        assert(tmp_class_creation_74__bases_orig == NULL);
        tmp_class_creation_74__bases_orig = tmp_assign_source_597;
    }
    {
        PyObject *tmp_assign_source_598;
        PyObject *tmp_dircall_arg1_74;
        CHECK_OBJECT(tmp_class_creation_74__bases_orig);
        tmp_dircall_arg1_74 = tmp_class_creation_74__bases_orig;
        Py_INCREF(tmp_dircall_arg1_74);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_74};
            tmp_assign_source_598 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_598 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        assert(tmp_class_creation_74__bases == NULL);
        tmp_class_creation_74__bases = tmp_assign_source_598;
    }
    {
        PyObject *tmp_assign_source_599;
        tmp_assign_source_599 = PyDict_New();
        assert(tmp_class_creation_74__class_decl_dict == NULL);
        tmp_class_creation_74__class_decl_dict = tmp_assign_source_599;
    }
    {
        PyObject *tmp_assign_source_600;
        PyObject *tmp_metaclass_value_74;
        bool tmp_condition_result_439;
        PyObject *tmp_key_value_220;
        PyObject *tmp_dict_arg_value_220;
        PyObject *tmp_dict_arg_value_221;
        PyObject *tmp_key_value_221;
        nuitka_bool tmp_condition_result_440;
        int tmp_truth_name_74;
        PyObject *tmp_type_arg_147;
        PyObject *tmp_expression_value_366;
        PyObject *tmp_subscript_value_74;
        PyObject *tmp_bases_value_74;
        tmp_key_value_220 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_dict_arg_value_220 = tmp_class_creation_74__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_220, tmp_key_value_220);
        assert(!(tmp_res == -1));
        tmp_condition_result_439 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_439 != false) {
            goto condexpr_true_147;
        } else {
            goto condexpr_false_147;
        }
        condexpr_true_147:;
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_dict_arg_value_221 = tmp_class_creation_74__class_decl_dict;
        tmp_key_value_221 = mod_consts[205];
        tmp_metaclass_value_74 = DICT_GET_ITEM0(tmp_dict_arg_value_221, tmp_key_value_221);
        if (tmp_metaclass_value_74 == NULL) {
            tmp_metaclass_value_74 = Py_None;
        }
        assert(!(tmp_metaclass_value_74 == NULL));
        Py_INCREF(tmp_metaclass_value_74);
        goto condexpr_end_147;
        condexpr_false_147:;
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_truth_name_74 = CHECK_IF_TRUE(tmp_class_creation_74__bases);
        if (tmp_truth_name_74 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        tmp_condition_result_440 = tmp_truth_name_74 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_440 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_148;
        } else {
            goto condexpr_false_148;
        }
        condexpr_true_148:;
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_expression_value_366 = tmp_class_creation_74__bases;
        tmp_subscript_value_74 = mod_consts[4];
        tmp_type_arg_147 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_366, tmp_subscript_value_74, 0);
        if (tmp_type_arg_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        tmp_metaclass_value_74 = BUILTIN_TYPE1(tmp_type_arg_147);
        Py_DECREF(tmp_type_arg_147);
        if (tmp_metaclass_value_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        goto condexpr_end_148;
        condexpr_false_148:;
        tmp_metaclass_value_74 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_74);
        condexpr_end_148:;
        condexpr_end_147:;
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_bases_value_74 = tmp_class_creation_74__bases;
        tmp_assign_source_600 = SELECT_METACLASS(tmp_metaclass_value_74, tmp_bases_value_74);
        Py_DECREF(tmp_metaclass_value_74);
        if (tmp_assign_source_600 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        assert(tmp_class_creation_74__metaclass == NULL);
        tmp_class_creation_74__metaclass = tmp_assign_source_600;
    }
    {
        bool tmp_condition_result_441;
        PyObject *tmp_key_value_222;
        PyObject *tmp_dict_arg_value_222;
        tmp_key_value_222 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_dict_arg_value_222 = tmp_class_creation_74__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_222, tmp_key_value_222);
        assert(!(tmp_res == -1));
        tmp_condition_result_441 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_441 != false) {
            goto branch_yes_293;
        } else {
            goto branch_no_293;
        }
    }
    branch_yes_293:;
    CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_74__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2117;

        goto try_except_handler_222;
    }
    branch_no_293:;
    {
        nuitka_bool tmp_condition_result_442;
        PyObject *tmp_expression_value_367;
        CHECK_OBJECT(tmp_class_creation_74__metaclass);
        tmp_expression_value_367 = tmp_class_creation_74__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_367, mod_consts[206]);
        tmp_condition_result_442 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_442 == NUITKA_BOOL_TRUE) {
            goto branch_yes_294;
        } else {
            goto branch_no_294;
        }
    }
    branch_yes_294:;
    {
        PyObject *tmp_assign_source_601;
        PyObject *tmp_called_value_147;
        PyObject *tmp_expression_value_368;
        PyObject *tmp_args_value_147;
        PyObject *tmp_tuple_element_292;
        PyObject *tmp_kwargs_value_147;
        CHECK_OBJECT(tmp_class_creation_74__metaclass);
        tmp_expression_value_368 = tmp_class_creation_74__metaclass;
        tmp_called_value_147 = LOOKUP_ATTRIBUTE(tmp_expression_value_368, mod_consts[206]);
        if (tmp_called_value_147 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        tmp_tuple_element_292 = mod_consts[520];
        tmp_args_value_147 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_147, 0, tmp_tuple_element_292);
        CHECK_OBJECT(tmp_class_creation_74__bases);
        tmp_tuple_element_292 = tmp_class_creation_74__bases;
        PyTuple_SET_ITEM0(tmp_args_value_147, 1, tmp_tuple_element_292);
        CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
        tmp_kwargs_value_147 = tmp_class_creation_74__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2117;
        tmp_assign_source_601 = CALL_FUNCTION(tmp_called_value_147, tmp_args_value_147, tmp_kwargs_value_147);
        Py_DECREF(tmp_called_value_147);
        Py_DECREF(tmp_args_value_147);
        if (tmp_assign_source_601 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        assert(tmp_class_creation_74__prepared == NULL);
        tmp_class_creation_74__prepared = tmp_assign_source_601;
    }
    {
        bool tmp_condition_result_443;
        PyObject *tmp_operand_value_74;
        PyObject *tmp_expression_value_369;
        CHECK_OBJECT(tmp_class_creation_74__prepared);
        tmp_expression_value_369 = tmp_class_creation_74__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_369, mod_consts[208]);
        tmp_operand_value_74 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_74);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        tmp_condition_result_443 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_443 != false) {
            goto branch_yes_295;
        } else {
            goto branch_no_295;
        }
    }
    branch_yes_295:;
    {
        PyObject *tmp_raise_type_74;
        PyObject *tmp_raise_value_74;
        PyObject *tmp_left_value_74;
        PyObject *tmp_right_value_74;
        PyObject *tmp_tuple_element_293;
        PyObject *tmp_getattr_target_74;
        PyObject *tmp_getattr_attr_74;
        PyObject *tmp_getattr_default_74;
        tmp_raise_type_74 = PyExc_TypeError;
        tmp_left_value_74 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_74__metaclass);
        tmp_getattr_target_74 = tmp_class_creation_74__metaclass;
        tmp_getattr_attr_74 = mod_consts[210];
        tmp_getattr_default_74 = mod_consts[211];
        tmp_tuple_element_293 = BUILTIN_GETATTR(tmp_getattr_target_74, tmp_getattr_attr_74, tmp_getattr_default_74);
        if (tmp_tuple_element_293 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        tmp_right_value_74 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_370;
            PyObject *tmp_type_arg_148;
            PyTuple_SET_ITEM(tmp_right_value_74, 0, tmp_tuple_element_293);
            CHECK_OBJECT(tmp_class_creation_74__prepared);
            tmp_type_arg_148 = tmp_class_creation_74__prepared;
            tmp_expression_value_370 = BUILTIN_TYPE1(tmp_type_arg_148);
            assert(!(tmp_expression_value_370 == NULL));
            tmp_tuple_element_293 = LOOKUP_ATTRIBUTE(tmp_expression_value_370, mod_consts[210]);
            Py_DECREF(tmp_expression_value_370);
            if (tmp_tuple_element_293 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2117;

                goto tuple_build_exception_74;
            }
            PyTuple_SET_ITEM(tmp_right_value_74, 1, tmp_tuple_element_293);
        }
        goto tuple_build_noexception_74;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_74:;
        Py_DECREF(tmp_right_value_74);
        goto try_except_handler_222;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_74:;
        tmp_raise_value_74 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_74, tmp_right_value_74);
        Py_DECREF(tmp_right_value_74);
        if (tmp_raise_value_74 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_222;
        }
        exception_type = tmp_raise_type_74;
        Py_INCREF(tmp_raise_type_74);
        exception_value = tmp_raise_value_74;
        exception_lineno = 2117;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_222;
    }
    branch_no_295:;
    goto branch_end_294;
    branch_no_294:;
    {
        PyObject *tmp_assign_source_602;
        tmp_assign_source_602 = PyDict_New();
        assert(tmp_class_creation_74__prepared == NULL);
        tmp_class_creation_74__prepared = tmp_assign_source_602;
    }
    branch_end_294:;
    {
        PyObject *tmp_assign_source_603;
        {
            PyObject *tmp_set_locals_74;
            CHECK_OBJECT(tmp_class_creation_74__prepared);
            tmp_set_locals_74 = tmp_class_creation_74__prepared;
            locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117 = tmp_set_locals_74;
            Py_INCREF(tmp_set_locals_74);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_224;
        }
        tmp_dictset_value = mod_consts[521];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_224;
        }
        tmp_dictset_value = mod_consts[520];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_224;
        }
        if (isFrameUnusable(cache_frame_7992ed49c326376cded28b8fcb250867_75)) {
            Py_XDECREF(cache_frame_7992ed49c326376cded28b8fcb250867_75);

#if _DEBUG_REFCOUNTS
            if (cache_frame_7992ed49c326376cded28b8fcb250867_75 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_7992ed49c326376cded28b8fcb250867_75 = MAKE_FUNCTION_FRAME(codeobj_7992ed49c326376cded28b8fcb250867, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_7992ed49c326376cded28b8fcb250867_75->m_type_description == NULL);
        frame_7992ed49c326376cded28b8fcb250867_75 = cache_frame_7992ed49c326376cded28b8fcb250867_75;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_7992ed49c326376cded28b8fcb250867_75);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_7992ed49c326376cded28b8fcb250867_75) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[522];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2270;
            type_description_2 = "o";
            goto frame_exception_exit_75;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__87___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2271;
            type_description_2 = "o";
            goto frame_exception_exit_75;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7992ed49c326376cded28b8fcb250867_75);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_74;

        frame_exception_exit_75:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_7992ed49c326376cded28b8fcb250867_75);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_7992ed49c326376cded28b8fcb250867_75, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_7992ed49c326376cded28b8fcb250867_75->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_7992ed49c326376cded28b8fcb250867_75, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_7992ed49c326376cded28b8fcb250867_75,
            type_description_2,
            outline_73_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_7992ed49c326376cded28b8fcb250867_75 == cache_frame_7992ed49c326376cded28b8fcb250867_75) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_7992ed49c326376cded28b8fcb250867_75);
            cache_frame_7992ed49c326376cded28b8fcb250867_75 = NULL;
        }

        assertFrameObject(frame_7992ed49c326376cded28b8fcb250867_75);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_74;

        frame_no_exception_74:;
        goto skip_nested_handling_74;
        nested_frame_exit_74:;

        goto try_except_handler_224;
        skip_nested_handling_74:;
        {
            nuitka_bool tmp_condition_result_444;
            PyObject *tmp_cmp_expr_left_74;
            PyObject *tmp_cmp_expr_right_74;
            CHECK_OBJECT(tmp_class_creation_74__bases);
            tmp_cmp_expr_left_74 = tmp_class_creation_74__bases;
            CHECK_OBJECT(tmp_class_creation_74__bases_orig);
            tmp_cmp_expr_right_74 = tmp_class_creation_74__bases_orig;
            tmp_condition_result_444 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_74, tmp_cmp_expr_right_74);
            if (tmp_condition_result_444 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2117;

                goto try_except_handler_224;
            }
            if (tmp_condition_result_444 == NUITKA_BOOL_TRUE) {
                goto branch_yes_296;
            } else {
                goto branch_no_296;
            }
            assert(tmp_condition_result_444 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_296:;
        CHECK_OBJECT(tmp_class_creation_74__bases_orig);
        tmp_dictset_value = tmp_class_creation_74__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2117;

            goto try_except_handler_224;
        }
        branch_no_296:;
        {
            PyObject *tmp_assign_source_604;
            PyObject *tmp_called_value_148;
            PyObject *tmp_args_value_148;
            PyObject *tmp_tuple_element_294;
            PyObject *tmp_kwargs_value_148;
            CHECK_OBJECT(tmp_class_creation_74__metaclass);
            tmp_called_value_148 = tmp_class_creation_74__metaclass;
            tmp_tuple_element_294 = mod_consts[520];
            tmp_args_value_148 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_148, 0, tmp_tuple_element_294);
            CHECK_OBJECT(tmp_class_creation_74__bases);
            tmp_tuple_element_294 = tmp_class_creation_74__bases;
            PyTuple_SET_ITEM0(tmp_args_value_148, 1, tmp_tuple_element_294);
            tmp_tuple_element_294 = locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117;
            PyTuple_SET_ITEM0(tmp_args_value_148, 2, tmp_tuple_element_294);
            CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
            tmp_kwargs_value_148 = tmp_class_creation_74__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2117;
            tmp_assign_source_604 = CALL_FUNCTION(tmp_called_value_148, tmp_args_value_148, tmp_kwargs_value_148);
            Py_DECREF(tmp_args_value_148);
            if (tmp_assign_source_604 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2117;

                goto try_except_handler_224;
            }
            assert(outline_73_var___class__ == NULL);
            outline_73_var___class__ = tmp_assign_source_604;
        }
        CHECK_OBJECT(outline_73_var___class__);
        tmp_assign_source_603 = outline_73_var___class__;
        Py_INCREF(tmp_assign_source_603);
        goto try_return_handler_224;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_224:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117);
        locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117 = NULL;
        goto try_return_handler_223;
        // Exception handler code:
        try_except_handler_224:;
        exception_keeper_type_222 = exception_type;
        exception_keeper_value_222 = exception_value;
        exception_keeper_tb_222 = exception_tb;
        exception_keeper_lineno_222 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117);
        locals_xlwt$BIFFRecords$$$class__74_SetupPageRecord_2117 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_222;
        exception_value = exception_keeper_value_222;
        exception_tb = exception_keeper_tb_222;
        exception_lineno = exception_keeper_lineno_222;

        goto try_except_handler_223;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_223:;
        CHECK_OBJECT(outline_73_var___class__);
        Py_DECREF(outline_73_var___class__);
        outline_73_var___class__ = NULL;
        goto outline_result_74;
        // Exception handler code:
        try_except_handler_223:;
        exception_keeper_type_223 = exception_type;
        exception_keeper_value_223 = exception_value;
        exception_keeper_tb_223 = exception_tb;
        exception_keeper_lineno_223 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_223;
        exception_value = exception_keeper_value_223;
        exception_tb = exception_keeper_tb_223;
        exception_lineno = exception_keeper_lineno_223;

        goto outline_exception_74;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_74:;
        exception_lineno = 2117;
        goto try_except_handler_222;
        outline_result_74:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[520], tmp_assign_source_603);
    }
    goto try_end_76;
    // Exception handler code:
    try_except_handler_222:;
    exception_keeper_type_224 = exception_type;
    exception_keeper_value_224 = exception_value;
    exception_keeper_tb_224 = exception_tb;
    exception_keeper_lineno_224 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_74__bases_orig);
    tmp_class_creation_74__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_74__bases);
    tmp_class_creation_74__bases = NULL;
    Py_XDECREF(tmp_class_creation_74__class_decl_dict);
    tmp_class_creation_74__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_74__metaclass);
    tmp_class_creation_74__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_74__prepared);
    tmp_class_creation_74__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_224;
    exception_value = exception_keeper_value_224;
    exception_tb = exception_keeper_tb_224;
    exception_lineno = exception_keeper_lineno_224;

    goto frame_exception_exit_1;
    // End of try:
    try_end_76:;
    CHECK_OBJECT(tmp_class_creation_74__bases_orig);
    Py_DECREF(tmp_class_creation_74__bases_orig);
    tmp_class_creation_74__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_74__bases);
    Py_DECREF(tmp_class_creation_74__bases);
    tmp_class_creation_74__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_74__class_decl_dict);
    Py_DECREF(tmp_class_creation_74__class_decl_dict);
    tmp_class_creation_74__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_74__metaclass);
    Py_DECREF(tmp_class_creation_74__metaclass);
    tmp_class_creation_74__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_74__prepared);
    Py_DECREF(tmp_class_creation_74__prepared);
    tmp_class_creation_74__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_605;
        PyObject *tmp_tuple_element_295;
        tmp_tuple_element_295 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_295 == NULL)) {
            tmp_tuple_element_295 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_295 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        tmp_assign_source_605 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_605, 0, tmp_tuple_element_295);
        assert(tmp_class_creation_75__bases_orig == NULL);
        tmp_class_creation_75__bases_orig = tmp_assign_source_605;
    }
    {
        PyObject *tmp_assign_source_606;
        PyObject *tmp_dircall_arg1_75;
        CHECK_OBJECT(tmp_class_creation_75__bases_orig);
        tmp_dircall_arg1_75 = tmp_class_creation_75__bases_orig;
        Py_INCREF(tmp_dircall_arg1_75);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_75};
            tmp_assign_source_606 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_606 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        assert(tmp_class_creation_75__bases == NULL);
        tmp_class_creation_75__bases = tmp_assign_source_606;
    }
    {
        PyObject *tmp_assign_source_607;
        tmp_assign_source_607 = PyDict_New();
        assert(tmp_class_creation_75__class_decl_dict == NULL);
        tmp_class_creation_75__class_decl_dict = tmp_assign_source_607;
    }
    {
        PyObject *tmp_assign_source_608;
        PyObject *tmp_metaclass_value_75;
        bool tmp_condition_result_445;
        PyObject *tmp_key_value_223;
        PyObject *tmp_dict_arg_value_223;
        PyObject *tmp_dict_arg_value_224;
        PyObject *tmp_key_value_224;
        nuitka_bool tmp_condition_result_446;
        int tmp_truth_name_75;
        PyObject *tmp_type_arg_149;
        PyObject *tmp_expression_value_371;
        PyObject *tmp_subscript_value_75;
        PyObject *tmp_bases_value_75;
        tmp_key_value_223 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_dict_arg_value_223 = tmp_class_creation_75__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_223, tmp_key_value_223);
        assert(!(tmp_res == -1));
        tmp_condition_result_445 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_445 != false) {
            goto condexpr_true_149;
        } else {
            goto condexpr_false_149;
        }
        condexpr_true_149:;
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_dict_arg_value_224 = tmp_class_creation_75__class_decl_dict;
        tmp_key_value_224 = mod_consts[205];
        tmp_metaclass_value_75 = DICT_GET_ITEM0(tmp_dict_arg_value_224, tmp_key_value_224);
        if (tmp_metaclass_value_75 == NULL) {
            tmp_metaclass_value_75 = Py_None;
        }
        assert(!(tmp_metaclass_value_75 == NULL));
        Py_INCREF(tmp_metaclass_value_75);
        goto condexpr_end_149;
        condexpr_false_149:;
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_truth_name_75 = CHECK_IF_TRUE(tmp_class_creation_75__bases);
        if (tmp_truth_name_75 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        tmp_condition_result_446 = tmp_truth_name_75 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_446 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_150;
        } else {
            goto condexpr_false_150;
        }
        condexpr_true_150:;
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_expression_value_371 = tmp_class_creation_75__bases;
        tmp_subscript_value_75 = mod_consts[4];
        tmp_type_arg_149 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_371, tmp_subscript_value_75, 0);
        if (tmp_type_arg_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        tmp_metaclass_value_75 = BUILTIN_TYPE1(tmp_type_arg_149);
        Py_DECREF(tmp_type_arg_149);
        if (tmp_metaclass_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        goto condexpr_end_150;
        condexpr_false_150:;
        tmp_metaclass_value_75 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_75);
        condexpr_end_150:;
        condexpr_end_149:;
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_bases_value_75 = tmp_class_creation_75__bases;
        tmp_assign_source_608 = SELECT_METACLASS(tmp_metaclass_value_75, tmp_bases_value_75);
        Py_DECREF(tmp_metaclass_value_75);
        if (tmp_assign_source_608 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        assert(tmp_class_creation_75__metaclass == NULL);
        tmp_class_creation_75__metaclass = tmp_assign_source_608;
    }
    {
        bool tmp_condition_result_447;
        PyObject *tmp_key_value_225;
        PyObject *tmp_dict_arg_value_225;
        tmp_key_value_225 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_dict_arg_value_225 = tmp_class_creation_75__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_225, tmp_key_value_225);
        assert(!(tmp_res == -1));
        tmp_condition_result_447 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_447 != false) {
            goto branch_yes_297;
        } else {
            goto branch_no_297;
        }
    }
    branch_yes_297:;
    CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_75__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2283;

        goto try_except_handler_225;
    }
    branch_no_297:;
    {
        nuitka_bool tmp_condition_result_448;
        PyObject *tmp_expression_value_372;
        CHECK_OBJECT(tmp_class_creation_75__metaclass);
        tmp_expression_value_372 = tmp_class_creation_75__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_372, mod_consts[206]);
        tmp_condition_result_448 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_448 == NUITKA_BOOL_TRUE) {
            goto branch_yes_298;
        } else {
            goto branch_no_298;
        }
    }
    branch_yes_298:;
    {
        PyObject *tmp_assign_source_609;
        PyObject *tmp_called_value_149;
        PyObject *tmp_expression_value_373;
        PyObject *tmp_args_value_149;
        PyObject *tmp_tuple_element_296;
        PyObject *tmp_kwargs_value_149;
        CHECK_OBJECT(tmp_class_creation_75__metaclass);
        tmp_expression_value_373 = tmp_class_creation_75__metaclass;
        tmp_called_value_149 = LOOKUP_ATTRIBUTE(tmp_expression_value_373, mod_consts[206]);
        if (tmp_called_value_149 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        tmp_tuple_element_296 = mod_consts[524];
        tmp_args_value_149 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_149, 0, tmp_tuple_element_296);
        CHECK_OBJECT(tmp_class_creation_75__bases);
        tmp_tuple_element_296 = tmp_class_creation_75__bases;
        PyTuple_SET_ITEM0(tmp_args_value_149, 1, tmp_tuple_element_296);
        CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
        tmp_kwargs_value_149 = tmp_class_creation_75__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2283;
        tmp_assign_source_609 = CALL_FUNCTION(tmp_called_value_149, tmp_args_value_149, tmp_kwargs_value_149);
        Py_DECREF(tmp_called_value_149);
        Py_DECREF(tmp_args_value_149);
        if (tmp_assign_source_609 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        assert(tmp_class_creation_75__prepared == NULL);
        tmp_class_creation_75__prepared = tmp_assign_source_609;
    }
    {
        bool tmp_condition_result_449;
        PyObject *tmp_operand_value_75;
        PyObject *tmp_expression_value_374;
        CHECK_OBJECT(tmp_class_creation_75__prepared);
        tmp_expression_value_374 = tmp_class_creation_75__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_374, mod_consts[208]);
        tmp_operand_value_75 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_75);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        tmp_condition_result_449 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_449 != false) {
            goto branch_yes_299;
        } else {
            goto branch_no_299;
        }
    }
    branch_yes_299:;
    {
        PyObject *tmp_raise_type_75;
        PyObject *tmp_raise_value_75;
        PyObject *tmp_left_value_75;
        PyObject *tmp_right_value_75;
        PyObject *tmp_tuple_element_297;
        PyObject *tmp_getattr_target_75;
        PyObject *tmp_getattr_attr_75;
        PyObject *tmp_getattr_default_75;
        tmp_raise_type_75 = PyExc_TypeError;
        tmp_left_value_75 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_75__metaclass);
        tmp_getattr_target_75 = tmp_class_creation_75__metaclass;
        tmp_getattr_attr_75 = mod_consts[210];
        tmp_getattr_default_75 = mod_consts[211];
        tmp_tuple_element_297 = BUILTIN_GETATTR(tmp_getattr_target_75, tmp_getattr_attr_75, tmp_getattr_default_75);
        if (tmp_tuple_element_297 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        tmp_right_value_75 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_375;
            PyObject *tmp_type_arg_150;
            PyTuple_SET_ITEM(tmp_right_value_75, 0, tmp_tuple_element_297);
            CHECK_OBJECT(tmp_class_creation_75__prepared);
            tmp_type_arg_150 = tmp_class_creation_75__prepared;
            tmp_expression_value_375 = BUILTIN_TYPE1(tmp_type_arg_150);
            assert(!(tmp_expression_value_375 == NULL));
            tmp_tuple_element_297 = LOOKUP_ATTRIBUTE(tmp_expression_value_375, mod_consts[210]);
            Py_DECREF(tmp_expression_value_375);
            if (tmp_tuple_element_297 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2283;

                goto tuple_build_exception_75;
            }
            PyTuple_SET_ITEM(tmp_right_value_75, 1, tmp_tuple_element_297);
        }
        goto tuple_build_noexception_75;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_75:;
        Py_DECREF(tmp_right_value_75);
        goto try_except_handler_225;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_75:;
        tmp_raise_value_75 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_75, tmp_right_value_75);
        Py_DECREF(tmp_right_value_75);
        if (tmp_raise_value_75 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_225;
        }
        exception_type = tmp_raise_type_75;
        Py_INCREF(tmp_raise_type_75);
        exception_value = tmp_raise_value_75;
        exception_lineno = 2283;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_225;
    }
    branch_no_299:;
    goto branch_end_298;
    branch_no_298:;
    {
        PyObject *tmp_assign_source_610;
        tmp_assign_source_610 = PyDict_New();
        assert(tmp_class_creation_75__prepared == NULL);
        tmp_class_creation_75__prepared = tmp_assign_source_610;
    }
    branch_end_298:;
    {
        PyObject *tmp_assign_source_611;
        {
            PyObject *tmp_set_locals_75;
            CHECK_OBJECT(tmp_class_creation_75__prepared);
            tmp_set_locals_75 = tmp_class_creation_75__prepared;
            locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283 = tmp_set_locals_75;
            Py_INCREF(tmp_set_locals_75);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_227;
        }
        tmp_dictset_value = mod_consts[525];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_227;
        }
        tmp_dictset_value = mod_consts[524];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_227;
        }
        if (isFrameUnusable(cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76)) {
            Py_XDECREF(cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76 = MAKE_FUNCTION_FRAME(codeobj_1a39e3c6afe661befd8785a2fb1c282b, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76->m_type_description == NULL);
        frame_1a39e3c6afe661befd8785a2fb1c282b_76 = cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1a39e3c6afe661befd8785a2fb1c282b_76);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1a39e3c6afe661befd8785a2fb1c282b_76) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[526];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2327;
            type_description_2 = "o";
            goto frame_exception_exit_76;
        }
        {
            PyObject *tmp_defaults_5;
            tmp_defaults_5 = mod_consts[527];
            Py_INCREF(tmp_defaults_5);


            tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__88___init__(tmp_defaults_5);

            tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283, mod_consts[216], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2329;
                type_description_2 = "o";
                goto frame_exception_exit_76;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1a39e3c6afe661befd8785a2fb1c282b_76);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_75;

        frame_exception_exit_76:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1a39e3c6afe661befd8785a2fb1c282b_76);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1a39e3c6afe661befd8785a2fb1c282b_76, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1a39e3c6afe661befd8785a2fb1c282b_76->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1a39e3c6afe661befd8785a2fb1c282b_76, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1a39e3c6afe661befd8785a2fb1c282b_76,
            type_description_2,
            outline_74_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_1a39e3c6afe661befd8785a2fb1c282b_76 == cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76);
            cache_frame_1a39e3c6afe661befd8785a2fb1c282b_76 = NULL;
        }

        assertFrameObject(frame_1a39e3c6afe661befd8785a2fb1c282b_76);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_75;

        frame_no_exception_75:;
        goto skip_nested_handling_75;
        nested_frame_exit_75:;

        goto try_except_handler_227;
        skip_nested_handling_75:;
        {
            nuitka_bool tmp_condition_result_450;
            PyObject *tmp_cmp_expr_left_75;
            PyObject *tmp_cmp_expr_right_75;
            CHECK_OBJECT(tmp_class_creation_75__bases);
            tmp_cmp_expr_left_75 = tmp_class_creation_75__bases;
            CHECK_OBJECT(tmp_class_creation_75__bases_orig);
            tmp_cmp_expr_right_75 = tmp_class_creation_75__bases_orig;
            tmp_condition_result_450 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_75, tmp_cmp_expr_right_75);
            if (tmp_condition_result_450 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2283;

                goto try_except_handler_227;
            }
            if (tmp_condition_result_450 == NUITKA_BOOL_TRUE) {
                goto branch_yes_300;
            } else {
                goto branch_no_300;
            }
            assert(tmp_condition_result_450 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_300:;
        CHECK_OBJECT(tmp_class_creation_75__bases_orig);
        tmp_dictset_value = tmp_class_creation_75__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2283;

            goto try_except_handler_227;
        }
        branch_no_300:;
        {
            PyObject *tmp_assign_source_612;
            PyObject *tmp_called_value_150;
            PyObject *tmp_args_value_150;
            PyObject *tmp_tuple_element_298;
            PyObject *tmp_kwargs_value_150;
            CHECK_OBJECT(tmp_class_creation_75__metaclass);
            tmp_called_value_150 = tmp_class_creation_75__metaclass;
            tmp_tuple_element_298 = mod_consts[524];
            tmp_args_value_150 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_150, 0, tmp_tuple_element_298);
            CHECK_OBJECT(tmp_class_creation_75__bases);
            tmp_tuple_element_298 = tmp_class_creation_75__bases;
            PyTuple_SET_ITEM0(tmp_args_value_150, 1, tmp_tuple_element_298);
            tmp_tuple_element_298 = locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283;
            PyTuple_SET_ITEM0(tmp_args_value_150, 2, tmp_tuple_element_298);
            CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
            tmp_kwargs_value_150 = tmp_class_creation_75__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2283;
            tmp_assign_source_612 = CALL_FUNCTION(tmp_called_value_150, tmp_args_value_150, tmp_kwargs_value_150);
            Py_DECREF(tmp_args_value_150);
            if (tmp_assign_source_612 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2283;

                goto try_except_handler_227;
            }
            assert(outline_74_var___class__ == NULL);
            outline_74_var___class__ = tmp_assign_source_612;
        }
        CHECK_OBJECT(outline_74_var___class__);
        tmp_assign_source_611 = outline_74_var___class__;
        Py_INCREF(tmp_assign_source_611);
        goto try_return_handler_227;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_227:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283);
        locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283 = NULL;
        goto try_return_handler_226;
        // Exception handler code:
        try_except_handler_227:;
        exception_keeper_type_225 = exception_type;
        exception_keeper_value_225 = exception_value;
        exception_keeper_tb_225 = exception_tb;
        exception_keeper_lineno_225 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283);
        locals_xlwt$BIFFRecords$$$class__75_NameRecord_2283 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_225;
        exception_value = exception_keeper_value_225;
        exception_tb = exception_keeper_tb_225;
        exception_lineno = exception_keeper_lineno_225;

        goto try_except_handler_226;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_226:;
        CHECK_OBJECT(outline_74_var___class__);
        Py_DECREF(outline_74_var___class__);
        outline_74_var___class__ = NULL;
        goto outline_result_75;
        // Exception handler code:
        try_except_handler_226:;
        exception_keeper_type_226 = exception_type;
        exception_keeper_value_226 = exception_value;
        exception_keeper_tb_226 = exception_tb;
        exception_keeper_lineno_226 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_226;
        exception_value = exception_keeper_value_226;
        exception_tb = exception_keeper_tb_226;
        exception_lineno = exception_keeper_lineno_226;

        goto outline_exception_75;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_75:;
        exception_lineno = 2283;
        goto try_except_handler_225;
        outline_result_75:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[524], tmp_assign_source_611);
    }
    goto try_end_77;
    // Exception handler code:
    try_except_handler_225:;
    exception_keeper_type_227 = exception_type;
    exception_keeper_value_227 = exception_value;
    exception_keeper_tb_227 = exception_tb;
    exception_keeper_lineno_227 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_75__bases_orig);
    tmp_class_creation_75__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_75__bases);
    tmp_class_creation_75__bases = NULL;
    Py_XDECREF(tmp_class_creation_75__class_decl_dict);
    tmp_class_creation_75__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_75__metaclass);
    tmp_class_creation_75__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_75__prepared);
    tmp_class_creation_75__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_227;
    exception_value = exception_keeper_value_227;
    exception_tb = exception_keeper_tb_227;
    exception_lineno = exception_keeper_lineno_227;

    goto frame_exception_exit_1;
    // End of try:
    try_end_77:;
    CHECK_OBJECT(tmp_class_creation_75__bases_orig);
    Py_DECREF(tmp_class_creation_75__bases_orig);
    tmp_class_creation_75__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_75__bases);
    Py_DECREF(tmp_class_creation_75__bases);
    tmp_class_creation_75__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_75__class_decl_dict);
    Py_DECREF(tmp_class_creation_75__class_decl_dict);
    tmp_class_creation_75__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_75__metaclass);
    Py_DECREF(tmp_class_creation_75__metaclass);
    tmp_class_creation_75__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_75__prepared);
    Py_DECREF(tmp_class_creation_75__prepared);
    tmp_class_creation_75__prepared = NULL;
    {
        PyObject *tmp_assign_source_613;
        tmp_assign_source_613 = mod_consts[529];
        UPDATE_STRING_DICT0(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[183], tmp_assign_source_613);
    }
    // Tried code:
    {
        PyObject *tmp_assign_source_614;
        PyObject *tmp_tuple_element_299;
        tmp_tuple_element_299 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_299 == NULL)) {
            tmp_tuple_element_299 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_299 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        tmp_assign_source_614 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_614, 0, tmp_tuple_element_299);
        assert(tmp_class_creation_76__bases_orig == NULL);
        tmp_class_creation_76__bases_orig = tmp_assign_source_614;
    }
    {
        PyObject *tmp_assign_source_615;
        PyObject *tmp_dircall_arg1_76;
        CHECK_OBJECT(tmp_class_creation_76__bases_orig);
        tmp_dircall_arg1_76 = tmp_class_creation_76__bases_orig;
        Py_INCREF(tmp_dircall_arg1_76);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_76};
            tmp_assign_source_615 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_615 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        assert(tmp_class_creation_76__bases == NULL);
        tmp_class_creation_76__bases = tmp_assign_source_615;
    }
    {
        PyObject *tmp_assign_source_616;
        tmp_assign_source_616 = PyDict_New();
        assert(tmp_class_creation_76__class_decl_dict == NULL);
        tmp_class_creation_76__class_decl_dict = tmp_assign_source_616;
    }
    {
        PyObject *tmp_assign_source_617;
        PyObject *tmp_metaclass_value_76;
        bool tmp_condition_result_451;
        PyObject *tmp_key_value_226;
        PyObject *tmp_dict_arg_value_226;
        PyObject *tmp_dict_arg_value_227;
        PyObject *tmp_key_value_227;
        nuitka_bool tmp_condition_result_452;
        int tmp_truth_name_76;
        PyObject *tmp_type_arg_151;
        PyObject *tmp_expression_value_376;
        PyObject *tmp_subscript_value_76;
        PyObject *tmp_bases_value_76;
        tmp_key_value_226 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_dict_arg_value_226 = tmp_class_creation_76__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_226, tmp_key_value_226);
        assert(!(tmp_res == -1));
        tmp_condition_result_451 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_451 != false) {
            goto condexpr_true_151;
        } else {
            goto condexpr_false_151;
        }
        condexpr_true_151:;
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_dict_arg_value_227 = tmp_class_creation_76__class_decl_dict;
        tmp_key_value_227 = mod_consts[205];
        tmp_metaclass_value_76 = DICT_GET_ITEM0(tmp_dict_arg_value_227, tmp_key_value_227);
        if (tmp_metaclass_value_76 == NULL) {
            tmp_metaclass_value_76 = Py_None;
        }
        assert(!(tmp_metaclass_value_76 == NULL));
        Py_INCREF(tmp_metaclass_value_76);
        goto condexpr_end_151;
        condexpr_false_151:;
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_truth_name_76 = CHECK_IF_TRUE(tmp_class_creation_76__bases);
        if (tmp_truth_name_76 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        tmp_condition_result_452 = tmp_truth_name_76 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_452 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_152;
        } else {
            goto condexpr_false_152;
        }
        condexpr_true_152:;
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_expression_value_376 = tmp_class_creation_76__bases;
        tmp_subscript_value_76 = mod_consts[4];
        tmp_type_arg_151 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_376, tmp_subscript_value_76, 0);
        if (tmp_type_arg_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        tmp_metaclass_value_76 = BUILTIN_TYPE1(tmp_type_arg_151);
        Py_DECREF(tmp_type_arg_151);
        if (tmp_metaclass_value_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        goto condexpr_end_152;
        condexpr_false_152:;
        tmp_metaclass_value_76 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_76);
        condexpr_end_152:;
        condexpr_end_151:;
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_bases_value_76 = tmp_class_creation_76__bases;
        tmp_assign_source_617 = SELECT_METACLASS(tmp_metaclass_value_76, tmp_bases_value_76);
        Py_DECREF(tmp_metaclass_value_76);
        if (tmp_assign_source_617 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        assert(tmp_class_creation_76__metaclass == NULL);
        tmp_class_creation_76__metaclass = tmp_assign_source_617;
    }
    {
        bool tmp_condition_result_453;
        PyObject *tmp_key_value_228;
        PyObject *tmp_dict_arg_value_228;
        tmp_key_value_228 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_dict_arg_value_228 = tmp_class_creation_76__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_228, tmp_key_value_228);
        assert(!(tmp_res == -1));
        tmp_condition_result_453 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_453 != false) {
            goto branch_yes_301;
        } else {
            goto branch_no_301;
        }
    }
    branch_yes_301:;
    CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_76__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2349;

        goto try_except_handler_228;
    }
    branch_no_301:;
    {
        nuitka_bool tmp_condition_result_454;
        PyObject *tmp_expression_value_377;
        CHECK_OBJECT(tmp_class_creation_76__metaclass);
        tmp_expression_value_377 = tmp_class_creation_76__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_377, mod_consts[206]);
        tmp_condition_result_454 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_454 == NUITKA_BOOL_TRUE) {
            goto branch_yes_302;
        } else {
            goto branch_no_302;
        }
    }
    branch_yes_302:;
    {
        PyObject *tmp_assign_source_618;
        PyObject *tmp_called_value_151;
        PyObject *tmp_expression_value_378;
        PyObject *tmp_args_value_151;
        PyObject *tmp_tuple_element_300;
        PyObject *tmp_kwargs_value_151;
        CHECK_OBJECT(tmp_class_creation_76__metaclass);
        tmp_expression_value_378 = tmp_class_creation_76__metaclass;
        tmp_called_value_151 = LOOKUP_ATTRIBUTE(tmp_expression_value_378, mod_consts[206]);
        if (tmp_called_value_151 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        tmp_tuple_element_300 = mod_consts[530];
        tmp_args_value_151 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_151, 0, tmp_tuple_element_300);
        CHECK_OBJECT(tmp_class_creation_76__bases);
        tmp_tuple_element_300 = tmp_class_creation_76__bases;
        PyTuple_SET_ITEM0(tmp_args_value_151, 1, tmp_tuple_element_300);
        CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
        tmp_kwargs_value_151 = tmp_class_creation_76__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2349;
        tmp_assign_source_618 = CALL_FUNCTION(tmp_called_value_151, tmp_args_value_151, tmp_kwargs_value_151);
        Py_DECREF(tmp_called_value_151);
        Py_DECREF(tmp_args_value_151);
        if (tmp_assign_source_618 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        assert(tmp_class_creation_76__prepared == NULL);
        tmp_class_creation_76__prepared = tmp_assign_source_618;
    }
    {
        bool tmp_condition_result_455;
        PyObject *tmp_operand_value_76;
        PyObject *tmp_expression_value_379;
        CHECK_OBJECT(tmp_class_creation_76__prepared);
        tmp_expression_value_379 = tmp_class_creation_76__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_379, mod_consts[208]);
        tmp_operand_value_76 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_76);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        tmp_condition_result_455 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_455 != false) {
            goto branch_yes_303;
        } else {
            goto branch_no_303;
        }
    }
    branch_yes_303:;
    {
        PyObject *tmp_raise_type_76;
        PyObject *tmp_raise_value_76;
        PyObject *tmp_left_value_76;
        PyObject *tmp_right_value_76;
        PyObject *tmp_tuple_element_301;
        PyObject *tmp_getattr_target_76;
        PyObject *tmp_getattr_attr_76;
        PyObject *tmp_getattr_default_76;
        tmp_raise_type_76 = PyExc_TypeError;
        tmp_left_value_76 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_76__metaclass);
        tmp_getattr_target_76 = tmp_class_creation_76__metaclass;
        tmp_getattr_attr_76 = mod_consts[210];
        tmp_getattr_default_76 = mod_consts[211];
        tmp_tuple_element_301 = BUILTIN_GETATTR(tmp_getattr_target_76, tmp_getattr_attr_76, tmp_getattr_default_76);
        if (tmp_tuple_element_301 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        tmp_right_value_76 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_380;
            PyObject *tmp_type_arg_152;
            PyTuple_SET_ITEM(tmp_right_value_76, 0, tmp_tuple_element_301);
            CHECK_OBJECT(tmp_class_creation_76__prepared);
            tmp_type_arg_152 = tmp_class_creation_76__prepared;
            tmp_expression_value_380 = BUILTIN_TYPE1(tmp_type_arg_152);
            assert(!(tmp_expression_value_380 == NULL));
            tmp_tuple_element_301 = LOOKUP_ATTRIBUTE(tmp_expression_value_380, mod_consts[210]);
            Py_DECREF(tmp_expression_value_380);
            if (tmp_tuple_element_301 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2349;

                goto tuple_build_exception_76;
            }
            PyTuple_SET_ITEM(tmp_right_value_76, 1, tmp_tuple_element_301);
        }
        goto tuple_build_noexception_76;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_76:;
        Py_DECREF(tmp_right_value_76);
        goto try_except_handler_228;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_76:;
        tmp_raise_value_76 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_76, tmp_right_value_76);
        Py_DECREF(tmp_right_value_76);
        if (tmp_raise_value_76 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_228;
        }
        exception_type = tmp_raise_type_76;
        Py_INCREF(tmp_raise_type_76);
        exception_value = tmp_raise_value_76;
        exception_lineno = 2349;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_228;
    }
    branch_no_303:;
    goto branch_end_302;
    branch_no_302:;
    {
        PyObject *tmp_assign_source_619;
        tmp_assign_source_619 = PyDict_New();
        assert(tmp_class_creation_76__prepared == NULL);
        tmp_class_creation_76__prepared = tmp_assign_source_619;
    }
    branch_end_302:;
    {
        PyObject *tmp_assign_source_620;
        {
            PyObject *tmp_set_locals_76;
            CHECK_OBJECT(tmp_class_creation_76__prepared);
            tmp_set_locals_76 = tmp_class_creation_76__prepared;
            locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349 = tmp_set_locals_76;
            Py_INCREF(tmp_set_locals_76);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_230;
        }
        tmp_dictset_value = mod_consts[531];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_230;
        }
        tmp_dictset_value = mod_consts[530];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_230;
        }
        if (isFrameUnusable(cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77)) {
            Py_XDECREF(cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77);

#if _DEBUG_REFCOUNTS
            if (cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77 = MAKE_FUNCTION_FRAME(codeobj_1b61623f19ea6c773d273d92b82ad4ee, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77->m_type_description == NULL);
        frame_1b61623f19ea6c773d273d92b82ad4ee_77 = cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_1b61623f19ea6c773d273d92b82ad4ee_77);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_1b61623f19ea6c773d273d92b82ad4ee_77) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[125];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2364;
            type_description_2 = "o";
            goto frame_exception_exit_77;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__89___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2366;
            type_description_2 = "o";
            goto frame_exception_exit_77;
        }


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__90_get();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349, mod_consts[157], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2374;
            type_description_2 = "o";
            goto frame_exception_exit_77;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1b61623f19ea6c773d273d92b82ad4ee_77);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_76;

        frame_exception_exit_77:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_1b61623f19ea6c773d273d92b82ad4ee_77);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_1b61623f19ea6c773d273d92b82ad4ee_77, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_1b61623f19ea6c773d273d92b82ad4ee_77->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_1b61623f19ea6c773d273d92b82ad4ee_77, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_1b61623f19ea6c773d273d92b82ad4ee_77,
            type_description_2,
            outline_75_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_1b61623f19ea6c773d273d92b82ad4ee_77 == cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77);
            cache_frame_1b61623f19ea6c773d273d92b82ad4ee_77 = NULL;
        }

        assertFrameObject(frame_1b61623f19ea6c773d273d92b82ad4ee_77);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_76;

        frame_no_exception_76:;
        goto skip_nested_handling_76;
        nested_frame_exit_76:;

        goto try_except_handler_230;
        skip_nested_handling_76:;
        {
            nuitka_bool tmp_condition_result_456;
            PyObject *tmp_cmp_expr_left_76;
            PyObject *tmp_cmp_expr_right_76;
            CHECK_OBJECT(tmp_class_creation_76__bases);
            tmp_cmp_expr_left_76 = tmp_class_creation_76__bases;
            CHECK_OBJECT(tmp_class_creation_76__bases_orig);
            tmp_cmp_expr_right_76 = tmp_class_creation_76__bases_orig;
            tmp_condition_result_456 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_76, tmp_cmp_expr_right_76);
            if (tmp_condition_result_456 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2349;

                goto try_except_handler_230;
            }
            if (tmp_condition_result_456 == NUITKA_BOOL_TRUE) {
                goto branch_yes_304;
            } else {
                goto branch_no_304;
            }
            assert(tmp_condition_result_456 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_304:;
        CHECK_OBJECT(tmp_class_creation_76__bases_orig);
        tmp_dictset_value = tmp_class_creation_76__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2349;

            goto try_except_handler_230;
        }
        branch_no_304:;
        {
            PyObject *tmp_assign_source_621;
            PyObject *tmp_called_value_152;
            PyObject *tmp_args_value_152;
            PyObject *tmp_tuple_element_302;
            PyObject *tmp_kwargs_value_152;
            CHECK_OBJECT(tmp_class_creation_76__metaclass);
            tmp_called_value_152 = tmp_class_creation_76__metaclass;
            tmp_tuple_element_302 = mod_consts[530];
            tmp_args_value_152 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_152, 0, tmp_tuple_element_302);
            CHECK_OBJECT(tmp_class_creation_76__bases);
            tmp_tuple_element_302 = tmp_class_creation_76__bases;
            PyTuple_SET_ITEM0(tmp_args_value_152, 1, tmp_tuple_element_302);
            tmp_tuple_element_302 = locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349;
            PyTuple_SET_ITEM0(tmp_args_value_152, 2, tmp_tuple_element_302);
            CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
            tmp_kwargs_value_152 = tmp_class_creation_76__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2349;
            tmp_assign_source_621 = CALL_FUNCTION(tmp_called_value_152, tmp_args_value_152, tmp_kwargs_value_152);
            Py_DECREF(tmp_args_value_152);
            if (tmp_assign_source_621 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2349;

                goto try_except_handler_230;
            }
            assert(outline_75_var___class__ == NULL);
            outline_75_var___class__ = tmp_assign_source_621;
        }
        CHECK_OBJECT(outline_75_var___class__);
        tmp_assign_source_620 = outline_75_var___class__;
        Py_INCREF(tmp_assign_source_620);
        goto try_return_handler_230;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_230:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349);
        locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349 = NULL;
        goto try_return_handler_229;
        // Exception handler code:
        try_except_handler_230:;
        exception_keeper_type_228 = exception_type;
        exception_keeper_value_228 = exception_value;
        exception_keeper_tb_228 = exception_tb;
        exception_keeper_lineno_228 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349);
        locals_xlwt$BIFFRecords$$$class__76_ExternSheetRecord_2349 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_228;
        exception_value = exception_keeper_value_228;
        exception_tb = exception_keeper_tb_228;
        exception_lineno = exception_keeper_lineno_228;

        goto try_except_handler_229;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_229:;
        CHECK_OBJECT(outline_75_var___class__);
        Py_DECREF(outline_75_var___class__);
        outline_75_var___class__ = NULL;
        goto outline_result_76;
        // Exception handler code:
        try_except_handler_229:;
        exception_keeper_type_229 = exception_type;
        exception_keeper_value_229 = exception_value;
        exception_keeper_tb_229 = exception_tb;
        exception_keeper_lineno_229 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_229;
        exception_value = exception_keeper_value_229;
        exception_tb = exception_keeper_tb_229;
        exception_lineno = exception_keeper_lineno_229;

        goto outline_exception_76;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_76:;
        exception_lineno = 2349;
        goto try_except_handler_228;
        outline_result_76:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[530], tmp_assign_source_620);
    }
    goto try_end_78;
    // Exception handler code:
    try_except_handler_228:;
    exception_keeper_type_230 = exception_type;
    exception_keeper_value_230 = exception_value;
    exception_keeper_tb_230 = exception_tb;
    exception_keeper_lineno_230 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_76__bases_orig);
    tmp_class_creation_76__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_76__bases);
    tmp_class_creation_76__bases = NULL;
    Py_XDECREF(tmp_class_creation_76__class_decl_dict);
    tmp_class_creation_76__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_76__metaclass);
    tmp_class_creation_76__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_76__prepared);
    tmp_class_creation_76__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_230;
    exception_value = exception_keeper_value_230;
    exception_tb = exception_keeper_tb_230;
    exception_lineno = exception_keeper_lineno_230;

    goto frame_exception_exit_1;
    // End of try:
    try_end_78:;
    CHECK_OBJECT(tmp_class_creation_76__bases_orig);
    Py_DECREF(tmp_class_creation_76__bases_orig);
    tmp_class_creation_76__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_76__bases);
    Py_DECREF(tmp_class_creation_76__bases);
    tmp_class_creation_76__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_76__class_decl_dict);
    Py_DECREF(tmp_class_creation_76__class_decl_dict);
    tmp_class_creation_76__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_76__metaclass);
    Py_DECREF(tmp_class_creation_76__metaclass);
    tmp_class_creation_76__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_76__prepared);
    Py_DECREF(tmp_class_creation_76__prepared);
    tmp_class_creation_76__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_622;
        PyObject *tmp_tuple_element_303;
        tmp_tuple_element_303 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_303 == NULL)) {
            tmp_tuple_element_303 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_303 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        tmp_assign_source_622 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_622, 0, tmp_tuple_element_303);
        assert(tmp_class_creation_77__bases_orig == NULL);
        tmp_class_creation_77__bases_orig = tmp_assign_source_622;
    }
    {
        PyObject *tmp_assign_source_623;
        PyObject *tmp_dircall_arg1_77;
        CHECK_OBJECT(tmp_class_creation_77__bases_orig);
        tmp_dircall_arg1_77 = tmp_class_creation_77__bases_orig;
        Py_INCREF(tmp_dircall_arg1_77);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_77};
            tmp_assign_source_623 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_623 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        assert(tmp_class_creation_77__bases == NULL);
        tmp_class_creation_77__bases = tmp_assign_source_623;
    }
    {
        PyObject *tmp_assign_source_624;
        tmp_assign_source_624 = PyDict_New();
        assert(tmp_class_creation_77__class_decl_dict == NULL);
        tmp_class_creation_77__class_decl_dict = tmp_assign_source_624;
    }
    {
        PyObject *tmp_assign_source_625;
        PyObject *tmp_metaclass_value_77;
        bool tmp_condition_result_457;
        PyObject *tmp_key_value_229;
        PyObject *tmp_dict_arg_value_229;
        PyObject *tmp_dict_arg_value_230;
        PyObject *tmp_key_value_230;
        nuitka_bool tmp_condition_result_458;
        int tmp_truth_name_77;
        PyObject *tmp_type_arg_153;
        PyObject *tmp_expression_value_381;
        PyObject *tmp_subscript_value_77;
        PyObject *tmp_bases_value_77;
        tmp_key_value_229 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_dict_arg_value_229 = tmp_class_creation_77__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_229, tmp_key_value_229);
        assert(!(tmp_res == -1));
        tmp_condition_result_457 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_457 != false) {
            goto condexpr_true_153;
        } else {
            goto condexpr_false_153;
        }
        condexpr_true_153:;
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_dict_arg_value_230 = tmp_class_creation_77__class_decl_dict;
        tmp_key_value_230 = mod_consts[205];
        tmp_metaclass_value_77 = DICT_GET_ITEM0(tmp_dict_arg_value_230, tmp_key_value_230);
        if (tmp_metaclass_value_77 == NULL) {
            tmp_metaclass_value_77 = Py_None;
        }
        assert(!(tmp_metaclass_value_77 == NULL));
        Py_INCREF(tmp_metaclass_value_77);
        goto condexpr_end_153;
        condexpr_false_153:;
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_truth_name_77 = CHECK_IF_TRUE(tmp_class_creation_77__bases);
        if (tmp_truth_name_77 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        tmp_condition_result_458 = tmp_truth_name_77 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_458 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_154;
        } else {
            goto condexpr_false_154;
        }
        condexpr_true_154:;
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_expression_value_381 = tmp_class_creation_77__bases;
        tmp_subscript_value_77 = mod_consts[4];
        tmp_type_arg_153 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_381, tmp_subscript_value_77, 0);
        if (tmp_type_arg_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        tmp_metaclass_value_77 = BUILTIN_TYPE1(tmp_type_arg_153);
        Py_DECREF(tmp_type_arg_153);
        if (tmp_metaclass_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        goto condexpr_end_154;
        condexpr_false_154:;
        tmp_metaclass_value_77 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_77);
        condexpr_end_154:;
        condexpr_end_153:;
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_bases_value_77 = tmp_class_creation_77__bases;
        tmp_assign_source_625 = SELECT_METACLASS(tmp_metaclass_value_77, tmp_bases_value_77);
        Py_DECREF(tmp_metaclass_value_77);
        if (tmp_assign_source_625 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        assert(tmp_class_creation_77__metaclass == NULL);
        tmp_class_creation_77__metaclass = tmp_assign_source_625;
    }
    {
        bool tmp_condition_result_459;
        PyObject *tmp_key_value_231;
        PyObject *tmp_dict_arg_value_231;
        tmp_key_value_231 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_dict_arg_value_231 = tmp_class_creation_77__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_231, tmp_key_value_231);
        assert(!(tmp_res == -1));
        tmp_condition_result_459 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_459 != false) {
            goto branch_yes_305;
        } else {
            goto branch_no_305;
        }
    }
    branch_yes_305:;
    CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_77__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2388;

        goto try_except_handler_231;
    }
    branch_no_305:;
    {
        nuitka_bool tmp_condition_result_460;
        PyObject *tmp_expression_value_382;
        CHECK_OBJECT(tmp_class_creation_77__metaclass);
        tmp_expression_value_382 = tmp_class_creation_77__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_382, mod_consts[206]);
        tmp_condition_result_460 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_460 == NUITKA_BOOL_TRUE) {
            goto branch_yes_306;
        } else {
            goto branch_no_306;
        }
    }
    branch_yes_306:;
    {
        PyObject *tmp_assign_source_626;
        PyObject *tmp_called_value_153;
        PyObject *tmp_expression_value_383;
        PyObject *tmp_args_value_153;
        PyObject *tmp_tuple_element_304;
        PyObject *tmp_kwargs_value_153;
        CHECK_OBJECT(tmp_class_creation_77__metaclass);
        tmp_expression_value_383 = tmp_class_creation_77__metaclass;
        tmp_called_value_153 = LOOKUP_ATTRIBUTE(tmp_expression_value_383, mod_consts[206]);
        if (tmp_called_value_153 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        tmp_tuple_element_304 = mod_consts[534];
        tmp_args_value_153 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_153, 0, tmp_tuple_element_304);
        CHECK_OBJECT(tmp_class_creation_77__bases);
        tmp_tuple_element_304 = tmp_class_creation_77__bases;
        PyTuple_SET_ITEM0(tmp_args_value_153, 1, tmp_tuple_element_304);
        CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
        tmp_kwargs_value_153 = tmp_class_creation_77__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2388;
        tmp_assign_source_626 = CALL_FUNCTION(tmp_called_value_153, tmp_args_value_153, tmp_kwargs_value_153);
        Py_DECREF(tmp_called_value_153);
        Py_DECREF(tmp_args_value_153);
        if (tmp_assign_source_626 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        assert(tmp_class_creation_77__prepared == NULL);
        tmp_class_creation_77__prepared = tmp_assign_source_626;
    }
    {
        bool tmp_condition_result_461;
        PyObject *tmp_operand_value_77;
        PyObject *tmp_expression_value_384;
        CHECK_OBJECT(tmp_class_creation_77__prepared);
        tmp_expression_value_384 = tmp_class_creation_77__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_384, mod_consts[208]);
        tmp_operand_value_77 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_77);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        tmp_condition_result_461 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_461 != false) {
            goto branch_yes_307;
        } else {
            goto branch_no_307;
        }
    }
    branch_yes_307:;
    {
        PyObject *tmp_raise_type_77;
        PyObject *tmp_raise_value_77;
        PyObject *tmp_left_value_77;
        PyObject *tmp_right_value_77;
        PyObject *tmp_tuple_element_305;
        PyObject *tmp_getattr_target_77;
        PyObject *tmp_getattr_attr_77;
        PyObject *tmp_getattr_default_77;
        tmp_raise_type_77 = PyExc_TypeError;
        tmp_left_value_77 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_77__metaclass);
        tmp_getattr_target_77 = tmp_class_creation_77__metaclass;
        tmp_getattr_attr_77 = mod_consts[210];
        tmp_getattr_default_77 = mod_consts[211];
        tmp_tuple_element_305 = BUILTIN_GETATTR(tmp_getattr_target_77, tmp_getattr_attr_77, tmp_getattr_default_77);
        if (tmp_tuple_element_305 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        tmp_right_value_77 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_385;
            PyObject *tmp_type_arg_154;
            PyTuple_SET_ITEM(tmp_right_value_77, 0, tmp_tuple_element_305);
            CHECK_OBJECT(tmp_class_creation_77__prepared);
            tmp_type_arg_154 = tmp_class_creation_77__prepared;
            tmp_expression_value_385 = BUILTIN_TYPE1(tmp_type_arg_154);
            assert(!(tmp_expression_value_385 == NULL));
            tmp_tuple_element_305 = LOOKUP_ATTRIBUTE(tmp_expression_value_385, mod_consts[210]);
            Py_DECREF(tmp_expression_value_385);
            if (tmp_tuple_element_305 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2388;

                goto tuple_build_exception_77;
            }
            PyTuple_SET_ITEM(tmp_right_value_77, 1, tmp_tuple_element_305);
        }
        goto tuple_build_noexception_77;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_77:;
        Py_DECREF(tmp_right_value_77);
        goto try_except_handler_231;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_77:;
        tmp_raise_value_77 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_77, tmp_right_value_77);
        Py_DECREF(tmp_right_value_77);
        if (tmp_raise_value_77 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_231;
        }
        exception_type = tmp_raise_type_77;
        Py_INCREF(tmp_raise_type_77);
        exception_value = tmp_raise_value_77;
        exception_lineno = 2388;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_231;
    }
    branch_no_307:;
    goto branch_end_306;
    branch_no_306:;
    {
        PyObject *tmp_assign_source_627;
        tmp_assign_source_627 = PyDict_New();
        assert(tmp_class_creation_77__prepared == NULL);
        tmp_class_creation_77__prepared = tmp_assign_source_627;
    }
    branch_end_306:;
    {
        PyObject *tmp_assign_source_628;
        {
            PyObject *tmp_set_locals_77;
            CHECK_OBJECT(tmp_class_creation_77__prepared);
            tmp_set_locals_77 = tmp_class_creation_77__prepared;
            locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388 = tmp_set_locals_77;
            Py_INCREF(tmp_set_locals_77);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_233;
        }
        tmp_dictset_value = mod_consts[535];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_233;
        }
        tmp_dictset_value = mod_consts[534];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_233;
        }
        if (isFrameUnusable(cache_frame_5035e25540c4e70761378104f51a1dca_78)) {
            Py_XDECREF(cache_frame_5035e25540c4e70761378104f51a1dca_78);

#if _DEBUG_REFCOUNTS
            if (cache_frame_5035e25540c4e70761378104f51a1dca_78 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_5035e25540c4e70761378104f51a1dca_78 = MAKE_FUNCTION_FRAME(codeobj_5035e25540c4e70761378104f51a1dca, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_5035e25540c4e70761378104f51a1dca_78->m_type_description == NULL);
        frame_5035e25540c4e70761378104f51a1dca_78 = cache_frame_5035e25540c4e70761378104f51a1dca_78;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_5035e25540c4e70761378104f51a1dca_78);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_5035e25540c4e70761378104f51a1dca_78) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[536];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2397;
            type_description_2 = "o";
            goto frame_exception_exit_78;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5035e25540c4e70761378104f51a1dca_78);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_77;

        frame_exception_exit_78:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_5035e25540c4e70761378104f51a1dca_78);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_5035e25540c4e70761378104f51a1dca_78, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_5035e25540c4e70761378104f51a1dca_78->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_5035e25540c4e70761378104f51a1dca_78, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_5035e25540c4e70761378104f51a1dca_78,
            type_description_2,
            outline_76_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_5035e25540c4e70761378104f51a1dca_78 == cache_frame_5035e25540c4e70761378104f51a1dca_78) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_5035e25540c4e70761378104f51a1dca_78);
            cache_frame_5035e25540c4e70761378104f51a1dca_78 = NULL;
        }

        assertFrameObject(frame_5035e25540c4e70761378104f51a1dca_78);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_77;

        frame_no_exception_77:;
        goto skip_nested_handling_77;
        nested_frame_exit_77:;

        goto try_except_handler_233;
        skip_nested_handling_77:;
        {
            nuitka_bool tmp_condition_result_462;
            PyObject *tmp_cmp_expr_left_77;
            PyObject *tmp_cmp_expr_right_77;
            CHECK_OBJECT(tmp_class_creation_77__bases);
            tmp_cmp_expr_left_77 = tmp_class_creation_77__bases;
            CHECK_OBJECT(tmp_class_creation_77__bases_orig);
            tmp_cmp_expr_right_77 = tmp_class_creation_77__bases_orig;
            tmp_condition_result_462 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_77, tmp_cmp_expr_right_77);
            if (tmp_condition_result_462 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2388;

                goto try_except_handler_233;
            }
            if (tmp_condition_result_462 == NUITKA_BOOL_TRUE) {
                goto branch_yes_308;
            } else {
                goto branch_no_308;
            }
            assert(tmp_condition_result_462 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_308:;
        CHECK_OBJECT(tmp_class_creation_77__bases_orig);
        tmp_dictset_value = tmp_class_creation_77__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2388;

            goto try_except_handler_233;
        }
        branch_no_308:;
        {
            PyObject *tmp_assign_source_629;
            PyObject *tmp_called_value_154;
            PyObject *tmp_args_value_154;
            PyObject *tmp_tuple_element_306;
            PyObject *tmp_kwargs_value_154;
            CHECK_OBJECT(tmp_class_creation_77__metaclass);
            tmp_called_value_154 = tmp_class_creation_77__metaclass;
            tmp_tuple_element_306 = mod_consts[534];
            tmp_args_value_154 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_154, 0, tmp_tuple_element_306);
            CHECK_OBJECT(tmp_class_creation_77__bases);
            tmp_tuple_element_306 = tmp_class_creation_77__bases;
            PyTuple_SET_ITEM0(tmp_args_value_154, 1, tmp_tuple_element_306);
            tmp_tuple_element_306 = locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388;
            PyTuple_SET_ITEM0(tmp_args_value_154, 2, tmp_tuple_element_306);
            CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
            tmp_kwargs_value_154 = tmp_class_creation_77__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2388;
            tmp_assign_source_629 = CALL_FUNCTION(tmp_called_value_154, tmp_args_value_154, tmp_kwargs_value_154);
            Py_DECREF(tmp_args_value_154);
            if (tmp_assign_source_629 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2388;

                goto try_except_handler_233;
            }
            assert(outline_76_var___class__ == NULL);
            outline_76_var___class__ = tmp_assign_source_629;
        }
        CHECK_OBJECT(outline_76_var___class__);
        tmp_assign_source_628 = outline_76_var___class__;
        Py_INCREF(tmp_assign_source_628);
        goto try_return_handler_233;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_233:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388);
        locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388 = NULL;
        goto try_return_handler_232;
        // Exception handler code:
        try_except_handler_233:;
        exception_keeper_type_231 = exception_type;
        exception_keeper_value_231 = exception_value;
        exception_keeper_tb_231 = exception_tb;
        exception_keeper_lineno_231 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388);
        locals_xlwt$BIFFRecords$$$class__77_SupBookRecord_2388 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_231;
        exception_value = exception_keeper_value_231;
        exception_tb = exception_keeper_tb_231;
        exception_lineno = exception_keeper_lineno_231;

        goto try_except_handler_232;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_232:;
        CHECK_OBJECT(outline_76_var___class__);
        Py_DECREF(outline_76_var___class__);
        outline_76_var___class__ = NULL;
        goto outline_result_77;
        // Exception handler code:
        try_except_handler_232:;
        exception_keeper_type_232 = exception_type;
        exception_keeper_value_232 = exception_value;
        exception_keeper_tb_232 = exception_tb;
        exception_keeper_lineno_232 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_232;
        exception_value = exception_keeper_value_232;
        exception_tb = exception_keeper_tb_232;
        exception_lineno = exception_keeper_lineno_232;

        goto outline_exception_77;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_77:;
        exception_lineno = 2388;
        goto try_except_handler_231;
        outline_result_77:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[534], tmp_assign_source_628);
    }
    goto try_end_79;
    // Exception handler code:
    try_except_handler_231:;
    exception_keeper_type_233 = exception_type;
    exception_keeper_value_233 = exception_value;
    exception_keeper_tb_233 = exception_tb;
    exception_keeper_lineno_233 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_77__bases_orig);
    tmp_class_creation_77__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_77__bases);
    tmp_class_creation_77__bases = NULL;
    Py_XDECREF(tmp_class_creation_77__class_decl_dict);
    tmp_class_creation_77__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_77__metaclass);
    tmp_class_creation_77__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_77__prepared);
    tmp_class_creation_77__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_233;
    exception_value = exception_keeper_value_233;
    exception_tb = exception_keeper_tb_233;
    exception_lineno = exception_keeper_lineno_233;

    goto frame_exception_exit_1;
    // End of try:
    try_end_79:;
    CHECK_OBJECT(tmp_class_creation_77__bases_orig);
    Py_DECREF(tmp_class_creation_77__bases_orig);
    tmp_class_creation_77__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_77__bases);
    Py_DECREF(tmp_class_creation_77__bases);
    tmp_class_creation_77__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_77__class_decl_dict);
    Py_DECREF(tmp_class_creation_77__class_decl_dict);
    tmp_class_creation_77__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_77__metaclass);
    Py_DECREF(tmp_class_creation_77__metaclass);
    tmp_class_creation_77__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_77__prepared);
    Py_DECREF(tmp_class_creation_77__prepared);
    tmp_class_creation_77__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_630;
        PyObject *tmp_tuple_element_307;
        tmp_tuple_element_307 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[534]);

        if (unlikely(tmp_tuple_element_307 == NULL)) {
            tmp_tuple_element_307 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[534]);
        }

        if (tmp_tuple_element_307 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        tmp_assign_source_630 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_630, 0, tmp_tuple_element_307);
        assert(tmp_class_creation_78__bases_orig == NULL);
        tmp_class_creation_78__bases_orig = tmp_assign_source_630;
    }
    {
        PyObject *tmp_assign_source_631;
        PyObject *tmp_dircall_arg1_78;
        CHECK_OBJECT(tmp_class_creation_78__bases_orig);
        tmp_dircall_arg1_78 = tmp_class_creation_78__bases_orig;
        Py_INCREF(tmp_dircall_arg1_78);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_78};
            tmp_assign_source_631 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_631 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        assert(tmp_class_creation_78__bases == NULL);
        tmp_class_creation_78__bases = tmp_assign_source_631;
    }
    {
        PyObject *tmp_assign_source_632;
        tmp_assign_source_632 = PyDict_New();
        assert(tmp_class_creation_78__class_decl_dict == NULL);
        tmp_class_creation_78__class_decl_dict = tmp_assign_source_632;
    }
    {
        PyObject *tmp_assign_source_633;
        PyObject *tmp_metaclass_value_78;
        bool tmp_condition_result_463;
        PyObject *tmp_key_value_232;
        PyObject *tmp_dict_arg_value_232;
        PyObject *tmp_dict_arg_value_233;
        PyObject *tmp_key_value_233;
        nuitka_bool tmp_condition_result_464;
        int tmp_truth_name_78;
        PyObject *tmp_type_arg_155;
        PyObject *tmp_expression_value_386;
        PyObject *tmp_subscript_value_78;
        PyObject *tmp_bases_value_78;
        tmp_key_value_232 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_dict_arg_value_232 = tmp_class_creation_78__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_232, tmp_key_value_232);
        assert(!(tmp_res == -1));
        tmp_condition_result_463 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_463 != false) {
            goto condexpr_true_155;
        } else {
            goto condexpr_false_155;
        }
        condexpr_true_155:;
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_dict_arg_value_233 = tmp_class_creation_78__class_decl_dict;
        tmp_key_value_233 = mod_consts[205];
        tmp_metaclass_value_78 = DICT_GET_ITEM0(tmp_dict_arg_value_233, tmp_key_value_233);
        if (tmp_metaclass_value_78 == NULL) {
            tmp_metaclass_value_78 = Py_None;
        }
        assert(!(tmp_metaclass_value_78 == NULL));
        Py_INCREF(tmp_metaclass_value_78);
        goto condexpr_end_155;
        condexpr_false_155:;
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_truth_name_78 = CHECK_IF_TRUE(tmp_class_creation_78__bases);
        if (tmp_truth_name_78 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        tmp_condition_result_464 = tmp_truth_name_78 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_464 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_156;
        } else {
            goto condexpr_false_156;
        }
        condexpr_true_156:;
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_expression_value_386 = tmp_class_creation_78__bases;
        tmp_subscript_value_78 = mod_consts[4];
        tmp_type_arg_155 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_386, tmp_subscript_value_78, 0);
        if (tmp_type_arg_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        tmp_metaclass_value_78 = BUILTIN_TYPE1(tmp_type_arg_155);
        Py_DECREF(tmp_type_arg_155);
        if (tmp_metaclass_value_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        goto condexpr_end_156;
        condexpr_false_156:;
        tmp_metaclass_value_78 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_78);
        condexpr_end_156:;
        condexpr_end_155:;
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_bases_value_78 = tmp_class_creation_78__bases;
        tmp_assign_source_633 = SELECT_METACLASS(tmp_metaclass_value_78, tmp_bases_value_78);
        Py_DECREF(tmp_metaclass_value_78);
        if (tmp_assign_source_633 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        assert(tmp_class_creation_78__metaclass == NULL);
        tmp_class_creation_78__metaclass = tmp_assign_source_633;
    }
    {
        bool tmp_condition_result_465;
        PyObject *tmp_key_value_234;
        PyObject *tmp_dict_arg_value_234;
        tmp_key_value_234 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_dict_arg_value_234 = tmp_class_creation_78__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_234, tmp_key_value_234);
        assert(!(tmp_res == -1));
        tmp_condition_result_465 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_465 != false) {
            goto branch_yes_309;
        } else {
            goto branch_no_309;
        }
    }
    branch_yes_309:;
    CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_78__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2399;

        goto try_except_handler_234;
    }
    branch_no_309:;
    {
        nuitka_bool tmp_condition_result_466;
        PyObject *tmp_expression_value_387;
        CHECK_OBJECT(tmp_class_creation_78__metaclass);
        tmp_expression_value_387 = tmp_class_creation_78__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_387, mod_consts[206]);
        tmp_condition_result_466 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_466 == NUITKA_BOOL_TRUE) {
            goto branch_yes_310;
        } else {
            goto branch_no_310;
        }
    }
    branch_yes_310:;
    {
        PyObject *tmp_assign_source_634;
        PyObject *tmp_called_value_155;
        PyObject *tmp_expression_value_388;
        PyObject *tmp_args_value_155;
        PyObject *tmp_tuple_element_308;
        PyObject *tmp_kwargs_value_155;
        CHECK_OBJECT(tmp_class_creation_78__metaclass);
        tmp_expression_value_388 = tmp_class_creation_78__metaclass;
        tmp_called_value_155 = LOOKUP_ATTRIBUTE(tmp_expression_value_388, mod_consts[206]);
        if (tmp_called_value_155 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        tmp_tuple_element_308 = mod_consts[537];
        tmp_args_value_155 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_155, 0, tmp_tuple_element_308);
        CHECK_OBJECT(tmp_class_creation_78__bases);
        tmp_tuple_element_308 = tmp_class_creation_78__bases;
        PyTuple_SET_ITEM0(tmp_args_value_155, 1, tmp_tuple_element_308);
        CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
        tmp_kwargs_value_155 = tmp_class_creation_78__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2399;
        tmp_assign_source_634 = CALL_FUNCTION(tmp_called_value_155, tmp_args_value_155, tmp_kwargs_value_155);
        Py_DECREF(tmp_called_value_155);
        Py_DECREF(tmp_args_value_155);
        if (tmp_assign_source_634 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        assert(tmp_class_creation_78__prepared == NULL);
        tmp_class_creation_78__prepared = tmp_assign_source_634;
    }
    {
        bool tmp_condition_result_467;
        PyObject *tmp_operand_value_78;
        PyObject *tmp_expression_value_389;
        CHECK_OBJECT(tmp_class_creation_78__prepared);
        tmp_expression_value_389 = tmp_class_creation_78__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_389, mod_consts[208]);
        tmp_operand_value_78 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_78);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        tmp_condition_result_467 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_467 != false) {
            goto branch_yes_311;
        } else {
            goto branch_no_311;
        }
    }
    branch_yes_311:;
    {
        PyObject *tmp_raise_type_78;
        PyObject *tmp_raise_value_78;
        PyObject *tmp_left_value_78;
        PyObject *tmp_right_value_78;
        PyObject *tmp_tuple_element_309;
        PyObject *tmp_getattr_target_78;
        PyObject *tmp_getattr_attr_78;
        PyObject *tmp_getattr_default_78;
        tmp_raise_type_78 = PyExc_TypeError;
        tmp_left_value_78 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_78__metaclass);
        tmp_getattr_target_78 = tmp_class_creation_78__metaclass;
        tmp_getattr_attr_78 = mod_consts[210];
        tmp_getattr_default_78 = mod_consts[211];
        tmp_tuple_element_309 = BUILTIN_GETATTR(tmp_getattr_target_78, tmp_getattr_attr_78, tmp_getattr_default_78);
        if (tmp_tuple_element_309 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        tmp_right_value_78 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_390;
            PyObject *tmp_type_arg_156;
            PyTuple_SET_ITEM(tmp_right_value_78, 0, tmp_tuple_element_309);
            CHECK_OBJECT(tmp_class_creation_78__prepared);
            tmp_type_arg_156 = tmp_class_creation_78__prepared;
            tmp_expression_value_390 = BUILTIN_TYPE1(tmp_type_arg_156);
            assert(!(tmp_expression_value_390 == NULL));
            tmp_tuple_element_309 = LOOKUP_ATTRIBUTE(tmp_expression_value_390, mod_consts[210]);
            Py_DECREF(tmp_expression_value_390);
            if (tmp_tuple_element_309 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2399;

                goto tuple_build_exception_78;
            }
            PyTuple_SET_ITEM(tmp_right_value_78, 1, tmp_tuple_element_309);
        }
        goto tuple_build_noexception_78;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_78:;
        Py_DECREF(tmp_right_value_78);
        goto try_except_handler_234;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_78:;
        tmp_raise_value_78 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_78, tmp_right_value_78);
        Py_DECREF(tmp_right_value_78);
        if (tmp_raise_value_78 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_234;
        }
        exception_type = tmp_raise_type_78;
        Py_INCREF(tmp_raise_type_78);
        exception_value = tmp_raise_value_78;
        exception_lineno = 2399;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_234;
    }
    branch_no_311:;
    goto branch_end_310;
    branch_no_310:;
    {
        PyObject *tmp_assign_source_635;
        tmp_assign_source_635 = PyDict_New();
        assert(tmp_class_creation_78__prepared == NULL);
        tmp_class_creation_78__prepared = tmp_assign_source_635;
    }
    branch_end_310:;
    {
        PyObject *tmp_assign_source_636;
        {
            PyObject *tmp_set_locals_78;
            CHECK_OBJECT(tmp_class_creation_78__prepared);
            tmp_set_locals_78 = tmp_class_creation_78__prepared;
            locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399 = tmp_set_locals_78;
            Py_INCREF(tmp_set_locals_78);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_236;
        }
        tmp_dictset_value = mod_consts[538];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_236;
        }
        tmp_dictset_value = mod_consts[537];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_236;
        }
        if (isFrameUnusable(cache_frame_418ffe1546171364aabe614fca25901a_79)) {
            Py_XDECREF(cache_frame_418ffe1546171364aabe614fca25901a_79);

#if _DEBUG_REFCOUNTS
            if (cache_frame_418ffe1546171364aabe614fca25901a_79 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_418ffe1546171364aabe614fca25901a_79 = MAKE_FUNCTION_FRAME(codeobj_418ffe1546171364aabe614fca25901a, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_418ffe1546171364aabe614fca25901a_79->m_type_description == NULL);
        frame_418ffe1546171364aabe614fca25901a_79 = cache_frame_418ffe1546171364aabe614fca25901a_79;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_418ffe1546171364aabe614fca25901a_79);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_418ffe1546171364aabe614fca25901a_79) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__91___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2411;
            type_description_2 = "o";
            goto frame_exception_exit_79;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_418ffe1546171364aabe614fca25901a_79);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_78;

        frame_exception_exit_79:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_418ffe1546171364aabe614fca25901a_79);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_418ffe1546171364aabe614fca25901a_79, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_418ffe1546171364aabe614fca25901a_79->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_418ffe1546171364aabe614fca25901a_79, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_418ffe1546171364aabe614fca25901a_79,
            type_description_2,
            outline_77_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_418ffe1546171364aabe614fca25901a_79 == cache_frame_418ffe1546171364aabe614fca25901a_79) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_418ffe1546171364aabe614fca25901a_79);
            cache_frame_418ffe1546171364aabe614fca25901a_79 = NULL;
        }

        assertFrameObject(frame_418ffe1546171364aabe614fca25901a_79);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_78;

        frame_no_exception_78:;
        goto skip_nested_handling_78;
        nested_frame_exit_78:;

        goto try_except_handler_236;
        skip_nested_handling_78:;
        {
            nuitka_bool tmp_condition_result_468;
            PyObject *tmp_cmp_expr_left_78;
            PyObject *tmp_cmp_expr_right_78;
            CHECK_OBJECT(tmp_class_creation_78__bases);
            tmp_cmp_expr_left_78 = tmp_class_creation_78__bases;
            CHECK_OBJECT(tmp_class_creation_78__bases_orig);
            tmp_cmp_expr_right_78 = tmp_class_creation_78__bases_orig;
            tmp_condition_result_468 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_78, tmp_cmp_expr_right_78);
            if (tmp_condition_result_468 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2399;

                goto try_except_handler_236;
            }
            if (tmp_condition_result_468 == NUITKA_BOOL_TRUE) {
                goto branch_yes_312;
            } else {
                goto branch_no_312;
            }
            assert(tmp_condition_result_468 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_312:;
        CHECK_OBJECT(tmp_class_creation_78__bases_orig);
        tmp_dictset_value = tmp_class_creation_78__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2399;

            goto try_except_handler_236;
        }
        branch_no_312:;
        {
            PyObject *tmp_assign_source_637;
            PyObject *tmp_called_value_156;
            PyObject *tmp_args_value_156;
            PyObject *tmp_tuple_element_310;
            PyObject *tmp_kwargs_value_156;
            CHECK_OBJECT(tmp_class_creation_78__metaclass);
            tmp_called_value_156 = tmp_class_creation_78__metaclass;
            tmp_tuple_element_310 = mod_consts[537];
            tmp_args_value_156 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_156, 0, tmp_tuple_element_310);
            CHECK_OBJECT(tmp_class_creation_78__bases);
            tmp_tuple_element_310 = tmp_class_creation_78__bases;
            PyTuple_SET_ITEM0(tmp_args_value_156, 1, tmp_tuple_element_310);
            tmp_tuple_element_310 = locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399;
            PyTuple_SET_ITEM0(tmp_args_value_156, 2, tmp_tuple_element_310);
            CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
            tmp_kwargs_value_156 = tmp_class_creation_78__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2399;
            tmp_assign_source_637 = CALL_FUNCTION(tmp_called_value_156, tmp_args_value_156, tmp_kwargs_value_156);
            Py_DECREF(tmp_args_value_156);
            if (tmp_assign_source_637 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2399;

                goto try_except_handler_236;
            }
            assert(outline_77_var___class__ == NULL);
            outline_77_var___class__ = tmp_assign_source_637;
        }
        CHECK_OBJECT(outline_77_var___class__);
        tmp_assign_source_636 = outline_77_var___class__;
        Py_INCREF(tmp_assign_source_636);
        goto try_return_handler_236;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_236:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399);
        locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399 = NULL;
        goto try_return_handler_235;
        // Exception handler code:
        try_except_handler_236:;
        exception_keeper_type_234 = exception_type;
        exception_keeper_value_234 = exception_value;
        exception_keeper_tb_234 = exception_tb;
        exception_keeper_lineno_234 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399);
        locals_xlwt$BIFFRecords$$$class__78_InternalReferenceSupBookRecord_2399 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_234;
        exception_value = exception_keeper_value_234;
        exception_tb = exception_keeper_tb_234;
        exception_lineno = exception_keeper_lineno_234;

        goto try_except_handler_235;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_235:;
        CHECK_OBJECT(outline_77_var___class__);
        Py_DECREF(outline_77_var___class__);
        outline_77_var___class__ = NULL;
        goto outline_result_78;
        // Exception handler code:
        try_except_handler_235:;
        exception_keeper_type_235 = exception_type;
        exception_keeper_value_235 = exception_value;
        exception_keeper_tb_235 = exception_tb;
        exception_keeper_lineno_235 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_235;
        exception_value = exception_keeper_value_235;
        exception_tb = exception_keeper_tb_235;
        exception_lineno = exception_keeper_lineno_235;

        goto outline_exception_78;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_78:;
        exception_lineno = 2399;
        goto try_except_handler_234;
        outline_result_78:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[537], tmp_assign_source_636);
    }
    goto try_end_80;
    // Exception handler code:
    try_except_handler_234:;
    exception_keeper_type_236 = exception_type;
    exception_keeper_value_236 = exception_value;
    exception_keeper_tb_236 = exception_tb;
    exception_keeper_lineno_236 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_78__bases_orig);
    tmp_class_creation_78__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_78__bases);
    tmp_class_creation_78__bases = NULL;
    Py_XDECREF(tmp_class_creation_78__class_decl_dict);
    tmp_class_creation_78__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_78__metaclass);
    tmp_class_creation_78__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_78__prepared);
    tmp_class_creation_78__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_236;
    exception_value = exception_keeper_value_236;
    exception_tb = exception_keeper_tb_236;
    exception_lineno = exception_keeper_lineno_236;

    goto frame_exception_exit_1;
    // End of try:
    try_end_80:;
    CHECK_OBJECT(tmp_class_creation_78__bases_orig);
    Py_DECREF(tmp_class_creation_78__bases_orig);
    tmp_class_creation_78__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_78__bases);
    Py_DECREF(tmp_class_creation_78__bases);
    tmp_class_creation_78__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_78__class_decl_dict);
    Py_DECREF(tmp_class_creation_78__class_decl_dict);
    tmp_class_creation_78__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_78__metaclass);
    Py_DECREF(tmp_class_creation_78__metaclass);
    tmp_class_creation_78__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_78__prepared);
    Py_DECREF(tmp_class_creation_78__prepared);
    tmp_class_creation_78__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_638;
        PyObject *tmp_tuple_element_311;
        tmp_tuple_element_311 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[534]);

        if (unlikely(tmp_tuple_element_311 == NULL)) {
            tmp_tuple_element_311 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[534]);
        }

        if (tmp_tuple_element_311 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        tmp_assign_source_638 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_638, 0, tmp_tuple_element_311);
        assert(tmp_class_creation_79__bases_orig == NULL);
        tmp_class_creation_79__bases_orig = tmp_assign_source_638;
    }
    {
        PyObject *tmp_assign_source_639;
        PyObject *tmp_dircall_arg1_79;
        CHECK_OBJECT(tmp_class_creation_79__bases_orig);
        tmp_dircall_arg1_79 = tmp_class_creation_79__bases_orig;
        Py_INCREF(tmp_dircall_arg1_79);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_79};
            tmp_assign_source_639 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_639 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        assert(tmp_class_creation_79__bases == NULL);
        tmp_class_creation_79__bases = tmp_assign_source_639;
    }
    {
        PyObject *tmp_assign_source_640;
        tmp_assign_source_640 = PyDict_New();
        assert(tmp_class_creation_79__class_decl_dict == NULL);
        tmp_class_creation_79__class_decl_dict = tmp_assign_source_640;
    }
    {
        PyObject *tmp_assign_source_641;
        PyObject *tmp_metaclass_value_79;
        bool tmp_condition_result_469;
        PyObject *tmp_key_value_235;
        PyObject *tmp_dict_arg_value_235;
        PyObject *tmp_dict_arg_value_236;
        PyObject *tmp_key_value_236;
        nuitka_bool tmp_condition_result_470;
        int tmp_truth_name_79;
        PyObject *tmp_type_arg_157;
        PyObject *tmp_expression_value_391;
        PyObject *tmp_subscript_value_79;
        PyObject *tmp_bases_value_79;
        tmp_key_value_235 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_79__class_decl_dict);
        tmp_dict_arg_value_235 = tmp_class_creation_79__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_235, tmp_key_value_235);
        assert(!(tmp_res == -1));
        tmp_condition_result_469 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_469 != false) {
            goto condexpr_true_157;
        } else {
            goto condexpr_false_157;
        }
        condexpr_true_157:;
        CHECK_OBJECT(tmp_class_creation_79__class_decl_dict);
        tmp_dict_arg_value_236 = tmp_class_creation_79__class_decl_dict;
        tmp_key_value_236 = mod_consts[205];
        tmp_metaclass_value_79 = DICT_GET_ITEM0(tmp_dict_arg_value_236, tmp_key_value_236);
        if (tmp_metaclass_value_79 == NULL) {
            tmp_metaclass_value_79 = Py_None;
        }
        assert(!(tmp_metaclass_value_79 == NULL));
        Py_INCREF(tmp_metaclass_value_79);
        goto condexpr_end_157;
        condexpr_false_157:;
        CHECK_OBJECT(tmp_class_creation_79__bases);
        tmp_truth_name_79 = CHECK_IF_TRUE(tmp_class_creation_79__bases);
        if (tmp_truth_name_79 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        tmp_condition_result_470 = tmp_truth_name_79 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_470 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_158;
        } else {
            goto condexpr_false_158;
        }
        condexpr_true_158:;
        CHECK_OBJECT(tmp_class_creation_79__bases);
        tmp_expression_value_391 = tmp_class_creation_79__bases;
        tmp_subscript_value_79 = mod_consts[4];
        tmp_type_arg_157 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_391, tmp_subscript_value_79, 0);
        if (tmp_type_arg_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        tmp_metaclass_value_79 = BUILTIN_TYPE1(tmp_type_arg_157);
        Py_DECREF(tmp_type_arg_157);
        if (tmp_metaclass_value_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        goto condexpr_end_158;
        condexpr_false_158:;
        tmp_metaclass_value_79 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_79);
        condexpr_end_158:;
        condexpr_end_157:;
        CHECK_OBJECT(tmp_class_creation_79__bases);
        tmp_bases_value_79 = tmp_class_creation_79__bases;
        tmp_assign_source_641 = SELECT_METACLASS(tmp_metaclass_value_79, tmp_bases_value_79);
        Py_DECREF(tmp_metaclass_value_79);
        if (tmp_assign_source_641 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        assert(tmp_class_creation_79__metaclass == NULL);
        tmp_class_creation_79__metaclass = tmp_assign_source_641;
    }
    {
        bool tmp_condition_result_471;
        PyObject *tmp_key_value_237;
        PyObject *tmp_dict_arg_value_237;
        tmp_key_value_237 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_79__class_decl_dict);
        tmp_dict_arg_value_237 = tmp_class_creation_79__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_237, tmp_key_value_237);
        assert(!(tmp_res == -1));
        tmp_condition_result_471 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_471 != false) {
            goto branch_yes_313;
        } else {
            goto branch_no_313;
        }
    }
    branch_yes_313:;
    CHECK_OBJECT(tmp_class_creation_79__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_79__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2414;

        goto try_except_handler_237;
    }
    branch_no_313:;
    {
        nuitka_bool tmp_condition_result_472;
        PyObject *tmp_expression_value_392;
        CHECK_OBJECT(tmp_class_creation_79__metaclass);
        tmp_expression_value_392 = tmp_class_creation_79__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_392, mod_consts[206]);
        tmp_condition_result_472 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_472 == NUITKA_BOOL_TRUE) {
            goto branch_yes_314;
        } else {
            goto branch_no_314;
        }
    }
    branch_yes_314:;
    {
        PyObject *tmp_assign_source_642;
        PyObject *tmp_called_value_157;
        PyObject *tmp_expression_value_393;
        PyObject *tmp_args_value_157;
        PyObject *tmp_tuple_element_312;
        PyObject *tmp_kwargs_value_157;
        CHECK_OBJECT(tmp_class_creation_79__metaclass);
        tmp_expression_value_393 = tmp_class_creation_79__metaclass;
        tmp_called_value_157 = LOOKUP_ATTRIBUTE(tmp_expression_value_393, mod_consts[206]);
        if (tmp_called_value_157 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        tmp_tuple_element_312 = mod_consts[540];
        tmp_args_value_157 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_157, 0, tmp_tuple_element_312);
        CHECK_OBJECT(tmp_class_creation_79__bases);
        tmp_tuple_element_312 = tmp_class_creation_79__bases;
        PyTuple_SET_ITEM0(tmp_args_value_157, 1, tmp_tuple_element_312);
        CHECK_OBJECT(tmp_class_creation_79__class_decl_dict);
        tmp_kwargs_value_157 = tmp_class_creation_79__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2414;
        tmp_assign_source_642 = CALL_FUNCTION(tmp_called_value_157, tmp_args_value_157, tmp_kwargs_value_157);
        Py_DECREF(tmp_called_value_157);
        Py_DECREF(tmp_args_value_157);
        if (tmp_assign_source_642 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        assert(tmp_class_creation_79__prepared == NULL);
        tmp_class_creation_79__prepared = tmp_assign_source_642;
    }
    {
        bool tmp_condition_result_473;
        PyObject *tmp_operand_value_79;
        PyObject *tmp_expression_value_394;
        CHECK_OBJECT(tmp_class_creation_79__prepared);
        tmp_expression_value_394 = tmp_class_creation_79__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_394, mod_consts[208]);
        tmp_operand_value_79 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_79);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        tmp_condition_result_473 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_473 != false) {
            goto branch_yes_315;
        } else {
            goto branch_no_315;
        }
    }
    branch_yes_315:;
    {
        PyObject *tmp_raise_type_79;
        PyObject *tmp_raise_value_79;
        PyObject *tmp_left_value_79;
        PyObject *tmp_right_value_79;
        PyObject *tmp_tuple_element_313;
        PyObject *tmp_getattr_target_79;
        PyObject *tmp_getattr_attr_79;
        PyObject *tmp_getattr_default_79;
        tmp_raise_type_79 = PyExc_TypeError;
        tmp_left_value_79 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_79__metaclass);
        tmp_getattr_target_79 = tmp_class_creation_79__metaclass;
        tmp_getattr_attr_79 = mod_consts[210];
        tmp_getattr_default_79 = mod_consts[211];
        tmp_tuple_element_313 = BUILTIN_GETATTR(tmp_getattr_target_79, tmp_getattr_attr_79, tmp_getattr_default_79);
        if (tmp_tuple_element_313 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        tmp_right_value_79 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_395;
            PyObject *tmp_type_arg_158;
            PyTuple_SET_ITEM(tmp_right_value_79, 0, tmp_tuple_element_313);
            CHECK_OBJECT(tmp_class_creation_79__prepared);
            tmp_type_arg_158 = tmp_class_creation_79__prepared;
            tmp_expression_value_395 = BUILTIN_TYPE1(tmp_type_arg_158);
            assert(!(tmp_expression_value_395 == NULL));
            tmp_tuple_element_313 = LOOKUP_ATTRIBUTE(tmp_expression_value_395, mod_consts[210]);
            Py_DECREF(tmp_expression_value_395);
            if (tmp_tuple_element_313 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2414;

                goto tuple_build_exception_79;
            }
            PyTuple_SET_ITEM(tmp_right_value_79, 1, tmp_tuple_element_313);
        }
        goto tuple_build_noexception_79;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_79:;
        Py_DECREF(tmp_right_value_79);
        goto try_except_handler_237;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_79:;
        tmp_raise_value_79 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_79, tmp_right_value_79);
        Py_DECREF(tmp_right_value_79);
        if (tmp_raise_value_79 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_237;
        }
        exception_type = tmp_raise_type_79;
        Py_INCREF(tmp_raise_type_79);
        exception_value = tmp_raise_value_79;
        exception_lineno = 2414;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_237;
    }
    branch_no_315:;
    goto branch_end_314;
    branch_no_314:;
    {
        PyObject *tmp_assign_source_643;
        tmp_assign_source_643 = PyDict_New();
        assert(tmp_class_creation_79__prepared == NULL);
        tmp_class_creation_79__prepared = tmp_assign_source_643;
    }
    branch_end_314:;
    {
        PyObject *tmp_assign_source_644;
        {
            PyObject *tmp_set_locals_79;
            CHECK_OBJECT(tmp_class_creation_79__prepared);
            tmp_set_locals_79 = tmp_class_creation_79__prepared;
            locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414 = tmp_set_locals_79;
            Py_INCREF(tmp_set_locals_79);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_239;
        }
        tmp_dictset_value = mod_consts[541];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_239;
        }
        tmp_dictset_value = mod_consts[540];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_239;
        }
        if (isFrameUnusable(cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80)) {
            Py_XDECREF(cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80);

#if _DEBUG_REFCOUNTS
            if (cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80 = MAKE_FUNCTION_FRAME(codeobj_c66154f52b7ee4ea1e98d18dee65f508, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80->m_type_description == NULL);
        frame_c66154f52b7ee4ea1e98d18dee65f508_80 = cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_c66154f52b7ee4ea1e98d18dee65f508_80);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_c66154f52b7ee4ea1e98d18dee65f508_80) == 2); // Frame stack

        // Framed code:


        tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__92___init__();

        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414, mod_consts[216], tmp_dictset_value);
        Py_DECREF(tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2424;
            type_description_2 = "o";
            goto frame_exception_exit_80;
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c66154f52b7ee4ea1e98d18dee65f508_80);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_79;

        frame_exception_exit_80:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_c66154f52b7ee4ea1e98d18dee65f508_80);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_c66154f52b7ee4ea1e98d18dee65f508_80, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_c66154f52b7ee4ea1e98d18dee65f508_80->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_c66154f52b7ee4ea1e98d18dee65f508_80, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_c66154f52b7ee4ea1e98d18dee65f508_80,
            type_description_2,
            outline_78_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_c66154f52b7ee4ea1e98d18dee65f508_80 == cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80);
            cache_frame_c66154f52b7ee4ea1e98d18dee65f508_80 = NULL;
        }

        assertFrameObject(frame_c66154f52b7ee4ea1e98d18dee65f508_80);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_79;

        frame_no_exception_79:;
        goto skip_nested_handling_79;
        nested_frame_exit_79:;

        goto try_except_handler_239;
        skip_nested_handling_79:;
        {
            nuitka_bool tmp_condition_result_474;
            PyObject *tmp_cmp_expr_left_79;
            PyObject *tmp_cmp_expr_right_79;
            CHECK_OBJECT(tmp_class_creation_79__bases);
            tmp_cmp_expr_left_79 = tmp_class_creation_79__bases;
            CHECK_OBJECT(tmp_class_creation_79__bases_orig);
            tmp_cmp_expr_right_79 = tmp_class_creation_79__bases_orig;
            tmp_condition_result_474 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_79, tmp_cmp_expr_right_79);
            if (tmp_condition_result_474 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2414;

                goto try_except_handler_239;
            }
            if (tmp_condition_result_474 == NUITKA_BOOL_TRUE) {
                goto branch_yes_316;
            } else {
                goto branch_no_316;
            }
            assert(tmp_condition_result_474 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_316:;
        CHECK_OBJECT(tmp_class_creation_79__bases_orig);
        tmp_dictset_value = tmp_class_creation_79__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2414;

            goto try_except_handler_239;
        }
        branch_no_316:;
        {
            PyObject *tmp_assign_source_645;
            PyObject *tmp_called_value_158;
            PyObject *tmp_args_value_158;
            PyObject *tmp_tuple_element_314;
            PyObject *tmp_kwargs_value_158;
            CHECK_OBJECT(tmp_class_creation_79__metaclass);
            tmp_called_value_158 = tmp_class_creation_79__metaclass;
            tmp_tuple_element_314 = mod_consts[540];
            tmp_args_value_158 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_158, 0, tmp_tuple_element_314);
            CHECK_OBJECT(tmp_class_creation_79__bases);
            tmp_tuple_element_314 = tmp_class_creation_79__bases;
            PyTuple_SET_ITEM0(tmp_args_value_158, 1, tmp_tuple_element_314);
            tmp_tuple_element_314 = locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414;
            PyTuple_SET_ITEM0(tmp_args_value_158, 2, tmp_tuple_element_314);
            CHECK_OBJECT(tmp_class_creation_79__class_decl_dict);
            tmp_kwargs_value_158 = tmp_class_creation_79__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2414;
            tmp_assign_source_645 = CALL_FUNCTION(tmp_called_value_158, tmp_args_value_158, tmp_kwargs_value_158);
            Py_DECREF(tmp_args_value_158);
            if (tmp_assign_source_645 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2414;

                goto try_except_handler_239;
            }
            assert(outline_78_var___class__ == NULL);
            outline_78_var___class__ = tmp_assign_source_645;
        }
        CHECK_OBJECT(outline_78_var___class__);
        tmp_assign_source_644 = outline_78_var___class__;
        Py_INCREF(tmp_assign_source_644);
        goto try_return_handler_239;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_239:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414);
        locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414 = NULL;
        goto try_return_handler_238;
        // Exception handler code:
        try_except_handler_239:;
        exception_keeper_type_237 = exception_type;
        exception_keeper_value_237 = exception_value;
        exception_keeper_tb_237 = exception_tb;
        exception_keeper_lineno_237 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414);
        locals_xlwt$BIFFRecords$$$class__79_XcallSupBookRecord_2414 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_237;
        exception_value = exception_keeper_value_237;
        exception_tb = exception_keeper_tb_237;
        exception_lineno = exception_keeper_lineno_237;

        goto try_except_handler_238;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_238:;
        CHECK_OBJECT(outline_78_var___class__);
        Py_DECREF(outline_78_var___class__);
        outline_78_var___class__ = NULL;
        goto outline_result_79;
        // Exception handler code:
        try_except_handler_238:;
        exception_keeper_type_238 = exception_type;
        exception_keeper_value_238 = exception_value;
        exception_keeper_tb_238 = exception_tb;
        exception_keeper_lineno_238 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_238;
        exception_value = exception_keeper_value_238;
        exception_tb = exception_keeper_tb_238;
        exception_lineno = exception_keeper_lineno_238;

        goto outline_exception_79;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_79:;
        exception_lineno = 2414;
        goto try_except_handler_237;
        outline_result_79:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[540], tmp_assign_source_644);
    }
    goto try_end_81;
    // Exception handler code:
    try_except_handler_237:;
    exception_keeper_type_239 = exception_type;
    exception_keeper_value_239 = exception_value;
    exception_keeper_tb_239 = exception_tb;
    exception_keeper_lineno_239 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_79__bases_orig);
    tmp_class_creation_79__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_79__bases);
    tmp_class_creation_79__bases = NULL;
    Py_XDECREF(tmp_class_creation_79__class_decl_dict);
    tmp_class_creation_79__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_79__metaclass);
    tmp_class_creation_79__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_79__prepared);
    tmp_class_creation_79__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_239;
    exception_value = exception_keeper_value_239;
    exception_tb = exception_keeper_tb_239;
    exception_lineno = exception_keeper_lineno_239;

    goto frame_exception_exit_1;
    // End of try:
    try_end_81:;
    CHECK_OBJECT(tmp_class_creation_79__bases_orig);
    Py_DECREF(tmp_class_creation_79__bases_orig);
    tmp_class_creation_79__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_79__bases);
    Py_DECREF(tmp_class_creation_79__bases);
    tmp_class_creation_79__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_79__class_decl_dict);
    Py_DECREF(tmp_class_creation_79__class_decl_dict);
    tmp_class_creation_79__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_79__metaclass);
    Py_DECREF(tmp_class_creation_79__metaclass);
    tmp_class_creation_79__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_79__prepared);
    Py_DECREF(tmp_class_creation_79__prepared);
    tmp_class_creation_79__prepared = NULL;
    // Tried code:
    {
        PyObject *tmp_assign_source_646;
        PyObject *tmp_tuple_element_315;
        tmp_tuple_element_315 = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[236]);

        if (unlikely(tmp_tuple_element_315 == NULL)) {
            tmp_tuple_element_315 = GET_MODULE_VARIABLE_VALUE_FALLBACK(mod_consts[236]);
        }

        if (tmp_tuple_element_315 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        tmp_assign_source_646 = PyTuple_New(1);
        PyTuple_SET_ITEM0(tmp_assign_source_646, 0, tmp_tuple_element_315);
        assert(tmp_class_creation_80__bases_orig == NULL);
        tmp_class_creation_80__bases_orig = tmp_assign_source_646;
    }
    {
        PyObject *tmp_assign_source_647;
        PyObject *tmp_dircall_arg1_80;
        CHECK_OBJECT(tmp_class_creation_80__bases_orig);
        tmp_dircall_arg1_80 = tmp_class_creation_80__bases_orig;
        Py_INCREF(tmp_dircall_arg1_80);

        {
            PyObject *dir_call_args[] = {tmp_dircall_arg1_80};
            tmp_assign_source_647 = impl___main__$$$function__1__mro_entries_conversion(dir_call_args);
        }
        if (tmp_assign_source_647 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        assert(tmp_class_creation_80__bases == NULL);
        tmp_class_creation_80__bases = tmp_assign_source_647;
    }
    {
        PyObject *tmp_assign_source_648;
        tmp_assign_source_648 = PyDict_New();
        assert(tmp_class_creation_80__class_decl_dict == NULL);
        tmp_class_creation_80__class_decl_dict = tmp_assign_source_648;
    }
    {
        PyObject *tmp_assign_source_649;
        PyObject *tmp_metaclass_value_80;
        bool tmp_condition_result_475;
        PyObject *tmp_key_value_238;
        PyObject *tmp_dict_arg_value_238;
        PyObject *tmp_dict_arg_value_239;
        PyObject *tmp_key_value_239;
        nuitka_bool tmp_condition_result_476;
        int tmp_truth_name_80;
        PyObject *tmp_type_arg_159;
        PyObject *tmp_expression_value_396;
        PyObject *tmp_subscript_value_80;
        PyObject *tmp_bases_value_80;
        tmp_key_value_238 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_80__class_decl_dict);
        tmp_dict_arg_value_238 = tmp_class_creation_80__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_238, tmp_key_value_238);
        assert(!(tmp_res == -1));
        tmp_condition_result_475 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_475 != false) {
            goto condexpr_true_159;
        } else {
            goto condexpr_false_159;
        }
        condexpr_true_159:;
        CHECK_OBJECT(tmp_class_creation_80__class_decl_dict);
        tmp_dict_arg_value_239 = tmp_class_creation_80__class_decl_dict;
        tmp_key_value_239 = mod_consts[205];
        tmp_metaclass_value_80 = DICT_GET_ITEM0(tmp_dict_arg_value_239, tmp_key_value_239);
        if (tmp_metaclass_value_80 == NULL) {
            tmp_metaclass_value_80 = Py_None;
        }
        assert(!(tmp_metaclass_value_80 == NULL));
        Py_INCREF(tmp_metaclass_value_80);
        goto condexpr_end_159;
        condexpr_false_159:;
        CHECK_OBJECT(tmp_class_creation_80__bases);
        tmp_truth_name_80 = CHECK_IF_TRUE(tmp_class_creation_80__bases);
        if (tmp_truth_name_80 == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        tmp_condition_result_476 = tmp_truth_name_80 == 0 ? NUITKA_BOOL_FALSE : NUITKA_BOOL_TRUE;
        if (tmp_condition_result_476 == NUITKA_BOOL_TRUE) {
            goto condexpr_true_160;
        } else {
            goto condexpr_false_160;
        }
        condexpr_true_160:;
        CHECK_OBJECT(tmp_class_creation_80__bases);
        tmp_expression_value_396 = tmp_class_creation_80__bases;
        tmp_subscript_value_80 = mod_consts[4];
        tmp_type_arg_159 = LOOKUP_SUBSCRIPT_CONST(tmp_expression_value_396, tmp_subscript_value_80, 0);
        if (tmp_type_arg_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        tmp_metaclass_value_80 = BUILTIN_TYPE1(tmp_type_arg_159);
        Py_DECREF(tmp_type_arg_159);
        if (tmp_metaclass_value_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        goto condexpr_end_160;
        condexpr_false_160:;
        tmp_metaclass_value_80 = (PyObject *)&PyType_Type;
        Py_INCREF(tmp_metaclass_value_80);
        condexpr_end_160:;
        condexpr_end_159:;
        CHECK_OBJECT(tmp_class_creation_80__bases);
        tmp_bases_value_80 = tmp_class_creation_80__bases;
        tmp_assign_source_649 = SELECT_METACLASS(tmp_metaclass_value_80, tmp_bases_value_80);
        Py_DECREF(tmp_metaclass_value_80);
        if (tmp_assign_source_649 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        assert(tmp_class_creation_80__metaclass == NULL);
        tmp_class_creation_80__metaclass = tmp_assign_source_649;
    }
    {
        bool tmp_condition_result_477;
        PyObject *tmp_key_value_240;
        PyObject *tmp_dict_arg_value_240;
        tmp_key_value_240 = mod_consts[205];
        CHECK_OBJECT(tmp_class_creation_80__class_decl_dict);
        tmp_dict_arg_value_240 = tmp_class_creation_80__class_decl_dict;
        tmp_res = DICT_HAS_ITEM(tmp_dict_arg_value_240, tmp_key_value_240);
        assert(!(tmp_res == -1));
        tmp_condition_result_477 = (tmp_res != 0) ? true : false;
        if (tmp_condition_result_477 != false) {
            goto branch_yes_317;
        } else {
            goto branch_no_317;
        }
    }
    branch_yes_317:;
    CHECK_OBJECT(tmp_class_creation_80__class_decl_dict);
    tmp_dictdel_dict = tmp_class_creation_80__class_decl_dict;
    tmp_dictdel_key = mod_consts[205];
    tmp_result = DICT_REMOVE_ITEM(tmp_dictdel_dict, tmp_dictdel_key);
    if (tmp_result == false) {
        assert(ERROR_OCCURRED());

        FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


        exception_lineno = 2428;

        goto try_except_handler_240;
    }
    branch_no_317:;
    {
        nuitka_bool tmp_condition_result_478;
        PyObject *tmp_expression_value_397;
        CHECK_OBJECT(tmp_class_creation_80__metaclass);
        tmp_expression_value_397 = tmp_class_creation_80__metaclass;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_397, mod_consts[206]);
        tmp_condition_result_478 = (tmp_result) ? NUITKA_BOOL_TRUE : NUITKA_BOOL_FALSE;
        if (tmp_condition_result_478 == NUITKA_BOOL_TRUE) {
            goto branch_yes_318;
        } else {
            goto branch_no_318;
        }
    }
    branch_yes_318:;
    {
        PyObject *tmp_assign_source_650;
        PyObject *tmp_called_value_159;
        PyObject *tmp_expression_value_398;
        PyObject *tmp_args_value_159;
        PyObject *tmp_tuple_element_316;
        PyObject *tmp_kwargs_value_159;
        CHECK_OBJECT(tmp_class_creation_80__metaclass);
        tmp_expression_value_398 = tmp_class_creation_80__metaclass;
        tmp_called_value_159 = LOOKUP_ATTRIBUTE(tmp_expression_value_398, mod_consts[206]);
        if (tmp_called_value_159 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        tmp_tuple_element_316 = mod_consts[543];
        tmp_args_value_159 = PyTuple_New(2);
        PyTuple_SET_ITEM0(tmp_args_value_159, 0, tmp_tuple_element_316);
        CHECK_OBJECT(tmp_class_creation_80__bases);
        tmp_tuple_element_316 = tmp_class_creation_80__bases;
        PyTuple_SET_ITEM0(tmp_args_value_159, 1, tmp_tuple_element_316);
        CHECK_OBJECT(tmp_class_creation_80__class_decl_dict);
        tmp_kwargs_value_159 = tmp_class_creation_80__class_decl_dict;
        frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2428;
        tmp_assign_source_650 = CALL_FUNCTION(tmp_called_value_159, tmp_args_value_159, tmp_kwargs_value_159);
        Py_DECREF(tmp_called_value_159);
        Py_DECREF(tmp_args_value_159);
        if (tmp_assign_source_650 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        assert(tmp_class_creation_80__prepared == NULL);
        tmp_class_creation_80__prepared = tmp_assign_source_650;
    }
    {
        bool tmp_condition_result_479;
        PyObject *tmp_operand_value_80;
        PyObject *tmp_expression_value_399;
        CHECK_OBJECT(tmp_class_creation_80__prepared);
        tmp_expression_value_399 = tmp_class_creation_80__prepared;
        tmp_result = HAS_ATTR_BOOL(tmp_expression_value_399, mod_consts[208]);
        tmp_operand_value_80 = (tmp_result) ? Py_True : Py_False;
        tmp_res = CHECK_IF_TRUE(tmp_operand_value_80);
        if (tmp_res == -1) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        tmp_condition_result_479 = (tmp_res == 0) ? true : false;
        if (tmp_condition_result_479 != false) {
            goto branch_yes_319;
        } else {
            goto branch_no_319;
        }
    }
    branch_yes_319:;
    {
        PyObject *tmp_raise_type_80;
        PyObject *tmp_raise_value_80;
        PyObject *tmp_left_value_80;
        PyObject *tmp_right_value_80;
        PyObject *tmp_tuple_element_317;
        PyObject *tmp_getattr_target_80;
        PyObject *tmp_getattr_attr_80;
        PyObject *tmp_getattr_default_80;
        tmp_raise_type_80 = PyExc_TypeError;
        tmp_left_value_80 = mod_consts[209];
        CHECK_OBJECT(tmp_class_creation_80__metaclass);
        tmp_getattr_target_80 = tmp_class_creation_80__metaclass;
        tmp_getattr_attr_80 = mod_consts[210];
        tmp_getattr_default_80 = mod_consts[211];
        tmp_tuple_element_317 = BUILTIN_GETATTR(tmp_getattr_target_80, tmp_getattr_attr_80, tmp_getattr_default_80);
        if (tmp_tuple_element_317 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        tmp_right_value_80 = PyTuple_New(2);
        {
            PyObject *tmp_expression_value_400;
            PyObject *tmp_type_arg_160;
            PyTuple_SET_ITEM(tmp_right_value_80, 0, tmp_tuple_element_317);
            CHECK_OBJECT(tmp_class_creation_80__prepared);
            tmp_type_arg_160 = tmp_class_creation_80__prepared;
            tmp_expression_value_400 = BUILTIN_TYPE1(tmp_type_arg_160);
            assert(!(tmp_expression_value_400 == NULL));
            tmp_tuple_element_317 = LOOKUP_ATTRIBUTE(tmp_expression_value_400, mod_consts[210]);
            Py_DECREF(tmp_expression_value_400);
            if (tmp_tuple_element_317 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2428;

                goto tuple_build_exception_80;
            }
            PyTuple_SET_ITEM(tmp_right_value_80, 1, tmp_tuple_element_317);
        }
        goto tuple_build_noexception_80;
        // Exception handling pass through code for tuple_build:
        tuple_build_exception_80:;
        Py_DECREF(tmp_right_value_80);
        goto try_except_handler_240;
        // Finished with no exception for tuple_build:
        tuple_build_noexception_80:;
        tmp_raise_value_80 = BINARY_OPERATION_MOD_OBJECT_UNICODE_TUPLE(tmp_left_value_80, tmp_right_value_80);
        Py_DECREF(tmp_right_value_80);
        if (tmp_raise_value_80 == NULL) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_240;
        }
        exception_type = tmp_raise_type_80;
        Py_INCREF(tmp_raise_type_80);
        exception_value = tmp_raise_value_80;
        exception_lineno = 2428;
        RAISE_EXCEPTION_IMPLICIT(&exception_type, &exception_value, &exception_tb);

        goto try_except_handler_240;
    }
    branch_no_319:;
    goto branch_end_318;
    branch_no_318:;
    {
        PyObject *tmp_assign_source_651;
        tmp_assign_source_651 = PyDict_New();
        assert(tmp_class_creation_80__prepared == NULL);
        tmp_class_creation_80__prepared = tmp_assign_source_651;
    }
    branch_end_318:;
    {
        PyObject *tmp_assign_source_652;
        {
            PyObject *tmp_set_locals_80;
            CHECK_OBJECT(tmp_class_creation_80__prepared);
            tmp_set_locals_80 = tmp_class_creation_80__prepared;
            locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428 = tmp_set_locals_80;
            Py_INCREF(tmp_set_locals_80);
        }
        // Tried code:
        // Tried code:
        tmp_dictset_value = mod_consts[212];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428, mod_consts[213], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_242;
        }
        tmp_dictset_value = mod_consts[544];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428, mod_consts[192], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_242;
        }
        tmp_dictset_value = mod_consts[543];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428, mod_consts[214], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_242;
        }
        if (isFrameUnusable(cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81)) {
            Py_XDECREF(cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81);

#if _DEBUG_REFCOUNTS
            if (cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81 == NULL) {
                count_active_frame_cache_instances += 1;
            } else {
                count_released_frame_cache_instances += 1;
            }
            count_allocated_frame_cache_instances += 1;
#endif
            cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81 = MAKE_FUNCTION_FRAME(codeobj_26b6e5472ab4c32d26e93d4434d6e615, module_xlwt$BIFFRecords, sizeof(void *));
#if _DEBUG_REFCOUNTS
        } else {
            count_hit_frame_cache_instances += 1;
#endif
        }
        assert(cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81->m_type_description == NULL);
        frame_26b6e5472ab4c32d26e93d4434d6e615_81 = cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81;

        // Push the new frame as the currently active one.
        pushFrameStack(frame_26b6e5472ab4c32d26e93d4434d6e615_81);

        // Mark the frame object as in use, ref count 1 will be up for reuse.
        assert(Py_REFCNT(frame_26b6e5472ab4c32d26e93d4434d6e615_81) == 2); // Frame stack

        // Framed code:
        tmp_dictset_value = mod_consts[545];
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428, mod_consts[57], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2453;
            type_description_2 = "o";
            goto frame_exception_exit_81;
        }
        {
            PyObject *tmp_defaults_6;
            tmp_defaults_6 = mod_consts[546];
            Py_INCREF(tmp_defaults_6);


            tmp_dictset_value = MAKE_FUNCTION_xlwt$BIFFRecords$$$function__93___init__(tmp_defaults_6);

            tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428, mod_consts[216], tmp_dictset_value);
            Py_DECREF(tmp_dictset_value);
            if (tmp_res != 0) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2455;
                type_description_2 = "o";
                goto frame_exception_exit_81;
            }
        }

#if 0
        RESTORE_FRAME_EXCEPTION(frame_26b6e5472ab4c32d26e93d4434d6e615_81);
#endif

        // Put the previous frame back on top.
        popFrameStack();

        goto frame_no_exception_80;

        frame_exception_exit_81:;

#if 0
        RESTORE_FRAME_EXCEPTION(frame_26b6e5472ab4c32d26e93d4434d6e615_81);
#endif

        if (exception_tb == NULL) {
            exception_tb = MAKE_TRACEBACK(frame_26b6e5472ab4c32d26e93d4434d6e615_81, exception_lineno);
        } else if (exception_tb->tb_frame != &frame_26b6e5472ab4c32d26e93d4434d6e615_81->m_frame) {
            exception_tb = ADD_TRACEBACK(exception_tb, frame_26b6e5472ab4c32d26e93d4434d6e615_81, exception_lineno);
        }

        // Attaches locals to frame if any.
        Nuitka_Frame_AttachLocals(
            frame_26b6e5472ab4c32d26e93d4434d6e615_81,
            type_description_2,
            outline_79_var___class__
        );


        // Release cached frame if used for exception.
        if (frame_26b6e5472ab4c32d26e93d4434d6e615_81 == cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81) {
#if _DEBUG_REFCOUNTS
            count_active_frame_cache_instances -= 1;
            count_released_frame_cache_instances += 1;
#endif

            Py_DECREF(cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81);
            cache_frame_26b6e5472ab4c32d26e93d4434d6e615_81 = NULL;
        }

        assertFrameObject(frame_26b6e5472ab4c32d26e93d4434d6e615_81);

        // Put the previous frame back on top.
        popFrameStack();

        // Return the error.
        goto nested_frame_exit_80;

        frame_no_exception_80:;
        goto skip_nested_handling_80;
        nested_frame_exit_80:;

        goto try_except_handler_242;
        skip_nested_handling_80:;
        {
            nuitka_bool tmp_condition_result_480;
            PyObject *tmp_cmp_expr_left_80;
            PyObject *tmp_cmp_expr_right_80;
            CHECK_OBJECT(tmp_class_creation_80__bases);
            tmp_cmp_expr_left_80 = tmp_class_creation_80__bases;
            CHECK_OBJECT(tmp_class_creation_80__bases_orig);
            tmp_cmp_expr_right_80 = tmp_class_creation_80__bases_orig;
            tmp_condition_result_480 = RICH_COMPARE_NE_NBOOL_OBJECT_TUPLE(tmp_cmp_expr_left_80, tmp_cmp_expr_right_80);
            if (tmp_condition_result_480 == NUITKA_BOOL_EXCEPTION) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2428;

                goto try_except_handler_242;
            }
            if (tmp_condition_result_480 == NUITKA_BOOL_TRUE) {
                goto branch_yes_320;
            } else {
                goto branch_no_320;
            }
            assert(tmp_condition_result_480 != NUITKA_BOOL_UNASSIGNED);
        }
        branch_yes_320:;
        CHECK_OBJECT(tmp_class_creation_80__bases_orig);
        tmp_dictset_value = tmp_class_creation_80__bases_orig;
        tmp_res = PyObject_SetItem(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428, mod_consts[235], tmp_dictset_value);
        if (tmp_res != 0) {
            assert(ERROR_OCCURRED());

            FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


            exception_lineno = 2428;

            goto try_except_handler_242;
        }
        branch_no_320:;
        {
            PyObject *tmp_assign_source_653;
            PyObject *tmp_called_value_160;
            PyObject *tmp_args_value_160;
            PyObject *tmp_tuple_element_318;
            PyObject *tmp_kwargs_value_160;
            CHECK_OBJECT(tmp_class_creation_80__metaclass);
            tmp_called_value_160 = tmp_class_creation_80__metaclass;
            tmp_tuple_element_318 = mod_consts[543];
            tmp_args_value_160 = PyTuple_New(3);
            PyTuple_SET_ITEM0(tmp_args_value_160, 0, tmp_tuple_element_318);
            CHECK_OBJECT(tmp_class_creation_80__bases);
            tmp_tuple_element_318 = tmp_class_creation_80__bases;
            PyTuple_SET_ITEM0(tmp_args_value_160, 1, tmp_tuple_element_318);
            tmp_tuple_element_318 = locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428;
            PyTuple_SET_ITEM0(tmp_args_value_160, 2, tmp_tuple_element_318);
            CHECK_OBJECT(tmp_class_creation_80__class_decl_dict);
            tmp_kwargs_value_160 = tmp_class_creation_80__class_decl_dict;
            frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame.f_lineno = 2428;
            tmp_assign_source_653 = CALL_FUNCTION(tmp_called_value_160, tmp_args_value_160, tmp_kwargs_value_160);
            Py_DECREF(tmp_args_value_160);
            if (tmp_assign_source_653 == NULL) {
                assert(ERROR_OCCURRED());

                FETCH_ERROR_OCCURRED(&exception_type, &exception_value, &exception_tb);


                exception_lineno = 2428;

                goto try_except_handler_242;
            }
            assert(outline_79_var___class__ == NULL);
            outline_79_var___class__ = tmp_assign_source_653;
        }
        CHECK_OBJECT(outline_79_var___class__);
        tmp_assign_source_652 = outline_79_var___class__;
        Py_INCREF(tmp_assign_source_652);
        goto try_return_handler_242;
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_242:;
        Py_DECREF(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428);
        locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428 = NULL;
        goto try_return_handler_241;
        // Exception handler code:
        try_except_handler_242:;
        exception_keeper_type_240 = exception_type;
        exception_keeper_value_240 = exception_value;
        exception_keeper_tb_240 = exception_tb;
        exception_keeper_lineno_240 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        Py_DECREF(locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428);
        locals_xlwt$BIFFRecords$$$class__80_ExternnameRecord_2428 = NULL;
        // Re-raise.
        exception_type = exception_keeper_type_240;
        exception_value = exception_keeper_value_240;
        exception_tb = exception_keeper_tb_240;
        exception_lineno = exception_keeper_lineno_240;

        goto try_except_handler_241;
        // End of try:
        NUITKA_CANNOT_GET_HERE("tried codes exits in all cases");
        return NULL;
        // Return handler code:
        try_return_handler_241:;
        CHECK_OBJECT(outline_79_var___class__);
        Py_DECREF(outline_79_var___class__);
        outline_79_var___class__ = NULL;
        goto outline_result_80;
        // Exception handler code:
        try_except_handler_241:;
        exception_keeper_type_241 = exception_type;
        exception_keeper_value_241 = exception_value;
        exception_keeper_tb_241 = exception_tb;
        exception_keeper_lineno_241 = exception_lineno;
        exception_type = NULL;
        exception_value = NULL;
        exception_tb = NULL;
        exception_lineno = 0;

        // Re-raise.
        exception_type = exception_keeper_type_241;
        exception_value = exception_keeper_value_241;
        exception_tb = exception_keeper_tb_241;
        exception_lineno = exception_keeper_lineno_241;

        goto outline_exception_80;
        // End of try:
        NUITKA_CANNOT_GET_HERE("Return statement must have exited already.");
        return NULL;
        outline_exception_80:;
        exception_lineno = 2428;
        goto try_except_handler_240;
        outline_result_80:;
        UPDATE_STRING_DICT1(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)mod_consts[543], tmp_assign_source_652);
    }
    goto try_end_82;
    // Exception handler code:
    try_except_handler_240:;
    exception_keeper_type_242 = exception_type;
    exception_keeper_value_242 = exception_value;
    exception_keeper_tb_242 = exception_tb;
    exception_keeper_lineno_242 = exception_lineno;
    exception_type = NULL;
    exception_value = NULL;
    exception_tb = NULL;
    exception_lineno = 0;

    Py_XDECREF(tmp_class_creation_80__bases_orig);
    tmp_class_creation_80__bases_orig = NULL;
    Py_XDECREF(tmp_class_creation_80__bases);
    tmp_class_creation_80__bases = NULL;
    Py_XDECREF(tmp_class_creation_80__class_decl_dict);
    tmp_class_creation_80__class_decl_dict = NULL;
    Py_XDECREF(tmp_class_creation_80__metaclass);
    tmp_class_creation_80__metaclass = NULL;
    Py_XDECREF(tmp_class_creation_80__prepared);
    tmp_class_creation_80__prepared = NULL;
    // Re-raise.
    exception_type = exception_keeper_type_242;
    exception_value = exception_keeper_value_242;
    exception_tb = exception_keeper_tb_242;
    exception_lineno = exception_keeper_lineno_242;

    goto frame_exception_exit_1;
    // End of try:
    try_end_82:;

    // Restore frame exception if necessary.
#if 0
    RESTORE_FRAME_EXCEPTION(frame_88dc2af7ecc241487f3fbeb03bff5bd6);
#endif
    popFrameStack();

    assertFrameObject(frame_88dc2af7ecc241487f3fbeb03bff5bd6);

    goto frame_no_exception_81;

    frame_exception_exit_1:;
#if 0
    RESTORE_FRAME_EXCEPTION(frame_88dc2af7ecc241487f3fbeb03bff5bd6);
#endif

    if (exception_tb == NULL) {
        exception_tb = MAKE_TRACEBACK(frame_88dc2af7ecc241487f3fbeb03bff5bd6, exception_lineno);
    } else if (exception_tb->tb_frame != &frame_88dc2af7ecc241487f3fbeb03bff5bd6->m_frame) {
        exception_tb = ADD_TRACEBACK(exception_tb, frame_88dc2af7ecc241487f3fbeb03bff5bd6, exception_lineno);
    }

    // Put the previous frame back on top.
    popFrameStack();

    // Return the error.
    goto module_exception_exit;

    frame_no_exception_81:;
    CHECK_OBJECT(tmp_class_creation_80__bases_orig);
    Py_DECREF(tmp_class_creation_80__bases_orig);
    tmp_class_creation_80__bases_orig = NULL;
    CHECK_OBJECT(tmp_class_creation_80__bases);
    Py_DECREF(tmp_class_creation_80__bases);
    tmp_class_creation_80__bases = NULL;
    CHECK_OBJECT(tmp_class_creation_80__class_decl_dict);
    Py_DECREF(tmp_class_creation_80__class_decl_dict);
    tmp_class_creation_80__class_decl_dict = NULL;
    CHECK_OBJECT(tmp_class_creation_80__metaclass);
    Py_DECREF(tmp_class_creation_80__metaclass);
    tmp_class_creation_80__metaclass = NULL;
    CHECK_OBJECT(tmp_class_creation_80__prepared);
    Py_DECREF(tmp_class_creation_80__prepared);
    tmp_class_creation_80__prepared = NULL;

    // Report to PGO about leaving the module without error.
    PGO_onModuleExit("xlwt.BIFFRecords", false);

    Py_INCREF(module_xlwt$BIFFRecords);
    return module_xlwt$BIFFRecords;
    module_exception_exit:

#if defined(_NUITKA_MODULE) && 0
    {
        PyObject *module_name = GET_STRING_DICT_VALUE(moduledict_xlwt$BIFFRecords, (Nuitka_StringObject *)const_str_plain___name__);

        if (module_name != NULL) {
            Nuitka_DelModule(module_name);
        }
    }
#endif
    PGO_onModuleExit("xlwt$BIFFRecords", false);

    RESTORE_ERROR_OCCURRED(exception_type, exception_value, exception_tb);
    return NULL;
}
